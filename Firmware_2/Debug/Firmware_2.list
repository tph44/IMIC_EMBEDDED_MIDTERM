
Firmware_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a6c  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08002c04  08002c04  00004014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08002c04  08002c04  00004014  2**0
                  CONTENTS
  4 .ARM          00000000  08002c04  08002c04  00004014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002c04  08002c04  00004014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002c04  08002c04  00003c04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002c08  08002c08  00003c08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  08002c0c  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000404  20000014  08002c20  00004014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000418  08002c20  00004418  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00004014  2**0
                  CONTENTS, READONLY
 12 .debug_info   000096fb  00000000  00000000  00004044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ad8  00000000  00000000  0000d73f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007f0  00000000  00000000  0000f218  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005df  00000000  00000000  0000fa08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000165a4  00000000  00000000  0000ffe7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009944  00000000  00000000  0002658b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008bb00  00000000  00000000  0002fecf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bb9cf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002000  00000000  00000000  000bba14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  000bda14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000014 	.word	0x20000014
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08002bec 	.word	0x08002bec

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000018 	.word	0x20000018
 80001d4:	08002bec 	.word	0x08002bec

080001d8 <Button_Init>:
*/


#define GPIOA_BASE_ADDR 0x40020000 

void Button_Init() {
 80001d8:	b480      	push	{r7}
 80001da:	b083      	sub	sp, #12
 80001dc:	af00      	add	r7, sp, #0

    // 1. Enable GPIO_A clock
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80001de:	2300      	movs	r3, #0
 80001e0:	603b      	str	r3, [r7, #0]
 80001e2:	4b0d      	ldr	r3, [pc, #52]	@ (8000218 <Button_Init+0x40>)
 80001e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80001e6:	4a0c      	ldr	r2, [pc, #48]	@ (8000218 <Button_Init+0x40>)
 80001e8:	f043 0301 	orr.w	r3, r3, #1
 80001ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80001ee:	4b0a      	ldr	r3, [pc, #40]	@ (8000218 <Button_Init+0x40>)
 80001f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80001f2:	f003 0301 	and.w	r3, r3, #1
 80001f6:	603b      	str	r3, [r7, #0]
 80001f8:	683b      	ldr	r3, [r7, #0]

    // 2. Set PA0 as input
    uint32_t* GPIOA_MODER = (uint32_t*)(GPIOA_BASE_ADDR + 0x00);
 80001fa:	4b08      	ldr	r3, [pc, #32]	@ (800021c <Button_Init+0x44>)
 80001fc:	607b      	str	r3, [r7, #4]
    *GPIOA_MODER &= ~(0b11 << 0); 
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	681b      	ldr	r3, [r3, #0]
 8000202:	f023 0203 	bic.w	r2, r3, #3
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	601a      	str	r2, [r3, #0]
}
 800020a:	bf00      	nop
 800020c:	370c      	adds	r7, #12
 800020e:	46bd      	mov	sp, r7
 8000210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000214:	4770      	bx	lr
 8000216:	bf00      	nop
 8000218:	40023800 	.word	0x40023800
 800021c:	40020000 	.word	0x40020000

08000220 <Led_Init>:
            -- offset addr is 0
            -- 01 is output mode
*/
#define GPIOD_BASE_ADDR 0x40020C00 // Get addr from  Data sheet <- Memory mapping

void Led_Init() {
 8000220:	b480      	push	{r7}
 8000222:	b083      	sub	sp, #12
 8000224:	af00      	add	r7, sp, #0
    // 1. Enable GPIO_D clock
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000226:	2300      	movs	r3, #0
 8000228:	603b      	str	r3, [r7, #0]
 800022a:	4b10      	ldr	r3, [pc, #64]	@ (800026c <Led_Init+0x4c>)
 800022c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800022e:	4a0f      	ldr	r2, [pc, #60]	@ (800026c <Led_Init+0x4c>)
 8000230:	f043 0308 	orr.w	r3, r3, #8
 8000234:	6313      	str	r3, [r2, #48]	@ 0x30
 8000236:	4b0d      	ldr	r3, [pc, #52]	@ (800026c <Led_Init+0x4c>)
 8000238:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800023a:	f003 0308 	and.w	r3, r3, #8
 800023e:	603b      	str	r3, [r7, #0]
 8000240:	683b      	ldr	r3, [r7, #0]

    // 2. Set PD12, PD13, PD14 and PD15 as outputs - Get PD numbers from schematic
    uint32_t* GPIOD_MODER = (uint32_t*)(GPIOD_BASE_ADDR + 0x00); 
 8000242:	4b0b      	ldr	r3, [pc, #44]	@ (8000270 <Led_Init+0x50>)
 8000244:	607b      	str	r3, [r7, #4]
    *GPIOD_MODER &= (0b11111111 << 24); // Clear
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	681b      	ldr	r3, [r3, #0]
 800024a:	f003 427f 	and.w	r2, r3, #4278190080	@ 0xff000000
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	601a      	str	r2, [r3, #0]
    *GPIOD_MODER |= (0b01010101 << 24); // Set
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	f043 42aa 	orr.w	r2, r3, #1426063360	@ 0x55000000
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	601a      	str	r2, [r3, #0]
}
 800025e:	bf00      	nop
 8000260:	370c      	adds	r7, #12
 8000262:	46bd      	mov	sp, r7
 8000264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000268:	4770      	bx	lr
 800026a:	bf00      	nop
 800026c:	40023800 	.word	0x40023800
 8000270:	40020c00 	.word	0x40020c00

08000274 <Led_Ctrl>:
int RED_LED     = 14;
int BLUE_LED    = 15;
int ON          = 1;
int OFF         = 0;

void Led_Ctrl(int LED, int OnOff) {
 8000274:	b480      	push	{r7}
 8000276:	b085      	sub	sp, #20
 8000278:	af00      	add	r7, sp, #0
 800027a:	6078      	str	r0, [r7, #4]
 800027c:	6039      	str	r1, [r7, #0]
    uint32_t* GPIOD_ODR = (uint32_t*)(GPIOD_BASE_ADDR + 0x14); 
 800027e:	4b0f      	ldr	r3, [pc, #60]	@ (80002bc <Led_Ctrl+0x48>)
 8000280:	60fb      	str	r3, [r7, #12]

    if (OnOff == 1)
 8000282:	683b      	ldr	r3, [r7, #0]
 8000284:	2b01      	cmp	r3, #1
 8000286:	d109      	bne.n	800029c <Led_Ctrl+0x28>
        *GPIOD_ODR |=  (0b1 << LED);
 8000288:	68fb      	ldr	r3, [r7, #12]
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	2101      	movs	r1, #1
 800028e:	687a      	ldr	r2, [r7, #4]
 8000290:	fa01 f202 	lsl.w	r2, r1, r2
 8000294:	431a      	orrs	r2, r3
 8000296:	68fb      	ldr	r3, [r7, #12]
 8000298:	601a      	str	r2, [r3, #0]
    else 
        *GPIOD_ODR &= ~(0b1 << LED);
}
 800029a:	e009      	b.n	80002b0 <Led_Ctrl+0x3c>
        *GPIOD_ODR &= ~(0b1 << LED);
 800029c:	68fb      	ldr	r3, [r7, #12]
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	2101      	movs	r1, #1
 80002a2:	687a      	ldr	r2, [r7, #4]
 80002a4:	fa01 f202 	lsl.w	r2, r1, r2
 80002a8:	43d2      	mvns	r2, r2
 80002aa:	401a      	ands	r2, r3
 80002ac:	68fb      	ldr	r3, [r7, #12]
 80002ae:	601a      	str	r2, [r3, #0]
}
 80002b0:	bf00      	nop
 80002b2:	3714      	adds	r7, #20
 80002b4:	46bd      	mov	sp, r7
 80002b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ba:	4770      	bx	lr
 80002bc:	40020c14 	.word	0x40020c14

080002c0 <Button_Interrupt_Int>:

*/
#define EXTI_BASE_ADDR 0x40013C00
#define ISER_BASE_ADDR 0xE000E100 // From ref manual - M4 

void Button_Interrupt_Int() {
 80002c0:	b480      	push	{r7}
 80002c2:	b085      	sub	sp, #20
 80002c4:	af00      	add	r7, sp, #0

  // Config EXTI to send interrupt to NVIC when detect rising of failling edge

  // select trigger for EXTI0 is rising
  uint32_t* EXTI_RTSR = (uint32_t*)(EXTI_BASE_ADDR + 0x08);
 80002c6:	4b13      	ldr	r3, [pc, #76]	@ (8000314 <Button_Interrupt_Int+0x54>)
 80002c8:	60fb      	str	r3, [r7, #12]
  *EXTI_RTSR |= (0b1 << 0);
 80002ca:	68fb      	ldr	r3, [r7, #12]
 80002cc:	681b      	ldr	r3, [r3, #0]
 80002ce:	f043 0201 	orr.w	r2, r3, #1
 80002d2:	68fb      	ldr	r3, [r7, #12]
 80002d4:	601a      	str	r2, [r3, #0]

  // select trigger for EXTI0 is falling
  uint32_t* EXTI_FTSR = (uint32_t*)(EXTI_BASE_ADDR + 0x0C);
 80002d6:	4b10      	ldr	r3, [pc, #64]	@ (8000318 <Button_Interrupt_Int+0x58>)
 80002d8:	60bb      	str	r3, [r7, #8]
  *EXTI_FTSR |= (0b1 << 0);
 80002da:	68bb      	ldr	r3, [r7, #8]
 80002dc:	681b      	ldr	r3, [r3, #0]
 80002de:	f043 0201 	orr.w	r2, r3, #1
 80002e2:	68bb      	ldr	r3, [r7, #8]
 80002e4:	601a      	str	r2, [r3, #0]

  // masking
  uint32_t* EXTI_IMR = (uint32_t*)(EXTI_BASE_ADDR + 0x00);
 80002e6:	4b0d      	ldr	r3, [pc, #52]	@ (800031c <Button_Interrupt_Int+0x5c>)
 80002e8:	607b      	str	r3, [r7, #4]
  *EXTI_IMR |= (0b1 << 0);
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	681b      	ldr	r3, [r3, #0]
 80002ee:	f043 0201 	orr.w	r2, r3, #1
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	601a      	str	r2, [r3, #0]

  // NVIC accepts interrupt from EXTI0
  /*
    From vectore table in ref manual - stm32, we know position of EXTI0 interrupt is 6
  */
  uint32_t* ISER0 = (uint32_t*)(ISER_BASE_ADDR + 0x00);
 80002f6:	4b0a      	ldr	r3, [pc, #40]	@ (8000320 <Button_Interrupt_Int+0x60>)
 80002f8:	603b      	str	r3, [r7, #0]
  *ISER0 |= (0b1 << 6);
 80002fa:	683b      	ldr	r3, [r7, #0]
 80002fc:	681b      	ldr	r3, [r3, #0]
 80002fe:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8000302:	683b      	ldr	r3, [r7, #0]
 8000304:	601a      	str	r2, [r3, #0]
  
}
 8000306:	bf00      	nop
 8000308:	3714      	adds	r7, #20
 800030a:	46bd      	mov	sp, r7
 800030c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000310:	4770      	bx	lr
 8000312:	bf00      	nop
 8000314:	40013c08 	.word	0x40013c08
 8000318:	40013c0c 	.word	0x40013c0c
 800031c:	40013c00 	.word	0x40013c00
 8000320:	e000e100 	.word	0xe000e100

08000324 <main>:

int main() {
 8000324:	b580      	push	{r7, lr}
 8000326:	af00      	add	r7, sp, #0

  HAL_Init();
 8000328:	f000 f8c4 	bl	80004b4 <HAL_Init>
  Button_Init();
 800032c:	f7ff ff54 	bl	80001d8 <Button_Init>
  Led_Init();
 8000330:	f7ff ff76 	bl	8000220 <Led_Init>
  Button_Interrupt_Int();
 8000334:	f7ff ffc4 	bl	80002c0 <Button_Interrupt_Int>

  while(1) {
    Led_Ctrl(RED_LED, ON);
 8000338:	4b0c      	ldr	r3, [pc, #48]	@ (800036c <main+0x48>)
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	4a0c      	ldr	r2, [pc, #48]	@ (8000370 <main+0x4c>)
 800033e:	6812      	ldr	r2, [r2, #0]
 8000340:	4611      	mov	r1, r2
 8000342:	4618      	mov	r0, r3
 8000344:	f7ff ff96 	bl	8000274 <Led_Ctrl>
    HAL_Delay(1000);
 8000348:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800034c:	f000 f924 	bl	8000598 <HAL_Delay>
    Led_Ctrl(RED_LED, OFF);
 8000350:	4b06      	ldr	r3, [pc, #24]	@ (800036c <main+0x48>)
 8000352:	681b      	ldr	r3, [r3, #0]
 8000354:	4a07      	ldr	r2, [pc, #28]	@ (8000374 <main+0x50>)
 8000356:	6812      	ldr	r2, [r2, #0]
 8000358:	4611      	mov	r1, r2
 800035a:	4618      	mov	r0, r3
 800035c:	f7ff ff8a 	bl	8000274 <Led_Ctrl>
    HAL_Delay(1000);
 8000360:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000364:	f000 f918 	bl	8000598 <HAL_Delay>
    Led_Ctrl(RED_LED, ON);
 8000368:	bf00      	nop
 800036a:	e7e5      	b.n	8000338 <main+0x14>
 800036c:	20000000 	.word	0x20000000
 8000370:	20000004 	.word	0x20000004
 8000374:	20000030 	.word	0x20000030

08000378 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000378:	b580      	push	{r7, lr}
 800037a:	b082      	sub	sp, #8
 800037c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800037e:	2300      	movs	r3, #0
 8000380:	607b      	str	r3, [r7, #4]
 8000382:	4b10      	ldr	r3, [pc, #64]	@ (80003c4 <HAL_MspInit+0x4c>)
 8000384:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000386:	4a0f      	ldr	r2, [pc, #60]	@ (80003c4 <HAL_MspInit+0x4c>)
 8000388:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800038c:	6453      	str	r3, [r2, #68]	@ 0x44
 800038e:	4b0d      	ldr	r3, [pc, #52]	@ (80003c4 <HAL_MspInit+0x4c>)
 8000390:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000392:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000396:	607b      	str	r3, [r7, #4]
 8000398:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800039a:	2300      	movs	r3, #0
 800039c:	603b      	str	r3, [r7, #0]
 800039e:	4b09      	ldr	r3, [pc, #36]	@ (80003c4 <HAL_MspInit+0x4c>)
 80003a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80003a2:	4a08      	ldr	r2, [pc, #32]	@ (80003c4 <HAL_MspInit+0x4c>)
 80003a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80003a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80003aa:	4b06      	ldr	r3, [pc, #24]	@ (80003c4 <HAL_MspInit+0x4c>)
 80003ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80003ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80003b2:	603b      	str	r3, [r7, #0]
 80003b4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80003b6:	2007      	movs	r0, #7
 80003b8:	f000 f9c4 	bl	8000744 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003bc:	bf00      	nop
 80003be:	3708      	adds	r7, #8
 80003c0:	46bd      	mov	sp, r7
 80003c2:	bd80      	pop	{r7, pc}
 80003c4:	40023800 	.word	0x40023800

080003c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80003c8:	b480      	push	{r7}
 80003ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80003cc:	bf00      	nop
 80003ce:	e7fd      	b.n	80003cc <NMI_Handler+0x4>

080003d0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80003d0:	b480      	push	{r7}
 80003d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80003d4:	bf00      	nop
 80003d6:	e7fd      	b.n	80003d4 <HardFault_Handler+0x4>

080003d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80003d8:	b480      	push	{r7}
 80003da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80003dc:	bf00      	nop
 80003de:	e7fd      	b.n	80003dc <MemManage_Handler+0x4>

080003e0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80003e0:	b480      	push	{r7}
 80003e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80003e4:	bf00      	nop
 80003e6:	e7fd      	b.n	80003e4 <BusFault_Handler+0x4>

080003e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80003e8:	b480      	push	{r7}
 80003ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80003ec:	bf00      	nop
 80003ee:	e7fd      	b.n	80003ec <UsageFault_Handler+0x4>

080003f0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80003f0:	b480      	push	{r7}
 80003f2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80003f4:	bf00      	nop
 80003f6:	46bd      	mov	sp, r7
 80003f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003fc:	4770      	bx	lr

080003fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80003fe:	b480      	push	{r7}
 8000400:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000402:	bf00      	nop
 8000404:	46bd      	mov	sp, r7
 8000406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800040a:	4770      	bx	lr

0800040c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800040c:	b480      	push	{r7}
 800040e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000410:	bf00      	nop
 8000412:	46bd      	mov	sp, r7
 8000414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000418:	4770      	bx	lr

0800041a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800041a:	b580      	push	{r7, lr}
 800041c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800041e:	f000 f89b 	bl	8000558 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000422:	bf00      	nop
 8000424:	bd80      	pop	{r7, pc}
	...

08000428 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 800042c:	4802      	ldr	r0, [pc, #8]	@ (8000438 <OTG_FS_IRQHandler+0x10>)
 800042e:	f000 f9bc 	bl	80007aa <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000432:	bf00      	nop
 8000434:	bd80      	pop	{r7, pc}
 8000436:	bf00      	nop
 8000438:	20000038 	.word	0x20000038

0800043c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800043c:	b480      	push	{r7}
 800043e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000440:	4b06      	ldr	r3, [pc, #24]	@ (800045c <SystemInit+0x20>)
 8000442:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000446:	4a05      	ldr	r2, [pc, #20]	@ (800045c <SystemInit+0x20>)
 8000448:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800044c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000450:	bf00      	nop
 8000452:	46bd      	mov	sp, r7
 8000454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000458:	4770      	bx	lr
 800045a:	bf00      	nop
 800045c:	e000ed00 	.word	0xe000ed00

08000460 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000460:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000498 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000464:	f7ff ffea 	bl	800043c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000468:	480c      	ldr	r0, [pc, #48]	@ (800049c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800046a:	490d      	ldr	r1, [pc, #52]	@ (80004a0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800046c:	4a0d      	ldr	r2, [pc, #52]	@ (80004a4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800046e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000470:	e002      	b.n	8000478 <LoopCopyDataInit>

08000472 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000472:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000474:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000476:	3304      	adds	r3, #4

08000478 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000478:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800047a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800047c:	d3f9      	bcc.n	8000472 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800047e:	4a0a      	ldr	r2, [pc, #40]	@ (80004a8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000480:	4c0a      	ldr	r4, [pc, #40]	@ (80004ac <LoopFillZerobss+0x22>)
  movs r3, #0
 8000482:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000484:	e001      	b.n	800048a <LoopFillZerobss>

08000486 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000486:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000488:	3204      	adds	r2, #4

0800048a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800048a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800048c:	d3fb      	bcc.n	8000486 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800048e:	f002 fb89 	bl	8002ba4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000492:	f7ff ff47 	bl	8000324 <main>
  bx  lr    
 8000496:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000498:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800049c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004a0:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 80004a4:	08002c0c 	.word	0x08002c0c
  ldr r2, =_sbss
 80004a8:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 80004ac:	20000418 	.word	0x20000418

080004b0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80004b0:	e7fe      	b.n	80004b0 <ADC_IRQHandler>
	...

080004b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80004b8:	4b0e      	ldr	r3, [pc, #56]	@ (80004f4 <HAL_Init+0x40>)
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	4a0d      	ldr	r2, [pc, #52]	@ (80004f4 <HAL_Init+0x40>)
 80004be:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80004c2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80004c4:	4b0b      	ldr	r3, [pc, #44]	@ (80004f4 <HAL_Init+0x40>)
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	4a0a      	ldr	r2, [pc, #40]	@ (80004f4 <HAL_Init+0x40>)
 80004ca:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80004ce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004d0:	4b08      	ldr	r3, [pc, #32]	@ (80004f4 <HAL_Init+0x40>)
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	4a07      	ldr	r2, [pc, #28]	@ (80004f4 <HAL_Init+0x40>)
 80004d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80004da:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004dc:	2003      	movs	r0, #3
 80004de:	f000 f931 	bl	8000744 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80004e2:	2000      	movs	r0, #0
 80004e4:	f000 f808 	bl	80004f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80004e8:	f7ff ff46 	bl	8000378 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80004ec:	2300      	movs	r3, #0
}
 80004ee:	4618      	mov	r0, r3
 80004f0:	bd80      	pop	{r7, pc}
 80004f2:	bf00      	nop
 80004f4:	40023c00 	.word	0x40023c00

080004f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b082      	sub	sp, #8
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000500:	4b12      	ldr	r3, [pc, #72]	@ (800054c <HAL_InitTick+0x54>)
 8000502:	681a      	ldr	r2, [r3, #0]
 8000504:	4b12      	ldr	r3, [pc, #72]	@ (8000550 <HAL_InitTick+0x58>)
 8000506:	781b      	ldrb	r3, [r3, #0]
 8000508:	4619      	mov	r1, r3
 800050a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800050e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000512:	fbb2 f3f3 	udiv	r3, r2, r3
 8000516:	4618      	mov	r0, r3
 8000518:	f000 f93b 	bl	8000792 <HAL_SYSTICK_Config>
 800051c:	4603      	mov	r3, r0
 800051e:	2b00      	cmp	r3, #0
 8000520:	d001      	beq.n	8000526 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000522:	2301      	movs	r3, #1
 8000524:	e00e      	b.n	8000544 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	2b0f      	cmp	r3, #15
 800052a:	d80a      	bhi.n	8000542 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800052c:	2200      	movs	r2, #0
 800052e:	6879      	ldr	r1, [r7, #4]
 8000530:	f04f 30ff 	mov.w	r0, #4294967295
 8000534:	f000 f911 	bl	800075a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000538:	4a06      	ldr	r2, [pc, #24]	@ (8000554 <HAL_InitTick+0x5c>)
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800053e:	2300      	movs	r3, #0
 8000540:	e000      	b.n	8000544 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000542:	2301      	movs	r3, #1
}
 8000544:	4618      	mov	r0, r3
 8000546:	3708      	adds	r7, #8
 8000548:	46bd      	mov	sp, r7
 800054a:	bd80      	pop	{r7, pc}
 800054c:	20000008 	.word	0x20000008
 8000550:	20000010 	.word	0x20000010
 8000554:	2000000c 	.word	0x2000000c

08000558 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000558:	b480      	push	{r7}
 800055a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800055c:	4b06      	ldr	r3, [pc, #24]	@ (8000578 <HAL_IncTick+0x20>)
 800055e:	781b      	ldrb	r3, [r3, #0]
 8000560:	461a      	mov	r2, r3
 8000562:	4b06      	ldr	r3, [pc, #24]	@ (800057c <HAL_IncTick+0x24>)
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	4413      	add	r3, r2
 8000568:	4a04      	ldr	r2, [pc, #16]	@ (800057c <HAL_IncTick+0x24>)
 800056a:	6013      	str	r3, [r2, #0]
}
 800056c:	bf00      	nop
 800056e:	46bd      	mov	sp, r7
 8000570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop
 8000578:	20000010 	.word	0x20000010
 800057c:	20000034 	.word	0x20000034

08000580 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000580:	b480      	push	{r7}
 8000582:	af00      	add	r7, sp, #0
  return uwTick;
 8000584:	4b03      	ldr	r3, [pc, #12]	@ (8000594 <HAL_GetTick+0x14>)
 8000586:	681b      	ldr	r3, [r3, #0]
}
 8000588:	4618      	mov	r0, r3
 800058a:	46bd      	mov	sp, r7
 800058c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop
 8000594:	20000034 	.word	0x20000034

08000598 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b084      	sub	sp, #16
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005a0:	f7ff ffee 	bl	8000580 <HAL_GetTick>
 80005a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005aa:	68fb      	ldr	r3, [r7, #12]
 80005ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005b0:	d005      	beq.n	80005be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80005b2:	4b0a      	ldr	r3, [pc, #40]	@ (80005dc <HAL_Delay+0x44>)
 80005b4:	781b      	ldrb	r3, [r3, #0]
 80005b6:	461a      	mov	r2, r3
 80005b8:	68fb      	ldr	r3, [r7, #12]
 80005ba:	4413      	add	r3, r2
 80005bc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80005be:	bf00      	nop
 80005c0:	f7ff ffde 	bl	8000580 <HAL_GetTick>
 80005c4:	4602      	mov	r2, r0
 80005c6:	68bb      	ldr	r3, [r7, #8]
 80005c8:	1ad3      	subs	r3, r2, r3
 80005ca:	68fa      	ldr	r2, [r7, #12]
 80005cc:	429a      	cmp	r2, r3
 80005ce:	d8f7      	bhi.n	80005c0 <HAL_Delay+0x28>
  {
  }
}
 80005d0:	bf00      	nop
 80005d2:	bf00      	nop
 80005d4:	3710      	adds	r7, #16
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	bf00      	nop
 80005dc:	20000010 	.word	0x20000010

080005e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005e0:	b480      	push	{r7}
 80005e2:	b085      	sub	sp, #20
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	f003 0307 	and.w	r3, r3, #7
 80005ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005f0:	4b0c      	ldr	r3, [pc, #48]	@ (8000624 <__NVIC_SetPriorityGrouping+0x44>)
 80005f2:	68db      	ldr	r3, [r3, #12]
 80005f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005f6:	68ba      	ldr	r2, [r7, #8]
 80005f8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80005fc:	4013      	ands	r3, r2
 80005fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000600:	68fb      	ldr	r3, [r7, #12]
 8000602:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000604:	68bb      	ldr	r3, [r7, #8]
 8000606:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000608:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800060c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000610:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000612:	4a04      	ldr	r2, [pc, #16]	@ (8000624 <__NVIC_SetPriorityGrouping+0x44>)
 8000614:	68bb      	ldr	r3, [r7, #8]
 8000616:	60d3      	str	r3, [r2, #12]
}
 8000618:	bf00      	nop
 800061a:	3714      	adds	r7, #20
 800061c:	46bd      	mov	sp, r7
 800061e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000622:	4770      	bx	lr
 8000624:	e000ed00 	.word	0xe000ed00

08000628 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000628:	b480      	push	{r7}
 800062a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800062c:	4b04      	ldr	r3, [pc, #16]	@ (8000640 <__NVIC_GetPriorityGrouping+0x18>)
 800062e:	68db      	ldr	r3, [r3, #12]
 8000630:	0a1b      	lsrs	r3, r3, #8
 8000632:	f003 0307 	and.w	r3, r3, #7
}
 8000636:	4618      	mov	r0, r3
 8000638:	46bd      	mov	sp, r7
 800063a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063e:	4770      	bx	lr
 8000640:	e000ed00 	.word	0xe000ed00

08000644 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000644:	b480      	push	{r7}
 8000646:	b083      	sub	sp, #12
 8000648:	af00      	add	r7, sp, #0
 800064a:	4603      	mov	r3, r0
 800064c:	6039      	str	r1, [r7, #0]
 800064e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000650:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000654:	2b00      	cmp	r3, #0
 8000656:	db0a      	blt.n	800066e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000658:	683b      	ldr	r3, [r7, #0]
 800065a:	b2da      	uxtb	r2, r3
 800065c:	490c      	ldr	r1, [pc, #48]	@ (8000690 <__NVIC_SetPriority+0x4c>)
 800065e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000662:	0112      	lsls	r2, r2, #4
 8000664:	b2d2      	uxtb	r2, r2
 8000666:	440b      	add	r3, r1
 8000668:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800066c:	e00a      	b.n	8000684 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800066e:	683b      	ldr	r3, [r7, #0]
 8000670:	b2da      	uxtb	r2, r3
 8000672:	4908      	ldr	r1, [pc, #32]	@ (8000694 <__NVIC_SetPriority+0x50>)
 8000674:	79fb      	ldrb	r3, [r7, #7]
 8000676:	f003 030f 	and.w	r3, r3, #15
 800067a:	3b04      	subs	r3, #4
 800067c:	0112      	lsls	r2, r2, #4
 800067e:	b2d2      	uxtb	r2, r2
 8000680:	440b      	add	r3, r1
 8000682:	761a      	strb	r2, [r3, #24]
}
 8000684:	bf00      	nop
 8000686:	370c      	adds	r7, #12
 8000688:	46bd      	mov	sp, r7
 800068a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068e:	4770      	bx	lr
 8000690:	e000e100 	.word	0xe000e100
 8000694:	e000ed00 	.word	0xe000ed00

08000698 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000698:	b480      	push	{r7}
 800069a:	b089      	sub	sp, #36	@ 0x24
 800069c:	af00      	add	r7, sp, #0
 800069e:	60f8      	str	r0, [r7, #12]
 80006a0:	60b9      	str	r1, [r7, #8]
 80006a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006a4:	68fb      	ldr	r3, [r7, #12]
 80006a6:	f003 0307 	and.w	r3, r3, #7
 80006aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006ac:	69fb      	ldr	r3, [r7, #28]
 80006ae:	f1c3 0307 	rsb	r3, r3, #7
 80006b2:	2b04      	cmp	r3, #4
 80006b4:	bf28      	it	cs
 80006b6:	2304      	movcs	r3, #4
 80006b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006ba:	69fb      	ldr	r3, [r7, #28]
 80006bc:	3304      	adds	r3, #4
 80006be:	2b06      	cmp	r3, #6
 80006c0:	d902      	bls.n	80006c8 <NVIC_EncodePriority+0x30>
 80006c2:	69fb      	ldr	r3, [r7, #28]
 80006c4:	3b03      	subs	r3, #3
 80006c6:	e000      	b.n	80006ca <NVIC_EncodePriority+0x32>
 80006c8:	2300      	movs	r3, #0
 80006ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006cc:	f04f 32ff 	mov.w	r2, #4294967295
 80006d0:	69bb      	ldr	r3, [r7, #24]
 80006d2:	fa02 f303 	lsl.w	r3, r2, r3
 80006d6:	43da      	mvns	r2, r3
 80006d8:	68bb      	ldr	r3, [r7, #8]
 80006da:	401a      	ands	r2, r3
 80006dc:	697b      	ldr	r3, [r7, #20]
 80006de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006e0:	f04f 31ff 	mov.w	r1, #4294967295
 80006e4:	697b      	ldr	r3, [r7, #20]
 80006e6:	fa01 f303 	lsl.w	r3, r1, r3
 80006ea:	43d9      	mvns	r1, r3
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006f0:	4313      	orrs	r3, r2
         );
}
 80006f2:	4618      	mov	r0, r3
 80006f4:	3724      	adds	r7, #36	@ 0x24
 80006f6:	46bd      	mov	sp, r7
 80006f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fc:	4770      	bx	lr
	...

08000700 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b082      	sub	sp, #8
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	3b01      	subs	r3, #1
 800070c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000710:	d301      	bcc.n	8000716 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000712:	2301      	movs	r3, #1
 8000714:	e00f      	b.n	8000736 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000716:	4a0a      	ldr	r2, [pc, #40]	@ (8000740 <SysTick_Config+0x40>)
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	3b01      	subs	r3, #1
 800071c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800071e:	210f      	movs	r1, #15
 8000720:	f04f 30ff 	mov.w	r0, #4294967295
 8000724:	f7ff ff8e 	bl	8000644 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000728:	4b05      	ldr	r3, [pc, #20]	@ (8000740 <SysTick_Config+0x40>)
 800072a:	2200      	movs	r2, #0
 800072c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800072e:	4b04      	ldr	r3, [pc, #16]	@ (8000740 <SysTick_Config+0x40>)
 8000730:	2207      	movs	r2, #7
 8000732:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000734:	2300      	movs	r3, #0
}
 8000736:	4618      	mov	r0, r3
 8000738:	3708      	adds	r7, #8
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	e000e010 	.word	0xe000e010

08000744 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b082      	sub	sp, #8
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800074c:	6878      	ldr	r0, [r7, #4]
 800074e:	f7ff ff47 	bl	80005e0 <__NVIC_SetPriorityGrouping>
}
 8000752:	bf00      	nop
 8000754:	3708      	adds	r7, #8
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}

0800075a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800075a:	b580      	push	{r7, lr}
 800075c:	b086      	sub	sp, #24
 800075e:	af00      	add	r7, sp, #0
 8000760:	4603      	mov	r3, r0
 8000762:	60b9      	str	r1, [r7, #8]
 8000764:	607a      	str	r2, [r7, #4]
 8000766:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000768:	2300      	movs	r3, #0
 800076a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800076c:	f7ff ff5c 	bl	8000628 <__NVIC_GetPriorityGrouping>
 8000770:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000772:	687a      	ldr	r2, [r7, #4]
 8000774:	68b9      	ldr	r1, [r7, #8]
 8000776:	6978      	ldr	r0, [r7, #20]
 8000778:	f7ff ff8e 	bl	8000698 <NVIC_EncodePriority>
 800077c:	4602      	mov	r2, r0
 800077e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000782:	4611      	mov	r1, r2
 8000784:	4618      	mov	r0, r3
 8000786:	f7ff ff5d 	bl	8000644 <__NVIC_SetPriority>
}
 800078a:	bf00      	nop
 800078c:	3718      	adds	r7, #24
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}

08000792 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000792:	b580      	push	{r7, lr}
 8000794:	b082      	sub	sp, #8
 8000796:	af00      	add	r7, sp, #0
 8000798:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800079a:	6878      	ldr	r0, [r7, #4]
 800079c:	f7ff ffb0 	bl	8000700 <SysTick_Config>
 80007a0:	4603      	mov	r3, r0
}
 80007a2:	4618      	mov	r0, r3
 80007a4:	3708      	adds	r7, #8
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}

080007aa <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80007aa:	b580      	push	{r7, lr}
 80007ac:	b086      	sub	sp, #24
 80007ae:	af00      	add	r7, sp, #0
 80007b0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80007b8:	693b      	ldr	r3, [r7, #16]
 80007ba:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	4618      	mov	r0, r3
 80007c2:	f001 fea7 	bl	8002514 <USB_GetMode>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b01      	cmp	r3, #1
 80007ca:	f040 80fb 	bne.w	80009c4 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	4618      	mov	r0, r3
 80007d4:	f001 fe6a 	bl	80024ac <USB_ReadInterrupts>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	f000 80f1 	beq.w	80009c2 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	4618      	mov	r0, r3
 80007e6:	f001 fe61 	bl	80024ac <USB_ReadInterrupts>
 80007ea:	4603      	mov	r3, r0
 80007ec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80007f0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80007f4:	d104      	bne.n	8000800 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80007fe:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	4618      	mov	r0, r3
 8000806:	f001 fe51 	bl	80024ac <USB_ReadInterrupts>
 800080a:	4603      	mov	r3, r0
 800080c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000810:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8000814:	d104      	bne.n	8000820 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800081e:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	4618      	mov	r0, r3
 8000826:	f001 fe41 	bl	80024ac <USB_ReadInterrupts>
 800082a:	4603      	mov	r3, r0
 800082c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000830:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8000834:	d104      	bne.n	8000840 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800083e:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	4618      	mov	r0, r3
 8000846:	f001 fe31 	bl	80024ac <USB_ReadInterrupts>
 800084a:	4603      	mov	r3, r0
 800084c:	f003 0302 	and.w	r3, r3, #2
 8000850:	2b02      	cmp	r3, #2
 8000852:	d103      	bne.n	800085c <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	2202      	movs	r2, #2
 800085a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	4618      	mov	r0, r3
 8000862:	f001 fe23 	bl	80024ac <USB_ReadInterrupts>
 8000866:	4603      	mov	r3, r0
 8000868:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800086c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000870:	d120      	bne.n	80008b4 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 800087a:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800087c:	68fb      	ldr	r3, [r7, #12]
 800087e:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	f003 0301 	and.w	r3, r3, #1
 8000888:	2b00      	cmp	r3, #0
 800088a:	d113      	bne.n	80008b4 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 800088c:	2110      	movs	r1, #16
 800088e:	6938      	ldr	r0, [r7, #16]
 8000890:	f001 fd54 	bl	800233c <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8000894:	6938      	ldr	r0, [r7, #16]
 8000896:	f001 fd83 	bl	80023a0 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	7a5b      	ldrb	r3, [r3, #9]
 800089e:	2b02      	cmp	r3, #2
 80008a0:	d105      	bne.n	80008ae <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	2101      	movs	r1, #1
 80008a8:	4618      	mov	r0, r3
 80008aa:	f001 fe41 	bl	8002530 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80008ae:	6878      	ldr	r0, [r7, #4]
 80008b0:	f002 f8f9 	bl	8002aa6 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	4618      	mov	r0, r3
 80008ba:	f001 fdf7 	bl	80024ac <USB_ReadInterrupts>
 80008be:	4603      	mov	r3, r0
 80008c0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80008c4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80008c8:	d102      	bne.n	80008d0 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 80008ca:	6878      	ldr	r0, [r7, #4]
 80008cc:	f001 fca1 	bl	8002212 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	4618      	mov	r0, r3
 80008d6:	f001 fde9 	bl	80024ac <USB_ReadInterrupts>
 80008da:	4603      	mov	r3, r0
 80008dc:	f003 0308 	and.w	r3, r3, #8
 80008e0:	2b08      	cmp	r3, #8
 80008e2:	d106      	bne.n	80008f2 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80008e4:	6878      	ldr	r0, [r7, #4]
 80008e6:	f002 f8c2 	bl	8002a6e <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	2208      	movs	r2, #8
 80008f0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	4618      	mov	r0, r3
 80008f8:	f001 fdd8 	bl	80024ac <USB_ReadInterrupts>
 80008fc:	4603      	mov	r3, r0
 80008fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000902:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8000906:	d139      	bne.n	800097c <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	4618      	mov	r0, r3
 800090e:	f001 fe4c 	bl	80025aa <USB_HC_ReadInterrupt>
 8000912:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8000914:	2300      	movs	r3, #0
 8000916:	617b      	str	r3, [r7, #20]
 8000918:	e025      	b.n	8000966 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800091a:	697b      	ldr	r3, [r7, #20]
 800091c:	f003 030f 	and.w	r3, r3, #15
 8000920:	68ba      	ldr	r2, [r7, #8]
 8000922:	fa22 f303 	lsr.w	r3, r2, r3
 8000926:	f003 0301 	and.w	r3, r3, #1
 800092a:	2b00      	cmp	r3, #0
 800092c:	d018      	beq.n	8000960 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800092e:	697b      	ldr	r3, [r7, #20]
 8000930:	015a      	lsls	r2, r3, #5
 8000932:	68fb      	ldr	r3, [r7, #12]
 8000934:	4413      	add	r3, r2
 8000936:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000940:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8000944:	d106      	bne.n	8000954 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8000946:	697b      	ldr	r3, [r7, #20]
 8000948:	b2db      	uxtb	r3, r3
 800094a:	4619      	mov	r1, r3
 800094c:	6878      	ldr	r0, [r7, #4]
 800094e:	f000 f859 	bl	8000a04 <HCD_HC_IN_IRQHandler>
 8000952:	e005      	b.n	8000960 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8000954:	697b      	ldr	r3, [r7, #20]
 8000956:	b2db      	uxtb	r3, r3
 8000958:	4619      	mov	r1, r3
 800095a:	6878      	ldr	r0, [r7, #4]
 800095c:	f000 febb 	bl	80016d6 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8000960:	697b      	ldr	r3, [r7, #20]
 8000962:	3301      	adds	r3, #1
 8000964:	617b      	str	r3, [r7, #20]
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	795b      	ldrb	r3, [r3, #5]
 800096a:	461a      	mov	r2, r3
 800096c:	697b      	ldr	r3, [r7, #20]
 800096e:	4293      	cmp	r3, r2
 8000970:	d3d3      	bcc.n	800091a <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800097a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	4618      	mov	r0, r3
 8000982:	f001 fd93 	bl	80024ac <USB_ReadInterrupts>
 8000986:	4603      	mov	r3, r0
 8000988:	f003 0310 	and.w	r3, r3, #16
 800098c:	2b10      	cmp	r3, #16
 800098e:	d101      	bne.n	8000994 <HAL_HCD_IRQHandler+0x1ea>
 8000990:	2301      	movs	r3, #1
 8000992:	e000      	b.n	8000996 <HAL_HCD_IRQHandler+0x1ec>
 8000994:	2300      	movs	r3, #0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d014      	beq.n	80009c4 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	699a      	ldr	r2, [r3, #24]
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	f022 0210 	bic.w	r2, r2, #16
 80009a8:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80009aa:	6878      	ldr	r0, [r7, #4]
 80009ac:	f001 fb52 	bl	8002054 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	699a      	ldr	r2, [r3, #24]
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	f042 0210 	orr.w	r2, r2, #16
 80009be:	619a      	str	r2, [r3, #24]
 80009c0:	e000      	b.n	80009c4 <HAL_HCD_IRQHandler+0x21a>
      return;
 80009c2:	bf00      	nop
    }
  }
}
 80009c4:	3718      	adds	r7, #24
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}

080009ca <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80009ca:	b580      	push	{r7, lr}
 80009cc:	b082      	sub	sp, #8
 80009ce:	af00      	add	r7, sp, #0
 80009d0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80009d8:	2b01      	cmp	r3, #1
 80009da:	d101      	bne.n	80009e0 <HAL_HCD_Stop+0x16>
 80009dc:	2302      	movs	r3, #2
 80009de:	e00d      	b.n	80009fc <HAL_HCD_Stop+0x32>
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	2201      	movs	r2, #1
 80009e4:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	4618      	mov	r0, r3
 80009ee:	f001 ff0d 	bl	800280c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	2200      	movs	r2, #0
 80009f6:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 80009fa:	2300      	movs	r3, #0
}
 80009fc:	4618      	mov	r0, r3
 80009fe:	3708      	adds	r7, #8
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}

08000a04 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b086      	sub	sp, #24
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
 8000a0c:	460b      	mov	r3, r1
 8000a0e:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8000a16:	697b      	ldr	r3, [r7, #20]
 8000a18:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	78fa      	ldrb	r2, [r7, #3]
 8000a20:	4611      	mov	r1, r2
 8000a22:	4618      	mov	r0, r3
 8000a24:	f001 fd55 	bl	80024d2 <USB_ReadChInterrupts>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	f003 0304 	and.w	r3, r3, #4
 8000a2e:	2b04      	cmp	r3, #4
 8000a30:	d11a      	bne.n	8000a68 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8000a32:	78fb      	ldrb	r3, [r7, #3]
 8000a34:	015a      	lsls	r2, r3, #5
 8000a36:	693b      	ldr	r3, [r7, #16]
 8000a38:	4413      	add	r3, r2
 8000a3a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8000a3e:	461a      	mov	r2, r3
 8000a40:	2304      	movs	r3, #4
 8000a42:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8000a44:	78fa      	ldrb	r2, [r7, #3]
 8000a46:	6879      	ldr	r1, [r7, #4]
 8000a48:	4613      	mov	r3, r2
 8000a4a:	011b      	lsls	r3, r3, #4
 8000a4c:	1a9b      	subs	r3, r3, r2
 8000a4e:	009b      	lsls	r3, r3, #2
 8000a50:	440b      	add	r3, r1
 8000a52:	334d      	adds	r3, #77	@ 0x4d
 8000a54:	2207      	movs	r2, #7
 8000a56:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	78fa      	ldrb	r2, [r7, #3]
 8000a5e:	4611      	mov	r1, r2
 8000a60:	4618      	mov	r0, r3
 8000a62:	f001 fdb3 	bl	80025cc <USB_HC_Halt>
 8000a66:	e09e      	b.n	8000ba6 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	78fa      	ldrb	r2, [r7, #3]
 8000a6e:	4611      	mov	r1, r2
 8000a70:	4618      	mov	r0, r3
 8000a72:	f001 fd2e 	bl	80024d2 <USB_ReadChInterrupts>
 8000a76:	4603      	mov	r3, r0
 8000a78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000a7c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000a80:	d11b      	bne.n	8000aba <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8000a82:	78fb      	ldrb	r3, [r7, #3]
 8000a84:	015a      	lsls	r2, r3, #5
 8000a86:	693b      	ldr	r3, [r7, #16]
 8000a88:	4413      	add	r3, r2
 8000a8a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8000a8e:	461a      	mov	r2, r3
 8000a90:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000a94:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8000a96:	78fa      	ldrb	r2, [r7, #3]
 8000a98:	6879      	ldr	r1, [r7, #4]
 8000a9a:	4613      	mov	r3, r2
 8000a9c:	011b      	lsls	r3, r3, #4
 8000a9e:	1a9b      	subs	r3, r3, r2
 8000aa0:	009b      	lsls	r3, r3, #2
 8000aa2:	440b      	add	r3, r1
 8000aa4:	334d      	adds	r3, #77	@ 0x4d
 8000aa6:	2208      	movs	r2, #8
 8000aa8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	78fa      	ldrb	r2, [r7, #3]
 8000ab0:	4611      	mov	r1, r2
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f001 fd8a 	bl	80025cc <USB_HC_Halt>
 8000ab8:	e075      	b.n	8000ba6 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	78fa      	ldrb	r2, [r7, #3]
 8000ac0:	4611      	mov	r1, r2
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f001 fd05 	bl	80024d2 <USB_ReadChInterrupts>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	f003 0308 	and.w	r3, r3, #8
 8000ace:	2b08      	cmp	r3, #8
 8000ad0:	d11a      	bne.n	8000b08 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8000ad2:	78fb      	ldrb	r3, [r7, #3]
 8000ad4:	015a      	lsls	r2, r3, #5
 8000ad6:	693b      	ldr	r3, [r7, #16]
 8000ad8:	4413      	add	r3, r2
 8000ada:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8000ade:	461a      	mov	r2, r3
 8000ae0:	2308      	movs	r3, #8
 8000ae2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8000ae4:	78fa      	ldrb	r2, [r7, #3]
 8000ae6:	6879      	ldr	r1, [r7, #4]
 8000ae8:	4613      	mov	r3, r2
 8000aea:	011b      	lsls	r3, r3, #4
 8000aec:	1a9b      	subs	r3, r3, r2
 8000aee:	009b      	lsls	r3, r3, #2
 8000af0:	440b      	add	r3, r1
 8000af2:	334d      	adds	r3, #77	@ 0x4d
 8000af4:	2206      	movs	r2, #6
 8000af6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	78fa      	ldrb	r2, [r7, #3]
 8000afe:	4611      	mov	r1, r2
 8000b00:	4618      	mov	r0, r3
 8000b02:	f001 fd63 	bl	80025cc <USB_HC_Halt>
 8000b06:	e04e      	b.n	8000ba6 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	78fa      	ldrb	r2, [r7, #3]
 8000b0e:	4611      	mov	r1, r2
 8000b10:	4618      	mov	r0, r3
 8000b12:	f001 fcde 	bl	80024d2 <USB_ReadChInterrupts>
 8000b16:	4603      	mov	r3, r0
 8000b18:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000b1c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000b20:	d11b      	bne.n	8000b5a <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8000b22:	78fb      	ldrb	r3, [r7, #3]
 8000b24:	015a      	lsls	r2, r3, #5
 8000b26:	693b      	ldr	r3, [r7, #16]
 8000b28:	4413      	add	r3, r2
 8000b2a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8000b2e:	461a      	mov	r2, r3
 8000b30:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b34:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8000b36:	78fa      	ldrb	r2, [r7, #3]
 8000b38:	6879      	ldr	r1, [r7, #4]
 8000b3a:	4613      	mov	r3, r2
 8000b3c:	011b      	lsls	r3, r3, #4
 8000b3e:	1a9b      	subs	r3, r3, r2
 8000b40:	009b      	lsls	r3, r3, #2
 8000b42:	440b      	add	r3, r1
 8000b44:	334d      	adds	r3, #77	@ 0x4d
 8000b46:	2209      	movs	r2, #9
 8000b48:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	78fa      	ldrb	r2, [r7, #3]
 8000b50:	4611      	mov	r1, r2
 8000b52:	4618      	mov	r0, r3
 8000b54:	f001 fd3a 	bl	80025cc <USB_HC_Halt>
 8000b58:	e025      	b.n	8000ba6 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	78fa      	ldrb	r2, [r7, #3]
 8000b60:	4611      	mov	r1, r2
 8000b62:	4618      	mov	r0, r3
 8000b64:	f001 fcb5 	bl	80024d2 <USB_ReadChInterrupts>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b6e:	2b80      	cmp	r3, #128	@ 0x80
 8000b70:	d119      	bne.n	8000ba6 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8000b72:	78fb      	ldrb	r3, [r7, #3]
 8000b74:	015a      	lsls	r2, r3, #5
 8000b76:	693b      	ldr	r3, [r7, #16]
 8000b78:	4413      	add	r3, r2
 8000b7a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8000b7e:	461a      	mov	r2, r3
 8000b80:	2380      	movs	r3, #128	@ 0x80
 8000b82:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8000b84:	78fa      	ldrb	r2, [r7, #3]
 8000b86:	6879      	ldr	r1, [r7, #4]
 8000b88:	4613      	mov	r3, r2
 8000b8a:	011b      	lsls	r3, r3, #4
 8000b8c:	1a9b      	subs	r3, r3, r2
 8000b8e:	009b      	lsls	r3, r3, #2
 8000b90:	440b      	add	r3, r1
 8000b92:	334d      	adds	r3, #77	@ 0x4d
 8000b94:	2207      	movs	r2, #7
 8000b96:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	78fa      	ldrb	r2, [r7, #3]
 8000b9e:	4611      	mov	r1, r2
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f001 fd13 	bl	80025cc <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	78fa      	ldrb	r2, [r7, #3]
 8000bac:	4611      	mov	r1, r2
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f001 fc8f 	bl	80024d2 <USB_ReadChInterrupts>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000bba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000bbe:	d112      	bne.n	8000be6 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	78fa      	ldrb	r2, [r7, #3]
 8000bc6:	4611      	mov	r1, r2
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f001 fcff 	bl	80025cc <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8000bce:	78fb      	ldrb	r3, [r7, #3]
 8000bd0:	015a      	lsls	r2, r3, #5
 8000bd2:	693b      	ldr	r3, [r7, #16]
 8000bd4:	4413      	add	r3, r2
 8000bd6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8000bda:	461a      	mov	r2, r3
 8000bdc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000be0:	6093      	str	r3, [r2, #8]
 8000be2:	f000 bd75 	b.w	80016d0 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	78fa      	ldrb	r2, [r7, #3]
 8000bec:	4611      	mov	r1, r2
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f001 fc6f 	bl	80024d2 <USB_ReadChInterrupts>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	f003 0301 	and.w	r3, r3, #1
 8000bfa:	2b01      	cmp	r3, #1
 8000bfc:	f040 8128 	bne.w	8000e50 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8000c00:	78fb      	ldrb	r3, [r7, #3]
 8000c02:	015a      	lsls	r2, r3, #5
 8000c04:	693b      	ldr	r3, [r7, #16]
 8000c06:	4413      	add	r3, r2
 8000c08:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8000c0c:	461a      	mov	r2, r3
 8000c0e:	2320      	movs	r3, #32
 8000c10:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8000c12:	78fa      	ldrb	r2, [r7, #3]
 8000c14:	6879      	ldr	r1, [r7, #4]
 8000c16:	4613      	mov	r3, r2
 8000c18:	011b      	lsls	r3, r3, #4
 8000c1a:	1a9b      	subs	r3, r3, r2
 8000c1c:	009b      	lsls	r3, r3, #2
 8000c1e:	440b      	add	r3, r1
 8000c20:	331b      	adds	r3, #27
 8000c22:	781b      	ldrb	r3, [r3, #0]
 8000c24:	2b01      	cmp	r3, #1
 8000c26:	d119      	bne.n	8000c5c <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8000c28:	78fa      	ldrb	r2, [r7, #3]
 8000c2a:	6879      	ldr	r1, [r7, #4]
 8000c2c:	4613      	mov	r3, r2
 8000c2e:	011b      	lsls	r3, r3, #4
 8000c30:	1a9b      	subs	r3, r3, r2
 8000c32:	009b      	lsls	r3, r3, #2
 8000c34:	440b      	add	r3, r1
 8000c36:	331b      	adds	r3, #27
 8000c38:	2200      	movs	r2, #0
 8000c3a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8000c3c:	78fb      	ldrb	r3, [r7, #3]
 8000c3e:	015a      	lsls	r2, r3, #5
 8000c40:	693b      	ldr	r3, [r7, #16]
 8000c42:	4413      	add	r3, r2
 8000c44:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8000c48:	685b      	ldr	r3, [r3, #4]
 8000c4a:	78fa      	ldrb	r2, [r7, #3]
 8000c4c:	0151      	lsls	r1, r2, #5
 8000c4e:	693a      	ldr	r2, [r7, #16]
 8000c50:	440a      	add	r2, r1
 8000c52:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8000c56:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000c5a:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	799b      	ldrb	r3, [r3, #6]
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d01b      	beq.n	8000c9c <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8000c64:	78fa      	ldrb	r2, [r7, #3]
 8000c66:	6879      	ldr	r1, [r7, #4]
 8000c68:	4613      	mov	r3, r2
 8000c6a:	011b      	lsls	r3, r3, #4
 8000c6c:	1a9b      	subs	r3, r3, r2
 8000c6e:	009b      	lsls	r3, r3, #2
 8000c70:	440b      	add	r3, r1
 8000c72:	3330      	adds	r3, #48	@ 0x30
 8000c74:	6819      	ldr	r1, [r3, #0]
 8000c76:	78fb      	ldrb	r3, [r7, #3]
 8000c78:	015a      	lsls	r2, r3, #5
 8000c7a:	693b      	ldr	r3, [r7, #16]
 8000c7c:	4413      	add	r3, r2
 8000c7e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8000c82:	691b      	ldr	r3, [r3, #16]
 8000c84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000c88:	78fa      	ldrb	r2, [r7, #3]
 8000c8a:	1ac9      	subs	r1, r1, r3
 8000c8c:	6878      	ldr	r0, [r7, #4]
 8000c8e:	4613      	mov	r3, r2
 8000c90:	011b      	lsls	r3, r3, #4
 8000c92:	1a9b      	subs	r3, r3, r2
 8000c94:	009b      	lsls	r3, r3, #2
 8000c96:	4403      	add	r3, r0
 8000c98:	3338      	adds	r3, #56	@ 0x38
 8000c9a:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8000c9c:	78fa      	ldrb	r2, [r7, #3]
 8000c9e:	6879      	ldr	r1, [r7, #4]
 8000ca0:	4613      	mov	r3, r2
 8000ca2:	011b      	lsls	r3, r3, #4
 8000ca4:	1a9b      	subs	r3, r3, r2
 8000ca6:	009b      	lsls	r3, r3, #2
 8000ca8:	440b      	add	r3, r1
 8000caa:	334d      	adds	r3, #77	@ 0x4d
 8000cac:	2201      	movs	r2, #1
 8000cae:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8000cb0:	78fa      	ldrb	r2, [r7, #3]
 8000cb2:	6879      	ldr	r1, [r7, #4]
 8000cb4:	4613      	mov	r3, r2
 8000cb6:	011b      	lsls	r3, r3, #4
 8000cb8:	1a9b      	subs	r3, r3, r2
 8000cba:	009b      	lsls	r3, r3, #2
 8000cbc:	440b      	add	r3, r1
 8000cbe:	3344      	adds	r3, #68	@ 0x44
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8000cc4:	78fb      	ldrb	r3, [r7, #3]
 8000cc6:	015a      	lsls	r2, r3, #5
 8000cc8:	693b      	ldr	r3, [r7, #16]
 8000cca:	4413      	add	r3, r2
 8000ccc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8000cd0:	461a      	mov	r2, r3
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8000cd6:	78fa      	ldrb	r2, [r7, #3]
 8000cd8:	6879      	ldr	r1, [r7, #4]
 8000cda:	4613      	mov	r3, r2
 8000cdc:	011b      	lsls	r3, r3, #4
 8000cde:	1a9b      	subs	r3, r3, r2
 8000ce0:	009b      	lsls	r3, r3, #2
 8000ce2:	440b      	add	r3, r1
 8000ce4:	3326      	adds	r3, #38	@ 0x26
 8000ce6:	781b      	ldrb	r3, [r3, #0]
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d00a      	beq.n	8000d02 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8000cec:	78fa      	ldrb	r2, [r7, #3]
 8000cee:	6879      	ldr	r1, [r7, #4]
 8000cf0:	4613      	mov	r3, r2
 8000cf2:	011b      	lsls	r3, r3, #4
 8000cf4:	1a9b      	subs	r3, r3, r2
 8000cf6:	009b      	lsls	r3, r3, #2
 8000cf8:	440b      	add	r3, r1
 8000cfa:	3326      	adds	r3, #38	@ 0x26
 8000cfc:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8000cfe:	2b02      	cmp	r3, #2
 8000d00:	d110      	bne.n	8000d24 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	78fa      	ldrb	r2, [r7, #3]
 8000d08:	4611      	mov	r1, r2
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f001 fc5e 	bl	80025cc <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8000d10:	78fb      	ldrb	r3, [r7, #3]
 8000d12:	015a      	lsls	r2, r3, #5
 8000d14:	693b      	ldr	r3, [r7, #16]
 8000d16:	4413      	add	r3, r2
 8000d18:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8000d1c:	461a      	mov	r2, r3
 8000d1e:	2310      	movs	r3, #16
 8000d20:	6093      	str	r3, [r2, #8]
 8000d22:	e03d      	b.n	8000da0 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8000d24:	78fa      	ldrb	r2, [r7, #3]
 8000d26:	6879      	ldr	r1, [r7, #4]
 8000d28:	4613      	mov	r3, r2
 8000d2a:	011b      	lsls	r3, r3, #4
 8000d2c:	1a9b      	subs	r3, r3, r2
 8000d2e:	009b      	lsls	r3, r3, #2
 8000d30:	440b      	add	r3, r1
 8000d32:	3326      	adds	r3, #38	@ 0x26
 8000d34:	781b      	ldrb	r3, [r3, #0]
 8000d36:	2b03      	cmp	r3, #3
 8000d38:	d00a      	beq.n	8000d50 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8000d3a:	78fa      	ldrb	r2, [r7, #3]
 8000d3c:	6879      	ldr	r1, [r7, #4]
 8000d3e:	4613      	mov	r3, r2
 8000d40:	011b      	lsls	r3, r3, #4
 8000d42:	1a9b      	subs	r3, r3, r2
 8000d44:	009b      	lsls	r3, r3, #2
 8000d46:	440b      	add	r3, r1
 8000d48:	3326      	adds	r3, #38	@ 0x26
 8000d4a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8000d4c:	2b01      	cmp	r3, #1
 8000d4e:	d127      	bne.n	8000da0 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8000d50:	78fb      	ldrb	r3, [r7, #3]
 8000d52:	015a      	lsls	r2, r3, #5
 8000d54:	693b      	ldr	r3, [r7, #16]
 8000d56:	4413      	add	r3, r2
 8000d58:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	78fa      	ldrb	r2, [r7, #3]
 8000d60:	0151      	lsls	r1, r2, #5
 8000d62:	693a      	ldr	r2, [r7, #16]
 8000d64:	440a      	add	r2, r1
 8000d66:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8000d6a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8000d6e:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8000d70:	78fa      	ldrb	r2, [r7, #3]
 8000d72:	6879      	ldr	r1, [r7, #4]
 8000d74:	4613      	mov	r3, r2
 8000d76:	011b      	lsls	r3, r3, #4
 8000d78:	1a9b      	subs	r3, r3, r2
 8000d7a:	009b      	lsls	r3, r3, #2
 8000d7c:	440b      	add	r3, r1
 8000d7e:	334c      	adds	r3, #76	@ 0x4c
 8000d80:	2201      	movs	r2, #1
 8000d82:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8000d84:	78fa      	ldrb	r2, [r7, #3]
 8000d86:	6879      	ldr	r1, [r7, #4]
 8000d88:	4613      	mov	r3, r2
 8000d8a:	011b      	lsls	r3, r3, #4
 8000d8c:	1a9b      	subs	r3, r3, r2
 8000d8e:	009b      	lsls	r3, r3, #2
 8000d90:	440b      	add	r3, r1
 8000d92:	334c      	adds	r3, #76	@ 0x4c
 8000d94:	781a      	ldrb	r2, [r3, #0]
 8000d96:	78fb      	ldrb	r3, [r7, #3]
 8000d98:	4619      	mov	r1, r3
 8000d9a:	6878      	ldr	r0, [r7, #4]
 8000d9c:	f001 fe91 	bl	8002ac2 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	799b      	ldrb	r3, [r3, #6]
 8000da4:	2b01      	cmp	r3, #1
 8000da6:	d13b      	bne.n	8000e20 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8000da8:	78fa      	ldrb	r2, [r7, #3]
 8000daa:	6879      	ldr	r1, [r7, #4]
 8000dac:	4613      	mov	r3, r2
 8000dae:	011b      	lsls	r3, r3, #4
 8000db0:	1a9b      	subs	r3, r3, r2
 8000db2:	009b      	lsls	r3, r3, #2
 8000db4:	440b      	add	r3, r1
 8000db6:	3338      	adds	r3, #56	@ 0x38
 8000db8:	6819      	ldr	r1, [r3, #0]
 8000dba:	78fa      	ldrb	r2, [r7, #3]
 8000dbc:	6878      	ldr	r0, [r7, #4]
 8000dbe:	4613      	mov	r3, r2
 8000dc0:	011b      	lsls	r3, r3, #4
 8000dc2:	1a9b      	subs	r3, r3, r2
 8000dc4:	009b      	lsls	r3, r3, #2
 8000dc6:	4403      	add	r3, r0
 8000dc8:	3328      	adds	r3, #40	@ 0x28
 8000dca:	881b      	ldrh	r3, [r3, #0]
 8000dcc:	440b      	add	r3, r1
 8000dce:	1e59      	subs	r1, r3, #1
 8000dd0:	78fa      	ldrb	r2, [r7, #3]
 8000dd2:	6878      	ldr	r0, [r7, #4]
 8000dd4:	4613      	mov	r3, r2
 8000dd6:	011b      	lsls	r3, r3, #4
 8000dd8:	1a9b      	subs	r3, r3, r2
 8000dda:	009b      	lsls	r3, r3, #2
 8000ddc:	4403      	add	r3, r0
 8000dde:	3328      	adds	r3, #40	@ 0x28
 8000de0:	881b      	ldrh	r3, [r3, #0]
 8000de2:	fbb1 f3f3 	udiv	r3, r1, r3
 8000de6:	f003 0301 	and.w	r3, r3, #1
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	f000 8470 	beq.w	80016d0 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8000df0:	78fa      	ldrb	r2, [r7, #3]
 8000df2:	6879      	ldr	r1, [r7, #4]
 8000df4:	4613      	mov	r3, r2
 8000df6:	011b      	lsls	r3, r3, #4
 8000df8:	1a9b      	subs	r3, r3, r2
 8000dfa:	009b      	lsls	r3, r3, #2
 8000dfc:	440b      	add	r3, r1
 8000dfe:	333c      	adds	r3, #60	@ 0x3c
 8000e00:	781b      	ldrb	r3, [r3, #0]
 8000e02:	78fa      	ldrb	r2, [r7, #3]
 8000e04:	f083 0301 	eor.w	r3, r3, #1
 8000e08:	b2d8      	uxtb	r0, r3
 8000e0a:	6879      	ldr	r1, [r7, #4]
 8000e0c:	4613      	mov	r3, r2
 8000e0e:	011b      	lsls	r3, r3, #4
 8000e10:	1a9b      	subs	r3, r3, r2
 8000e12:	009b      	lsls	r3, r3, #2
 8000e14:	440b      	add	r3, r1
 8000e16:	333c      	adds	r3, #60	@ 0x3c
 8000e18:	4602      	mov	r2, r0
 8000e1a:	701a      	strb	r2, [r3, #0]
 8000e1c:	f000 bc58 	b.w	80016d0 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8000e20:	78fa      	ldrb	r2, [r7, #3]
 8000e22:	6879      	ldr	r1, [r7, #4]
 8000e24:	4613      	mov	r3, r2
 8000e26:	011b      	lsls	r3, r3, #4
 8000e28:	1a9b      	subs	r3, r3, r2
 8000e2a:	009b      	lsls	r3, r3, #2
 8000e2c:	440b      	add	r3, r1
 8000e2e:	333c      	adds	r3, #60	@ 0x3c
 8000e30:	781b      	ldrb	r3, [r3, #0]
 8000e32:	78fa      	ldrb	r2, [r7, #3]
 8000e34:	f083 0301 	eor.w	r3, r3, #1
 8000e38:	b2d8      	uxtb	r0, r3
 8000e3a:	6879      	ldr	r1, [r7, #4]
 8000e3c:	4613      	mov	r3, r2
 8000e3e:	011b      	lsls	r3, r3, #4
 8000e40:	1a9b      	subs	r3, r3, r2
 8000e42:	009b      	lsls	r3, r3, #2
 8000e44:	440b      	add	r3, r1
 8000e46:	333c      	adds	r3, #60	@ 0x3c
 8000e48:	4602      	mov	r2, r0
 8000e4a:	701a      	strb	r2, [r3, #0]
 8000e4c:	f000 bc40 	b.w	80016d0 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	78fa      	ldrb	r2, [r7, #3]
 8000e56:	4611      	mov	r1, r2
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f001 fb3a 	bl	80024d2 <USB_ReadChInterrupts>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	f003 0320 	and.w	r3, r3, #32
 8000e64:	2b20      	cmp	r3, #32
 8000e66:	d131      	bne.n	8000ecc <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8000e68:	78fb      	ldrb	r3, [r7, #3]
 8000e6a:	015a      	lsls	r2, r3, #5
 8000e6c:	693b      	ldr	r3, [r7, #16]
 8000e6e:	4413      	add	r3, r2
 8000e70:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8000e74:	461a      	mov	r2, r3
 8000e76:	2320      	movs	r3, #32
 8000e78:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8000e7a:	78fa      	ldrb	r2, [r7, #3]
 8000e7c:	6879      	ldr	r1, [r7, #4]
 8000e7e:	4613      	mov	r3, r2
 8000e80:	011b      	lsls	r3, r3, #4
 8000e82:	1a9b      	subs	r3, r3, r2
 8000e84:	009b      	lsls	r3, r3, #2
 8000e86:	440b      	add	r3, r1
 8000e88:	331a      	adds	r3, #26
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	2b01      	cmp	r3, #1
 8000e8e:	f040 841f 	bne.w	80016d0 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8000e92:	78fa      	ldrb	r2, [r7, #3]
 8000e94:	6879      	ldr	r1, [r7, #4]
 8000e96:	4613      	mov	r3, r2
 8000e98:	011b      	lsls	r3, r3, #4
 8000e9a:	1a9b      	subs	r3, r3, r2
 8000e9c:	009b      	lsls	r3, r3, #2
 8000e9e:	440b      	add	r3, r1
 8000ea0:	331b      	adds	r3, #27
 8000ea2:	2201      	movs	r2, #1
 8000ea4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8000ea6:	78fa      	ldrb	r2, [r7, #3]
 8000ea8:	6879      	ldr	r1, [r7, #4]
 8000eaa:	4613      	mov	r3, r2
 8000eac:	011b      	lsls	r3, r3, #4
 8000eae:	1a9b      	subs	r3, r3, r2
 8000eb0:	009b      	lsls	r3, r3, #2
 8000eb2:	440b      	add	r3, r1
 8000eb4:	334d      	adds	r3, #77	@ 0x4d
 8000eb6:	2203      	movs	r2, #3
 8000eb8:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	78fa      	ldrb	r2, [r7, #3]
 8000ec0:	4611      	mov	r1, r2
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f001 fb82 	bl	80025cc <USB_HC_Halt>
 8000ec8:	f000 bc02 	b.w	80016d0 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	78fa      	ldrb	r2, [r7, #3]
 8000ed2:	4611      	mov	r1, r2
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f001 fafc 	bl	80024d2 <USB_ReadChInterrupts>
 8000eda:	4603      	mov	r3, r0
 8000edc:	f003 0302 	and.w	r3, r3, #2
 8000ee0:	2b02      	cmp	r3, #2
 8000ee2:	f040 8305 	bne.w	80014f0 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8000ee6:	78fb      	ldrb	r3, [r7, #3]
 8000ee8:	015a      	lsls	r2, r3, #5
 8000eea:	693b      	ldr	r3, [r7, #16]
 8000eec:	4413      	add	r3, r2
 8000eee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8000ef2:	461a      	mov	r2, r3
 8000ef4:	2302      	movs	r3, #2
 8000ef6:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8000ef8:	78fa      	ldrb	r2, [r7, #3]
 8000efa:	6879      	ldr	r1, [r7, #4]
 8000efc:	4613      	mov	r3, r2
 8000efe:	011b      	lsls	r3, r3, #4
 8000f00:	1a9b      	subs	r3, r3, r2
 8000f02:	009b      	lsls	r3, r3, #2
 8000f04:	440b      	add	r3, r1
 8000f06:	334d      	adds	r3, #77	@ 0x4d
 8000f08:	781b      	ldrb	r3, [r3, #0]
 8000f0a:	2b01      	cmp	r3, #1
 8000f0c:	d114      	bne.n	8000f38 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8000f0e:	78fa      	ldrb	r2, [r7, #3]
 8000f10:	6879      	ldr	r1, [r7, #4]
 8000f12:	4613      	mov	r3, r2
 8000f14:	011b      	lsls	r3, r3, #4
 8000f16:	1a9b      	subs	r3, r3, r2
 8000f18:	009b      	lsls	r3, r3, #2
 8000f1a:	440b      	add	r3, r1
 8000f1c:	334d      	adds	r3, #77	@ 0x4d
 8000f1e:	2202      	movs	r2, #2
 8000f20:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8000f22:	78fa      	ldrb	r2, [r7, #3]
 8000f24:	6879      	ldr	r1, [r7, #4]
 8000f26:	4613      	mov	r3, r2
 8000f28:	011b      	lsls	r3, r3, #4
 8000f2a:	1a9b      	subs	r3, r3, r2
 8000f2c:	009b      	lsls	r3, r3, #2
 8000f2e:	440b      	add	r3, r1
 8000f30:	334c      	adds	r3, #76	@ 0x4c
 8000f32:	2201      	movs	r2, #1
 8000f34:	701a      	strb	r2, [r3, #0]
 8000f36:	e2cc      	b.n	80014d2 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8000f38:	78fa      	ldrb	r2, [r7, #3]
 8000f3a:	6879      	ldr	r1, [r7, #4]
 8000f3c:	4613      	mov	r3, r2
 8000f3e:	011b      	lsls	r3, r3, #4
 8000f40:	1a9b      	subs	r3, r3, r2
 8000f42:	009b      	lsls	r3, r3, #2
 8000f44:	440b      	add	r3, r1
 8000f46:	334d      	adds	r3, #77	@ 0x4d
 8000f48:	781b      	ldrb	r3, [r3, #0]
 8000f4a:	2b06      	cmp	r3, #6
 8000f4c:	d114      	bne.n	8000f78 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8000f4e:	78fa      	ldrb	r2, [r7, #3]
 8000f50:	6879      	ldr	r1, [r7, #4]
 8000f52:	4613      	mov	r3, r2
 8000f54:	011b      	lsls	r3, r3, #4
 8000f56:	1a9b      	subs	r3, r3, r2
 8000f58:	009b      	lsls	r3, r3, #2
 8000f5a:	440b      	add	r3, r1
 8000f5c:	334d      	adds	r3, #77	@ 0x4d
 8000f5e:	2202      	movs	r2, #2
 8000f60:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8000f62:	78fa      	ldrb	r2, [r7, #3]
 8000f64:	6879      	ldr	r1, [r7, #4]
 8000f66:	4613      	mov	r3, r2
 8000f68:	011b      	lsls	r3, r3, #4
 8000f6a:	1a9b      	subs	r3, r3, r2
 8000f6c:	009b      	lsls	r3, r3, #2
 8000f6e:	440b      	add	r3, r1
 8000f70:	334c      	adds	r3, #76	@ 0x4c
 8000f72:	2205      	movs	r2, #5
 8000f74:	701a      	strb	r2, [r3, #0]
 8000f76:	e2ac      	b.n	80014d2 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8000f78:	78fa      	ldrb	r2, [r7, #3]
 8000f7a:	6879      	ldr	r1, [r7, #4]
 8000f7c:	4613      	mov	r3, r2
 8000f7e:	011b      	lsls	r3, r3, #4
 8000f80:	1a9b      	subs	r3, r3, r2
 8000f82:	009b      	lsls	r3, r3, #2
 8000f84:	440b      	add	r3, r1
 8000f86:	334d      	adds	r3, #77	@ 0x4d
 8000f88:	781b      	ldrb	r3, [r3, #0]
 8000f8a:	2b07      	cmp	r3, #7
 8000f8c:	d00b      	beq.n	8000fa6 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8000f8e:	78fa      	ldrb	r2, [r7, #3]
 8000f90:	6879      	ldr	r1, [r7, #4]
 8000f92:	4613      	mov	r3, r2
 8000f94:	011b      	lsls	r3, r3, #4
 8000f96:	1a9b      	subs	r3, r3, r2
 8000f98:	009b      	lsls	r3, r3, #2
 8000f9a:	440b      	add	r3, r1
 8000f9c:	334d      	adds	r3, #77	@ 0x4d
 8000f9e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8000fa0:	2b09      	cmp	r3, #9
 8000fa2:	f040 80a6 	bne.w	80010f2 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8000fa6:	78fa      	ldrb	r2, [r7, #3]
 8000fa8:	6879      	ldr	r1, [r7, #4]
 8000faa:	4613      	mov	r3, r2
 8000fac:	011b      	lsls	r3, r3, #4
 8000fae:	1a9b      	subs	r3, r3, r2
 8000fb0:	009b      	lsls	r3, r3, #2
 8000fb2:	440b      	add	r3, r1
 8000fb4:	334d      	adds	r3, #77	@ 0x4d
 8000fb6:	2202      	movs	r2, #2
 8000fb8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8000fba:	78fa      	ldrb	r2, [r7, #3]
 8000fbc:	6879      	ldr	r1, [r7, #4]
 8000fbe:	4613      	mov	r3, r2
 8000fc0:	011b      	lsls	r3, r3, #4
 8000fc2:	1a9b      	subs	r3, r3, r2
 8000fc4:	009b      	lsls	r3, r3, #2
 8000fc6:	440b      	add	r3, r1
 8000fc8:	3344      	adds	r3, #68	@ 0x44
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	1c59      	adds	r1, r3, #1
 8000fce:	6878      	ldr	r0, [r7, #4]
 8000fd0:	4613      	mov	r3, r2
 8000fd2:	011b      	lsls	r3, r3, #4
 8000fd4:	1a9b      	subs	r3, r3, r2
 8000fd6:	009b      	lsls	r3, r3, #2
 8000fd8:	4403      	add	r3, r0
 8000fda:	3344      	adds	r3, #68	@ 0x44
 8000fdc:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8000fde:	78fa      	ldrb	r2, [r7, #3]
 8000fe0:	6879      	ldr	r1, [r7, #4]
 8000fe2:	4613      	mov	r3, r2
 8000fe4:	011b      	lsls	r3, r3, #4
 8000fe6:	1a9b      	subs	r3, r3, r2
 8000fe8:	009b      	lsls	r3, r3, #2
 8000fea:	440b      	add	r3, r1
 8000fec:	3344      	adds	r3, #68	@ 0x44
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	2b02      	cmp	r3, #2
 8000ff2:	d943      	bls.n	800107c <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8000ff4:	78fa      	ldrb	r2, [r7, #3]
 8000ff6:	6879      	ldr	r1, [r7, #4]
 8000ff8:	4613      	mov	r3, r2
 8000ffa:	011b      	lsls	r3, r3, #4
 8000ffc:	1a9b      	subs	r3, r3, r2
 8000ffe:	009b      	lsls	r3, r3, #2
 8001000:	440b      	add	r3, r1
 8001002:	3344      	adds	r3, #68	@ 0x44
 8001004:	2200      	movs	r2, #0
 8001006:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8001008:	78fa      	ldrb	r2, [r7, #3]
 800100a:	6879      	ldr	r1, [r7, #4]
 800100c:	4613      	mov	r3, r2
 800100e:	011b      	lsls	r3, r3, #4
 8001010:	1a9b      	subs	r3, r3, r2
 8001012:	009b      	lsls	r3, r3, #2
 8001014:	440b      	add	r3, r1
 8001016:	331a      	adds	r3, #26
 8001018:	781b      	ldrb	r3, [r3, #0]
 800101a:	2b01      	cmp	r3, #1
 800101c:	d123      	bne.n	8001066 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 800101e:	78fa      	ldrb	r2, [r7, #3]
 8001020:	6879      	ldr	r1, [r7, #4]
 8001022:	4613      	mov	r3, r2
 8001024:	011b      	lsls	r3, r3, #4
 8001026:	1a9b      	subs	r3, r3, r2
 8001028:	009b      	lsls	r3, r3, #2
 800102a:	440b      	add	r3, r1
 800102c:	331b      	adds	r3, #27
 800102e:	2200      	movs	r2, #0
 8001030:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8001032:	78fa      	ldrb	r2, [r7, #3]
 8001034:	6879      	ldr	r1, [r7, #4]
 8001036:	4613      	mov	r3, r2
 8001038:	011b      	lsls	r3, r3, #4
 800103a:	1a9b      	subs	r3, r3, r2
 800103c:	009b      	lsls	r3, r3, #2
 800103e:	440b      	add	r3, r1
 8001040:	331c      	adds	r3, #28
 8001042:	2200      	movs	r2, #0
 8001044:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8001046:	78fb      	ldrb	r3, [r7, #3]
 8001048:	015a      	lsls	r2, r3, #5
 800104a:	693b      	ldr	r3, [r7, #16]
 800104c:	4413      	add	r3, r2
 800104e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	78fa      	ldrb	r2, [r7, #3]
 8001056:	0151      	lsls	r1, r2, #5
 8001058:	693a      	ldr	r2, [r7, #16]
 800105a:	440a      	add	r2, r1
 800105c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8001060:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001064:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8001066:	78fa      	ldrb	r2, [r7, #3]
 8001068:	6879      	ldr	r1, [r7, #4]
 800106a:	4613      	mov	r3, r2
 800106c:	011b      	lsls	r3, r3, #4
 800106e:	1a9b      	subs	r3, r3, r2
 8001070:	009b      	lsls	r3, r3, #2
 8001072:	440b      	add	r3, r1
 8001074:	334c      	adds	r3, #76	@ 0x4c
 8001076:	2204      	movs	r2, #4
 8001078:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800107a:	e229      	b.n	80014d0 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800107c:	78fa      	ldrb	r2, [r7, #3]
 800107e:	6879      	ldr	r1, [r7, #4]
 8001080:	4613      	mov	r3, r2
 8001082:	011b      	lsls	r3, r3, #4
 8001084:	1a9b      	subs	r3, r3, r2
 8001086:	009b      	lsls	r3, r3, #2
 8001088:	440b      	add	r3, r1
 800108a:	334c      	adds	r3, #76	@ 0x4c
 800108c:	2202      	movs	r2, #2
 800108e:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001090:	78fa      	ldrb	r2, [r7, #3]
 8001092:	6879      	ldr	r1, [r7, #4]
 8001094:	4613      	mov	r3, r2
 8001096:	011b      	lsls	r3, r3, #4
 8001098:	1a9b      	subs	r3, r3, r2
 800109a:	009b      	lsls	r3, r3, #2
 800109c:	440b      	add	r3, r1
 800109e:	3326      	adds	r3, #38	@ 0x26
 80010a0:	781b      	ldrb	r3, [r3, #0]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d00b      	beq.n	80010be <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80010a6:	78fa      	ldrb	r2, [r7, #3]
 80010a8:	6879      	ldr	r1, [r7, #4]
 80010aa:	4613      	mov	r3, r2
 80010ac:	011b      	lsls	r3, r3, #4
 80010ae:	1a9b      	subs	r3, r3, r2
 80010b0:	009b      	lsls	r3, r3, #2
 80010b2:	440b      	add	r3, r1
 80010b4:	3326      	adds	r3, #38	@ 0x26
 80010b6:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80010b8:	2b02      	cmp	r3, #2
 80010ba:	f040 8209 	bne.w	80014d0 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80010be:	78fb      	ldrb	r3, [r7, #3]
 80010c0:	015a      	lsls	r2, r3, #5
 80010c2:	693b      	ldr	r3, [r7, #16]
 80010c4:	4413      	add	r3, r2
 80010c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80010d4:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80010dc:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80010de:	78fb      	ldrb	r3, [r7, #3]
 80010e0:	015a      	lsls	r2, r3, #5
 80010e2:	693b      	ldr	r3, [r7, #16]
 80010e4:	4413      	add	r3, r2
 80010e6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80010ea:	461a      	mov	r2, r3
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80010f0:	e1ee      	b.n	80014d0 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80010f2:	78fa      	ldrb	r2, [r7, #3]
 80010f4:	6879      	ldr	r1, [r7, #4]
 80010f6:	4613      	mov	r3, r2
 80010f8:	011b      	lsls	r3, r3, #4
 80010fa:	1a9b      	subs	r3, r3, r2
 80010fc:	009b      	lsls	r3, r3, #2
 80010fe:	440b      	add	r3, r1
 8001100:	334d      	adds	r3, #77	@ 0x4d
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	2b05      	cmp	r3, #5
 8001106:	f040 80c8 	bne.w	800129a <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800110a:	78fa      	ldrb	r2, [r7, #3]
 800110c:	6879      	ldr	r1, [r7, #4]
 800110e:	4613      	mov	r3, r2
 8001110:	011b      	lsls	r3, r3, #4
 8001112:	1a9b      	subs	r3, r3, r2
 8001114:	009b      	lsls	r3, r3, #2
 8001116:	440b      	add	r3, r1
 8001118:	334d      	adds	r3, #77	@ 0x4d
 800111a:	2202      	movs	r2, #2
 800111c:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800111e:	78fa      	ldrb	r2, [r7, #3]
 8001120:	6879      	ldr	r1, [r7, #4]
 8001122:	4613      	mov	r3, r2
 8001124:	011b      	lsls	r3, r3, #4
 8001126:	1a9b      	subs	r3, r3, r2
 8001128:	009b      	lsls	r3, r3, #2
 800112a:	440b      	add	r3, r1
 800112c:	331b      	adds	r3, #27
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	2b01      	cmp	r3, #1
 8001132:	f040 81ce 	bne.w	80014d2 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8001136:	78fa      	ldrb	r2, [r7, #3]
 8001138:	6879      	ldr	r1, [r7, #4]
 800113a:	4613      	mov	r3, r2
 800113c:	011b      	lsls	r3, r3, #4
 800113e:	1a9b      	subs	r3, r3, r2
 8001140:	009b      	lsls	r3, r3, #2
 8001142:	440b      	add	r3, r1
 8001144:	3326      	adds	r3, #38	@ 0x26
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	2b03      	cmp	r3, #3
 800114a:	d16b      	bne.n	8001224 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 800114c:	78fa      	ldrb	r2, [r7, #3]
 800114e:	6879      	ldr	r1, [r7, #4]
 8001150:	4613      	mov	r3, r2
 8001152:	011b      	lsls	r3, r3, #4
 8001154:	1a9b      	subs	r3, r3, r2
 8001156:	009b      	lsls	r3, r3, #2
 8001158:	440b      	add	r3, r1
 800115a:	3348      	adds	r3, #72	@ 0x48
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	1c59      	adds	r1, r3, #1
 8001160:	6878      	ldr	r0, [r7, #4]
 8001162:	4613      	mov	r3, r2
 8001164:	011b      	lsls	r3, r3, #4
 8001166:	1a9b      	subs	r3, r3, r2
 8001168:	009b      	lsls	r3, r3, #2
 800116a:	4403      	add	r3, r0
 800116c:	3348      	adds	r3, #72	@ 0x48
 800116e:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8001170:	78fa      	ldrb	r2, [r7, #3]
 8001172:	6879      	ldr	r1, [r7, #4]
 8001174:	4613      	mov	r3, r2
 8001176:	011b      	lsls	r3, r3, #4
 8001178:	1a9b      	subs	r3, r3, r2
 800117a:	009b      	lsls	r3, r3, #2
 800117c:	440b      	add	r3, r1
 800117e:	3348      	adds	r3, #72	@ 0x48
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	2b02      	cmp	r3, #2
 8001184:	d943      	bls.n	800120e <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8001186:	78fa      	ldrb	r2, [r7, #3]
 8001188:	6879      	ldr	r1, [r7, #4]
 800118a:	4613      	mov	r3, r2
 800118c:	011b      	lsls	r3, r3, #4
 800118e:	1a9b      	subs	r3, r3, r2
 8001190:	009b      	lsls	r3, r3, #2
 8001192:	440b      	add	r3, r1
 8001194:	3348      	adds	r3, #72	@ 0x48
 8001196:	2200      	movs	r2, #0
 8001198:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 800119a:	78fa      	ldrb	r2, [r7, #3]
 800119c:	6879      	ldr	r1, [r7, #4]
 800119e:	4613      	mov	r3, r2
 80011a0:	011b      	lsls	r3, r3, #4
 80011a2:	1a9b      	subs	r3, r3, r2
 80011a4:	009b      	lsls	r3, r3, #2
 80011a6:	440b      	add	r3, r1
 80011a8:	331b      	adds	r3, #27
 80011aa:	2200      	movs	r2, #0
 80011ac:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 80011ae:	78fa      	ldrb	r2, [r7, #3]
 80011b0:	6879      	ldr	r1, [r7, #4]
 80011b2:	4613      	mov	r3, r2
 80011b4:	011b      	lsls	r3, r3, #4
 80011b6:	1a9b      	subs	r3, r3, r2
 80011b8:	009b      	lsls	r3, r3, #2
 80011ba:	440b      	add	r3, r1
 80011bc:	3344      	adds	r3, #68	@ 0x44
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	2b02      	cmp	r3, #2
 80011c2:	d809      	bhi.n	80011d8 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 80011c4:	78fa      	ldrb	r2, [r7, #3]
 80011c6:	6879      	ldr	r1, [r7, #4]
 80011c8:	4613      	mov	r3, r2
 80011ca:	011b      	lsls	r3, r3, #4
 80011cc:	1a9b      	subs	r3, r3, r2
 80011ce:	009b      	lsls	r3, r3, #2
 80011d0:	440b      	add	r3, r1
 80011d2:	331c      	adds	r3, #28
 80011d4:	2201      	movs	r2, #1
 80011d6:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80011d8:	78fb      	ldrb	r3, [r7, #3]
 80011da:	015a      	lsls	r2, r3, #5
 80011dc:	693b      	ldr	r3, [r7, #16]
 80011de:	4413      	add	r3, r2
 80011e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	78fa      	ldrb	r2, [r7, #3]
 80011e8:	0151      	lsls	r1, r2, #5
 80011ea:	693a      	ldr	r2, [r7, #16]
 80011ec:	440a      	add	r2, r1
 80011ee:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80011f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80011f6:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 80011f8:	78fa      	ldrb	r2, [r7, #3]
 80011fa:	6879      	ldr	r1, [r7, #4]
 80011fc:	4613      	mov	r3, r2
 80011fe:	011b      	lsls	r3, r3, #4
 8001200:	1a9b      	subs	r3, r3, r2
 8001202:	009b      	lsls	r3, r3, #2
 8001204:	440b      	add	r3, r1
 8001206:	334c      	adds	r3, #76	@ 0x4c
 8001208:	2204      	movs	r2, #4
 800120a:	701a      	strb	r2, [r3, #0]
 800120c:	e014      	b.n	8001238 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800120e:	78fa      	ldrb	r2, [r7, #3]
 8001210:	6879      	ldr	r1, [r7, #4]
 8001212:	4613      	mov	r3, r2
 8001214:	011b      	lsls	r3, r3, #4
 8001216:	1a9b      	subs	r3, r3, r2
 8001218:	009b      	lsls	r3, r3, #2
 800121a:	440b      	add	r3, r1
 800121c:	334c      	adds	r3, #76	@ 0x4c
 800121e:	2202      	movs	r2, #2
 8001220:	701a      	strb	r2, [r3, #0]
 8001222:	e009      	b.n	8001238 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8001224:	78fa      	ldrb	r2, [r7, #3]
 8001226:	6879      	ldr	r1, [r7, #4]
 8001228:	4613      	mov	r3, r2
 800122a:	011b      	lsls	r3, r3, #4
 800122c:	1a9b      	subs	r3, r3, r2
 800122e:	009b      	lsls	r3, r3, #2
 8001230:	440b      	add	r3, r1
 8001232:	334c      	adds	r3, #76	@ 0x4c
 8001234:	2202      	movs	r2, #2
 8001236:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001238:	78fa      	ldrb	r2, [r7, #3]
 800123a:	6879      	ldr	r1, [r7, #4]
 800123c:	4613      	mov	r3, r2
 800123e:	011b      	lsls	r3, r3, #4
 8001240:	1a9b      	subs	r3, r3, r2
 8001242:	009b      	lsls	r3, r3, #2
 8001244:	440b      	add	r3, r1
 8001246:	3326      	adds	r3, #38	@ 0x26
 8001248:	781b      	ldrb	r3, [r3, #0]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d00b      	beq.n	8001266 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800124e:	78fa      	ldrb	r2, [r7, #3]
 8001250:	6879      	ldr	r1, [r7, #4]
 8001252:	4613      	mov	r3, r2
 8001254:	011b      	lsls	r3, r3, #4
 8001256:	1a9b      	subs	r3, r3, r2
 8001258:	009b      	lsls	r3, r3, #2
 800125a:	440b      	add	r3, r1
 800125c:	3326      	adds	r3, #38	@ 0x26
 800125e:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001260:	2b02      	cmp	r3, #2
 8001262:	f040 8136 	bne.w	80014d2 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8001266:	78fb      	ldrb	r3, [r7, #3]
 8001268:	015a      	lsls	r2, r3, #5
 800126a:	693b      	ldr	r3, [r7, #16]
 800126c:	4413      	add	r3, r2
 800126e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800127c:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001284:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8001286:	78fb      	ldrb	r3, [r7, #3]
 8001288:	015a      	lsls	r2, r3, #5
 800128a:	693b      	ldr	r3, [r7, #16]
 800128c:	4413      	add	r3, r2
 800128e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001292:	461a      	mov	r2, r3
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	6013      	str	r3, [r2, #0]
 8001298:	e11b      	b.n	80014d2 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 800129a:	78fa      	ldrb	r2, [r7, #3]
 800129c:	6879      	ldr	r1, [r7, #4]
 800129e:	4613      	mov	r3, r2
 80012a0:	011b      	lsls	r3, r3, #4
 80012a2:	1a9b      	subs	r3, r3, r2
 80012a4:	009b      	lsls	r3, r3, #2
 80012a6:	440b      	add	r3, r1
 80012a8:	334d      	adds	r3, #77	@ 0x4d
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	2b03      	cmp	r3, #3
 80012ae:	f040 8081 	bne.w	80013b4 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80012b2:	78fa      	ldrb	r2, [r7, #3]
 80012b4:	6879      	ldr	r1, [r7, #4]
 80012b6:	4613      	mov	r3, r2
 80012b8:	011b      	lsls	r3, r3, #4
 80012ba:	1a9b      	subs	r3, r3, r2
 80012bc:	009b      	lsls	r3, r3, #2
 80012be:	440b      	add	r3, r1
 80012c0:	334d      	adds	r3, #77	@ 0x4d
 80012c2:	2202      	movs	r2, #2
 80012c4:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80012c6:	78fa      	ldrb	r2, [r7, #3]
 80012c8:	6879      	ldr	r1, [r7, #4]
 80012ca:	4613      	mov	r3, r2
 80012cc:	011b      	lsls	r3, r3, #4
 80012ce:	1a9b      	subs	r3, r3, r2
 80012d0:	009b      	lsls	r3, r3, #2
 80012d2:	440b      	add	r3, r1
 80012d4:	331b      	adds	r3, #27
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	2b01      	cmp	r3, #1
 80012da:	f040 80fa 	bne.w	80014d2 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80012de:	78fa      	ldrb	r2, [r7, #3]
 80012e0:	6879      	ldr	r1, [r7, #4]
 80012e2:	4613      	mov	r3, r2
 80012e4:	011b      	lsls	r3, r3, #4
 80012e6:	1a9b      	subs	r3, r3, r2
 80012e8:	009b      	lsls	r3, r3, #2
 80012ea:	440b      	add	r3, r1
 80012ec:	334c      	adds	r3, #76	@ 0x4c
 80012ee:	2202      	movs	r2, #2
 80012f0:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80012f2:	78fb      	ldrb	r3, [r7, #3]
 80012f4:	015a      	lsls	r2, r3, #5
 80012f6:	693b      	ldr	r3, [r7, #16]
 80012f8:	4413      	add	r3, r2
 80012fa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	78fa      	ldrb	r2, [r7, #3]
 8001302:	0151      	lsls	r1, r2, #5
 8001304:	693a      	ldr	r2, [r7, #16]
 8001306:	440a      	add	r2, r1
 8001308:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800130c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001310:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8001312:	78fb      	ldrb	r3, [r7, #3]
 8001314:	015a      	lsls	r2, r3, #5
 8001316:	693b      	ldr	r3, [r7, #16]
 8001318:	4413      	add	r3, r2
 800131a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800131e:	68db      	ldr	r3, [r3, #12]
 8001320:	78fa      	ldrb	r2, [r7, #3]
 8001322:	0151      	lsls	r1, r2, #5
 8001324:	693a      	ldr	r2, [r7, #16]
 8001326:	440a      	add	r2, r1
 8001328:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800132c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001330:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8001332:	78fb      	ldrb	r3, [r7, #3]
 8001334:	015a      	lsls	r2, r3, #5
 8001336:	693b      	ldr	r3, [r7, #16]
 8001338:	4413      	add	r3, r2
 800133a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800133e:	68db      	ldr	r3, [r3, #12]
 8001340:	78fa      	ldrb	r2, [r7, #3]
 8001342:	0151      	lsls	r1, r2, #5
 8001344:	693a      	ldr	r2, [r7, #16]
 8001346:	440a      	add	r2, r1
 8001348:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800134c:	f023 0320 	bic.w	r3, r3, #32
 8001350:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001352:	78fa      	ldrb	r2, [r7, #3]
 8001354:	6879      	ldr	r1, [r7, #4]
 8001356:	4613      	mov	r3, r2
 8001358:	011b      	lsls	r3, r3, #4
 800135a:	1a9b      	subs	r3, r3, r2
 800135c:	009b      	lsls	r3, r3, #2
 800135e:	440b      	add	r3, r1
 8001360:	3326      	adds	r3, #38	@ 0x26
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	2b00      	cmp	r3, #0
 8001366:	d00b      	beq.n	8001380 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8001368:	78fa      	ldrb	r2, [r7, #3]
 800136a:	6879      	ldr	r1, [r7, #4]
 800136c:	4613      	mov	r3, r2
 800136e:	011b      	lsls	r3, r3, #4
 8001370:	1a9b      	subs	r3, r3, r2
 8001372:	009b      	lsls	r3, r3, #2
 8001374:	440b      	add	r3, r1
 8001376:	3326      	adds	r3, #38	@ 0x26
 8001378:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800137a:	2b02      	cmp	r3, #2
 800137c:	f040 80a9 	bne.w	80014d2 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8001380:	78fb      	ldrb	r3, [r7, #3]
 8001382:	015a      	lsls	r2, r3, #5
 8001384:	693b      	ldr	r3, [r7, #16]
 8001386:	4413      	add	r3, r2
 8001388:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8001396:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800139e:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80013a0:	78fb      	ldrb	r3, [r7, #3]
 80013a2:	015a      	lsls	r2, r3, #5
 80013a4:	693b      	ldr	r3, [r7, #16]
 80013a6:	4413      	add	r3, r2
 80013a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80013ac:	461a      	mov	r2, r3
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	6013      	str	r3, [r2, #0]
 80013b2:	e08e      	b.n	80014d2 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80013b4:	78fa      	ldrb	r2, [r7, #3]
 80013b6:	6879      	ldr	r1, [r7, #4]
 80013b8:	4613      	mov	r3, r2
 80013ba:	011b      	lsls	r3, r3, #4
 80013bc:	1a9b      	subs	r3, r3, r2
 80013be:	009b      	lsls	r3, r3, #2
 80013c0:	440b      	add	r3, r1
 80013c2:	334d      	adds	r3, #77	@ 0x4d
 80013c4:	781b      	ldrb	r3, [r3, #0]
 80013c6:	2b04      	cmp	r3, #4
 80013c8:	d143      	bne.n	8001452 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80013ca:	78fa      	ldrb	r2, [r7, #3]
 80013cc:	6879      	ldr	r1, [r7, #4]
 80013ce:	4613      	mov	r3, r2
 80013d0:	011b      	lsls	r3, r3, #4
 80013d2:	1a9b      	subs	r3, r3, r2
 80013d4:	009b      	lsls	r3, r3, #2
 80013d6:	440b      	add	r3, r1
 80013d8:	334d      	adds	r3, #77	@ 0x4d
 80013da:	2202      	movs	r2, #2
 80013dc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80013de:	78fa      	ldrb	r2, [r7, #3]
 80013e0:	6879      	ldr	r1, [r7, #4]
 80013e2:	4613      	mov	r3, r2
 80013e4:	011b      	lsls	r3, r3, #4
 80013e6:	1a9b      	subs	r3, r3, r2
 80013e8:	009b      	lsls	r3, r3, #2
 80013ea:	440b      	add	r3, r1
 80013ec:	334c      	adds	r3, #76	@ 0x4c
 80013ee:	2202      	movs	r2, #2
 80013f0:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80013f2:	78fa      	ldrb	r2, [r7, #3]
 80013f4:	6879      	ldr	r1, [r7, #4]
 80013f6:	4613      	mov	r3, r2
 80013f8:	011b      	lsls	r3, r3, #4
 80013fa:	1a9b      	subs	r3, r3, r2
 80013fc:	009b      	lsls	r3, r3, #2
 80013fe:	440b      	add	r3, r1
 8001400:	3326      	adds	r3, #38	@ 0x26
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d00a      	beq.n	800141e <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8001408:	78fa      	ldrb	r2, [r7, #3]
 800140a:	6879      	ldr	r1, [r7, #4]
 800140c:	4613      	mov	r3, r2
 800140e:	011b      	lsls	r3, r3, #4
 8001410:	1a9b      	subs	r3, r3, r2
 8001412:	009b      	lsls	r3, r3, #2
 8001414:	440b      	add	r3, r1
 8001416:	3326      	adds	r3, #38	@ 0x26
 8001418:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800141a:	2b02      	cmp	r3, #2
 800141c:	d159      	bne.n	80014d2 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800141e:	78fb      	ldrb	r3, [r7, #3]
 8001420:	015a      	lsls	r2, r3, #5
 8001422:	693b      	ldr	r3, [r7, #16]
 8001424:	4413      	add	r3, r2
 8001426:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8001434:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800143c:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800143e:	78fb      	ldrb	r3, [r7, #3]
 8001440:	015a      	lsls	r2, r3, #5
 8001442:	693b      	ldr	r3, [r7, #16]
 8001444:	4413      	add	r3, r2
 8001446:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800144a:	461a      	mov	r2, r3
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	6013      	str	r3, [r2, #0]
 8001450:	e03f      	b.n	80014d2 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8001452:	78fa      	ldrb	r2, [r7, #3]
 8001454:	6879      	ldr	r1, [r7, #4]
 8001456:	4613      	mov	r3, r2
 8001458:	011b      	lsls	r3, r3, #4
 800145a:	1a9b      	subs	r3, r3, r2
 800145c:	009b      	lsls	r3, r3, #2
 800145e:	440b      	add	r3, r1
 8001460:	334d      	adds	r3, #77	@ 0x4d
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	2b08      	cmp	r3, #8
 8001466:	d126      	bne.n	80014b6 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8001468:	78fa      	ldrb	r2, [r7, #3]
 800146a:	6879      	ldr	r1, [r7, #4]
 800146c:	4613      	mov	r3, r2
 800146e:	011b      	lsls	r3, r3, #4
 8001470:	1a9b      	subs	r3, r3, r2
 8001472:	009b      	lsls	r3, r3, #2
 8001474:	440b      	add	r3, r1
 8001476:	334d      	adds	r3, #77	@ 0x4d
 8001478:	2202      	movs	r2, #2
 800147a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800147c:	78fa      	ldrb	r2, [r7, #3]
 800147e:	6879      	ldr	r1, [r7, #4]
 8001480:	4613      	mov	r3, r2
 8001482:	011b      	lsls	r3, r3, #4
 8001484:	1a9b      	subs	r3, r3, r2
 8001486:	009b      	lsls	r3, r3, #2
 8001488:	440b      	add	r3, r1
 800148a:	3344      	adds	r3, #68	@ 0x44
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	1c59      	adds	r1, r3, #1
 8001490:	6878      	ldr	r0, [r7, #4]
 8001492:	4613      	mov	r3, r2
 8001494:	011b      	lsls	r3, r3, #4
 8001496:	1a9b      	subs	r3, r3, r2
 8001498:	009b      	lsls	r3, r3, #2
 800149a:	4403      	add	r3, r0
 800149c:	3344      	adds	r3, #68	@ 0x44
 800149e:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 80014a0:	78fa      	ldrb	r2, [r7, #3]
 80014a2:	6879      	ldr	r1, [r7, #4]
 80014a4:	4613      	mov	r3, r2
 80014a6:	011b      	lsls	r3, r3, #4
 80014a8:	1a9b      	subs	r3, r3, r2
 80014aa:	009b      	lsls	r3, r3, #2
 80014ac:	440b      	add	r3, r1
 80014ae:	334c      	adds	r3, #76	@ 0x4c
 80014b0:	2204      	movs	r2, #4
 80014b2:	701a      	strb	r2, [r3, #0]
 80014b4:	e00d      	b.n	80014d2 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 80014b6:	78fa      	ldrb	r2, [r7, #3]
 80014b8:	6879      	ldr	r1, [r7, #4]
 80014ba:	4613      	mov	r3, r2
 80014bc:	011b      	lsls	r3, r3, #4
 80014be:	1a9b      	subs	r3, r3, r2
 80014c0:	009b      	lsls	r3, r3, #2
 80014c2:	440b      	add	r3, r1
 80014c4:	334d      	adds	r3, #77	@ 0x4d
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	2b02      	cmp	r3, #2
 80014ca:	f000 8100 	beq.w	80016ce <HCD_HC_IN_IRQHandler+0xcca>
 80014ce:	e000      	b.n	80014d2 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80014d0:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80014d2:	78fa      	ldrb	r2, [r7, #3]
 80014d4:	6879      	ldr	r1, [r7, #4]
 80014d6:	4613      	mov	r3, r2
 80014d8:	011b      	lsls	r3, r3, #4
 80014da:	1a9b      	subs	r3, r3, r2
 80014dc:	009b      	lsls	r3, r3, #2
 80014de:	440b      	add	r3, r1
 80014e0:	334c      	adds	r3, #76	@ 0x4c
 80014e2:	781a      	ldrb	r2, [r3, #0]
 80014e4:	78fb      	ldrb	r3, [r7, #3]
 80014e6:	4619      	mov	r1, r3
 80014e8:	6878      	ldr	r0, [r7, #4]
 80014ea:	f001 faea 	bl	8002ac2 <HAL_HCD_HC_NotifyURBChange_Callback>
 80014ee:	e0ef      	b.n	80016d0 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	78fa      	ldrb	r2, [r7, #3]
 80014f6:	4611      	mov	r1, r2
 80014f8:	4618      	mov	r0, r3
 80014fa:	f000 ffea 	bl	80024d2 <USB_ReadChInterrupts>
 80014fe:	4603      	mov	r3, r0
 8001500:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001504:	2b40      	cmp	r3, #64	@ 0x40
 8001506:	d12f      	bne.n	8001568 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8001508:	78fb      	ldrb	r3, [r7, #3]
 800150a:	015a      	lsls	r2, r3, #5
 800150c:	693b      	ldr	r3, [r7, #16]
 800150e:	4413      	add	r3, r2
 8001510:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001514:	461a      	mov	r2, r3
 8001516:	2340      	movs	r3, #64	@ 0x40
 8001518:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 800151a:	78fa      	ldrb	r2, [r7, #3]
 800151c:	6879      	ldr	r1, [r7, #4]
 800151e:	4613      	mov	r3, r2
 8001520:	011b      	lsls	r3, r3, #4
 8001522:	1a9b      	subs	r3, r3, r2
 8001524:	009b      	lsls	r3, r3, #2
 8001526:	440b      	add	r3, r1
 8001528:	334d      	adds	r3, #77	@ 0x4d
 800152a:	2205      	movs	r2, #5
 800152c:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 800152e:	78fa      	ldrb	r2, [r7, #3]
 8001530:	6879      	ldr	r1, [r7, #4]
 8001532:	4613      	mov	r3, r2
 8001534:	011b      	lsls	r3, r3, #4
 8001536:	1a9b      	subs	r3, r3, r2
 8001538:	009b      	lsls	r3, r3, #2
 800153a:	440b      	add	r3, r1
 800153c:	331a      	adds	r3, #26
 800153e:	781b      	ldrb	r3, [r3, #0]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d109      	bne.n	8001558 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8001544:	78fa      	ldrb	r2, [r7, #3]
 8001546:	6879      	ldr	r1, [r7, #4]
 8001548:	4613      	mov	r3, r2
 800154a:	011b      	lsls	r3, r3, #4
 800154c:	1a9b      	subs	r3, r3, r2
 800154e:	009b      	lsls	r3, r3, #2
 8001550:	440b      	add	r3, r1
 8001552:	3344      	adds	r3, #68	@ 0x44
 8001554:	2200      	movs	r2, #0
 8001556:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	78fa      	ldrb	r2, [r7, #3]
 800155e:	4611      	mov	r1, r2
 8001560:	4618      	mov	r0, r3
 8001562:	f001 f833 	bl	80025cc <USB_HC_Halt>
 8001566:	e0b3      	b.n	80016d0 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	78fa      	ldrb	r2, [r7, #3]
 800156e:	4611      	mov	r1, r2
 8001570:	4618      	mov	r0, r3
 8001572:	f000 ffae 	bl	80024d2 <USB_ReadChInterrupts>
 8001576:	4603      	mov	r3, r0
 8001578:	f003 0310 	and.w	r3, r3, #16
 800157c:	2b10      	cmp	r3, #16
 800157e:	f040 80a7 	bne.w	80016d0 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8001582:	78fa      	ldrb	r2, [r7, #3]
 8001584:	6879      	ldr	r1, [r7, #4]
 8001586:	4613      	mov	r3, r2
 8001588:	011b      	lsls	r3, r3, #4
 800158a:	1a9b      	subs	r3, r3, r2
 800158c:	009b      	lsls	r3, r3, #2
 800158e:	440b      	add	r3, r1
 8001590:	3326      	adds	r3, #38	@ 0x26
 8001592:	781b      	ldrb	r3, [r3, #0]
 8001594:	2b03      	cmp	r3, #3
 8001596:	d11b      	bne.n	80015d0 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8001598:	78fa      	ldrb	r2, [r7, #3]
 800159a:	6879      	ldr	r1, [r7, #4]
 800159c:	4613      	mov	r3, r2
 800159e:	011b      	lsls	r3, r3, #4
 80015a0:	1a9b      	subs	r3, r3, r2
 80015a2:	009b      	lsls	r3, r3, #2
 80015a4:	440b      	add	r3, r1
 80015a6:	3344      	adds	r3, #68	@ 0x44
 80015a8:	2200      	movs	r2, #0
 80015aa:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 80015ac:	78fa      	ldrb	r2, [r7, #3]
 80015ae:	6879      	ldr	r1, [r7, #4]
 80015b0:	4613      	mov	r3, r2
 80015b2:	011b      	lsls	r3, r3, #4
 80015b4:	1a9b      	subs	r3, r3, r2
 80015b6:	009b      	lsls	r3, r3, #2
 80015b8:	440b      	add	r3, r1
 80015ba:	334d      	adds	r3, #77	@ 0x4d
 80015bc:	2204      	movs	r2, #4
 80015be:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	78fa      	ldrb	r2, [r7, #3]
 80015c6:	4611      	mov	r1, r2
 80015c8:	4618      	mov	r0, r3
 80015ca:	f000 ffff 	bl	80025cc <USB_HC_Halt>
 80015ce:	e03f      	b.n	8001650 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80015d0:	78fa      	ldrb	r2, [r7, #3]
 80015d2:	6879      	ldr	r1, [r7, #4]
 80015d4:	4613      	mov	r3, r2
 80015d6:	011b      	lsls	r3, r3, #4
 80015d8:	1a9b      	subs	r3, r3, r2
 80015da:	009b      	lsls	r3, r3, #2
 80015dc:	440b      	add	r3, r1
 80015de:	3326      	adds	r3, #38	@ 0x26
 80015e0:	781b      	ldrb	r3, [r3, #0]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d00a      	beq.n	80015fc <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80015e6:	78fa      	ldrb	r2, [r7, #3]
 80015e8:	6879      	ldr	r1, [r7, #4]
 80015ea:	4613      	mov	r3, r2
 80015ec:	011b      	lsls	r3, r3, #4
 80015ee:	1a9b      	subs	r3, r3, r2
 80015f0:	009b      	lsls	r3, r3, #2
 80015f2:	440b      	add	r3, r1
 80015f4:	3326      	adds	r3, #38	@ 0x26
 80015f6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80015f8:	2b02      	cmp	r3, #2
 80015fa:	d129      	bne.n	8001650 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80015fc:	78fa      	ldrb	r2, [r7, #3]
 80015fe:	6879      	ldr	r1, [r7, #4]
 8001600:	4613      	mov	r3, r2
 8001602:	011b      	lsls	r3, r3, #4
 8001604:	1a9b      	subs	r3, r3, r2
 8001606:	009b      	lsls	r3, r3, #2
 8001608:	440b      	add	r3, r1
 800160a:	3344      	adds	r3, #68	@ 0x44
 800160c:	2200      	movs	r2, #0
 800160e:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	799b      	ldrb	r3, [r3, #6]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d00a      	beq.n	800162e <HCD_HC_IN_IRQHandler+0xc2a>
 8001618:	78fa      	ldrb	r2, [r7, #3]
 800161a:	6879      	ldr	r1, [r7, #4]
 800161c:	4613      	mov	r3, r2
 800161e:	011b      	lsls	r3, r3, #4
 8001620:	1a9b      	subs	r3, r3, r2
 8001622:	009b      	lsls	r3, r3, #2
 8001624:	440b      	add	r3, r1
 8001626:	331b      	adds	r3, #27
 8001628:	781b      	ldrb	r3, [r3, #0]
 800162a:	2b01      	cmp	r3, #1
 800162c:	d110      	bne.n	8001650 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 800162e:	78fa      	ldrb	r2, [r7, #3]
 8001630:	6879      	ldr	r1, [r7, #4]
 8001632:	4613      	mov	r3, r2
 8001634:	011b      	lsls	r3, r3, #4
 8001636:	1a9b      	subs	r3, r3, r2
 8001638:	009b      	lsls	r3, r3, #2
 800163a:	440b      	add	r3, r1
 800163c:	334d      	adds	r3, #77	@ 0x4d
 800163e:	2204      	movs	r2, #4
 8001640:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	78fa      	ldrb	r2, [r7, #3]
 8001648:	4611      	mov	r1, r2
 800164a:	4618      	mov	r0, r3
 800164c:	f000 ffbe 	bl	80025cc <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8001650:	78fa      	ldrb	r2, [r7, #3]
 8001652:	6879      	ldr	r1, [r7, #4]
 8001654:	4613      	mov	r3, r2
 8001656:	011b      	lsls	r3, r3, #4
 8001658:	1a9b      	subs	r3, r3, r2
 800165a:	009b      	lsls	r3, r3, #2
 800165c:	440b      	add	r3, r1
 800165e:	331b      	adds	r3, #27
 8001660:	781b      	ldrb	r3, [r3, #0]
 8001662:	2b01      	cmp	r3, #1
 8001664:	d129      	bne.n	80016ba <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8001666:	78fa      	ldrb	r2, [r7, #3]
 8001668:	6879      	ldr	r1, [r7, #4]
 800166a:	4613      	mov	r3, r2
 800166c:	011b      	lsls	r3, r3, #4
 800166e:	1a9b      	subs	r3, r3, r2
 8001670:	009b      	lsls	r3, r3, #2
 8001672:	440b      	add	r3, r1
 8001674:	331b      	adds	r3, #27
 8001676:	2200      	movs	r2, #0
 8001678:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800167a:	78fb      	ldrb	r3, [r7, #3]
 800167c:	015a      	lsls	r2, r3, #5
 800167e:	693b      	ldr	r3, [r7, #16]
 8001680:	4413      	add	r3, r2
 8001682:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	78fa      	ldrb	r2, [r7, #3]
 800168a:	0151      	lsls	r1, r2, #5
 800168c:	693a      	ldr	r2, [r7, #16]
 800168e:	440a      	add	r2, r1
 8001690:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8001694:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001698:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 800169a:	78fb      	ldrb	r3, [r7, #3]
 800169c:	015a      	lsls	r2, r3, #5
 800169e:	693b      	ldr	r3, [r7, #16]
 80016a0:	4413      	add	r3, r2
 80016a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80016a6:	68db      	ldr	r3, [r3, #12]
 80016a8:	78fa      	ldrb	r2, [r7, #3]
 80016aa:	0151      	lsls	r1, r2, #5
 80016ac:	693a      	ldr	r2, [r7, #16]
 80016ae:	440a      	add	r2, r1
 80016b0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80016b4:	f043 0320 	orr.w	r3, r3, #32
 80016b8:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80016ba:	78fb      	ldrb	r3, [r7, #3]
 80016bc:	015a      	lsls	r2, r3, #5
 80016be:	693b      	ldr	r3, [r7, #16]
 80016c0:	4413      	add	r3, r2
 80016c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80016c6:	461a      	mov	r2, r3
 80016c8:	2310      	movs	r3, #16
 80016ca:	6093      	str	r3, [r2, #8]
 80016cc:	e000      	b.n	80016d0 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 80016ce:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 80016d0:	3718      	adds	r7, #24
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}

080016d6 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80016d6:	b580      	push	{r7, lr}
 80016d8:	b086      	sub	sp, #24
 80016da:	af00      	add	r7, sp, #0
 80016dc:	6078      	str	r0, [r7, #4]
 80016de:	460b      	mov	r3, r1
 80016e0:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	78fa      	ldrb	r2, [r7, #3]
 80016f2:	4611      	mov	r1, r2
 80016f4:	4618      	mov	r0, r3
 80016f6:	f000 feec 	bl	80024d2 <USB_ReadChInterrupts>
 80016fa:	4603      	mov	r3, r0
 80016fc:	f003 0304 	and.w	r3, r3, #4
 8001700:	2b04      	cmp	r3, #4
 8001702:	d11b      	bne.n	800173c <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8001704:	78fb      	ldrb	r3, [r7, #3]
 8001706:	015a      	lsls	r2, r3, #5
 8001708:	693b      	ldr	r3, [r7, #16]
 800170a:	4413      	add	r3, r2
 800170c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001710:	461a      	mov	r2, r3
 8001712:	2304      	movs	r3, #4
 8001714:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8001716:	78fa      	ldrb	r2, [r7, #3]
 8001718:	6879      	ldr	r1, [r7, #4]
 800171a:	4613      	mov	r3, r2
 800171c:	011b      	lsls	r3, r3, #4
 800171e:	1a9b      	subs	r3, r3, r2
 8001720:	009b      	lsls	r3, r3, #2
 8001722:	440b      	add	r3, r1
 8001724:	334d      	adds	r3, #77	@ 0x4d
 8001726:	2207      	movs	r2, #7
 8001728:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	78fa      	ldrb	r2, [r7, #3]
 8001730:	4611      	mov	r1, r2
 8001732:	4618      	mov	r0, r3
 8001734:	f000 ff4a 	bl	80025cc <USB_HC_Halt>
 8001738:	f000 bc89 	b.w	800204e <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	78fa      	ldrb	r2, [r7, #3]
 8001742:	4611      	mov	r1, r2
 8001744:	4618      	mov	r0, r3
 8001746:	f000 fec4 	bl	80024d2 <USB_ReadChInterrupts>
 800174a:	4603      	mov	r3, r0
 800174c:	f003 0320 	and.w	r3, r3, #32
 8001750:	2b20      	cmp	r3, #32
 8001752:	f040 8082 	bne.w	800185a <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8001756:	78fb      	ldrb	r3, [r7, #3]
 8001758:	015a      	lsls	r2, r3, #5
 800175a:	693b      	ldr	r3, [r7, #16]
 800175c:	4413      	add	r3, r2
 800175e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001762:	461a      	mov	r2, r3
 8001764:	2320      	movs	r3, #32
 8001766:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8001768:	78fa      	ldrb	r2, [r7, #3]
 800176a:	6879      	ldr	r1, [r7, #4]
 800176c:	4613      	mov	r3, r2
 800176e:	011b      	lsls	r3, r3, #4
 8001770:	1a9b      	subs	r3, r3, r2
 8001772:	009b      	lsls	r3, r3, #2
 8001774:	440b      	add	r3, r1
 8001776:	3319      	adds	r3, #25
 8001778:	781b      	ldrb	r3, [r3, #0]
 800177a:	2b01      	cmp	r3, #1
 800177c:	d124      	bne.n	80017c8 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 800177e:	78fa      	ldrb	r2, [r7, #3]
 8001780:	6879      	ldr	r1, [r7, #4]
 8001782:	4613      	mov	r3, r2
 8001784:	011b      	lsls	r3, r3, #4
 8001786:	1a9b      	subs	r3, r3, r2
 8001788:	009b      	lsls	r3, r3, #2
 800178a:	440b      	add	r3, r1
 800178c:	3319      	adds	r3, #25
 800178e:	2200      	movs	r2, #0
 8001790:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8001792:	78fa      	ldrb	r2, [r7, #3]
 8001794:	6879      	ldr	r1, [r7, #4]
 8001796:	4613      	mov	r3, r2
 8001798:	011b      	lsls	r3, r3, #4
 800179a:	1a9b      	subs	r3, r3, r2
 800179c:	009b      	lsls	r3, r3, #2
 800179e:	440b      	add	r3, r1
 80017a0:	334c      	adds	r3, #76	@ 0x4c
 80017a2:	2202      	movs	r2, #2
 80017a4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80017a6:	78fa      	ldrb	r2, [r7, #3]
 80017a8:	6879      	ldr	r1, [r7, #4]
 80017aa:	4613      	mov	r3, r2
 80017ac:	011b      	lsls	r3, r3, #4
 80017ae:	1a9b      	subs	r3, r3, r2
 80017b0:	009b      	lsls	r3, r3, #2
 80017b2:	440b      	add	r3, r1
 80017b4:	334d      	adds	r3, #77	@ 0x4d
 80017b6:	2203      	movs	r2, #3
 80017b8:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	78fa      	ldrb	r2, [r7, #3]
 80017c0:	4611      	mov	r1, r2
 80017c2:	4618      	mov	r0, r3
 80017c4:	f000 ff02 	bl	80025cc <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 80017c8:	78fa      	ldrb	r2, [r7, #3]
 80017ca:	6879      	ldr	r1, [r7, #4]
 80017cc:	4613      	mov	r3, r2
 80017ce:	011b      	lsls	r3, r3, #4
 80017d0:	1a9b      	subs	r3, r3, r2
 80017d2:	009b      	lsls	r3, r3, #2
 80017d4:	440b      	add	r3, r1
 80017d6:	331a      	adds	r3, #26
 80017d8:	781b      	ldrb	r3, [r3, #0]
 80017da:	2b01      	cmp	r3, #1
 80017dc:	f040 8437 	bne.w	800204e <HCD_HC_OUT_IRQHandler+0x978>
 80017e0:	78fa      	ldrb	r2, [r7, #3]
 80017e2:	6879      	ldr	r1, [r7, #4]
 80017e4:	4613      	mov	r3, r2
 80017e6:	011b      	lsls	r3, r3, #4
 80017e8:	1a9b      	subs	r3, r3, r2
 80017ea:	009b      	lsls	r3, r3, #2
 80017ec:	440b      	add	r3, r1
 80017ee:	331b      	adds	r3, #27
 80017f0:	781b      	ldrb	r3, [r3, #0]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	f040 842b 	bne.w	800204e <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 80017f8:	78fa      	ldrb	r2, [r7, #3]
 80017fa:	6879      	ldr	r1, [r7, #4]
 80017fc:	4613      	mov	r3, r2
 80017fe:	011b      	lsls	r3, r3, #4
 8001800:	1a9b      	subs	r3, r3, r2
 8001802:	009b      	lsls	r3, r3, #2
 8001804:	440b      	add	r3, r1
 8001806:	3326      	adds	r3, #38	@ 0x26
 8001808:	781b      	ldrb	r3, [r3, #0]
 800180a:	2b01      	cmp	r3, #1
 800180c:	d009      	beq.n	8001822 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 800180e:	78fa      	ldrb	r2, [r7, #3]
 8001810:	6879      	ldr	r1, [r7, #4]
 8001812:	4613      	mov	r3, r2
 8001814:	011b      	lsls	r3, r3, #4
 8001816:	1a9b      	subs	r3, r3, r2
 8001818:	009b      	lsls	r3, r3, #2
 800181a:	440b      	add	r3, r1
 800181c:	331b      	adds	r3, #27
 800181e:	2201      	movs	r2, #1
 8001820:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8001822:	78fa      	ldrb	r2, [r7, #3]
 8001824:	6879      	ldr	r1, [r7, #4]
 8001826:	4613      	mov	r3, r2
 8001828:	011b      	lsls	r3, r3, #4
 800182a:	1a9b      	subs	r3, r3, r2
 800182c:	009b      	lsls	r3, r3, #2
 800182e:	440b      	add	r3, r1
 8001830:	334d      	adds	r3, #77	@ 0x4d
 8001832:	2203      	movs	r2, #3
 8001834:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	78fa      	ldrb	r2, [r7, #3]
 800183c:	4611      	mov	r1, r2
 800183e:	4618      	mov	r0, r3
 8001840:	f000 fec4 	bl	80025cc <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8001844:	78fa      	ldrb	r2, [r7, #3]
 8001846:	6879      	ldr	r1, [r7, #4]
 8001848:	4613      	mov	r3, r2
 800184a:	011b      	lsls	r3, r3, #4
 800184c:	1a9b      	subs	r3, r3, r2
 800184e:	009b      	lsls	r3, r3, #2
 8001850:	440b      	add	r3, r1
 8001852:	3344      	adds	r3, #68	@ 0x44
 8001854:	2200      	movs	r2, #0
 8001856:	601a      	str	r2, [r3, #0]
 8001858:	e3f9      	b.n	800204e <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	78fa      	ldrb	r2, [r7, #3]
 8001860:	4611      	mov	r1, r2
 8001862:	4618      	mov	r0, r3
 8001864:	f000 fe35 	bl	80024d2 <USB_ReadChInterrupts>
 8001868:	4603      	mov	r3, r0
 800186a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800186e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001872:	d111      	bne.n	8001898 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8001874:	78fb      	ldrb	r3, [r7, #3]
 8001876:	015a      	lsls	r2, r3, #5
 8001878:	693b      	ldr	r3, [r7, #16]
 800187a:	4413      	add	r3, r2
 800187c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001880:	461a      	mov	r2, r3
 8001882:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001886:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	78fa      	ldrb	r2, [r7, #3]
 800188e:	4611      	mov	r1, r2
 8001890:	4618      	mov	r0, r3
 8001892:	f000 fe9b 	bl	80025cc <USB_HC_Halt>
 8001896:	e3da      	b.n	800204e <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	78fa      	ldrb	r2, [r7, #3]
 800189e:	4611      	mov	r1, r2
 80018a0:	4618      	mov	r0, r3
 80018a2:	f000 fe16 	bl	80024d2 <USB_ReadChInterrupts>
 80018a6:	4603      	mov	r3, r0
 80018a8:	f003 0301 	and.w	r3, r3, #1
 80018ac:	2b01      	cmp	r3, #1
 80018ae:	d168      	bne.n	8001982 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 80018b0:	78fa      	ldrb	r2, [r7, #3]
 80018b2:	6879      	ldr	r1, [r7, #4]
 80018b4:	4613      	mov	r3, r2
 80018b6:	011b      	lsls	r3, r3, #4
 80018b8:	1a9b      	subs	r3, r3, r2
 80018ba:	009b      	lsls	r3, r3, #2
 80018bc:	440b      	add	r3, r1
 80018be:	3344      	adds	r3, #68	@ 0x44
 80018c0:	2200      	movs	r2, #0
 80018c2:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	78fa      	ldrb	r2, [r7, #3]
 80018ca:	4611      	mov	r1, r2
 80018cc:	4618      	mov	r0, r3
 80018ce:	f000 fe00 	bl	80024d2 <USB_ReadChInterrupts>
 80018d2:	4603      	mov	r3, r0
 80018d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80018d8:	2b40      	cmp	r3, #64	@ 0x40
 80018da:	d112      	bne.n	8001902 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80018dc:	78fa      	ldrb	r2, [r7, #3]
 80018de:	6879      	ldr	r1, [r7, #4]
 80018e0:	4613      	mov	r3, r2
 80018e2:	011b      	lsls	r3, r3, #4
 80018e4:	1a9b      	subs	r3, r3, r2
 80018e6:	009b      	lsls	r3, r3, #2
 80018e8:	440b      	add	r3, r1
 80018ea:	3319      	adds	r3, #25
 80018ec:	2201      	movs	r2, #1
 80018ee:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80018f0:	78fb      	ldrb	r3, [r7, #3]
 80018f2:	015a      	lsls	r2, r3, #5
 80018f4:	693b      	ldr	r3, [r7, #16]
 80018f6:	4413      	add	r3, r2
 80018f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80018fc:	461a      	mov	r2, r3
 80018fe:	2340      	movs	r3, #64	@ 0x40
 8001900:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8001902:	78fa      	ldrb	r2, [r7, #3]
 8001904:	6879      	ldr	r1, [r7, #4]
 8001906:	4613      	mov	r3, r2
 8001908:	011b      	lsls	r3, r3, #4
 800190a:	1a9b      	subs	r3, r3, r2
 800190c:	009b      	lsls	r3, r3, #2
 800190e:	440b      	add	r3, r1
 8001910:	331b      	adds	r3, #27
 8001912:	781b      	ldrb	r3, [r3, #0]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d019      	beq.n	800194c <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8001918:	78fa      	ldrb	r2, [r7, #3]
 800191a:	6879      	ldr	r1, [r7, #4]
 800191c:	4613      	mov	r3, r2
 800191e:	011b      	lsls	r3, r3, #4
 8001920:	1a9b      	subs	r3, r3, r2
 8001922:	009b      	lsls	r3, r3, #2
 8001924:	440b      	add	r3, r1
 8001926:	331b      	adds	r3, #27
 8001928:	2200      	movs	r2, #0
 800192a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800192c:	78fb      	ldrb	r3, [r7, #3]
 800192e:	015a      	lsls	r2, r3, #5
 8001930:	693b      	ldr	r3, [r7, #16]
 8001932:	4413      	add	r3, r2
 8001934:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	78fa      	ldrb	r2, [r7, #3]
 800193c:	0151      	lsls	r1, r2, #5
 800193e:	693a      	ldr	r2, [r7, #16]
 8001940:	440a      	add	r2, r1
 8001942:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8001946:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800194a:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800194c:	78fb      	ldrb	r3, [r7, #3]
 800194e:	015a      	lsls	r2, r3, #5
 8001950:	693b      	ldr	r3, [r7, #16]
 8001952:	4413      	add	r3, r2
 8001954:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001958:	461a      	mov	r2, r3
 800195a:	2301      	movs	r3, #1
 800195c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 800195e:	78fa      	ldrb	r2, [r7, #3]
 8001960:	6879      	ldr	r1, [r7, #4]
 8001962:	4613      	mov	r3, r2
 8001964:	011b      	lsls	r3, r3, #4
 8001966:	1a9b      	subs	r3, r3, r2
 8001968:	009b      	lsls	r3, r3, #2
 800196a:	440b      	add	r3, r1
 800196c:	334d      	adds	r3, #77	@ 0x4d
 800196e:	2201      	movs	r2, #1
 8001970:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	78fa      	ldrb	r2, [r7, #3]
 8001978:	4611      	mov	r1, r2
 800197a:	4618      	mov	r0, r3
 800197c:	f000 fe26 	bl	80025cc <USB_HC_Halt>
 8001980:	e365      	b.n	800204e <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	78fa      	ldrb	r2, [r7, #3]
 8001988:	4611      	mov	r1, r2
 800198a:	4618      	mov	r0, r3
 800198c:	f000 fda1 	bl	80024d2 <USB_ReadChInterrupts>
 8001990:	4603      	mov	r3, r0
 8001992:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001996:	2b40      	cmp	r3, #64	@ 0x40
 8001998:	d139      	bne.n	8001a0e <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 800199a:	78fa      	ldrb	r2, [r7, #3]
 800199c:	6879      	ldr	r1, [r7, #4]
 800199e:	4613      	mov	r3, r2
 80019a0:	011b      	lsls	r3, r3, #4
 80019a2:	1a9b      	subs	r3, r3, r2
 80019a4:	009b      	lsls	r3, r3, #2
 80019a6:	440b      	add	r3, r1
 80019a8:	334d      	adds	r3, #77	@ 0x4d
 80019aa:	2205      	movs	r2, #5
 80019ac:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80019ae:	78fa      	ldrb	r2, [r7, #3]
 80019b0:	6879      	ldr	r1, [r7, #4]
 80019b2:	4613      	mov	r3, r2
 80019b4:	011b      	lsls	r3, r3, #4
 80019b6:	1a9b      	subs	r3, r3, r2
 80019b8:	009b      	lsls	r3, r3, #2
 80019ba:	440b      	add	r3, r1
 80019bc:	331a      	adds	r3, #26
 80019be:	781b      	ldrb	r3, [r3, #0]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d109      	bne.n	80019d8 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80019c4:	78fa      	ldrb	r2, [r7, #3]
 80019c6:	6879      	ldr	r1, [r7, #4]
 80019c8:	4613      	mov	r3, r2
 80019ca:	011b      	lsls	r3, r3, #4
 80019cc:	1a9b      	subs	r3, r3, r2
 80019ce:	009b      	lsls	r3, r3, #2
 80019d0:	440b      	add	r3, r1
 80019d2:	3319      	adds	r3, #25
 80019d4:	2201      	movs	r2, #1
 80019d6:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 80019d8:	78fa      	ldrb	r2, [r7, #3]
 80019da:	6879      	ldr	r1, [r7, #4]
 80019dc:	4613      	mov	r3, r2
 80019de:	011b      	lsls	r3, r3, #4
 80019e0:	1a9b      	subs	r3, r3, r2
 80019e2:	009b      	lsls	r3, r3, #2
 80019e4:	440b      	add	r3, r1
 80019e6:	3344      	adds	r3, #68	@ 0x44
 80019e8:	2200      	movs	r2, #0
 80019ea:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	78fa      	ldrb	r2, [r7, #3]
 80019f2:	4611      	mov	r1, r2
 80019f4:	4618      	mov	r0, r3
 80019f6:	f000 fde9 	bl	80025cc <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80019fa:	78fb      	ldrb	r3, [r7, #3]
 80019fc:	015a      	lsls	r2, r3, #5
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	4413      	add	r3, r2
 8001a02:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001a06:	461a      	mov	r2, r3
 8001a08:	2340      	movs	r3, #64	@ 0x40
 8001a0a:	6093      	str	r3, [r2, #8]
 8001a0c:	e31f      	b.n	800204e <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	78fa      	ldrb	r2, [r7, #3]
 8001a14:	4611      	mov	r1, r2
 8001a16:	4618      	mov	r0, r3
 8001a18:	f000 fd5b 	bl	80024d2 <USB_ReadChInterrupts>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	f003 0308 	and.w	r3, r3, #8
 8001a22:	2b08      	cmp	r3, #8
 8001a24:	d11a      	bne.n	8001a5c <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8001a26:	78fb      	ldrb	r3, [r7, #3]
 8001a28:	015a      	lsls	r2, r3, #5
 8001a2a:	693b      	ldr	r3, [r7, #16]
 8001a2c:	4413      	add	r3, r2
 8001a2e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001a32:	461a      	mov	r2, r3
 8001a34:	2308      	movs	r3, #8
 8001a36:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8001a38:	78fa      	ldrb	r2, [r7, #3]
 8001a3a:	6879      	ldr	r1, [r7, #4]
 8001a3c:	4613      	mov	r3, r2
 8001a3e:	011b      	lsls	r3, r3, #4
 8001a40:	1a9b      	subs	r3, r3, r2
 8001a42:	009b      	lsls	r3, r3, #2
 8001a44:	440b      	add	r3, r1
 8001a46:	334d      	adds	r3, #77	@ 0x4d
 8001a48:	2206      	movs	r2, #6
 8001a4a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	78fa      	ldrb	r2, [r7, #3]
 8001a52:	4611      	mov	r1, r2
 8001a54:	4618      	mov	r0, r3
 8001a56:	f000 fdb9 	bl	80025cc <USB_HC_Halt>
 8001a5a:	e2f8      	b.n	800204e <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	78fa      	ldrb	r2, [r7, #3]
 8001a62:	4611      	mov	r1, r2
 8001a64:	4618      	mov	r0, r3
 8001a66:	f000 fd34 	bl	80024d2 <USB_ReadChInterrupts>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	f003 0310 	and.w	r3, r3, #16
 8001a70:	2b10      	cmp	r3, #16
 8001a72:	d144      	bne.n	8001afe <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8001a74:	78fa      	ldrb	r2, [r7, #3]
 8001a76:	6879      	ldr	r1, [r7, #4]
 8001a78:	4613      	mov	r3, r2
 8001a7a:	011b      	lsls	r3, r3, #4
 8001a7c:	1a9b      	subs	r3, r3, r2
 8001a7e:	009b      	lsls	r3, r3, #2
 8001a80:	440b      	add	r3, r1
 8001a82:	3344      	adds	r3, #68	@ 0x44
 8001a84:	2200      	movs	r2, #0
 8001a86:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8001a88:	78fa      	ldrb	r2, [r7, #3]
 8001a8a:	6879      	ldr	r1, [r7, #4]
 8001a8c:	4613      	mov	r3, r2
 8001a8e:	011b      	lsls	r3, r3, #4
 8001a90:	1a9b      	subs	r3, r3, r2
 8001a92:	009b      	lsls	r3, r3, #2
 8001a94:	440b      	add	r3, r1
 8001a96:	334d      	adds	r3, #77	@ 0x4d
 8001a98:	2204      	movs	r2, #4
 8001a9a:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8001a9c:	78fa      	ldrb	r2, [r7, #3]
 8001a9e:	6879      	ldr	r1, [r7, #4]
 8001aa0:	4613      	mov	r3, r2
 8001aa2:	011b      	lsls	r3, r3, #4
 8001aa4:	1a9b      	subs	r3, r3, r2
 8001aa6:	009b      	lsls	r3, r3, #2
 8001aa8:	440b      	add	r3, r1
 8001aaa:	3319      	adds	r3, #25
 8001aac:	781b      	ldrb	r3, [r3, #0]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d114      	bne.n	8001adc <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8001ab2:	78fa      	ldrb	r2, [r7, #3]
 8001ab4:	6879      	ldr	r1, [r7, #4]
 8001ab6:	4613      	mov	r3, r2
 8001ab8:	011b      	lsls	r3, r3, #4
 8001aba:	1a9b      	subs	r3, r3, r2
 8001abc:	009b      	lsls	r3, r3, #2
 8001abe:	440b      	add	r3, r1
 8001ac0:	3318      	adds	r3, #24
 8001ac2:	781b      	ldrb	r3, [r3, #0]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d109      	bne.n	8001adc <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8001ac8:	78fa      	ldrb	r2, [r7, #3]
 8001aca:	6879      	ldr	r1, [r7, #4]
 8001acc:	4613      	mov	r3, r2
 8001ace:	011b      	lsls	r3, r3, #4
 8001ad0:	1a9b      	subs	r3, r3, r2
 8001ad2:	009b      	lsls	r3, r3, #2
 8001ad4:	440b      	add	r3, r1
 8001ad6:	3319      	adds	r3, #25
 8001ad8:	2201      	movs	r2, #1
 8001ada:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	78fa      	ldrb	r2, [r7, #3]
 8001ae2:	4611      	mov	r1, r2
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f000 fd71 	bl	80025cc <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8001aea:	78fb      	ldrb	r3, [r7, #3]
 8001aec:	015a      	lsls	r2, r3, #5
 8001aee:	693b      	ldr	r3, [r7, #16]
 8001af0:	4413      	add	r3, r2
 8001af2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001af6:	461a      	mov	r2, r3
 8001af8:	2310      	movs	r3, #16
 8001afa:	6093      	str	r3, [r2, #8]
 8001afc:	e2a7      	b.n	800204e <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	78fa      	ldrb	r2, [r7, #3]
 8001b04:	4611      	mov	r1, r2
 8001b06:	4618      	mov	r0, r3
 8001b08:	f000 fce3 	bl	80024d2 <USB_ReadChInterrupts>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b12:	2b80      	cmp	r3, #128	@ 0x80
 8001b14:	f040 8083 	bne.w	8001c1e <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	799b      	ldrb	r3, [r3, #6]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d111      	bne.n	8001b44 <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8001b20:	78fa      	ldrb	r2, [r7, #3]
 8001b22:	6879      	ldr	r1, [r7, #4]
 8001b24:	4613      	mov	r3, r2
 8001b26:	011b      	lsls	r3, r3, #4
 8001b28:	1a9b      	subs	r3, r3, r2
 8001b2a:	009b      	lsls	r3, r3, #2
 8001b2c:	440b      	add	r3, r1
 8001b2e:	334d      	adds	r3, #77	@ 0x4d
 8001b30:	2207      	movs	r2, #7
 8001b32:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	78fa      	ldrb	r2, [r7, #3]
 8001b3a:	4611      	mov	r1, r2
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f000 fd45 	bl	80025cc <USB_HC_Halt>
 8001b42:	e062      	b.n	8001c0a <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8001b44:	78fa      	ldrb	r2, [r7, #3]
 8001b46:	6879      	ldr	r1, [r7, #4]
 8001b48:	4613      	mov	r3, r2
 8001b4a:	011b      	lsls	r3, r3, #4
 8001b4c:	1a9b      	subs	r3, r3, r2
 8001b4e:	009b      	lsls	r3, r3, #2
 8001b50:	440b      	add	r3, r1
 8001b52:	3344      	adds	r3, #68	@ 0x44
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	1c59      	adds	r1, r3, #1
 8001b58:	6878      	ldr	r0, [r7, #4]
 8001b5a:	4613      	mov	r3, r2
 8001b5c:	011b      	lsls	r3, r3, #4
 8001b5e:	1a9b      	subs	r3, r3, r2
 8001b60:	009b      	lsls	r3, r3, #2
 8001b62:	4403      	add	r3, r0
 8001b64:	3344      	adds	r3, #68	@ 0x44
 8001b66:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8001b68:	78fa      	ldrb	r2, [r7, #3]
 8001b6a:	6879      	ldr	r1, [r7, #4]
 8001b6c:	4613      	mov	r3, r2
 8001b6e:	011b      	lsls	r3, r3, #4
 8001b70:	1a9b      	subs	r3, r3, r2
 8001b72:	009b      	lsls	r3, r3, #2
 8001b74:	440b      	add	r3, r1
 8001b76:	3344      	adds	r3, #68	@ 0x44
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	2b02      	cmp	r3, #2
 8001b7c:	d922      	bls.n	8001bc4 <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8001b7e:	78fa      	ldrb	r2, [r7, #3]
 8001b80:	6879      	ldr	r1, [r7, #4]
 8001b82:	4613      	mov	r3, r2
 8001b84:	011b      	lsls	r3, r3, #4
 8001b86:	1a9b      	subs	r3, r3, r2
 8001b88:	009b      	lsls	r3, r3, #2
 8001b8a:	440b      	add	r3, r1
 8001b8c:	3344      	adds	r3, #68	@ 0x44
 8001b8e:	2200      	movs	r2, #0
 8001b90:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8001b92:	78fa      	ldrb	r2, [r7, #3]
 8001b94:	6879      	ldr	r1, [r7, #4]
 8001b96:	4613      	mov	r3, r2
 8001b98:	011b      	lsls	r3, r3, #4
 8001b9a:	1a9b      	subs	r3, r3, r2
 8001b9c:	009b      	lsls	r3, r3, #2
 8001b9e:	440b      	add	r3, r1
 8001ba0:	334c      	adds	r3, #76	@ 0x4c
 8001ba2:	2204      	movs	r2, #4
 8001ba4:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8001ba6:	78fa      	ldrb	r2, [r7, #3]
 8001ba8:	6879      	ldr	r1, [r7, #4]
 8001baa:	4613      	mov	r3, r2
 8001bac:	011b      	lsls	r3, r3, #4
 8001bae:	1a9b      	subs	r3, r3, r2
 8001bb0:	009b      	lsls	r3, r3, #2
 8001bb2:	440b      	add	r3, r1
 8001bb4:	334c      	adds	r3, #76	@ 0x4c
 8001bb6:	781a      	ldrb	r2, [r3, #0]
 8001bb8:	78fb      	ldrb	r3, [r7, #3]
 8001bba:	4619      	mov	r1, r3
 8001bbc:	6878      	ldr	r0, [r7, #4]
 8001bbe:	f000 ff80 	bl	8002ac2 <HAL_HCD_HC_NotifyURBChange_Callback>
 8001bc2:	e022      	b.n	8001c0a <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8001bc4:	78fa      	ldrb	r2, [r7, #3]
 8001bc6:	6879      	ldr	r1, [r7, #4]
 8001bc8:	4613      	mov	r3, r2
 8001bca:	011b      	lsls	r3, r3, #4
 8001bcc:	1a9b      	subs	r3, r3, r2
 8001bce:	009b      	lsls	r3, r3, #2
 8001bd0:	440b      	add	r3, r1
 8001bd2:	334c      	adds	r3, #76	@ 0x4c
 8001bd4:	2202      	movs	r2, #2
 8001bd6:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8001bd8:	78fb      	ldrb	r3, [r7, #3]
 8001bda:	015a      	lsls	r2, r3, #5
 8001bdc:	693b      	ldr	r3, [r7, #16]
 8001bde:	4413      	add	r3, r2
 8001be0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8001bee:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001bf6:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8001bf8:	78fb      	ldrb	r3, [r7, #3]
 8001bfa:	015a      	lsls	r2, r3, #5
 8001bfc:	693b      	ldr	r3, [r7, #16]
 8001bfe:	4413      	add	r3, r2
 8001c00:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001c04:	461a      	mov	r2, r3
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8001c0a:	78fb      	ldrb	r3, [r7, #3]
 8001c0c:	015a      	lsls	r2, r3, #5
 8001c0e:	693b      	ldr	r3, [r7, #16]
 8001c10:	4413      	add	r3, r2
 8001c12:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001c16:	461a      	mov	r2, r3
 8001c18:	2380      	movs	r3, #128	@ 0x80
 8001c1a:	6093      	str	r3, [r2, #8]
 8001c1c:	e217      	b.n	800204e <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	78fa      	ldrb	r2, [r7, #3]
 8001c24:	4611      	mov	r1, r2
 8001c26:	4618      	mov	r0, r3
 8001c28:	f000 fc53 	bl	80024d2 <USB_ReadChInterrupts>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c32:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001c36:	d11b      	bne.n	8001c70 <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8001c38:	78fa      	ldrb	r2, [r7, #3]
 8001c3a:	6879      	ldr	r1, [r7, #4]
 8001c3c:	4613      	mov	r3, r2
 8001c3e:	011b      	lsls	r3, r3, #4
 8001c40:	1a9b      	subs	r3, r3, r2
 8001c42:	009b      	lsls	r3, r3, #2
 8001c44:	440b      	add	r3, r1
 8001c46:	334d      	adds	r3, #77	@ 0x4d
 8001c48:	2209      	movs	r2, #9
 8001c4a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	78fa      	ldrb	r2, [r7, #3]
 8001c52:	4611      	mov	r1, r2
 8001c54:	4618      	mov	r0, r3
 8001c56:	f000 fcb9 	bl	80025cc <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8001c5a:	78fb      	ldrb	r3, [r7, #3]
 8001c5c:	015a      	lsls	r2, r3, #5
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	4413      	add	r3, r2
 8001c62:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001c66:	461a      	mov	r2, r3
 8001c68:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001c6c:	6093      	str	r3, [r2, #8]
 8001c6e:	e1ee      	b.n	800204e <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	78fa      	ldrb	r2, [r7, #3]
 8001c76:	4611      	mov	r1, r2
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f000 fc2a 	bl	80024d2 <USB_ReadChInterrupts>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	f003 0302 	and.w	r3, r3, #2
 8001c84:	2b02      	cmp	r3, #2
 8001c86:	f040 81df 	bne.w	8002048 <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8001c8a:	78fb      	ldrb	r3, [r7, #3]
 8001c8c:	015a      	lsls	r2, r3, #5
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	4413      	add	r3, r2
 8001c92:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001c96:	461a      	mov	r2, r3
 8001c98:	2302      	movs	r3, #2
 8001c9a:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8001c9c:	78fa      	ldrb	r2, [r7, #3]
 8001c9e:	6879      	ldr	r1, [r7, #4]
 8001ca0:	4613      	mov	r3, r2
 8001ca2:	011b      	lsls	r3, r3, #4
 8001ca4:	1a9b      	subs	r3, r3, r2
 8001ca6:	009b      	lsls	r3, r3, #2
 8001ca8:	440b      	add	r3, r1
 8001caa:	334d      	adds	r3, #77	@ 0x4d
 8001cac:	781b      	ldrb	r3, [r3, #0]
 8001cae:	2b01      	cmp	r3, #1
 8001cb0:	f040 8093 	bne.w	8001dda <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8001cb4:	78fa      	ldrb	r2, [r7, #3]
 8001cb6:	6879      	ldr	r1, [r7, #4]
 8001cb8:	4613      	mov	r3, r2
 8001cba:	011b      	lsls	r3, r3, #4
 8001cbc:	1a9b      	subs	r3, r3, r2
 8001cbe:	009b      	lsls	r3, r3, #2
 8001cc0:	440b      	add	r3, r1
 8001cc2:	334d      	adds	r3, #77	@ 0x4d
 8001cc4:	2202      	movs	r2, #2
 8001cc6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8001cc8:	78fa      	ldrb	r2, [r7, #3]
 8001cca:	6879      	ldr	r1, [r7, #4]
 8001ccc:	4613      	mov	r3, r2
 8001cce:	011b      	lsls	r3, r3, #4
 8001cd0:	1a9b      	subs	r3, r3, r2
 8001cd2:	009b      	lsls	r3, r3, #2
 8001cd4:	440b      	add	r3, r1
 8001cd6:	334c      	adds	r3, #76	@ 0x4c
 8001cd8:	2201      	movs	r2, #1
 8001cda:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8001cdc:	78fa      	ldrb	r2, [r7, #3]
 8001cde:	6879      	ldr	r1, [r7, #4]
 8001ce0:	4613      	mov	r3, r2
 8001ce2:	011b      	lsls	r3, r3, #4
 8001ce4:	1a9b      	subs	r3, r3, r2
 8001ce6:	009b      	lsls	r3, r3, #2
 8001ce8:	440b      	add	r3, r1
 8001cea:	3326      	adds	r3, #38	@ 0x26
 8001cec:	781b      	ldrb	r3, [r3, #0]
 8001cee:	2b02      	cmp	r3, #2
 8001cf0:	d00b      	beq.n	8001d0a <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8001cf2:	78fa      	ldrb	r2, [r7, #3]
 8001cf4:	6879      	ldr	r1, [r7, #4]
 8001cf6:	4613      	mov	r3, r2
 8001cf8:	011b      	lsls	r3, r3, #4
 8001cfa:	1a9b      	subs	r3, r3, r2
 8001cfc:	009b      	lsls	r3, r3, #2
 8001cfe:	440b      	add	r3, r1
 8001d00:	3326      	adds	r3, #38	@ 0x26
 8001d02:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8001d04:	2b03      	cmp	r3, #3
 8001d06:	f040 8190 	bne.w	800202a <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	799b      	ldrb	r3, [r3, #6]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d115      	bne.n	8001d3e <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8001d12:	78fa      	ldrb	r2, [r7, #3]
 8001d14:	6879      	ldr	r1, [r7, #4]
 8001d16:	4613      	mov	r3, r2
 8001d18:	011b      	lsls	r3, r3, #4
 8001d1a:	1a9b      	subs	r3, r3, r2
 8001d1c:	009b      	lsls	r3, r3, #2
 8001d1e:	440b      	add	r3, r1
 8001d20:	333d      	adds	r3, #61	@ 0x3d
 8001d22:	781b      	ldrb	r3, [r3, #0]
 8001d24:	78fa      	ldrb	r2, [r7, #3]
 8001d26:	f083 0301 	eor.w	r3, r3, #1
 8001d2a:	b2d8      	uxtb	r0, r3
 8001d2c:	6879      	ldr	r1, [r7, #4]
 8001d2e:	4613      	mov	r3, r2
 8001d30:	011b      	lsls	r3, r3, #4
 8001d32:	1a9b      	subs	r3, r3, r2
 8001d34:	009b      	lsls	r3, r3, #2
 8001d36:	440b      	add	r3, r1
 8001d38:	333d      	adds	r3, #61	@ 0x3d
 8001d3a:	4602      	mov	r2, r0
 8001d3c:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	799b      	ldrb	r3, [r3, #6]
 8001d42:	2b01      	cmp	r3, #1
 8001d44:	f040 8171 	bne.w	800202a <HCD_HC_OUT_IRQHandler+0x954>
 8001d48:	78fa      	ldrb	r2, [r7, #3]
 8001d4a:	6879      	ldr	r1, [r7, #4]
 8001d4c:	4613      	mov	r3, r2
 8001d4e:	011b      	lsls	r3, r3, #4
 8001d50:	1a9b      	subs	r3, r3, r2
 8001d52:	009b      	lsls	r3, r3, #2
 8001d54:	440b      	add	r3, r1
 8001d56:	3334      	adds	r3, #52	@ 0x34
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	f000 8165 	beq.w	800202a <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8001d60:	78fa      	ldrb	r2, [r7, #3]
 8001d62:	6879      	ldr	r1, [r7, #4]
 8001d64:	4613      	mov	r3, r2
 8001d66:	011b      	lsls	r3, r3, #4
 8001d68:	1a9b      	subs	r3, r3, r2
 8001d6a:	009b      	lsls	r3, r3, #2
 8001d6c:	440b      	add	r3, r1
 8001d6e:	3334      	adds	r3, #52	@ 0x34
 8001d70:	6819      	ldr	r1, [r3, #0]
 8001d72:	78fa      	ldrb	r2, [r7, #3]
 8001d74:	6878      	ldr	r0, [r7, #4]
 8001d76:	4613      	mov	r3, r2
 8001d78:	011b      	lsls	r3, r3, #4
 8001d7a:	1a9b      	subs	r3, r3, r2
 8001d7c:	009b      	lsls	r3, r3, #2
 8001d7e:	4403      	add	r3, r0
 8001d80:	3328      	adds	r3, #40	@ 0x28
 8001d82:	881b      	ldrh	r3, [r3, #0]
 8001d84:	440b      	add	r3, r1
 8001d86:	1e59      	subs	r1, r3, #1
 8001d88:	78fa      	ldrb	r2, [r7, #3]
 8001d8a:	6878      	ldr	r0, [r7, #4]
 8001d8c:	4613      	mov	r3, r2
 8001d8e:	011b      	lsls	r3, r3, #4
 8001d90:	1a9b      	subs	r3, r3, r2
 8001d92:	009b      	lsls	r3, r3, #2
 8001d94:	4403      	add	r3, r0
 8001d96:	3328      	adds	r3, #40	@ 0x28
 8001d98:	881b      	ldrh	r3, [r3, #0]
 8001d9a:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d9e:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	f003 0301 	and.w	r3, r3, #1
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	f000 813f 	beq.w	800202a <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8001dac:	78fa      	ldrb	r2, [r7, #3]
 8001dae:	6879      	ldr	r1, [r7, #4]
 8001db0:	4613      	mov	r3, r2
 8001db2:	011b      	lsls	r3, r3, #4
 8001db4:	1a9b      	subs	r3, r3, r2
 8001db6:	009b      	lsls	r3, r3, #2
 8001db8:	440b      	add	r3, r1
 8001dba:	333d      	adds	r3, #61	@ 0x3d
 8001dbc:	781b      	ldrb	r3, [r3, #0]
 8001dbe:	78fa      	ldrb	r2, [r7, #3]
 8001dc0:	f083 0301 	eor.w	r3, r3, #1
 8001dc4:	b2d8      	uxtb	r0, r3
 8001dc6:	6879      	ldr	r1, [r7, #4]
 8001dc8:	4613      	mov	r3, r2
 8001dca:	011b      	lsls	r3, r3, #4
 8001dcc:	1a9b      	subs	r3, r3, r2
 8001dce:	009b      	lsls	r3, r3, #2
 8001dd0:	440b      	add	r3, r1
 8001dd2:	333d      	adds	r3, #61	@ 0x3d
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	701a      	strb	r2, [r3, #0]
 8001dd8:	e127      	b.n	800202a <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8001dda:	78fa      	ldrb	r2, [r7, #3]
 8001ddc:	6879      	ldr	r1, [r7, #4]
 8001dde:	4613      	mov	r3, r2
 8001de0:	011b      	lsls	r3, r3, #4
 8001de2:	1a9b      	subs	r3, r3, r2
 8001de4:	009b      	lsls	r3, r3, #2
 8001de6:	440b      	add	r3, r1
 8001de8:	334d      	adds	r3, #77	@ 0x4d
 8001dea:	781b      	ldrb	r3, [r3, #0]
 8001dec:	2b03      	cmp	r3, #3
 8001dee:	d120      	bne.n	8001e32 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8001df0:	78fa      	ldrb	r2, [r7, #3]
 8001df2:	6879      	ldr	r1, [r7, #4]
 8001df4:	4613      	mov	r3, r2
 8001df6:	011b      	lsls	r3, r3, #4
 8001df8:	1a9b      	subs	r3, r3, r2
 8001dfa:	009b      	lsls	r3, r3, #2
 8001dfc:	440b      	add	r3, r1
 8001dfe:	334d      	adds	r3, #77	@ 0x4d
 8001e00:	2202      	movs	r2, #2
 8001e02:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8001e04:	78fa      	ldrb	r2, [r7, #3]
 8001e06:	6879      	ldr	r1, [r7, #4]
 8001e08:	4613      	mov	r3, r2
 8001e0a:	011b      	lsls	r3, r3, #4
 8001e0c:	1a9b      	subs	r3, r3, r2
 8001e0e:	009b      	lsls	r3, r3, #2
 8001e10:	440b      	add	r3, r1
 8001e12:	331b      	adds	r3, #27
 8001e14:	781b      	ldrb	r3, [r3, #0]
 8001e16:	2b01      	cmp	r3, #1
 8001e18:	f040 8107 	bne.w	800202a <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8001e1c:	78fa      	ldrb	r2, [r7, #3]
 8001e1e:	6879      	ldr	r1, [r7, #4]
 8001e20:	4613      	mov	r3, r2
 8001e22:	011b      	lsls	r3, r3, #4
 8001e24:	1a9b      	subs	r3, r3, r2
 8001e26:	009b      	lsls	r3, r3, #2
 8001e28:	440b      	add	r3, r1
 8001e2a:	334c      	adds	r3, #76	@ 0x4c
 8001e2c:	2202      	movs	r2, #2
 8001e2e:	701a      	strb	r2, [r3, #0]
 8001e30:	e0fb      	b.n	800202a <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8001e32:	78fa      	ldrb	r2, [r7, #3]
 8001e34:	6879      	ldr	r1, [r7, #4]
 8001e36:	4613      	mov	r3, r2
 8001e38:	011b      	lsls	r3, r3, #4
 8001e3a:	1a9b      	subs	r3, r3, r2
 8001e3c:	009b      	lsls	r3, r3, #2
 8001e3e:	440b      	add	r3, r1
 8001e40:	334d      	adds	r3, #77	@ 0x4d
 8001e42:	781b      	ldrb	r3, [r3, #0]
 8001e44:	2b04      	cmp	r3, #4
 8001e46:	d13a      	bne.n	8001ebe <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8001e48:	78fa      	ldrb	r2, [r7, #3]
 8001e4a:	6879      	ldr	r1, [r7, #4]
 8001e4c:	4613      	mov	r3, r2
 8001e4e:	011b      	lsls	r3, r3, #4
 8001e50:	1a9b      	subs	r3, r3, r2
 8001e52:	009b      	lsls	r3, r3, #2
 8001e54:	440b      	add	r3, r1
 8001e56:	334d      	adds	r3, #77	@ 0x4d
 8001e58:	2202      	movs	r2, #2
 8001e5a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8001e5c:	78fa      	ldrb	r2, [r7, #3]
 8001e5e:	6879      	ldr	r1, [r7, #4]
 8001e60:	4613      	mov	r3, r2
 8001e62:	011b      	lsls	r3, r3, #4
 8001e64:	1a9b      	subs	r3, r3, r2
 8001e66:	009b      	lsls	r3, r3, #2
 8001e68:	440b      	add	r3, r1
 8001e6a:	334c      	adds	r3, #76	@ 0x4c
 8001e6c:	2202      	movs	r2, #2
 8001e6e:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8001e70:	78fa      	ldrb	r2, [r7, #3]
 8001e72:	6879      	ldr	r1, [r7, #4]
 8001e74:	4613      	mov	r3, r2
 8001e76:	011b      	lsls	r3, r3, #4
 8001e78:	1a9b      	subs	r3, r3, r2
 8001e7a:	009b      	lsls	r3, r3, #2
 8001e7c:	440b      	add	r3, r1
 8001e7e:	331b      	adds	r3, #27
 8001e80:	781b      	ldrb	r3, [r3, #0]
 8001e82:	2b01      	cmp	r3, #1
 8001e84:	f040 80d1 	bne.w	800202a <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8001e88:	78fa      	ldrb	r2, [r7, #3]
 8001e8a:	6879      	ldr	r1, [r7, #4]
 8001e8c:	4613      	mov	r3, r2
 8001e8e:	011b      	lsls	r3, r3, #4
 8001e90:	1a9b      	subs	r3, r3, r2
 8001e92:	009b      	lsls	r3, r3, #2
 8001e94:	440b      	add	r3, r1
 8001e96:	331b      	adds	r3, #27
 8001e98:	2200      	movs	r2, #0
 8001e9a:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8001e9c:	78fb      	ldrb	r3, [r7, #3]
 8001e9e:	015a      	lsls	r2, r3, #5
 8001ea0:	693b      	ldr	r3, [r7, #16]
 8001ea2:	4413      	add	r3, r2
 8001ea4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	78fa      	ldrb	r2, [r7, #3]
 8001eac:	0151      	lsls	r1, r2, #5
 8001eae:	693a      	ldr	r2, [r7, #16]
 8001eb0:	440a      	add	r2, r1
 8001eb2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8001eb6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001eba:	6053      	str	r3, [r2, #4]
 8001ebc:	e0b5      	b.n	800202a <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8001ebe:	78fa      	ldrb	r2, [r7, #3]
 8001ec0:	6879      	ldr	r1, [r7, #4]
 8001ec2:	4613      	mov	r3, r2
 8001ec4:	011b      	lsls	r3, r3, #4
 8001ec6:	1a9b      	subs	r3, r3, r2
 8001ec8:	009b      	lsls	r3, r3, #2
 8001eca:	440b      	add	r3, r1
 8001ecc:	334d      	adds	r3, #77	@ 0x4d
 8001ece:	781b      	ldrb	r3, [r3, #0]
 8001ed0:	2b05      	cmp	r3, #5
 8001ed2:	d114      	bne.n	8001efe <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8001ed4:	78fa      	ldrb	r2, [r7, #3]
 8001ed6:	6879      	ldr	r1, [r7, #4]
 8001ed8:	4613      	mov	r3, r2
 8001eda:	011b      	lsls	r3, r3, #4
 8001edc:	1a9b      	subs	r3, r3, r2
 8001ede:	009b      	lsls	r3, r3, #2
 8001ee0:	440b      	add	r3, r1
 8001ee2:	334d      	adds	r3, #77	@ 0x4d
 8001ee4:	2202      	movs	r2, #2
 8001ee6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8001ee8:	78fa      	ldrb	r2, [r7, #3]
 8001eea:	6879      	ldr	r1, [r7, #4]
 8001eec:	4613      	mov	r3, r2
 8001eee:	011b      	lsls	r3, r3, #4
 8001ef0:	1a9b      	subs	r3, r3, r2
 8001ef2:	009b      	lsls	r3, r3, #2
 8001ef4:	440b      	add	r3, r1
 8001ef6:	334c      	adds	r3, #76	@ 0x4c
 8001ef8:	2202      	movs	r2, #2
 8001efa:	701a      	strb	r2, [r3, #0]
 8001efc:	e095      	b.n	800202a <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8001efe:	78fa      	ldrb	r2, [r7, #3]
 8001f00:	6879      	ldr	r1, [r7, #4]
 8001f02:	4613      	mov	r3, r2
 8001f04:	011b      	lsls	r3, r3, #4
 8001f06:	1a9b      	subs	r3, r3, r2
 8001f08:	009b      	lsls	r3, r3, #2
 8001f0a:	440b      	add	r3, r1
 8001f0c:	334d      	adds	r3, #77	@ 0x4d
 8001f0e:	781b      	ldrb	r3, [r3, #0]
 8001f10:	2b06      	cmp	r3, #6
 8001f12:	d114      	bne.n	8001f3e <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8001f14:	78fa      	ldrb	r2, [r7, #3]
 8001f16:	6879      	ldr	r1, [r7, #4]
 8001f18:	4613      	mov	r3, r2
 8001f1a:	011b      	lsls	r3, r3, #4
 8001f1c:	1a9b      	subs	r3, r3, r2
 8001f1e:	009b      	lsls	r3, r3, #2
 8001f20:	440b      	add	r3, r1
 8001f22:	334d      	adds	r3, #77	@ 0x4d
 8001f24:	2202      	movs	r2, #2
 8001f26:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8001f28:	78fa      	ldrb	r2, [r7, #3]
 8001f2a:	6879      	ldr	r1, [r7, #4]
 8001f2c:	4613      	mov	r3, r2
 8001f2e:	011b      	lsls	r3, r3, #4
 8001f30:	1a9b      	subs	r3, r3, r2
 8001f32:	009b      	lsls	r3, r3, #2
 8001f34:	440b      	add	r3, r1
 8001f36:	334c      	adds	r3, #76	@ 0x4c
 8001f38:	2205      	movs	r2, #5
 8001f3a:	701a      	strb	r2, [r3, #0]
 8001f3c:	e075      	b.n	800202a <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8001f3e:	78fa      	ldrb	r2, [r7, #3]
 8001f40:	6879      	ldr	r1, [r7, #4]
 8001f42:	4613      	mov	r3, r2
 8001f44:	011b      	lsls	r3, r3, #4
 8001f46:	1a9b      	subs	r3, r3, r2
 8001f48:	009b      	lsls	r3, r3, #2
 8001f4a:	440b      	add	r3, r1
 8001f4c:	334d      	adds	r3, #77	@ 0x4d
 8001f4e:	781b      	ldrb	r3, [r3, #0]
 8001f50:	2b07      	cmp	r3, #7
 8001f52:	d00a      	beq.n	8001f6a <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8001f54:	78fa      	ldrb	r2, [r7, #3]
 8001f56:	6879      	ldr	r1, [r7, #4]
 8001f58:	4613      	mov	r3, r2
 8001f5a:	011b      	lsls	r3, r3, #4
 8001f5c:	1a9b      	subs	r3, r3, r2
 8001f5e:	009b      	lsls	r3, r3, #2
 8001f60:	440b      	add	r3, r1
 8001f62:	334d      	adds	r3, #77	@ 0x4d
 8001f64:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8001f66:	2b09      	cmp	r3, #9
 8001f68:	d170      	bne.n	800204c <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8001f6a:	78fa      	ldrb	r2, [r7, #3]
 8001f6c:	6879      	ldr	r1, [r7, #4]
 8001f6e:	4613      	mov	r3, r2
 8001f70:	011b      	lsls	r3, r3, #4
 8001f72:	1a9b      	subs	r3, r3, r2
 8001f74:	009b      	lsls	r3, r3, #2
 8001f76:	440b      	add	r3, r1
 8001f78:	334d      	adds	r3, #77	@ 0x4d
 8001f7a:	2202      	movs	r2, #2
 8001f7c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8001f7e:	78fa      	ldrb	r2, [r7, #3]
 8001f80:	6879      	ldr	r1, [r7, #4]
 8001f82:	4613      	mov	r3, r2
 8001f84:	011b      	lsls	r3, r3, #4
 8001f86:	1a9b      	subs	r3, r3, r2
 8001f88:	009b      	lsls	r3, r3, #2
 8001f8a:	440b      	add	r3, r1
 8001f8c:	3344      	adds	r3, #68	@ 0x44
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	1c59      	adds	r1, r3, #1
 8001f92:	6878      	ldr	r0, [r7, #4]
 8001f94:	4613      	mov	r3, r2
 8001f96:	011b      	lsls	r3, r3, #4
 8001f98:	1a9b      	subs	r3, r3, r2
 8001f9a:	009b      	lsls	r3, r3, #2
 8001f9c:	4403      	add	r3, r0
 8001f9e:	3344      	adds	r3, #68	@ 0x44
 8001fa0:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8001fa2:	78fa      	ldrb	r2, [r7, #3]
 8001fa4:	6879      	ldr	r1, [r7, #4]
 8001fa6:	4613      	mov	r3, r2
 8001fa8:	011b      	lsls	r3, r3, #4
 8001faa:	1a9b      	subs	r3, r3, r2
 8001fac:	009b      	lsls	r3, r3, #2
 8001fae:	440b      	add	r3, r1
 8001fb0:	3344      	adds	r3, #68	@ 0x44
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	2b02      	cmp	r3, #2
 8001fb6:	d914      	bls.n	8001fe2 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8001fb8:	78fa      	ldrb	r2, [r7, #3]
 8001fba:	6879      	ldr	r1, [r7, #4]
 8001fbc:	4613      	mov	r3, r2
 8001fbe:	011b      	lsls	r3, r3, #4
 8001fc0:	1a9b      	subs	r3, r3, r2
 8001fc2:	009b      	lsls	r3, r3, #2
 8001fc4:	440b      	add	r3, r1
 8001fc6:	3344      	adds	r3, #68	@ 0x44
 8001fc8:	2200      	movs	r2, #0
 8001fca:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8001fcc:	78fa      	ldrb	r2, [r7, #3]
 8001fce:	6879      	ldr	r1, [r7, #4]
 8001fd0:	4613      	mov	r3, r2
 8001fd2:	011b      	lsls	r3, r3, #4
 8001fd4:	1a9b      	subs	r3, r3, r2
 8001fd6:	009b      	lsls	r3, r3, #2
 8001fd8:	440b      	add	r3, r1
 8001fda:	334c      	adds	r3, #76	@ 0x4c
 8001fdc:	2204      	movs	r2, #4
 8001fde:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8001fe0:	e022      	b.n	8002028 <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8001fe2:	78fa      	ldrb	r2, [r7, #3]
 8001fe4:	6879      	ldr	r1, [r7, #4]
 8001fe6:	4613      	mov	r3, r2
 8001fe8:	011b      	lsls	r3, r3, #4
 8001fea:	1a9b      	subs	r3, r3, r2
 8001fec:	009b      	lsls	r3, r3, #2
 8001fee:	440b      	add	r3, r1
 8001ff0:	334c      	adds	r3, #76	@ 0x4c
 8001ff2:	2202      	movs	r2, #2
 8001ff4:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8001ff6:	78fb      	ldrb	r3, [r7, #3]
 8001ff8:	015a      	lsls	r2, r3, #5
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	4413      	add	r3, r2
 8001ffe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800200c:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002014:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8002016:	78fb      	ldrb	r3, [r7, #3]
 8002018:	015a      	lsls	r2, r3, #5
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	4413      	add	r3, r2
 800201e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002022:	461a      	mov	r2, r3
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002028:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800202a:	78fa      	ldrb	r2, [r7, #3]
 800202c:	6879      	ldr	r1, [r7, #4]
 800202e:	4613      	mov	r3, r2
 8002030:	011b      	lsls	r3, r3, #4
 8002032:	1a9b      	subs	r3, r3, r2
 8002034:	009b      	lsls	r3, r3, #2
 8002036:	440b      	add	r3, r1
 8002038:	334c      	adds	r3, #76	@ 0x4c
 800203a:	781a      	ldrb	r2, [r3, #0]
 800203c:	78fb      	ldrb	r3, [r7, #3]
 800203e:	4619      	mov	r1, r3
 8002040:	6878      	ldr	r0, [r7, #4]
 8002042:	f000 fd3e 	bl	8002ac2 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002046:	e002      	b.n	800204e <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8002048:	bf00      	nop
 800204a:	e000      	b.n	800204e <HCD_HC_OUT_IRQHandler+0x978>
      return;
 800204c:	bf00      	nop
  }
}
 800204e:	3718      	adds	r7, #24
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}

08002054 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b08a      	sub	sp, #40	@ 0x28
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002062:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002064:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	6a1b      	ldr	r3, [r3, #32]
 800206c:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 800206e:	69fb      	ldr	r3, [r7, #28]
 8002070:	f003 030f 	and.w	r3, r3, #15
 8002074:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002076:	69fb      	ldr	r3, [r7, #28]
 8002078:	0c5b      	lsrs	r3, r3, #17
 800207a:	f003 030f 	and.w	r3, r3, #15
 800207e:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002080:	69fb      	ldr	r3, [r7, #28]
 8002082:	091b      	lsrs	r3, r3, #4
 8002084:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002088:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800208a:	697b      	ldr	r3, [r7, #20]
 800208c:	2b02      	cmp	r3, #2
 800208e:	d004      	beq.n	800209a <HCD_RXQLVL_IRQHandler+0x46>
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	2b05      	cmp	r3, #5
 8002094:	f000 80b6 	beq.w	8002204 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002098:	e0b7      	b.n	800220a <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 800209a:	693b      	ldr	r3, [r7, #16]
 800209c:	2b00      	cmp	r3, #0
 800209e:	f000 80b3 	beq.w	8002208 <HCD_RXQLVL_IRQHandler+0x1b4>
 80020a2:	6879      	ldr	r1, [r7, #4]
 80020a4:	69ba      	ldr	r2, [r7, #24]
 80020a6:	4613      	mov	r3, r2
 80020a8:	011b      	lsls	r3, r3, #4
 80020aa:	1a9b      	subs	r3, r3, r2
 80020ac:	009b      	lsls	r3, r3, #2
 80020ae:	440b      	add	r3, r1
 80020b0:	332c      	adds	r3, #44	@ 0x2c
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	f000 80a7 	beq.w	8002208 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 80020ba:	6879      	ldr	r1, [r7, #4]
 80020bc:	69ba      	ldr	r2, [r7, #24]
 80020be:	4613      	mov	r3, r2
 80020c0:	011b      	lsls	r3, r3, #4
 80020c2:	1a9b      	subs	r3, r3, r2
 80020c4:	009b      	lsls	r3, r3, #2
 80020c6:	440b      	add	r3, r1
 80020c8:	3338      	adds	r3, #56	@ 0x38
 80020ca:	681a      	ldr	r2, [r3, #0]
 80020cc:	693b      	ldr	r3, [r7, #16]
 80020ce:	18d1      	adds	r1, r2, r3
 80020d0:	6878      	ldr	r0, [r7, #4]
 80020d2:	69ba      	ldr	r2, [r7, #24]
 80020d4:	4613      	mov	r3, r2
 80020d6:	011b      	lsls	r3, r3, #4
 80020d8:	1a9b      	subs	r3, r3, r2
 80020da:	009b      	lsls	r3, r3, #2
 80020dc:	4403      	add	r3, r0
 80020de:	3334      	adds	r3, #52	@ 0x34
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4299      	cmp	r1, r3
 80020e4:	f200 8083 	bhi.w	80021ee <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6818      	ldr	r0, [r3, #0]
 80020ec:	6879      	ldr	r1, [r7, #4]
 80020ee:	69ba      	ldr	r2, [r7, #24]
 80020f0:	4613      	mov	r3, r2
 80020f2:	011b      	lsls	r3, r3, #4
 80020f4:	1a9b      	subs	r3, r3, r2
 80020f6:	009b      	lsls	r3, r3, #2
 80020f8:	440b      	add	r3, r1
 80020fa:	332c      	adds	r3, #44	@ 0x2c
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	693a      	ldr	r2, [r7, #16]
 8002100:	b292      	uxth	r2, r2
 8002102:	4619      	mov	r1, r3
 8002104:	f000 f97a 	bl	80023fc <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8002108:	6879      	ldr	r1, [r7, #4]
 800210a:	69ba      	ldr	r2, [r7, #24]
 800210c:	4613      	mov	r3, r2
 800210e:	011b      	lsls	r3, r3, #4
 8002110:	1a9b      	subs	r3, r3, r2
 8002112:	009b      	lsls	r3, r3, #2
 8002114:	440b      	add	r3, r1
 8002116:	332c      	adds	r3, #44	@ 0x2c
 8002118:	681a      	ldr	r2, [r3, #0]
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	18d1      	adds	r1, r2, r3
 800211e:	6878      	ldr	r0, [r7, #4]
 8002120:	69ba      	ldr	r2, [r7, #24]
 8002122:	4613      	mov	r3, r2
 8002124:	011b      	lsls	r3, r3, #4
 8002126:	1a9b      	subs	r3, r3, r2
 8002128:	009b      	lsls	r3, r3, #2
 800212a:	4403      	add	r3, r0
 800212c:	332c      	adds	r3, #44	@ 0x2c
 800212e:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8002130:	6879      	ldr	r1, [r7, #4]
 8002132:	69ba      	ldr	r2, [r7, #24]
 8002134:	4613      	mov	r3, r2
 8002136:	011b      	lsls	r3, r3, #4
 8002138:	1a9b      	subs	r3, r3, r2
 800213a:	009b      	lsls	r3, r3, #2
 800213c:	440b      	add	r3, r1
 800213e:	3338      	adds	r3, #56	@ 0x38
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	18d1      	adds	r1, r2, r3
 8002146:	6878      	ldr	r0, [r7, #4]
 8002148:	69ba      	ldr	r2, [r7, #24]
 800214a:	4613      	mov	r3, r2
 800214c:	011b      	lsls	r3, r3, #4
 800214e:	1a9b      	subs	r3, r3, r2
 8002150:	009b      	lsls	r3, r3, #2
 8002152:	4403      	add	r3, r0
 8002154:	3338      	adds	r3, #56	@ 0x38
 8002156:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002158:	69bb      	ldr	r3, [r7, #24]
 800215a:	015a      	lsls	r2, r3, #5
 800215c:	6a3b      	ldr	r3, [r7, #32]
 800215e:	4413      	add	r3, r2
 8002160:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002164:	691b      	ldr	r3, [r3, #16]
 8002166:	0cdb      	lsrs	r3, r3, #19
 8002168:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800216c:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800216e:	6879      	ldr	r1, [r7, #4]
 8002170:	69ba      	ldr	r2, [r7, #24]
 8002172:	4613      	mov	r3, r2
 8002174:	011b      	lsls	r3, r3, #4
 8002176:	1a9b      	subs	r3, r3, r2
 8002178:	009b      	lsls	r3, r3, #2
 800217a:	440b      	add	r3, r1
 800217c:	3328      	adds	r3, #40	@ 0x28
 800217e:	881b      	ldrh	r3, [r3, #0]
 8002180:	461a      	mov	r2, r3
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	4293      	cmp	r3, r2
 8002186:	d13f      	bne.n	8002208 <HCD_RXQLVL_IRQHandler+0x1b4>
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d03c      	beq.n	8002208 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 800218e:	69bb      	ldr	r3, [r7, #24]
 8002190:	015a      	lsls	r2, r3, #5
 8002192:	6a3b      	ldr	r3, [r7, #32]
 8002194:	4413      	add	r3, r2
 8002196:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800219e:	68bb      	ldr	r3, [r7, #8]
 80021a0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80021a4:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80021a6:	68bb      	ldr	r3, [r7, #8]
 80021a8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80021ac:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 80021ae:	69bb      	ldr	r3, [r7, #24]
 80021b0:	015a      	lsls	r2, r3, #5
 80021b2:	6a3b      	ldr	r3, [r7, #32]
 80021b4:	4413      	add	r3, r2
 80021b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80021ba:	461a      	mov	r2, r3
 80021bc:	68bb      	ldr	r3, [r7, #8]
 80021be:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 80021c0:	6879      	ldr	r1, [r7, #4]
 80021c2:	69ba      	ldr	r2, [r7, #24]
 80021c4:	4613      	mov	r3, r2
 80021c6:	011b      	lsls	r3, r3, #4
 80021c8:	1a9b      	subs	r3, r3, r2
 80021ca:	009b      	lsls	r3, r3, #2
 80021cc:	440b      	add	r3, r1
 80021ce:	333c      	adds	r3, #60	@ 0x3c
 80021d0:	781b      	ldrb	r3, [r3, #0]
 80021d2:	f083 0301 	eor.w	r3, r3, #1
 80021d6:	b2d8      	uxtb	r0, r3
 80021d8:	6879      	ldr	r1, [r7, #4]
 80021da:	69ba      	ldr	r2, [r7, #24]
 80021dc:	4613      	mov	r3, r2
 80021de:	011b      	lsls	r3, r3, #4
 80021e0:	1a9b      	subs	r3, r3, r2
 80021e2:	009b      	lsls	r3, r3, #2
 80021e4:	440b      	add	r3, r1
 80021e6:	333c      	adds	r3, #60	@ 0x3c
 80021e8:	4602      	mov	r2, r0
 80021ea:	701a      	strb	r2, [r3, #0]
      break;
 80021ec:	e00c      	b.n	8002208 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 80021ee:	6879      	ldr	r1, [r7, #4]
 80021f0:	69ba      	ldr	r2, [r7, #24]
 80021f2:	4613      	mov	r3, r2
 80021f4:	011b      	lsls	r3, r3, #4
 80021f6:	1a9b      	subs	r3, r3, r2
 80021f8:	009b      	lsls	r3, r3, #2
 80021fa:	440b      	add	r3, r1
 80021fc:	334c      	adds	r3, #76	@ 0x4c
 80021fe:	2204      	movs	r2, #4
 8002200:	701a      	strb	r2, [r3, #0]
      break;
 8002202:	e001      	b.n	8002208 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8002204:	bf00      	nop
 8002206:	e000      	b.n	800220a <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8002208:	bf00      	nop
  }
}
 800220a:	bf00      	nop
 800220c:	3728      	adds	r7, #40	@ 0x28
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}

08002212 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002212:	b580      	push	{r7, lr}
 8002214:	b086      	sub	sp, #24
 8002216:	af00      	add	r7, sp, #0
 8002218:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002224:	693b      	ldr	r3, [r7, #16]
 8002226:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800223e:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	f003 0302 	and.w	r3, r3, #2
 8002246:	2b02      	cmp	r3, #2
 8002248:	d10b      	bne.n	8002262 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	f003 0301 	and.w	r3, r3, #1
 8002250:	2b01      	cmp	r3, #1
 8002252:	d102      	bne.n	800225a <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002254:	6878      	ldr	r0, [r7, #4]
 8002256:	f000 fc18 	bl	8002a8a <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 800225a:	68bb      	ldr	r3, [r7, #8]
 800225c:	f043 0302 	orr.w	r3, r3, #2
 8002260:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	f003 0308 	and.w	r3, r3, #8
 8002268:	2b08      	cmp	r3, #8
 800226a:	d132      	bne.n	80022d2 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	f043 0308 	orr.w	r3, r3, #8
 8002272:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	f003 0304 	and.w	r3, r3, #4
 800227a:	2b04      	cmp	r3, #4
 800227c:	d126      	bne.n	80022cc <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	7a5b      	ldrb	r3, [r3, #9]
 8002282:	2b02      	cmp	r3, #2
 8002284:	d113      	bne.n	80022ae <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 800228c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002290:	d106      	bne.n	80022a0 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	2102      	movs	r1, #2
 8002298:	4618      	mov	r0, r3
 800229a:	f000 f949 	bl	8002530 <USB_InitFSLSPClkSel>
 800229e:	e011      	b.n	80022c4 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	2101      	movs	r1, #1
 80022a6:	4618      	mov	r0, r3
 80022a8:	f000 f942 	bl	8002530 <USB_InitFSLSPClkSel>
 80022ac:	e00a      	b.n	80022c4 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	79db      	ldrb	r3, [r3, #7]
 80022b2:	2b01      	cmp	r3, #1
 80022b4:	d106      	bne.n	80022c4 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80022bc:	461a      	mov	r2, r3
 80022be:	f64e 2360 	movw	r3, #60000	@ 0xea60
 80022c2:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80022c4:	6878      	ldr	r0, [r7, #4]
 80022c6:	f000 fc0a 	bl	8002ade <HAL_HCD_PortEnabled_Callback>
 80022ca:	e002      	b.n	80022d2 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80022cc:	6878      	ldr	r0, [r7, #4]
 80022ce:	f000 fc14 	bl	8002afa <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	f003 0320 	and.w	r3, r3, #32
 80022d8:	2b20      	cmp	r3, #32
 80022da:	d103      	bne.n	80022e4 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	f043 0320 	orr.w	r3, r3, #32
 80022e2:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80022ea:	461a      	mov	r2, r3
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	6013      	str	r3, [r2, #0]
}
 80022f0:	bf00      	nop
 80022f2:	3718      	adds	r7, #24
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}

080022f8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b083      	sub	sp, #12
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	689b      	ldr	r3, [r3, #8]
 8002304:	f043 0201 	orr.w	r2, r3, #1
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800230c:	2300      	movs	r3, #0
}
 800230e:	4618      	mov	r0, r3
 8002310:	370c      	adds	r7, #12
 8002312:	46bd      	mov	sp, r7
 8002314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002318:	4770      	bx	lr

0800231a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800231a:	b480      	push	{r7}
 800231c:	b083      	sub	sp, #12
 800231e:	af00      	add	r7, sp, #0
 8002320:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	689b      	ldr	r3, [r3, #8]
 8002326:	f023 0201 	bic.w	r2, r3, #1
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800232e:	2300      	movs	r3, #0
}
 8002330:	4618      	mov	r0, r3
 8002332:	370c      	adds	r7, #12
 8002334:	46bd      	mov	sp, r7
 8002336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233a:	4770      	bx	lr

0800233c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800233c:	b480      	push	{r7}
 800233e:	b085      	sub	sp, #20
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
 8002344:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8002346:	2300      	movs	r3, #0
 8002348:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	3301      	adds	r3, #1
 800234e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8002356:	d901      	bls.n	800235c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8002358:	2303      	movs	r3, #3
 800235a:	e01b      	b.n	8002394 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	691b      	ldr	r3, [r3, #16]
 8002360:	2b00      	cmp	r3, #0
 8002362:	daf2      	bge.n	800234a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8002364:	2300      	movs	r3, #0
 8002366:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	019b      	lsls	r3, r3, #6
 800236c:	f043 0220 	orr.w	r2, r3, #32
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	3301      	adds	r3, #1
 8002378:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8002380:	d901      	bls.n	8002386 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8002382:	2303      	movs	r3, #3
 8002384:	e006      	b.n	8002394 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	691b      	ldr	r3, [r3, #16]
 800238a:	f003 0320 	and.w	r3, r3, #32
 800238e:	2b20      	cmp	r3, #32
 8002390:	d0f0      	beq.n	8002374 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8002392:	2300      	movs	r3, #0
}
 8002394:	4618      	mov	r0, r3
 8002396:	3714      	adds	r7, #20
 8002398:	46bd      	mov	sp, r7
 800239a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239e:	4770      	bx	lr

080023a0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b085      	sub	sp, #20
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80023a8:	2300      	movs	r3, #0
 80023aa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	3301      	adds	r3, #1
 80023b0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80023b8:	d901      	bls.n	80023be <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80023ba:	2303      	movs	r3, #3
 80023bc:	e018      	b.n	80023f0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	691b      	ldr	r3, [r3, #16]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	daf2      	bge.n	80023ac <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80023c6:	2300      	movs	r3, #0
 80023c8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2210      	movs	r2, #16
 80023ce:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	3301      	adds	r3, #1
 80023d4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80023dc:	d901      	bls.n	80023e2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80023de:	2303      	movs	r3, #3
 80023e0:	e006      	b.n	80023f0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	691b      	ldr	r3, [r3, #16]
 80023e6:	f003 0310 	and.w	r3, r3, #16
 80023ea:	2b10      	cmp	r3, #16
 80023ec:	d0f0      	beq.n	80023d0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80023ee:	2300      	movs	r3, #0
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	3714      	adds	r7, #20
 80023f4:	46bd      	mov	sp, r7
 80023f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fa:	4770      	bx	lr

080023fc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b08b      	sub	sp, #44	@ 0x2c
 8002400:	af00      	add	r7, sp, #0
 8002402:	60f8      	str	r0, [r7, #12]
 8002404:	60b9      	str	r1, [r7, #8]
 8002406:	4613      	mov	r3, r2
 8002408:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800240e:	68bb      	ldr	r3, [r7, #8]
 8002410:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8002412:	88fb      	ldrh	r3, [r7, #6]
 8002414:	089b      	lsrs	r3, r3, #2
 8002416:	b29b      	uxth	r3, r3
 8002418:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800241a:	88fb      	ldrh	r3, [r7, #6]
 800241c:	f003 0303 	and.w	r3, r3, #3
 8002420:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8002422:	2300      	movs	r3, #0
 8002424:	623b      	str	r3, [r7, #32]
 8002426:	e014      	b.n	8002452 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8002428:	69bb      	ldr	r3, [r7, #24]
 800242a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800242e:	681a      	ldr	r2, [r3, #0]
 8002430:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002432:	601a      	str	r2, [r3, #0]
    pDest++;
 8002434:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002436:	3301      	adds	r3, #1
 8002438:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800243a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800243c:	3301      	adds	r3, #1
 800243e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8002440:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002442:	3301      	adds	r3, #1
 8002444:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8002446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002448:	3301      	adds	r3, #1
 800244a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800244c:	6a3b      	ldr	r3, [r7, #32]
 800244e:	3301      	adds	r3, #1
 8002450:	623b      	str	r3, [r7, #32]
 8002452:	6a3a      	ldr	r2, [r7, #32]
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	429a      	cmp	r2, r3
 8002458:	d3e6      	bcc.n	8002428 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800245a:	8bfb      	ldrh	r3, [r7, #30]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d01e      	beq.n	800249e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8002460:	2300      	movs	r3, #0
 8002462:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8002464:	69bb      	ldr	r3, [r7, #24]
 8002466:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800246a:	461a      	mov	r2, r3
 800246c:	f107 0310 	add.w	r3, r7, #16
 8002470:	6812      	ldr	r2, [r2, #0]
 8002472:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8002474:	693a      	ldr	r2, [r7, #16]
 8002476:	6a3b      	ldr	r3, [r7, #32]
 8002478:	b2db      	uxtb	r3, r3
 800247a:	00db      	lsls	r3, r3, #3
 800247c:	fa22 f303 	lsr.w	r3, r2, r3
 8002480:	b2da      	uxtb	r2, r3
 8002482:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002484:	701a      	strb	r2, [r3, #0]
      i++;
 8002486:	6a3b      	ldr	r3, [r7, #32]
 8002488:	3301      	adds	r3, #1
 800248a:	623b      	str	r3, [r7, #32]
      pDest++;
 800248c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800248e:	3301      	adds	r3, #1
 8002490:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8002492:	8bfb      	ldrh	r3, [r7, #30]
 8002494:	3b01      	subs	r3, #1
 8002496:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8002498:	8bfb      	ldrh	r3, [r7, #30]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d1ea      	bne.n	8002474 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800249e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	372c      	adds	r7, #44	@ 0x2c
 80024a4:	46bd      	mov	sp, r7
 80024a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024aa:	4770      	bx	lr

080024ac <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b085      	sub	sp, #20
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	695b      	ldr	r3, [r3, #20]
 80024b8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	699b      	ldr	r3, [r3, #24]
 80024be:	68fa      	ldr	r2, [r7, #12]
 80024c0:	4013      	ands	r3, r2
 80024c2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80024c4:	68fb      	ldr	r3, [r7, #12]
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	3714      	adds	r7, #20
 80024ca:	46bd      	mov	sp, r7
 80024cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d0:	4770      	bx	lr

080024d2 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 80024d2:	b480      	push	{r7}
 80024d4:	b085      	sub	sp, #20
 80024d6:	af00      	add	r7, sp, #0
 80024d8:	6078      	str	r0, [r7, #4]
 80024da:	460b      	mov	r3, r1
 80024dc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 80024e2:	78fb      	ldrb	r3, [r7, #3]
 80024e4:	015a      	lsls	r2, r3, #5
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	4413      	add	r3, r2
 80024ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80024ee:	689b      	ldr	r3, [r3, #8]
 80024f0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 80024f2:	78fb      	ldrb	r3, [r7, #3]
 80024f4:	015a      	lsls	r2, r3, #5
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	4413      	add	r3, r2
 80024fa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80024fe:	68db      	ldr	r3, [r3, #12]
 8002500:	68ba      	ldr	r2, [r7, #8]
 8002502:	4013      	ands	r3, r2
 8002504:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8002506:	68bb      	ldr	r3, [r7, #8]
}
 8002508:	4618      	mov	r0, r3
 800250a:	3714      	adds	r7, #20
 800250c:	46bd      	mov	sp, r7
 800250e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002512:	4770      	bx	lr

08002514 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8002514:	b480      	push	{r7}
 8002516:	b083      	sub	sp, #12
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	695b      	ldr	r3, [r3, #20]
 8002520:	f003 0301 	and.w	r3, r3, #1
}
 8002524:	4618      	mov	r0, r3
 8002526:	370c      	adds	r7, #12
 8002528:	46bd      	mov	sp, r7
 800252a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252e:	4770      	bx	lr

08002530 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8002530:	b480      	push	{r7}
 8002532:	b085      	sub	sp, #20
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
 8002538:	460b      	mov	r3, r1
 800253a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	68fa      	ldr	r2, [r7, #12]
 800254a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800254e:	f023 0303 	bic.w	r3, r3, #3
 8002552:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	78fb      	ldrb	r3, [r7, #3]
 800255e:	f003 0303 	and.w	r3, r3, #3
 8002562:	68f9      	ldr	r1, [r7, #12]
 8002564:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8002568:	4313      	orrs	r3, r2
 800256a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800256c:	78fb      	ldrb	r3, [r7, #3]
 800256e:	2b01      	cmp	r3, #1
 8002570:	d107      	bne.n	8002582 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002578:	461a      	mov	r2, r3
 800257a:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800257e:	6053      	str	r3, [r2, #4]
 8002580:	e00c      	b.n	800259c <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8002582:	78fb      	ldrb	r3, [r7, #3]
 8002584:	2b02      	cmp	r3, #2
 8002586:	d107      	bne.n	8002598 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800258e:	461a      	mov	r2, r3
 8002590:	f241 7370 	movw	r3, #6000	@ 0x1770
 8002594:	6053      	str	r3, [r2, #4]
 8002596:	e001      	b.n	800259c <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8002598:	2301      	movs	r3, #1
 800259a:	e000      	b.n	800259e <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 800259c:	2300      	movs	r3, #0
}
 800259e:	4618      	mov	r0, r3
 80025a0:	3714      	adds	r7, #20
 80025a2:	46bd      	mov	sp, r7
 80025a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a8:	4770      	bx	lr

080025aa <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80025aa:	b480      	push	{r7}
 80025ac:	b085      	sub	sp, #20
 80025ae:	af00      	add	r7, sp, #0
 80025b0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80025bc:	695b      	ldr	r3, [r3, #20]
 80025be:	b29b      	uxth	r3, r3
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	3714      	adds	r7, #20
 80025c4:	46bd      	mov	sp, r7
 80025c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ca:	4770      	bx	lr

080025cc <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80025cc:	b480      	push	{r7}
 80025ce:	b089      	sub	sp, #36	@ 0x24
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
 80025d4:	460b      	mov	r3, r1
 80025d6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80025dc:	78fb      	ldrb	r3, [r7, #3]
 80025de:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80025e0:	2300      	movs	r3, #0
 80025e2:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80025e4:	69bb      	ldr	r3, [r7, #24]
 80025e6:	015a      	lsls	r2, r3, #5
 80025e8:	69fb      	ldr	r3, [r7, #28]
 80025ea:	4413      	add	r3, r2
 80025ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	0c9b      	lsrs	r3, r3, #18
 80025f4:	f003 0303 	and.w	r3, r3, #3
 80025f8:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80025fa:	69bb      	ldr	r3, [r7, #24]
 80025fc:	015a      	lsls	r2, r3, #5
 80025fe:	69fb      	ldr	r3, [r7, #28]
 8002600:	4413      	add	r3, r2
 8002602:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	0fdb      	lsrs	r3, r3, #31
 800260a:	f003 0301 	and.w	r3, r3, #1
 800260e:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8002610:	69bb      	ldr	r3, [r7, #24]
 8002612:	015a      	lsls	r2, r3, #5
 8002614:	69fb      	ldr	r3, [r7, #28]
 8002616:	4413      	add	r3, r2
 8002618:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	0fdb      	lsrs	r3, r3, #31
 8002620:	f003 0301 	and.w	r3, r3, #1
 8002624:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	689b      	ldr	r3, [r3, #8]
 800262a:	f003 0320 	and.w	r3, r3, #32
 800262e:	2b20      	cmp	r3, #32
 8002630:	d10d      	bne.n	800264e <USB_HC_Halt+0x82>
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d10a      	bne.n	800264e <USB_HC_Halt+0x82>
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d005      	beq.n	800264a <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	2b01      	cmp	r3, #1
 8002642:	d002      	beq.n	800264a <USB_HC_Halt+0x7e>
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	2b03      	cmp	r3, #3
 8002648:	d101      	bne.n	800264e <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 800264a:	2300      	movs	r3, #0
 800264c:	e0d8      	b.n	8002800 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800264e:	697b      	ldr	r3, [r7, #20]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d002      	beq.n	800265a <USB_HC_Halt+0x8e>
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	2b02      	cmp	r3, #2
 8002658:	d173      	bne.n	8002742 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800265a:	69bb      	ldr	r3, [r7, #24]
 800265c:	015a      	lsls	r2, r3, #5
 800265e:	69fb      	ldr	r3, [r7, #28]
 8002660:	4413      	add	r3, r2
 8002662:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	69ba      	ldr	r2, [r7, #24]
 800266a:	0151      	lsls	r1, r2, #5
 800266c:	69fa      	ldr	r2, [r7, #28]
 800266e:	440a      	add	r2, r1
 8002670:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002674:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002678:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	f003 0320 	and.w	r3, r3, #32
 8002682:	2b00      	cmp	r3, #0
 8002684:	d14a      	bne.n	800271c <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800268a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800268e:	2b00      	cmp	r3, #0
 8002690:	d133      	bne.n	80026fa <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8002692:	69bb      	ldr	r3, [r7, #24]
 8002694:	015a      	lsls	r2, r3, #5
 8002696:	69fb      	ldr	r3, [r7, #28]
 8002698:	4413      	add	r3, r2
 800269a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	69ba      	ldr	r2, [r7, #24]
 80026a2:	0151      	lsls	r1, r2, #5
 80026a4:	69fa      	ldr	r2, [r7, #28]
 80026a6:	440a      	add	r2, r1
 80026a8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80026ac:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80026b0:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80026b2:	69bb      	ldr	r3, [r7, #24]
 80026b4:	015a      	lsls	r2, r3, #5
 80026b6:	69fb      	ldr	r3, [r7, #28]
 80026b8:	4413      	add	r3, r2
 80026ba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	69ba      	ldr	r2, [r7, #24]
 80026c2:	0151      	lsls	r1, r2, #5
 80026c4:	69fa      	ldr	r2, [r7, #28]
 80026c6:	440a      	add	r2, r1
 80026c8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80026cc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80026d0:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 80026d2:	68bb      	ldr	r3, [r7, #8]
 80026d4:	3301      	adds	r3, #1
 80026d6:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80026de:	d82e      	bhi.n	800273e <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80026e0:	69bb      	ldr	r3, [r7, #24]
 80026e2:	015a      	lsls	r2, r3, #5
 80026e4:	69fb      	ldr	r3, [r7, #28]
 80026e6:	4413      	add	r3, r2
 80026e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80026f2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80026f6:	d0ec      	beq.n	80026d2 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80026f8:	e081      	b.n	80027fe <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80026fa:	69bb      	ldr	r3, [r7, #24]
 80026fc:	015a      	lsls	r2, r3, #5
 80026fe:	69fb      	ldr	r3, [r7, #28]
 8002700:	4413      	add	r3, r2
 8002702:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	69ba      	ldr	r2, [r7, #24]
 800270a:	0151      	lsls	r1, r2, #5
 800270c:	69fa      	ldr	r2, [r7, #28]
 800270e:	440a      	add	r2, r1
 8002710:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002714:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002718:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800271a:	e070      	b.n	80027fe <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800271c:	69bb      	ldr	r3, [r7, #24]
 800271e:	015a      	lsls	r2, r3, #5
 8002720:	69fb      	ldr	r3, [r7, #28]
 8002722:	4413      	add	r3, r2
 8002724:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	69ba      	ldr	r2, [r7, #24]
 800272c:	0151      	lsls	r1, r2, #5
 800272e:	69fa      	ldr	r2, [r7, #28]
 8002730:	440a      	add	r2, r1
 8002732:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002736:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800273a:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800273c:	e05f      	b.n	80027fe <USB_HC_Halt+0x232>
            break;
 800273e:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8002740:	e05d      	b.n	80027fe <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8002742:	69bb      	ldr	r3, [r7, #24]
 8002744:	015a      	lsls	r2, r3, #5
 8002746:	69fb      	ldr	r3, [r7, #28]
 8002748:	4413      	add	r3, r2
 800274a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	69ba      	ldr	r2, [r7, #24]
 8002752:	0151      	lsls	r1, r2, #5
 8002754:	69fa      	ldr	r2, [r7, #28]
 8002756:	440a      	add	r2, r1
 8002758:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800275c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002760:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8002762:	69fb      	ldr	r3, [r7, #28]
 8002764:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002768:	691b      	ldr	r3, [r3, #16]
 800276a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800276e:	2b00      	cmp	r3, #0
 8002770:	d133      	bne.n	80027da <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8002772:	69bb      	ldr	r3, [r7, #24]
 8002774:	015a      	lsls	r2, r3, #5
 8002776:	69fb      	ldr	r3, [r7, #28]
 8002778:	4413      	add	r3, r2
 800277a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	69ba      	ldr	r2, [r7, #24]
 8002782:	0151      	lsls	r1, r2, #5
 8002784:	69fa      	ldr	r2, [r7, #28]
 8002786:	440a      	add	r2, r1
 8002788:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800278c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002790:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8002792:	69bb      	ldr	r3, [r7, #24]
 8002794:	015a      	lsls	r2, r3, #5
 8002796:	69fb      	ldr	r3, [r7, #28]
 8002798:	4413      	add	r3, r2
 800279a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	69ba      	ldr	r2, [r7, #24]
 80027a2:	0151      	lsls	r1, r2, #5
 80027a4:	69fa      	ldr	r2, [r7, #28]
 80027a6:	440a      	add	r2, r1
 80027a8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80027ac:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80027b0:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 80027b2:	68bb      	ldr	r3, [r7, #8]
 80027b4:	3301      	adds	r3, #1
 80027b6:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 80027b8:	68bb      	ldr	r3, [r7, #8]
 80027ba:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80027be:	d81d      	bhi.n	80027fc <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80027c0:	69bb      	ldr	r3, [r7, #24]
 80027c2:	015a      	lsls	r2, r3, #5
 80027c4:	69fb      	ldr	r3, [r7, #28]
 80027c6:	4413      	add	r3, r2
 80027c8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80027d2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80027d6:	d0ec      	beq.n	80027b2 <USB_HC_Halt+0x1e6>
 80027d8:	e011      	b.n	80027fe <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80027da:	69bb      	ldr	r3, [r7, #24]
 80027dc:	015a      	lsls	r2, r3, #5
 80027de:	69fb      	ldr	r3, [r7, #28]
 80027e0:	4413      	add	r3, r2
 80027e2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	69ba      	ldr	r2, [r7, #24]
 80027ea:	0151      	lsls	r1, r2, #5
 80027ec:	69fa      	ldr	r2, [r7, #28]
 80027ee:	440a      	add	r2, r1
 80027f0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80027f4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80027f8:	6013      	str	r3, [r2, #0]
 80027fa:	e000      	b.n	80027fe <USB_HC_Halt+0x232>
          break;
 80027fc:	bf00      	nop
    }
  }

  return HAL_OK;
 80027fe:	2300      	movs	r3, #0
}
 8002800:	4618      	mov	r0, r3
 8002802:	3724      	adds	r7, #36	@ 0x24
 8002804:	46bd      	mov	sp, r7
 8002806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280a:	4770      	bx	lr

0800280c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b088      	sub	sp, #32
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8002814:	2300      	movs	r3, #0
 8002816:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800281c:	2300      	movs	r3, #0
 800281e:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8002820:	6878      	ldr	r0, [r7, #4]
 8002822:	f7ff fd7a 	bl	800231a <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8002826:	2110      	movs	r1, #16
 8002828:	6878      	ldr	r0, [r7, #4]
 800282a:	f7ff fd87 	bl	800233c <USB_FlushTxFifo>
 800282e:	4603      	mov	r3, r0
 8002830:	2b00      	cmp	r3, #0
 8002832:	d001      	beq.n	8002838 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8002834:	2301      	movs	r3, #1
 8002836:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8002838:	6878      	ldr	r0, [r7, #4]
 800283a:	f7ff fdb1 	bl	80023a0 <USB_FlushRxFifo>
 800283e:	4603      	mov	r3, r0
 8002840:	2b00      	cmp	r3, #0
 8002842:	d001      	beq.n	8002848 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8002844:	2301      	movs	r3, #1
 8002846:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8002848:	2300      	movs	r3, #0
 800284a:	61bb      	str	r3, [r7, #24]
 800284c:	e01f      	b.n	800288e <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800284e:	69bb      	ldr	r3, [r7, #24]
 8002850:	015a      	lsls	r2, r3, #5
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	4413      	add	r3, r2
 8002856:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800285e:	693b      	ldr	r3, [r7, #16]
 8002860:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002864:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8002866:	693b      	ldr	r3, [r7, #16]
 8002868:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800286c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8002874:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8002876:	69bb      	ldr	r3, [r7, #24]
 8002878:	015a      	lsls	r2, r3, #5
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	4413      	add	r3, r2
 800287e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002882:	461a      	mov	r2, r3
 8002884:	693b      	ldr	r3, [r7, #16]
 8002886:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8002888:	69bb      	ldr	r3, [r7, #24]
 800288a:	3301      	adds	r3, #1
 800288c:	61bb      	str	r3, [r7, #24]
 800288e:	69bb      	ldr	r3, [r7, #24]
 8002890:	2b0f      	cmp	r3, #15
 8002892:	d9dc      	bls.n	800284e <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8002894:	2300      	movs	r3, #0
 8002896:	61bb      	str	r3, [r7, #24]
 8002898:	e034      	b.n	8002904 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800289a:	69bb      	ldr	r3, [r7, #24]
 800289c:	015a      	lsls	r2, r3, #5
 800289e:	697b      	ldr	r3, [r7, #20]
 80028a0:	4413      	add	r3, r2
 80028a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 80028aa:	693b      	ldr	r3, [r7, #16]
 80028ac:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80028b0:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80028b8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80028ba:	693b      	ldr	r3, [r7, #16]
 80028bc:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80028c0:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80028c2:	69bb      	ldr	r3, [r7, #24]
 80028c4:	015a      	lsls	r2, r3, #5
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	4413      	add	r3, r2
 80028ca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80028ce:	461a      	mov	r2, r3
 80028d0:	693b      	ldr	r3, [r7, #16]
 80028d2:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	3301      	adds	r3, #1
 80028d8:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80028e0:	d80c      	bhi.n	80028fc <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80028e2:	69bb      	ldr	r3, [r7, #24]
 80028e4:	015a      	lsls	r2, r3, #5
 80028e6:	697b      	ldr	r3, [r7, #20]
 80028e8:	4413      	add	r3, r2
 80028ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80028f4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80028f8:	d0ec      	beq.n	80028d4 <USB_StopHost+0xc8>
 80028fa:	e000      	b.n	80028fe <USB_StopHost+0xf2>
        break;
 80028fc:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80028fe:	69bb      	ldr	r3, [r7, #24]
 8002900:	3301      	adds	r3, #1
 8002902:	61bb      	str	r3, [r7, #24]
 8002904:	69bb      	ldr	r3, [r7, #24]
 8002906:	2b0f      	cmp	r3, #15
 8002908:	d9c7      	bls.n	800289a <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 800290a:	697b      	ldr	r3, [r7, #20]
 800290c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002910:	461a      	mov	r2, r3
 8002912:	f04f 33ff 	mov.w	r3, #4294967295
 8002916:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	f04f 32ff 	mov.w	r2, #4294967295
 800291e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8002920:	6878      	ldr	r0, [r7, #4]
 8002922:	f7ff fce9 	bl	80022f8 <USB_EnableGlobalInt>

  return ret;
 8002926:	7ffb      	ldrb	r3, [r7, #31]
}
 8002928:	4618      	mov	r0, r3
 800292a:	3720      	adds	r7, #32
 800292c:	46bd      	mov	sp, r7
 800292e:	bd80      	pop	{r7, pc}

08002930 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b082      	sub	sp, #8
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800293e:	1c5a      	adds	r2, r3, #1
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 8002946:	6878      	ldr	r0, [r7, #4]
 8002948:	f000 f804 	bl	8002954 <USBH_HandleSof>
}
 800294c:	bf00      	nop
 800294e:	3708      	adds	r7, #8
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}

08002954 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b082      	sub	sp, #8
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	781b      	ldrb	r3, [r3, #0]
 8002960:	b2db      	uxtb	r3, r3
 8002962:	2b0b      	cmp	r3, #11
 8002964:	d10a      	bne.n	800297c <USBH_HandleSof+0x28>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800296c:	2b00      	cmp	r3, #0
 800296e:	d005      	beq.n	800297c <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8002976:	699b      	ldr	r3, [r3, #24]
 8002978:	6878      	ldr	r0, [r7, #4]
 800297a:	4798      	blx	r3
  }
}
 800297c:	bf00      	nop
 800297e:	3708      	adds	r7, #8
 8002980:	46bd      	mov	sp, r7
 8002982:	bd80      	pop	{r7, pc}

08002984 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8002984:	b480      	push	{r7}
 8002986:	b083      	sub	sp, #12
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2201      	movs	r2, #1
 8002990:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8002994:	bf00      	nop
}
 8002996:	370c      	adds	r7, #12
 8002998:	46bd      	mov	sp, r7
 800299a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299e:	4770      	bx	lr

080029a0 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b083      	sub	sp, #12
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2200      	movs	r2, #0
 80029ac:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 80029b0:	bf00      	nop
}
 80029b2:	370c      	adds	r7, #12
 80029b4:	46bd      	mov	sp, r7
 80029b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ba:	4770      	bx	lr

080029bc <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80029bc:	b480      	push	{r7}
 80029be:	b083      	sub	sp, #12
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2201      	movs	r2, #1
 80029c8:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2200      	movs	r2, #0
 80029d0:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2200      	movs	r2, #0
 80029d8:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80029dc:	2300      	movs	r3, #0
}
 80029de:	4618      	mov	r0, r3
 80029e0:	370c      	adds	r7, #12
 80029e2:	46bd      	mov	sp, r7
 80029e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e8:	4770      	bx	lr

080029ea <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80029ea:	b580      	push	{r7, lr}
 80029ec:	b082      	sub	sp, #8
 80029ee:	af00      	add	r7, sp, #0
 80029f0:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2201      	movs	r2, #1
 80029f6:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2200      	movs	r2, #0
 80029fe:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2200      	movs	r2, #0
 8002a06:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8002a0a:	6878      	ldr	r0, [r7, #4]
 8002a0c:	f000 f883 	bl	8002b16 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	791b      	ldrb	r3, [r3, #4]
 8002a14:	4619      	mov	r1, r3
 8002a16:	6878      	ldr	r0, [r7, #4]
 8002a18:	f000 f80b 	bl	8002a32 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	795b      	ldrb	r3, [r3, #5]
 8002a20:	4619      	mov	r1, r3
 8002a22:	6878      	ldr	r0, [r7, #4]
 8002a24:	f000 f805 	bl	8002a32 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8002a28:	2300      	movs	r3, #0
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	3708      	adds	r7, #8
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}

08002a32 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8002a32:	b480      	push	{r7}
 8002a34:	b083      	sub	sp, #12
 8002a36:	af00      	add	r7, sp, #0
 8002a38:	6078      	str	r0, [r7, #4]
 8002a3a:	460b      	mov	r3, r1
 8002a3c:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8002a3e:	78fb      	ldrb	r3, [r7, #3]
 8002a40:	2b0f      	cmp	r3, #15
 8002a42:	d80d      	bhi.n	8002a60 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8002a44:	78fb      	ldrb	r3, [r7, #3]
 8002a46:	687a      	ldr	r2, [r7, #4]
 8002a48:	33e0      	adds	r3, #224	@ 0xe0
 8002a4a:	009b      	lsls	r3, r3, #2
 8002a4c:	4413      	add	r3, r2
 8002a4e:	685a      	ldr	r2, [r3, #4]
 8002a50:	78fb      	ldrb	r3, [r7, #3]
 8002a52:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8002a56:	6879      	ldr	r1, [r7, #4]
 8002a58:	33e0      	adds	r3, #224	@ 0xe0
 8002a5a:	009b      	lsls	r3, r3, #2
 8002a5c:	440b      	add	r3, r1
 8002a5e:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8002a60:	2300      	movs	r3, #0
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	370c      	adds	r7, #12
 8002a66:	46bd      	mov	sp, r7
 8002a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6c:	4770      	bx	lr

08002a6e <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8002a6e:	b580      	push	{r7, lr}
 8002a70:	b082      	sub	sp, #8
 8002a72:	af00      	add	r7, sp, #0
 8002a74:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	f7ff ff57 	bl	8002930 <USBH_LL_IncTimer>
}
 8002a82:	bf00      	nop
 8002a84:	3708      	adds	r7, #8
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}

08002a8a <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8002a8a:	b580      	push	{r7, lr}
 8002a8c:	b082      	sub	sp, #8
 8002a8e:	af00      	add	r7, sp, #0
 8002a90:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f7ff ff8f 	bl	80029bc <USBH_LL_Connect>
}
 8002a9e:	bf00      	nop
 8002aa0:	3708      	adds	r7, #8
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}

08002aa6 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8002aa6:	b580      	push	{r7, lr}
 8002aa8:	b082      	sub	sp, #8
 8002aaa:	af00      	add	r7, sp, #0
 8002aac:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f7ff ff98 	bl	80029ea <USBH_LL_Disconnect>
}
 8002aba:	bf00      	nop
 8002abc:	3708      	adds	r7, #8
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}

08002ac2 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8002ac2:	b480      	push	{r7}
 8002ac4:	b083      	sub	sp, #12
 8002ac6:	af00      	add	r7, sp, #0
 8002ac8:	6078      	str	r0, [r7, #4]
 8002aca:	460b      	mov	r3, r1
 8002acc:	70fb      	strb	r3, [r7, #3]
 8002ace:	4613      	mov	r3, r2
 8002ad0:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8002ad2:	bf00      	nop
 8002ad4:	370c      	adds	r7, #12
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002adc:	4770      	bx	lr

08002ade <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8002ade:	b580      	push	{r7, lr}
 8002ae0:	b082      	sub	sp, #8
 8002ae2:	af00      	add	r7, sp, #0
 8002ae4:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8002aec:	4618      	mov	r0, r3
 8002aee:	f7ff ff49 	bl	8002984 <USBH_LL_PortEnabled>
}
 8002af2:	bf00      	nop
 8002af4:	3708      	adds	r7, #8
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}

08002afa <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8002afa:	b580      	push	{r7, lr}
 8002afc:	b082      	sub	sp, #8
 8002afe:	af00      	add	r7, sp, #0
 8002b00:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f7ff ff49 	bl	80029a0 <USBH_LL_PortDisabled>
}
 8002b0e:	bf00      	nop
 8002b10:	3708      	adds	r7, #8
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}

08002b16 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8002b16:	b580      	push	{r7, lr}
 8002b18:	b084      	sub	sp, #16
 8002b1a:	af00      	add	r7, sp, #0
 8002b1c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8002b22:	2300      	movs	r3, #0
 8002b24:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f7fd ff4c 	bl	80009ca <HAL_HCD_Stop>
 8002b32:	4603      	mov	r3, r0
 8002b34:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8002b36:	7bfb      	ldrb	r3, [r7, #15]
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f000 f807 	bl	8002b4c <USBH_Get_USB_Status>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8002b42:	7bbb      	ldrb	r3, [r7, #14]
}
 8002b44:	4618      	mov	r0, r3
 8002b46:	3710      	adds	r7, #16
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}

08002b4c <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b085      	sub	sp, #20
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	4603      	mov	r3, r0
 8002b54:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8002b56:	2300      	movs	r3, #0
 8002b58:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8002b5a:	79fb      	ldrb	r3, [r7, #7]
 8002b5c:	2b03      	cmp	r3, #3
 8002b5e:	d817      	bhi.n	8002b90 <USBH_Get_USB_Status+0x44>
 8002b60:	a201      	add	r2, pc, #4	@ (adr r2, 8002b68 <USBH_Get_USB_Status+0x1c>)
 8002b62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b66:	bf00      	nop
 8002b68:	08002b79 	.word	0x08002b79
 8002b6c:	08002b7f 	.word	0x08002b7f
 8002b70:	08002b85 	.word	0x08002b85
 8002b74:	08002b8b 	.word	0x08002b8b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	73fb      	strb	r3, [r7, #15]
    break;
 8002b7c:	e00b      	b.n	8002b96 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8002b7e:	2302      	movs	r3, #2
 8002b80:	73fb      	strb	r3, [r7, #15]
    break;
 8002b82:	e008      	b.n	8002b96 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8002b84:	2301      	movs	r3, #1
 8002b86:	73fb      	strb	r3, [r7, #15]
    break;
 8002b88:	e005      	b.n	8002b96 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8002b8a:	2302      	movs	r3, #2
 8002b8c:	73fb      	strb	r3, [r7, #15]
    break;
 8002b8e:	e002      	b.n	8002b96 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8002b90:	2302      	movs	r3, #2
 8002b92:	73fb      	strb	r3, [r7, #15]
    break;
 8002b94:	bf00      	nop
  }
  return usb_status;
 8002b96:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b98:	4618      	mov	r0, r3
 8002b9a:	3714      	adds	r7, #20
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba2:	4770      	bx	lr

08002ba4 <__libc_init_array>:
 8002ba4:	b570      	push	{r4, r5, r6, lr}
 8002ba6:	4d0d      	ldr	r5, [pc, #52]	@ (8002bdc <__libc_init_array+0x38>)
 8002ba8:	4c0d      	ldr	r4, [pc, #52]	@ (8002be0 <__libc_init_array+0x3c>)
 8002baa:	1b64      	subs	r4, r4, r5
 8002bac:	10a4      	asrs	r4, r4, #2
 8002bae:	2600      	movs	r6, #0
 8002bb0:	42a6      	cmp	r6, r4
 8002bb2:	d109      	bne.n	8002bc8 <__libc_init_array+0x24>
 8002bb4:	4d0b      	ldr	r5, [pc, #44]	@ (8002be4 <__libc_init_array+0x40>)
 8002bb6:	4c0c      	ldr	r4, [pc, #48]	@ (8002be8 <__libc_init_array+0x44>)
 8002bb8:	f000 f818 	bl	8002bec <_init>
 8002bbc:	1b64      	subs	r4, r4, r5
 8002bbe:	10a4      	asrs	r4, r4, #2
 8002bc0:	2600      	movs	r6, #0
 8002bc2:	42a6      	cmp	r6, r4
 8002bc4:	d105      	bne.n	8002bd2 <__libc_init_array+0x2e>
 8002bc6:	bd70      	pop	{r4, r5, r6, pc}
 8002bc8:	f855 3b04 	ldr.w	r3, [r5], #4
 8002bcc:	4798      	blx	r3
 8002bce:	3601      	adds	r6, #1
 8002bd0:	e7ee      	b.n	8002bb0 <__libc_init_array+0xc>
 8002bd2:	f855 3b04 	ldr.w	r3, [r5], #4
 8002bd6:	4798      	blx	r3
 8002bd8:	3601      	adds	r6, #1
 8002bda:	e7f2      	b.n	8002bc2 <__libc_init_array+0x1e>
 8002bdc:	08002c04 	.word	0x08002c04
 8002be0:	08002c04 	.word	0x08002c04
 8002be4:	08002c04 	.word	0x08002c04
 8002be8:	08002c08 	.word	0x08002c08

08002bec <_init>:
 8002bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bee:	bf00      	nop
 8002bf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bf2:	bc08      	pop	{r3}
 8002bf4:	469e      	mov	lr, r3
 8002bf6:	4770      	bx	lr

08002bf8 <_fini>:
 8002bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bfa:	bf00      	nop
 8002bfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bfe:	bc08      	pop	{r3}
 8002c00:	469e      	mov	lr, r3
 8002c02:	4770      	bx	lr
