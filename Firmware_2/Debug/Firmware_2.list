
Firmware_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08040000  08040000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000276c  08040198  08040198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08042904  08042904  00004008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08042904  08042904  00004008  2**0
                  CONTENTS
  4 .ARM          00000000  08042904  08042904  00004008  2**0
                  CONTENTS
  5 .preinit_array 00000000  08042904  08042904  00004008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08042904  08042904  00003904  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08042908  08042908  00003908  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000008  20000000  0804290c  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000400  20000008  08042914  00004008  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000408  08042914  00004408  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00004008  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007a98  00000000  00000000  00004038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001585  00000000  00000000  0000bad0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000678  00000000  00000000  0000d058  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000004cb  00000000  00000000  0000d6d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001618b  00000000  00000000  0000db9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000082d8  00000000  00000000  00023d26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008afe2  00000000  00000000  0002bffe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b6fe0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001a14  00000000  00000000  000b7024  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  000b8a38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08040198 <__do_global_dtors_aux>:
 8040198:	b510      	push	{r4, lr}
 804019a:	4c05      	ldr	r4, [pc, #20]	@ (80401b0 <__do_global_dtors_aux+0x18>)
 804019c:	7823      	ldrb	r3, [r4, #0]
 804019e:	b933      	cbnz	r3, 80401ae <__do_global_dtors_aux+0x16>
 80401a0:	4b04      	ldr	r3, [pc, #16]	@ (80401b4 <__do_global_dtors_aux+0x1c>)
 80401a2:	b113      	cbz	r3, 80401aa <__do_global_dtors_aux+0x12>
 80401a4:	4804      	ldr	r0, [pc, #16]	@ (80401b8 <__do_global_dtors_aux+0x20>)
 80401a6:	f3af 8000 	nop.w
 80401aa:	2301      	movs	r3, #1
 80401ac:	7023      	strb	r3, [r4, #0]
 80401ae:	bd10      	pop	{r4, pc}
 80401b0:	20000008 	.word	0x20000008
 80401b4:	00000000 	.word	0x00000000
 80401b8:	080428ec 	.word	0x080428ec

080401bc <frame_dummy>:
 80401bc:	b508      	push	{r3, lr}
 80401be:	4b03      	ldr	r3, [pc, #12]	@ (80401cc <frame_dummy+0x10>)
 80401c0:	b11b      	cbz	r3, 80401ca <frame_dummy+0xe>
 80401c2:	4903      	ldr	r1, [pc, #12]	@ (80401d0 <frame_dummy+0x14>)
 80401c4:	4803      	ldr	r0, [pc, #12]	@ (80401d4 <frame_dummy+0x18>)
 80401c6:	f3af 8000 	nop.w
 80401ca:	bd08      	pop	{r3, pc}
 80401cc:	00000000 	.word	0x00000000
 80401d0:	2000000c 	.word	0x2000000c
 80401d4:	080428ec 	.word	0x080428ec

080401d8 <Button_Init>:
#include "main.h"
#include <string.h>

#define GPIOA_BASE_ADDR 0x40020000

void Button_Init() {
 80401d8:	b480      	push	{r7}
 80401da:	b083      	sub	sp, #12
 80401dc:	af00      	add	r7, sp, #0

    // 1. Enable GPIO_A clock
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80401de:	2300      	movs	r3, #0
 80401e0:	603b      	str	r3, [r7, #0]
 80401e2:	4b0d      	ldr	r3, [pc, #52]	@ (8040218 <Button_Init+0x40>)
 80401e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80401e6:	4a0c      	ldr	r2, [pc, #48]	@ (8040218 <Button_Init+0x40>)
 80401e8:	f043 0301 	orr.w	r3, r3, #1
 80401ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80401ee:	4b0a      	ldr	r3, [pc, #40]	@ (8040218 <Button_Init+0x40>)
 80401f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80401f2:	f003 0301 	and.w	r3, r3, #1
 80401f6:	603b      	str	r3, [r7, #0]
 80401f8:	683b      	ldr	r3, [r7, #0]

    // 2. Set PA0 as input
    uint32_t* GPIOA_MODER = (uint32_t*)(GPIOA_BASE_ADDR + 0x00);
 80401fa:	4b08      	ldr	r3, [pc, #32]	@ (804021c <Button_Init+0x44>)
 80401fc:	607b      	str	r3, [r7, #4]
    *GPIOA_MODER &= ~(0b11 << 0);
 80401fe:	687b      	ldr	r3, [r7, #4]
 8040200:	681b      	ldr	r3, [r3, #0]
 8040202:	f023 0203 	bic.w	r2, r3, #3
 8040206:	687b      	ldr	r3, [r7, #4]
 8040208:	601a      	str	r2, [r3, #0]
}
 804020a:	bf00      	nop
 804020c:	370c      	adds	r7, #12
 804020e:	46bd      	mov	sp, r7
 8040210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040214:	4770      	bx	lr
 8040216:	bf00      	nop
 8040218:	40023800 	.word	0x40023800
 804021c:	40020000 	.word	0x40020000

08040220 <Led_Init>:

#define GPIOD_BASE_ADDR 0x40020C00 // Get addr from  Data sheet <- Memory mapping

void Led_Init() {
 8040220:	b480      	push	{r7}
 8040222:	b083      	sub	sp, #12
 8040224:	af00      	add	r7, sp, #0
    // 1. Enable GPIO_D clock
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8040226:	2300      	movs	r3, #0
 8040228:	603b      	str	r3, [r7, #0]
 804022a:	4b10      	ldr	r3, [pc, #64]	@ (804026c <Led_Init+0x4c>)
 804022c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 804022e:	4a0f      	ldr	r2, [pc, #60]	@ (804026c <Led_Init+0x4c>)
 8040230:	f043 0308 	orr.w	r3, r3, #8
 8040234:	6313      	str	r3, [r2, #48]	@ 0x30
 8040236:	4b0d      	ldr	r3, [pc, #52]	@ (804026c <Led_Init+0x4c>)
 8040238:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 804023a:	f003 0308 	and.w	r3, r3, #8
 804023e:	603b      	str	r3, [r7, #0]
 8040240:	683b      	ldr	r3, [r7, #0]

    // 2. Set PD12, PD13, PD14 and PD15 as outputs - Get PD numbers from schematic
    uint32_t* GPIOD_MODER = (uint32_t*)(GPIOD_BASE_ADDR + 0x00); 
 8040242:	4b0b      	ldr	r3, [pc, #44]	@ (8040270 <Led_Init+0x50>)
 8040244:	607b      	str	r3, [r7, #4]
    *GPIOD_MODER &= (0b11111111 << 24); // Clear
 8040246:	687b      	ldr	r3, [r7, #4]
 8040248:	681b      	ldr	r3, [r3, #0]
 804024a:	f003 427f 	and.w	r2, r3, #4278190080	@ 0xff000000
 804024e:	687b      	ldr	r3, [r7, #4]
 8040250:	601a      	str	r2, [r3, #0]
    *GPIOD_MODER |= (0b01010101 << 24); // Set
 8040252:	687b      	ldr	r3, [r7, #4]
 8040254:	681b      	ldr	r3, [r3, #0]
 8040256:	f043 42aa 	orr.w	r2, r3, #1426063360	@ 0x55000000
 804025a:	687b      	ldr	r3, [r7, #4]
 804025c:	601a      	str	r2, [r3, #0]
}
 804025e:	bf00      	nop
 8040260:	370c      	adds	r7, #12
 8040262:	46bd      	mov	sp, r7
 8040264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040268:	4770      	bx	lr
 804026a:	bf00      	nop
 804026c:	40023800 	.word	0x40023800
 8040270:	40020c00 	.word	0x40020c00

08040274 <Led_Ctrl>:
int RED_LED     = 14;
int BLUE_LED    = 15;
int ON          = 1;
int OFF         = 0;

void Led_Ctrl(int LED, int OnOff) {
 8040274:	b480      	push	{r7}
 8040276:	b085      	sub	sp, #20
 8040278:	af00      	add	r7, sp, #0
 804027a:	6078      	str	r0, [r7, #4]
 804027c:	6039      	str	r1, [r7, #0]
    uint32_t* GPIOD_ODR = (uint32_t*)(GPIOD_BASE_ADDR + 0x14); 
 804027e:	4b0f      	ldr	r3, [pc, #60]	@ (80402bc <Led_Ctrl+0x48>)
 8040280:	60fb      	str	r3, [r7, #12]

    if (OnOff == 1)
 8040282:	683b      	ldr	r3, [r7, #0]
 8040284:	2b01      	cmp	r3, #1
 8040286:	d109      	bne.n	804029c <Led_Ctrl+0x28>
        *GPIOD_ODR |=  (0b1 << LED);
 8040288:	68fb      	ldr	r3, [r7, #12]
 804028a:	681b      	ldr	r3, [r3, #0]
 804028c:	2101      	movs	r1, #1
 804028e:	687a      	ldr	r2, [r7, #4]
 8040290:	fa01 f202 	lsl.w	r2, r1, r2
 8040294:	431a      	orrs	r2, r3
 8040296:	68fb      	ldr	r3, [r7, #12]
 8040298:	601a      	str	r2, [r3, #0]
    else 
        *GPIOD_ODR &= ~(0b1 << LED);
}
 804029a:	e009      	b.n	80402b0 <Led_Ctrl+0x3c>
        *GPIOD_ODR &= ~(0b1 << LED);
 804029c:	68fb      	ldr	r3, [r7, #12]
 804029e:	681b      	ldr	r3, [r3, #0]
 80402a0:	2101      	movs	r1, #1
 80402a2:	687a      	ldr	r2, [r7, #4]
 80402a4:	fa01 f202 	lsl.w	r2, r1, r2
 80402a8:	43d2      	mvns	r2, r2
 80402aa:	401a      	ands	r2, r3
 80402ac:	68fb      	ldr	r3, [r7, #12]
 80402ae:	601a      	str	r2, [r3, #0]
}
 80402b0:	bf00      	nop
 80402b2:	3714      	adds	r7, #20
 80402b4:	46bd      	mov	sp, r7
 80402b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80402ba:	4770      	bx	lr
 80402bc:	40020c14 	.word	0x40020c14

080402c0 <Button_Status>:

// 4 - Check if the button is pressed or not
int Button_Status() {
 80402c0:	b480      	push	{r7}
 80402c2:	b083      	sub	sp, #12
 80402c4:	af00      	add	r7, sp, #0
    uint32_t* GPIOA_IDR = (uint32_t*)(GPIOA_BASE_ADDR + 0x10);
 80402c6:	4b06      	ldr	r3, [pc, #24]	@ (80402e0 <Button_Status+0x20>)
 80402c8:	607b      	str	r3, [r7, #4]
    return (*GPIOA_IDR >> 0) & 1;
 80402ca:	687b      	ldr	r3, [r7, #4]
 80402cc:	681b      	ldr	r3, [r3, #0]
 80402ce:	f003 0301 	and.w	r3, r3, #1
}
 80402d2:	4618      	mov	r0, r3
 80402d4:	370c      	adds	r7, #12
 80402d6:	46bd      	mov	sp, r7
 80402d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80402dc:	4770      	bx	lr
 80402de:	bf00      	nop
 80402e0:	40020010 	.word	0x40020010

080402e4 <Button_Interrupt_Int>:

#define EXTI_BASE_ADDR 0x40013C00
#define ISER_BASE_ADDR 0xE000E100 // From ref manual - M4

void Button_Interrupt_Int() {
 80402e4:	b480      	push	{r7}
 80402e6:	b085      	sub	sp, #20
 80402e8:	af00      	add	r7, sp, #0

  // Config EXTI to send interrupt to NVIC when detect rising of failling edge

  // select trigger for EXTI0 is rising
  uint32_t* EXTI_RTSR = (uint32_t*)(EXTI_BASE_ADDR + 0x08);
 80402ea:	4b13      	ldr	r3, [pc, #76]	@ (8040338 <Button_Interrupt_Int+0x54>)
 80402ec:	60fb      	str	r3, [r7, #12]
  *EXTI_RTSR |= (0b1 << 0);
 80402ee:	68fb      	ldr	r3, [r7, #12]
 80402f0:	681b      	ldr	r3, [r3, #0]
 80402f2:	f043 0201 	orr.w	r2, r3, #1
 80402f6:	68fb      	ldr	r3, [r7, #12]
 80402f8:	601a      	str	r2, [r3, #0]

  // select trigger for EXTI0 is falling
  uint32_t* EXTI_FTSR = (uint32_t*)(EXTI_BASE_ADDR + 0x0C);
 80402fa:	4b10      	ldr	r3, [pc, #64]	@ (804033c <Button_Interrupt_Int+0x58>)
 80402fc:	60bb      	str	r3, [r7, #8]
  *EXTI_FTSR |= (0b1 << 0);
 80402fe:	68bb      	ldr	r3, [r7, #8]
 8040300:	681b      	ldr	r3, [r3, #0]
 8040302:	f043 0201 	orr.w	r2, r3, #1
 8040306:	68bb      	ldr	r3, [r7, #8]
 8040308:	601a      	str	r2, [r3, #0]

  // masking
  uint32_t* EXTI_IMR = (uint32_t*)(EXTI_BASE_ADDR + 0x00);
 804030a:	4b0d      	ldr	r3, [pc, #52]	@ (8040340 <Button_Interrupt_Int+0x5c>)
 804030c:	607b      	str	r3, [r7, #4]
  *EXTI_IMR |= (0b1 << 0);
 804030e:	687b      	ldr	r3, [r7, #4]
 8040310:	681b      	ldr	r3, [r3, #0]
 8040312:	f043 0201 	orr.w	r2, r3, #1
 8040316:	687b      	ldr	r3, [r7, #4]
 8040318:	601a      	str	r2, [r3, #0]

  // NVIC accepts interrupt from EXTI0
  /*
    From vectore table in ref manual - stm32, we know position of EXTI0 interrupt is 6
  */
  uint32_t* ISER0 = (uint32_t*)(ISER_BASE_ADDR + 0x00);
 804031a:	4b0a      	ldr	r3, [pc, #40]	@ (8040344 <Button_Interrupt_Int+0x60>)
 804031c:	603b      	str	r3, [r7, #0]
  *ISER0 |= (0b1 << 6);
 804031e:	683b      	ldr	r3, [r7, #0]
 8040320:	681b      	ldr	r3, [r3, #0]
 8040322:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8040326:	683b      	ldr	r3, [r7, #0]
 8040328:	601a      	str	r2, [r3, #0]

}
 804032a:	bf00      	nop
 804032c:	3714      	adds	r7, #20
 804032e:	46bd      	mov	sp, r7
 8040330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040334:	4770      	bx	lr
 8040336:	bf00      	nop
 8040338:	40013c08 	.word	0x40013c08
 804033c:	40013c0c 	.word	0x40013c0c
 8040340:	40013c00 	.word	0x40013c00
 8040344:	e000e100 	.word	0xe000e100

08040348 <EXTI0_IRQHandler>:

void EXTI0_IRQHandler() {
 8040348:	b590      	push	{r4, r7, lr}
 804034a:	b083      	sub	sp, #12
 804034c:	af00      	add	r7, sp, #0

  Led_Ctrl(GREEN_LED, Button_Status());
 804034e:	4b0a      	ldr	r3, [pc, #40]	@ (8040378 <EXTI0_IRQHandler+0x30>)
 8040350:	681c      	ldr	r4, [r3, #0]
 8040352:	f7ff ffb5 	bl	80402c0 <Button_Status>
 8040356:	4603      	mov	r3, r0
 8040358:	4619      	mov	r1, r3
 804035a:	4620      	mov	r0, r4
 804035c:	f7ff ff8a 	bl	8040274 <Led_Ctrl>

  // Clear interrupt flag to exit handler function
  uint32_t* EXTI_PR = (uint32_t*)(EXTI_BASE_ADDR + 0x14);
 8040360:	4b06      	ldr	r3, [pc, #24]	@ (804037c <EXTI0_IRQHandler+0x34>)
 8040362:	607b      	str	r3, [r7, #4]
  *EXTI_PR |= (0b1 << 0);
 8040364:	687b      	ldr	r3, [r7, #4]
 8040366:	681b      	ldr	r3, [r3, #0]
 8040368:	f043 0201 	orr.w	r2, r3, #1
 804036c:	687b      	ldr	r3, [r7, #4]
 804036e:	601a      	str	r2, [r3, #0]
}
 8040370:	bf00      	nop
 8040372:	370c      	adds	r7, #12
 8040374:	46bd      	mov	sp, r7
 8040376:	bd90      	pop	{r4, r7, pc}
 8040378:	20000000 	.word	0x20000000
 804037c:	40013c14 	.word	0x40013c14

08040380 <main>:

int main() {
 8040380:	b580      	push	{r7, lr}
 8040382:	af00      	add	r7, sp, #0

//HAL_Init();
  Button_Init();
 8040384:	f7ff ff28 	bl	80401d8 <Button_Init>
  Led_Init();
 8040388:	f7ff ff4a 	bl	8040220 <Led_Init>
  Button_Interrupt_Int();
 804038c:	f7ff ffaa 	bl	80402e4 <Button_Interrupt_Int>




  while(1) {
 8040390:	bf00      	nop
 8040392:	e7fd      	b.n	8040390 <main+0x10>

08040394 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8040394:	b480      	push	{r7}
 8040396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8040398:	bf00      	nop
 804039a:	e7fd      	b.n	8040398 <NMI_Handler+0x4>

0804039c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 804039c:	b480      	push	{r7}
 804039e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80403a0:	bf00      	nop
 80403a2:	e7fd      	b.n	80403a0 <HardFault_Handler+0x4>

080403a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80403a4:	b480      	push	{r7}
 80403a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80403a8:	bf00      	nop
 80403aa:	e7fd      	b.n	80403a8 <MemManage_Handler+0x4>

080403ac <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80403ac:	b480      	push	{r7}
 80403ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80403b0:	bf00      	nop
 80403b2:	e7fd      	b.n	80403b0 <BusFault_Handler+0x4>

080403b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80403b4:	b480      	push	{r7}
 80403b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80403b8:	bf00      	nop
 80403ba:	e7fd      	b.n	80403b8 <UsageFault_Handler+0x4>

080403bc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80403bc:	b480      	push	{r7}
 80403be:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80403c0:	bf00      	nop
 80403c2:	46bd      	mov	sp, r7
 80403c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80403c8:	4770      	bx	lr

080403ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80403ca:	b480      	push	{r7}
 80403cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80403ce:	bf00      	nop
 80403d0:	46bd      	mov	sp, r7
 80403d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80403d6:	4770      	bx	lr

080403d8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80403d8:	b480      	push	{r7}
 80403da:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80403dc:	bf00      	nop
 80403de:	46bd      	mov	sp, r7
 80403e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80403e4:	4770      	bx	lr

080403e6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80403e6:	b580      	push	{r7, lr}
 80403e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80403ea:	f000 f849 	bl	8040480 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80403ee:	bf00      	nop
 80403f0:	bd80      	pop	{r7, pc}
	...

080403f4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80403f4:	b580      	push	{r7, lr}
 80403f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80403f8:	4802      	ldr	r0, [pc, #8]	@ (8040404 <OTG_FS_IRQHandler+0x10>)
 80403fa:	f000 f855 	bl	80404a8 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80403fe:	bf00      	nop
 8040400:	bd80      	pop	{r7, pc}
 8040402:	bf00      	nop
 8040404:	20000028 	.word	0x20000028

08040408 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8040408:	b480      	push	{r7}
 804040a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 804040c:	4b06      	ldr	r3, [pc, #24]	@ (8040428 <SystemInit+0x20>)
 804040e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8040412:	4a05      	ldr	r2, [pc, #20]	@ (8040428 <SystemInit+0x20>)
 8040414:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8040418:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 804041c:	bf00      	nop
 804041e:	46bd      	mov	sp, r7
 8040420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040424:	4770      	bx	lr
 8040426:	bf00      	nop
 8040428:	e000ed00 	.word	0xe000ed00

0804042c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 804042c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8040464 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8040430:	f7ff ffea 	bl	8040408 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8040434:	480c      	ldr	r0, [pc, #48]	@ (8040468 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8040436:	490d      	ldr	r1, [pc, #52]	@ (804046c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8040438:	4a0d      	ldr	r2, [pc, #52]	@ (8040470 <LoopFillZerobss+0x1a>)
  movs r3, #0
 804043a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 804043c:	e002      	b.n	8040444 <LoopCopyDataInit>

0804043e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 804043e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8040440:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8040442:	3304      	adds	r3, #4

08040444 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8040444:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8040446:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8040448:	d3f9      	bcc.n	804043e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 804044a:	4a0a      	ldr	r2, [pc, #40]	@ (8040474 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 804044c:	4c0a      	ldr	r4, [pc, #40]	@ (8040478 <LoopFillZerobss+0x22>)
  movs r3, #0
 804044e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8040450:	e001      	b.n	8040456 <LoopFillZerobss>

08040452 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8040452:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8040454:	3204      	adds	r2, #4

08040456 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8040456:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8040458:	d3fb      	bcc.n	8040452 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 804045a:	f002 fa23 	bl	80428a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 804045e:	f7ff ff8f 	bl	8040380 <main>
  bx  lr    
 8040462:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8040464:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8040468:	20000000 	.word	0x20000000
  ldr r1, =_edata
 804046c:	20000008 	.word	0x20000008
  ldr r2, =_sidata
 8040470:	0804290c 	.word	0x0804290c
  ldr r2, =_sbss
 8040474:	20000008 	.word	0x20000008
  ldr r4, =_ebss
 8040478:	20000408 	.word	0x20000408

0804047c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 804047c:	e7fe      	b.n	804047c <ADC_IRQHandler>
	...

08040480 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8040480:	b480      	push	{r7}
 8040482:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8040484:	4b06      	ldr	r3, [pc, #24]	@ (80404a0 <HAL_IncTick+0x20>)
 8040486:	781b      	ldrb	r3, [r3, #0]
 8040488:	461a      	mov	r2, r3
 804048a:	4b06      	ldr	r3, [pc, #24]	@ (80404a4 <HAL_IncTick+0x24>)
 804048c:	681b      	ldr	r3, [r3, #0]
 804048e:	4413      	add	r3, r2
 8040490:	4a04      	ldr	r2, [pc, #16]	@ (80404a4 <HAL_IncTick+0x24>)
 8040492:	6013      	str	r3, [r2, #0]
}
 8040494:	bf00      	nop
 8040496:	46bd      	mov	sp, r7
 8040498:	f85d 7b04 	ldr.w	r7, [sp], #4
 804049c:	4770      	bx	lr
 804049e:	bf00      	nop
 80404a0:	20000004 	.word	0x20000004
 80404a4:	20000024 	.word	0x20000024

080404a8 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80404a8:	b580      	push	{r7, lr}
 80404aa:	b086      	sub	sp, #24
 80404ac:	af00      	add	r7, sp, #0
 80404ae:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80404b0:	687b      	ldr	r3, [r7, #4]
 80404b2:	681b      	ldr	r3, [r3, #0]
 80404b4:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80404b6:	693b      	ldr	r3, [r7, #16]
 80404b8:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80404ba:	687b      	ldr	r3, [r7, #4]
 80404bc:	681b      	ldr	r3, [r3, #0]
 80404be:	4618      	mov	r0, r3
 80404c0:	f001 fea7 	bl	8042212 <USB_GetMode>
 80404c4:	4603      	mov	r3, r0
 80404c6:	2b01      	cmp	r3, #1
 80404c8:	f040 80fb 	bne.w	80406c2 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80404cc:	687b      	ldr	r3, [r7, #4]
 80404ce:	681b      	ldr	r3, [r3, #0]
 80404d0:	4618      	mov	r0, r3
 80404d2:	f001 fe6a 	bl	80421aa <USB_ReadInterrupts>
 80404d6:	4603      	mov	r3, r0
 80404d8:	2b00      	cmp	r3, #0
 80404da:	f000 80f1 	beq.w	80406c0 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80404de:	687b      	ldr	r3, [r7, #4]
 80404e0:	681b      	ldr	r3, [r3, #0]
 80404e2:	4618      	mov	r0, r3
 80404e4:	f001 fe61 	bl	80421aa <USB_ReadInterrupts>
 80404e8:	4603      	mov	r3, r0
 80404ea:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80404ee:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80404f2:	d104      	bne.n	80404fe <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80404f4:	687b      	ldr	r3, [r7, #4]
 80404f6:	681b      	ldr	r3, [r3, #0]
 80404f8:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80404fc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80404fe:	687b      	ldr	r3, [r7, #4]
 8040500:	681b      	ldr	r3, [r3, #0]
 8040502:	4618      	mov	r0, r3
 8040504:	f001 fe51 	bl	80421aa <USB_ReadInterrupts>
 8040508:	4603      	mov	r3, r0
 804050a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 804050e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8040512:	d104      	bne.n	804051e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8040514:	687b      	ldr	r3, [r7, #4]
 8040516:	681b      	ldr	r3, [r3, #0]
 8040518:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 804051c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 804051e:	687b      	ldr	r3, [r7, #4]
 8040520:	681b      	ldr	r3, [r3, #0]
 8040522:	4618      	mov	r0, r3
 8040524:	f001 fe41 	bl	80421aa <USB_ReadInterrupts>
 8040528:	4603      	mov	r3, r0
 804052a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 804052e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8040532:	d104      	bne.n	804053e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8040534:	687b      	ldr	r3, [r7, #4]
 8040536:	681b      	ldr	r3, [r3, #0]
 8040538:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 804053c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 804053e:	687b      	ldr	r3, [r7, #4]
 8040540:	681b      	ldr	r3, [r3, #0]
 8040542:	4618      	mov	r0, r3
 8040544:	f001 fe31 	bl	80421aa <USB_ReadInterrupts>
 8040548:	4603      	mov	r3, r0
 804054a:	f003 0302 	and.w	r3, r3, #2
 804054e:	2b02      	cmp	r3, #2
 8040550:	d103      	bne.n	804055a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8040552:	687b      	ldr	r3, [r7, #4]
 8040554:	681b      	ldr	r3, [r3, #0]
 8040556:	2202      	movs	r2, #2
 8040558:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 804055a:	687b      	ldr	r3, [r7, #4]
 804055c:	681b      	ldr	r3, [r3, #0]
 804055e:	4618      	mov	r0, r3
 8040560:	f001 fe23 	bl	80421aa <USB_ReadInterrupts>
 8040564:	4603      	mov	r3, r0
 8040566:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 804056a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 804056e:	d120      	bne.n	80405b2 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8040570:	687b      	ldr	r3, [r7, #4]
 8040572:	681b      	ldr	r3, [r3, #0]
 8040574:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8040578:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 804057a:	68fb      	ldr	r3, [r7, #12]
 804057c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8040580:	681b      	ldr	r3, [r3, #0]
 8040582:	f003 0301 	and.w	r3, r3, #1
 8040586:	2b00      	cmp	r3, #0
 8040588:	d113      	bne.n	80405b2 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 804058a:	2110      	movs	r1, #16
 804058c:	6938      	ldr	r0, [r7, #16]
 804058e:	f001 fd54 	bl	804203a <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8040592:	6938      	ldr	r0, [r7, #16]
 8040594:	f001 fd83 	bl	804209e <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8040598:	687b      	ldr	r3, [r7, #4]
 804059a:	7a5b      	ldrb	r3, [r3, #9]
 804059c:	2b02      	cmp	r3, #2
 804059e:	d105      	bne.n	80405ac <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80405a0:	687b      	ldr	r3, [r7, #4]
 80405a2:	681b      	ldr	r3, [r3, #0]
 80405a4:	2101      	movs	r1, #1
 80405a6:	4618      	mov	r0, r3
 80405a8:	f001 fe41 	bl	804222e <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80405ac:	6878      	ldr	r0, [r7, #4]
 80405ae:	f002 f8f9 	bl	80427a4 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80405b2:	687b      	ldr	r3, [r7, #4]
 80405b4:	681b      	ldr	r3, [r3, #0]
 80405b6:	4618      	mov	r0, r3
 80405b8:	f001 fdf7 	bl	80421aa <USB_ReadInterrupts>
 80405bc:	4603      	mov	r3, r0
 80405be:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80405c2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80405c6:	d102      	bne.n	80405ce <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 80405c8:	6878      	ldr	r0, [r7, #4]
 80405ca:	f001 fca1 	bl	8041f10 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80405ce:	687b      	ldr	r3, [r7, #4]
 80405d0:	681b      	ldr	r3, [r3, #0]
 80405d2:	4618      	mov	r0, r3
 80405d4:	f001 fde9 	bl	80421aa <USB_ReadInterrupts>
 80405d8:	4603      	mov	r3, r0
 80405da:	f003 0308 	and.w	r3, r3, #8
 80405de:	2b08      	cmp	r3, #8
 80405e0:	d106      	bne.n	80405f0 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80405e2:	6878      	ldr	r0, [r7, #4]
 80405e4:	f002 f8c2 	bl	804276c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80405e8:	687b      	ldr	r3, [r7, #4]
 80405ea:	681b      	ldr	r3, [r3, #0]
 80405ec:	2208      	movs	r2, #8
 80405ee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80405f0:	687b      	ldr	r3, [r7, #4]
 80405f2:	681b      	ldr	r3, [r3, #0]
 80405f4:	4618      	mov	r0, r3
 80405f6:	f001 fdd8 	bl	80421aa <USB_ReadInterrupts>
 80405fa:	4603      	mov	r3, r0
 80405fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8040600:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8040604:	d139      	bne.n	804067a <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8040606:	687b      	ldr	r3, [r7, #4]
 8040608:	681b      	ldr	r3, [r3, #0]
 804060a:	4618      	mov	r0, r3
 804060c:	f001 fe4c 	bl	80422a8 <USB_HC_ReadInterrupt>
 8040610:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8040612:	2300      	movs	r3, #0
 8040614:	617b      	str	r3, [r7, #20]
 8040616:	e025      	b.n	8040664 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8040618:	697b      	ldr	r3, [r7, #20]
 804061a:	f003 030f 	and.w	r3, r3, #15
 804061e:	68ba      	ldr	r2, [r7, #8]
 8040620:	fa22 f303 	lsr.w	r3, r2, r3
 8040624:	f003 0301 	and.w	r3, r3, #1
 8040628:	2b00      	cmp	r3, #0
 804062a:	d018      	beq.n	804065e <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 804062c:	697b      	ldr	r3, [r7, #20]
 804062e:	015a      	lsls	r2, r3, #5
 8040630:	68fb      	ldr	r3, [r7, #12]
 8040632:	4413      	add	r3, r2
 8040634:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8040638:	681b      	ldr	r3, [r3, #0]
 804063a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 804063e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8040642:	d106      	bne.n	8040652 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8040644:	697b      	ldr	r3, [r7, #20]
 8040646:	b2db      	uxtb	r3, r3
 8040648:	4619      	mov	r1, r3
 804064a:	6878      	ldr	r0, [r7, #4]
 804064c:	f000 f859 	bl	8040702 <HCD_HC_IN_IRQHandler>
 8040650:	e005      	b.n	804065e <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8040652:	697b      	ldr	r3, [r7, #20]
 8040654:	b2db      	uxtb	r3, r3
 8040656:	4619      	mov	r1, r3
 8040658:	6878      	ldr	r0, [r7, #4]
 804065a:	f000 febb 	bl	80413d4 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 804065e:	697b      	ldr	r3, [r7, #20]
 8040660:	3301      	adds	r3, #1
 8040662:	617b      	str	r3, [r7, #20]
 8040664:	687b      	ldr	r3, [r7, #4]
 8040666:	795b      	ldrb	r3, [r3, #5]
 8040668:	461a      	mov	r2, r3
 804066a:	697b      	ldr	r3, [r7, #20]
 804066c:	4293      	cmp	r3, r2
 804066e:	d3d3      	bcc.n	8040618 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8040670:	687b      	ldr	r3, [r7, #4]
 8040672:	681b      	ldr	r3, [r3, #0]
 8040674:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8040678:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 804067a:	687b      	ldr	r3, [r7, #4]
 804067c:	681b      	ldr	r3, [r3, #0]
 804067e:	4618      	mov	r0, r3
 8040680:	f001 fd93 	bl	80421aa <USB_ReadInterrupts>
 8040684:	4603      	mov	r3, r0
 8040686:	f003 0310 	and.w	r3, r3, #16
 804068a:	2b10      	cmp	r3, #16
 804068c:	d101      	bne.n	8040692 <HAL_HCD_IRQHandler+0x1ea>
 804068e:	2301      	movs	r3, #1
 8040690:	e000      	b.n	8040694 <HAL_HCD_IRQHandler+0x1ec>
 8040692:	2300      	movs	r3, #0
 8040694:	2b00      	cmp	r3, #0
 8040696:	d014      	beq.n	80406c2 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8040698:	687b      	ldr	r3, [r7, #4]
 804069a:	681b      	ldr	r3, [r3, #0]
 804069c:	699a      	ldr	r2, [r3, #24]
 804069e:	687b      	ldr	r3, [r7, #4]
 80406a0:	681b      	ldr	r3, [r3, #0]
 80406a2:	f022 0210 	bic.w	r2, r2, #16
 80406a6:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80406a8:	6878      	ldr	r0, [r7, #4]
 80406aa:	f001 fb52 	bl	8041d52 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80406ae:	687b      	ldr	r3, [r7, #4]
 80406b0:	681b      	ldr	r3, [r3, #0]
 80406b2:	699a      	ldr	r2, [r3, #24]
 80406b4:	687b      	ldr	r3, [r7, #4]
 80406b6:	681b      	ldr	r3, [r3, #0]
 80406b8:	f042 0210 	orr.w	r2, r2, #16
 80406bc:	619a      	str	r2, [r3, #24]
 80406be:	e000      	b.n	80406c2 <HAL_HCD_IRQHandler+0x21a>
      return;
 80406c0:	bf00      	nop
    }
  }
}
 80406c2:	3718      	adds	r7, #24
 80406c4:	46bd      	mov	sp, r7
 80406c6:	bd80      	pop	{r7, pc}

080406c8 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80406c8:	b580      	push	{r7, lr}
 80406ca:	b082      	sub	sp, #8
 80406cc:	af00      	add	r7, sp, #0
 80406ce:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80406d0:	687b      	ldr	r3, [r7, #4]
 80406d2:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80406d6:	2b01      	cmp	r3, #1
 80406d8:	d101      	bne.n	80406de <HAL_HCD_Stop+0x16>
 80406da:	2302      	movs	r3, #2
 80406dc:	e00d      	b.n	80406fa <HAL_HCD_Stop+0x32>
 80406de:	687b      	ldr	r3, [r7, #4]
 80406e0:	2201      	movs	r2, #1
 80406e2:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 80406e6:	687b      	ldr	r3, [r7, #4]
 80406e8:	681b      	ldr	r3, [r3, #0]
 80406ea:	4618      	mov	r0, r3
 80406ec:	f001 ff0d 	bl	804250a <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80406f0:	687b      	ldr	r3, [r7, #4]
 80406f2:	2200      	movs	r2, #0
 80406f4:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 80406f8:	2300      	movs	r3, #0
}
 80406fa:	4618      	mov	r0, r3
 80406fc:	3708      	adds	r7, #8
 80406fe:	46bd      	mov	sp, r7
 8040700:	bd80      	pop	{r7, pc}

08040702 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8040702:	b580      	push	{r7, lr}
 8040704:	b086      	sub	sp, #24
 8040706:	af00      	add	r7, sp, #0
 8040708:	6078      	str	r0, [r7, #4]
 804070a:	460b      	mov	r3, r1
 804070c:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 804070e:	687b      	ldr	r3, [r7, #4]
 8040710:	681b      	ldr	r3, [r3, #0]
 8040712:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8040714:	697b      	ldr	r3, [r7, #20]
 8040716:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8040718:	687b      	ldr	r3, [r7, #4]
 804071a:	681b      	ldr	r3, [r3, #0]
 804071c:	78fa      	ldrb	r2, [r7, #3]
 804071e:	4611      	mov	r1, r2
 8040720:	4618      	mov	r0, r3
 8040722:	f001 fd55 	bl	80421d0 <USB_ReadChInterrupts>
 8040726:	4603      	mov	r3, r0
 8040728:	f003 0304 	and.w	r3, r3, #4
 804072c:	2b04      	cmp	r3, #4
 804072e:	d11a      	bne.n	8040766 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8040730:	78fb      	ldrb	r3, [r7, #3]
 8040732:	015a      	lsls	r2, r3, #5
 8040734:	693b      	ldr	r3, [r7, #16]
 8040736:	4413      	add	r3, r2
 8040738:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 804073c:	461a      	mov	r2, r3
 804073e:	2304      	movs	r3, #4
 8040740:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8040742:	78fa      	ldrb	r2, [r7, #3]
 8040744:	6879      	ldr	r1, [r7, #4]
 8040746:	4613      	mov	r3, r2
 8040748:	011b      	lsls	r3, r3, #4
 804074a:	1a9b      	subs	r3, r3, r2
 804074c:	009b      	lsls	r3, r3, #2
 804074e:	440b      	add	r3, r1
 8040750:	334d      	adds	r3, #77	@ 0x4d
 8040752:	2207      	movs	r2, #7
 8040754:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8040756:	687b      	ldr	r3, [r7, #4]
 8040758:	681b      	ldr	r3, [r3, #0]
 804075a:	78fa      	ldrb	r2, [r7, #3]
 804075c:	4611      	mov	r1, r2
 804075e:	4618      	mov	r0, r3
 8040760:	f001 fdb3 	bl	80422ca <USB_HC_Halt>
 8040764:	e09e      	b.n	80408a4 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8040766:	687b      	ldr	r3, [r7, #4]
 8040768:	681b      	ldr	r3, [r3, #0]
 804076a:	78fa      	ldrb	r2, [r7, #3]
 804076c:	4611      	mov	r1, r2
 804076e:	4618      	mov	r0, r3
 8040770:	f001 fd2e 	bl	80421d0 <USB_ReadChInterrupts>
 8040774:	4603      	mov	r3, r0
 8040776:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 804077a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 804077e:	d11b      	bne.n	80407b8 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8040780:	78fb      	ldrb	r3, [r7, #3]
 8040782:	015a      	lsls	r2, r3, #5
 8040784:	693b      	ldr	r3, [r7, #16]
 8040786:	4413      	add	r3, r2
 8040788:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 804078c:	461a      	mov	r2, r3
 804078e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8040792:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8040794:	78fa      	ldrb	r2, [r7, #3]
 8040796:	6879      	ldr	r1, [r7, #4]
 8040798:	4613      	mov	r3, r2
 804079a:	011b      	lsls	r3, r3, #4
 804079c:	1a9b      	subs	r3, r3, r2
 804079e:	009b      	lsls	r3, r3, #2
 80407a0:	440b      	add	r3, r1
 80407a2:	334d      	adds	r3, #77	@ 0x4d
 80407a4:	2208      	movs	r2, #8
 80407a6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80407a8:	687b      	ldr	r3, [r7, #4]
 80407aa:	681b      	ldr	r3, [r3, #0]
 80407ac:	78fa      	ldrb	r2, [r7, #3]
 80407ae:	4611      	mov	r1, r2
 80407b0:	4618      	mov	r0, r3
 80407b2:	f001 fd8a 	bl	80422ca <USB_HC_Halt>
 80407b6:	e075      	b.n	80408a4 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 80407b8:	687b      	ldr	r3, [r7, #4]
 80407ba:	681b      	ldr	r3, [r3, #0]
 80407bc:	78fa      	ldrb	r2, [r7, #3]
 80407be:	4611      	mov	r1, r2
 80407c0:	4618      	mov	r0, r3
 80407c2:	f001 fd05 	bl	80421d0 <USB_ReadChInterrupts>
 80407c6:	4603      	mov	r3, r0
 80407c8:	f003 0308 	and.w	r3, r3, #8
 80407cc:	2b08      	cmp	r3, #8
 80407ce:	d11a      	bne.n	8040806 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80407d0:	78fb      	ldrb	r3, [r7, #3]
 80407d2:	015a      	lsls	r2, r3, #5
 80407d4:	693b      	ldr	r3, [r7, #16]
 80407d6:	4413      	add	r3, r2
 80407d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80407dc:	461a      	mov	r2, r3
 80407de:	2308      	movs	r3, #8
 80407e0:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 80407e2:	78fa      	ldrb	r2, [r7, #3]
 80407e4:	6879      	ldr	r1, [r7, #4]
 80407e6:	4613      	mov	r3, r2
 80407e8:	011b      	lsls	r3, r3, #4
 80407ea:	1a9b      	subs	r3, r3, r2
 80407ec:	009b      	lsls	r3, r3, #2
 80407ee:	440b      	add	r3, r1
 80407f0:	334d      	adds	r3, #77	@ 0x4d
 80407f2:	2206      	movs	r2, #6
 80407f4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80407f6:	687b      	ldr	r3, [r7, #4]
 80407f8:	681b      	ldr	r3, [r3, #0]
 80407fa:	78fa      	ldrb	r2, [r7, #3]
 80407fc:	4611      	mov	r1, r2
 80407fe:	4618      	mov	r0, r3
 8040800:	f001 fd63 	bl	80422ca <USB_HC_Halt>
 8040804:	e04e      	b.n	80408a4 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8040806:	687b      	ldr	r3, [r7, #4]
 8040808:	681b      	ldr	r3, [r3, #0]
 804080a:	78fa      	ldrb	r2, [r7, #3]
 804080c:	4611      	mov	r1, r2
 804080e:	4618      	mov	r0, r3
 8040810:	f001 fcde 	bl	80421d0 <USB_ReadChInterrupts>
 8040814:	4603      	mov	r3, r0
 8040816:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 804081a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 804081e:	d11b      	bne.n	8040858 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8040820:	78fb      	ldrb	r3, [r7, #3]
 8040822:	015a      	lsls	r2, r3, #5
 8040824:	693b      	ldr	r3, [r7, #16]
 8040826:	4413      	add	r3, r2
 8040828:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 804082c:	461a      	mov	r2, r3
 804082e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8040832:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8040834:	78fa      	ldrb	r2, [r7, #3]
 8040836:	6879      	ldr	r1, [r7, #4]
 8040838:	4613      	mov	r3, r2
 804083a:	011b      	lsls	r3, r3, #4
 804083c:	1a9b      	subs	r3, r3, r2
 804083e:	009b      	lsls	r3, r3, #2
 8040840:	440b      	add	r3, r1
 8040842:	334d      	adds	r3, #77	@ 0x4d
 8040844:	2209      	movs	r2, #9
 8040846:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8040848:	687b      	ldr	r3, [r7, #4]
 804084a:	681b      	ldr	r3, [r3, #0]
 804084c:	78fa      	ldrb	r2, [r7, #3]
 804084e:	4611      	mov	r1, r2
 8040850:	4618      	mov	r0, r3
 8040852:	f001 fd3a 	bl	80422ca <USB_HC_Halt>
 8040856:	e025      	b.n	80408a4 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8040858:	687b      	ldr	r3, [r7, #4]
 804085a:	681b      	ldr	r3, [r3, #0]
 804085c:	78fa      	ldrb	r2, [r7, #3]
 804085e:	4611      	mov	r1, r2
 8040860:	4618      	mov	r0, r3
 8040862:	f001 fcb5 	bl	80421d0 <USB_ReadChInterrupts>
 8040866:	4603      	mov	r3, r0
 8040868:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 804086c:	2b80      	cmp	r3, #128	@ 0x80
 804086e:	d119      	bne.n	80408a4 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8040870:	78fb      	ldrb	r3, [r7, #3]
 8040872:	015a      	lsls	r2, r3, #5
 8040874:	693b      	ldr	r3, [r7, #16]
 8040876:	4413      	add	r3, r2
 8040878:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 804087c:	461a      	mov	r2, r3
 804087e:	2380      	movs	r3, #128	@ 0x80
 8040880:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8040882:	78fa      	ldrb	r2, [r7, #3]
 8040884:	6879      	ldr	r1, [r7, #4]
 8040886:	4613      	mov	r3, r2
 8040888:	011b      	lsls	r3, r3, #4
 804088a:	1a9b      	subs	r3, r3, r2
 804088c:	009b      	lsls	r3, r3, #2
 804088e:	440b      	add	r3, r1
 8040890:	334d      	adds	r3, #77	@ 0x4d
 8040892:	2207      	movs	r2, #7
 8040894:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8040896:	687b      	ldr	r3, [r7, #4]
 8040898:	681b      	ldr	r3, [r3, #0]
 804089a:	78fa      	ldrb	r2, [r7, #3]
 804089c:	4611      	mov	r1, r2
 804089e:	4618      	mov	r0, r3
 80408a0:	f001 fd13 	bl	80422ca <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80408a4:	687b      	ldr	r3, [r7, #4]
 80408a6:	681b      	ldr	r3, [r3, #0]
 80408a8:	78fa      	ldrb	r2, [r7, #3]
 80408aa:	4611      	mov	r1, r2
 80408ac:	4618      	mov	r0, r3
 80408ae:	f001 fc8f 	bl	80421d0 <USB_ReadChInterrupts>
 80408b2:	4603      	mov	r3, r0
 80408b4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80408b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80408bc:	d112      	bne.n	80408e4 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80408be:	687b      	ldr	r3, [r7, #4]
 80408c0:	681b      	ldr	r3, [r3, #0]
 80408c2:	78fa      	ldrb	r2, [r7, #3]
 80408c4:	4611      	mov	r1, r2
 80408c6:	4618      	mov	r0, r3
 80408c8:	f001 fcff 	bl	80422ca <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80408cc:	78fb      	ldrb	r3, [r7, #3]
 80408ce:	015a      	lsls	r2, r3, #5
 80408d0:	693b      	ldr	r3, [r7, #16]
 80408d2:	4413      	add	r3, r2
 80408d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80408d8:	461a      	mov	r2, r3
 80408da:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80408de:	6093      	str	r3, [r2, #8]
 80408e0:	f000 bd75 	b.w	80413ce <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80408e4:	687b      	ldr	r3, [r7, #4]
 80408e6:	681b      	ldr	r3, [r3, #0]
 80408e8:	78fa      	ldrb	r2, [r7, #3]
 80408ea:	4611      	mov	r1, r2
 80408ec:	4618      	mov	r0, r3
 80408ee:	f001 fc6f 	bl	80421d0 <USB_ReadChInterrupts>
 80408f2:	4603      	mov	r3, r0
 80408f4:	f003 0301 	and.w	r3, r3, #1
 80408f8:	2b01      	cmp	r3, #1
 80408fa:	f040 8128 	bne.w	8040b4e <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80408fe:	78fb      	ldrb	r3, [r7, #3]
 8040900:	015a      	lsls	r2, r3, #5
 8040902:	693b      	ldr	r3, [r7, #16]
 8040904:	4413      	add	r3, r2
 8040906:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 804090a:	461a      	mov	r2, r3
 804090c:	2320      	movs	r3, #32
 804090e:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8040910:	78fa      	ldrb	r2, [r7, #3]
 8040912:	6879      	ldr	r1, [r7, #4]
 8040914:	4613      	mov	r3, r2
 8040916:	011b      	lsls	r3, r3, #4
 8040918:	1a9b      	subs	r3, r3, r2
 804091a:	009b      	lsls	r3, r3, #2
 804091c:	440b      	add	r3, r1
 804091e:	331b      	adds	r3, #27
 8040920:	781b      	ldrb	r3, [r3, #0]
 8040922:	2b01      	cmp	r3, #1
 8040924:	d119      	bne.n	804095a <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8040926:	78fa      	ldrb	r2, [r7, #3]
 8040928:	6879      	ldr	r1, [r7, #4]
 804092a:	4613      	mov	r3, r2
 804092c:	011b      	lsls	r3, r3, #4
 804092e:	1a9b      	subs	r3, r3, r2
 8040930:	009b      	lsls	r3, r3, #2
 8040932:	440b      	add	r3, r1
 8040934:	331b      	adds	r3, #27
 8040936:	2200      	movs	r2, #0
 8040938:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 804093a:	78fb      	ldrb	r3, [r7, #3]
 804093c:	015a      	lsls	r2, r3, #5
 804093e:	693b      	ldr	r3, [r7, #16]
 8040940:	4413      	add	r3, r2
 8040942:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8040946:	685b      	ldr	r3, [r3, #4]
 8040948:	78fa      	ldrb	r2, [r7, #3]
 804094a:	0151      	lsls	r1, r2, #5
 804094c:	693a      	ldr	r2, [r7, #16]
 804094e:	440a      	add	r2, r1
 8040950:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8040954:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8040958:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 804095a:	687b      	ldr	r3, [r7, #4]
 804095c:	799b      	ldrb	r3, [r3, #6]
 804095e:	2b00      	cmp	r3, #0
 8040960:	d01b      	beq.n	804099a <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8040962:	78fa      	ldrb	r2, [r7, #3]
 8040964:	6879      	ldr	r1, [r7, #4]
 8040966:	4613      	mov	r3, r2
 8040968:	011b      	lsls	r3, r3, #4
 804096a:	1a9b      	subs	r3, r3, r2
 804096c:	009b      	lsls	r3, r3, #2
 804096e:	440b      	add	r3, r1
 8040970:	3330      	adds	r3, #48	@ 0x30
 8040972:	6819      	ldr	r1, [r3, #0]
 8040974:	78fb      	ldrb	r3, [r7, #3]
 8040976:	015a      	lsls	r2, r3, #5
 8040978:	693b      	ldr	r3, [r7, #16]
 804097a:	4413      	add	r3, r2
 804097c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8040980:	691b      	ldr	r3, [r3, #16]
 8040982:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8040986:	78fa      	ldrb	r2, [r7, #3]
 8040988:	1ac9      	subs	r1, r1, r3
 804098a:	6878      	ldr	r0, [r7, #4]
 804098c:	4613      	mov	r3, r2
 804098e:	011b      	lsls	r3, r3, #4
 8040990:	1a9b      	subs	r3, r3, r2
 8040992:	009b      	lsls	r3, r3, #2
 8040994:	4403      	add	r3, r0
 8040996:	3338      	adds	r3, #56	@ 0x38
 8040998:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 804099a:	78fa      	ldrb	r2, [r7, #3]
 804099c:	6879      	ldr	r1, [r7, #4]
 804099e:	4613      	mov	r3, r2
 80409a0:	011b      	lsls	r3, r3, #4
 80409a2:	1a9b      	subs	r3, r3, r2
 80409a4:	009b      	lsls	r3, r3, #2
 80409a6:	440b      	add	r3, r1
 80409a8:	334d      	adds	r3, #77	@ 0x4d
 80409aa:	2201      	movs	r2, #1
 80409ac:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 80409ae:	78fa      	ldrb	r2, [r7, #3]
 80409b0:	6879      	ldr	r1, [r7, #4]
 80409b2:	4613      	mov	r3, r2
 80409b4:	011b      	lsls	r3, r3, #4
 80409b6:	1a9b      	subs	r3, r3, r2
 80409b8:	009b      	lsls	r3, r3, #2
 80409ba:	440b      	add	r3, r1
 80409bc:	3344      	adds	r3, #68	@ 0x44
 80409be:	2200      	movs	r2, #0
 80409c0:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80409c2:	78fb      	ldrb	r3, [r7, #3]
 80409c4:	015a      	lsls	r2, r3, #5
 80409c6:	693b      	ldr	r3, [r7, #16]
 80409c8:	4413      	add	r3, r2
 80409ca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80409ce:	461a      	mov	r2, r3
 80409d0:	2301      	movs	r3, #1
 80409d2:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80409d4:	78fa      	ldrb	r2, [r7, #3]
 80409d6:	6879      	ldr	r1, [r7, #4]
 80409d8:	4613      	mov	r3, r2
 80409da:	011b      	lsls	r3, r3, #4
 80409dc:	1a9b      	subs	r3, r3, r2
 80409de:	009b      	lsls	r3, r3, #2
 80409e0:	440b      	add	r3, r1
 80409e2:	3326      	adds	r3, #38	@ 0x26
 80409e4:	781b      	ldrb	r3, [r3, #0]
 80409e6:	2b00      	cmp	r3, #0
 80409e8:	d00a      	beq.n	8040a00 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80409ea:	78fa      	ldrb	r2, [r7, #3]
 80409ec:	6879      	ldr	r1, [r7, #4]
 80409ee:	4613      	mov	r3, r2
 80409f0:	011b      	lsls	r3, r3, #4
 80409f2:	1a9b      	subs	r3, r3, r2
 80409f4:	009b      	lsls	r3, r3, #2
 80409f6:	440b      	add	r3, r1
 80409f8:	3326      	adds	r3, #38	@ 0x26
 80409fa:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80409fc:	2b02      	cmp	r3, #2
 80409fe:	d110      	bne.n	8040a22 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8040a00:	687b      	ldr	r3, [r7, #4]
 8040a02:	681b      	ldr	r3, [r3, #0]
 8040a04:	78fa      	ldrb	r2, [r7, #3]
 8040a06:	4611      	mov	r1, r2
 8040a08:	4618      	mov	r0, r3
 8040a0a:	f001 fc5e 	bl	80422ca <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8040a0e:	78fb      	ldrb	r3, [r7, #3]
 8040a10:	015a      	lsls	r2, r3, #5
 8040a12:	693b      	ldr	r3, [r7, #16]
 8040a14:	4413      	add	r3, r2
 8040a16:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8040a1a:	461a      	mov	r2, r3
 8040a1c:	2310      	movs	r3, #16
 8040a1e:	6093      	str	r3, [r2, #8]
 8040a20:	e03d      	b.n	8040a9e <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8040a22:	78fa      	ldrb	r2, [r7, #3]
 8040a24:	6879      	ldr	r1, [r7, #4]
 8040a26:	4613      	mov	r3, r2
 8040a28:	011b      	lsls	r3, r3, #4
 8040a2a:	1a9b      	subs	r3, r3, r2
 8040a2c:	009b      	lsls	r3, r3, #2
 8040a2e:	440b      	add	r3, r1
 8040a30:	3326      	adds	r3, #38	@ 0x26
 8040a32:	781b      	ldrb	r3, [r3, #0]
 8040a34:	2b03      	cmp	r3, #3
 8040a36:	d00a      	beq.n	8040a4e <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8040a38:	78fa      	ldrb	r2, [r7, #3]
 8040a3a:	6879      	ldr	r1, [r7, #4]
 8040a3c:	4613      	mov	r3, r2
 8040a3e:	011b      	lsls	r3, r3, #4
 8040a40:	1a9b      	subs	r3, r3, r2
 8040a42:	009b      	lsls	r3, r3, #2
 8040a44:	440b      	add	r3, r1
 8040a46:	3326      	adds	r3, #38	@ 0x26
 8040a48:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8040a4a:	2b01      	cmp	r3, #1
 8040a4c:	d127      	bne.n	8040a9e <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8040a4e:	78fb      	ldrb	r3, [r7, #3]
 8040a50:	015a      	lsls	r2, r3, #5
 8040a52:	693b      	ldr	r3, [r7, #16]
 8040a54:	4413      	add	r3, r2
 8040a56:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8040a5a:	681b      	ldr	r3, [r3, #0]
 8040a5c:	78fa      	ldrb	r2, [r7, #3]
 8040a5e:	0151      	lsls	r1, r2, #5
 8040a60:	693a      	ldr	r2, [r7, #16]
 8040a62:	440a      	add	r2, r1
 8040a64:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8040a68:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8040a6c:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8040a6e:	78fa      	ldrb	r2, [r7, #3]
 8040a70:	6879      	ldr	r1, [r7, #4]
 8040a72:	4613      	mov	r3, r2
 8040a74:	011b      	lsls	r3, r3, #4
 8040a76:	1a9b      	subs	r3, r3, r2
 8040a78:	009b      	lsls	r3, r3, #2
 8040a7a:	440b      	add	r3, r1
 8040a7c:	334c      	adds	r3, #76	@ 0x4c
 8040a7e:	2201      	movs	r2, #1
 8040a80:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8040a82:	78fa      	ldrb	r2, [r7, #3]
 8040a84:	6879      	ldr	r1, [r7, #4]
 8040a86:	4613      	mov	r3, r2
 8040a88:	011b      	lsls	r3, r3, #4
 8040a8a:	1a9b      	subs	r3, r3, r2
 8040a8c:	009b      	lsls	r3, r3, #2
 8040a8e:	440b      	add	r3, r1
 8040a90:	334c      	adds	r3, #76	@ 0x4c
 8040a92:	781a      	ldrb	r2, [r3, #0]
 8040a94:	78fb      	ldrb	r3, [r7, #3]
 8040a96:	4619      	mov	r1, r3
 8040a98:	6878      	ldr	r0, [r7, #4]
 8040a9a:	f001 fe91 	bl	80427c0 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8040a9e:	687b      	ldr	r3, [r7, #4]
 8040aa0:	799b      	ldrb	r3, [r3, #6]
 8040aa2:	2b01      	cmp	r3, #1
 8040aa4:	d13b      	bne.n	8040b1e <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8040aa6:	78fa      	ldrb	r2, [r7, #3]
 8040aa8:	6879      	ldr	r1, [r7, #4]
 8040aaa:	4613      	mov	r3, r2
 8040aac:	011b      	lsls	r3, r3, #4
 8040aae:	1a9b      	subs	r3, r3, r2
 8040ab0:	009b      	lsls	r3, r3, #2
 8040ab2:	440b      	add	r3, r1
 8040ab4:	3338      	adds	r3, #56	@ 0x38
 8040ab6:	6819      	ldr	r1, [r3, #0]
 8040ab8:	78fa      	ldrb	r2, [r7, #3]
 8040aba:	6878      	ldr	r0, [r7, #4]
 8040abc:	4613      	mov	r3, r2
 8040abe:	011b      	lsls	r3, r3, #4
 8040ac0:	1a9b      	subs	r3, r3, r2
 8040ac2:	009b      	lsls	r3, r3, #2
 8040ac4:	4403      	add	r3, r0
 8040ac6:	3328      	adds	r3, #40	@ 0x28
 8040ac8:	881b      	ldrh	r3, [r3, #0]
 8040aca:	440b      	add	r3, r1
 8040acc:	1e59      	subs	r1, r3, #1
 8040ace:	78fa      	ldrb	r2, [r7, #3]
 8040ad0:	6878      	ldr	r0, [r7, #4]
 8040ad2:	4613      	mov	r3, r2
 8040ad4:	011b      	lsls	r3, r3, #4
 8040ad6:	1a9b      	subs	r3, r3, r2
 8040ad8:	009b      	lsls	r3, r3, #2
 8040ada:	4403      	add	r3, r0
 8040adc:	3328      	adds	r3, #40	@ 0x28
 8040ade:	881b      	ldrh	r3, [r3, #0]
 8040ae0:	fbb1 f3f3 	udiv	r3, r1, r3
 8040ae4:	f003 0301 	and.w	r3, r3, #1
 8040ae8:	2b00      	cmp	r3, #0
 8040aea:	f000 8470 	beq.w	80413ce <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8040aee:	78fa      	ldrb	r2, [r7, #3]
 8040af0:	6879      	ldr	r1, [r7, #4]
 8040af2:	4613      	mov	r3, r2
 8040af4:	011b      	lsls	r3, r3, #4
 8040af6:	1a9b      	subs	r3, r3, r2
 8040af8:	009b      	lsls	r3, r3, #2
 8040afa:	440b      	add	r3, r1
 8040afc:	333c      	adds	r3, #60	@ 0x3c
 8040afe:	781b      	ldrb	r3, [r3, #0]
 8040b00:	78fa      	ldrb	r2, [r7, #3]
 8040b02:	f083 0301 	eor.w	r3, r3, #1
 8040b06:	b2d8      	uxtb	r0, r3
 8040b08:	6879      	ldr	r1, [r7, #4]
 8040b0a:	4613      	mov	r3, r2
 8040b0c:	011b      	lsls	r3, r3, #4
 8040b0e:	1a9b      	subs	r3, r3, r2
 8040b10:	009b      	lsls	r3, r3, #2
 8040b12:	440b      	add	r3, r1
 8040b14:	333c      	adds	r3, #60	@ 0x3c
 8040b16:	4602      	mov	r2, r0
 8040b18:	701a      	strb	r2, [r3, #0]
 8040b1a:	f000 bc58 	b.w	80413ce <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8040b1e:	78fa      	ldrb	r2, [r7, #3]
 8040b20:	6879      	ldr	r1, [r7, #4]
 8040b22:	4613      	mov	r3, r2
 8040b24:	011b      	lsls	r3, r3, #4
 8040b26:	1a9b      	subs	r3, r3, r2
 8040b28:	009b      	lsls	r3, r3, #2
 8040b2a:	440b      	add	r3, r1
 8040b2c:	333c      	adds	r3, #60	@ 0x3c
 8040b2e:	781b      	ldrb	r3, [r3, #0]
 8040b30:	78fa      	ldrb	r2, [r7, #3]
 8040b32:	f083 0301 	eor.w	r3, r3, #1
 8040b36:	b2d8      	uxtb	r0, r3
 8040b38:	6879      	ldr	r1, [r7, #4]
 8040b3a:	4613      	mov	r3, r2
 8040b3c:	011b      	lsls	r3, r3, #4
 8040b3e:	1a9b      	subs	r3, r3, r2
 8040b40:	009b      	lsls	r3, r3, #2
 8040b42:	440b      	add	r3, r1
 8040b44:	333c      	adds	r3, #60	@ 0x3c
 8040b46:	4602      	mov	r2, r0
 8040b48:	701a      	strb	r2, [r3, #0]
 8040b4a:	f000 bc40 	b.w	80413ce <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8040b4e:	687b      	ldr	r3, [r7, #4]
 8040b50:	681b      	ldr	r3, [r3, #0]
 8040b52:	78fa      	ldrb	r2, [r7, #3]
 8040b54:	4611      	mov	r1, r2
 8040b56:	4618      	mov	r0, r3
 8040b58:	f001 fb3a 	bl	80421d0 <USB_ReadChInterrupts>
 8040b5c:	4603      	mov	r3, r0
 8040b5e:	f003 0320 	and.w	r3, r3, #32
 8040b62:	2b20      	cmp	r3, #32
 8040b64:	d131      	bne.n	8040bca <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8040b66:	78fb      	ldrb	r3, [r7, #3]
 8040b68:	015a      	lsls	r2, r3, #5
 8040b6a:	693b      	ldr	r3, [r7, #16]
 8040b6c:	4413      	add	r3, r2
 8040b6e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8040b72:	461a      	mov	r2, r3
 8040b74:	2320      	movs	r3, #32
 8040b76:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8040b78:	78fa      	ldrb	r2, [r7, #3]
 8040b7a:	6879      	ldr	r1, [r7, #4]
 8040b7c:	4613      	mov	r3, r2
 8040b7e:	011b      	lsls	r3, r3, #4
 8040b80:	1a9b      	subs	r3, r3, r2
 8040b82:	009b      	lsls	r3, r3, #2
 8040b84:	440b      	add	r3, r1
 8040b86:	331a      	adds	r3, #26
 8040b88:	781b      	ldrb	r3, [r3, #0]
 8040b8a:	2b01      	cmp	r3, #1
 8040b8c:	f040 841f 	bne.w	80413ce <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8040b90:	78fa      	ldrb	r2, [r7, #3]
 8040b92:	6879      	ldr	r1, [r7, #4]
 8040b94:	4613      	mov	r3, r2
 8040b96:	011b      	lsls	r3, r3, #4
 8040b98:	1a9b      	subs	r3, r3, r2
 8040b9a:	009b      	lsls	r3, r3, #2
 8040b9c:	440b      	add	r3, r1
 8040b9e:	331b      	adds	r3, #27
 8040ba0:	2201      	movs	r2, #1
 8040ba2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8040ba4:	78fa      	ldrb	r2, [r7, #3]
 8040ba6:	6879      	ldr	r1, [r7, #4]
 8040ba8:	4613      	mov	r3, r2
 8040baa:	011b      	lsls	r3, r3, #4
 8040bac:	1a9b      	subs	r3, r3, r2
 8040bae:	009b      	lsls	r3, r3, #2
 8040bb0:	440b      	add	r3, r1
 8040bb2:	334d      	adds	r3, #77	@ 0x4d
 8040bb4:	2203      	movs	r2, #3
 8040bb6:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8040bb8:	687b      	ldr	r3, [r7, #4]
 8040bba:	681b      	ldr	r3, [r3, #0]
 8040bbc:	78fa      	ldrb	r2, [r7, #3]
 8040bbe:	4611      	mov	r1, r2
 8040bc0:	4618      	mov	r0, r3
 8040bc2:	f001 fb82 	bl	80422ca <USB_HC_Halt>
 8040bc6:	f000 bc02 	b.w	80413ce <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8040bca:	687b      	ldr	r3, [r7, #4]
 8040bcc:	681b      	ldr	r3, [r3, #0]
 8040bce:	78fa      	ldrb	r2, [r7, #3]
 8040bd0:	4611      	mov	r1, r2
 8040bd2:	4618      	mov	r0, r3
 8040bd4:	f001 fafc 	bl	80421d0 <USB_ReadChInterrupts>
 8040bd8:	4603      	mov	r3, r0
 8040bda:	f003 0302 	and.w	r3, r3, #2
 8040bde:	2b02      	cmp	r3, #2
 8040be0:	f040 8305 	bne.w	80411ee <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8040be4:	78fb      	ldrb	r3, [r7, #3]
 8040be6:	015a      	lsls	r2, r3, #5
 8040be8:	693b      	ldr	r3, [r7, #16]
 8040bea:	4413      	add	r3, r2
 8040bec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8040bf0:	461a      	mov	r2, r3
 8040bf2:	2302      	movs	r3, #2
 8040bf4:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8040bf6:	78fa      	ldrb	r2, [r7, #3]
 8040bf8:	6879      	ldr	r1, [r7, #4]
 8040bfa:	4613      	mov	r3, r2
 8040bfc:	011b      	lsls	r3, r3, #4
 8040bfe:	1a9b      	subs	r3, r3, r2
 8040c00:	009b      	lsls	r3, r3, #2
 8040c02:	440b      	add	r3, r1
 8040c04:	334d      	adds	r3, #77	@ 0x4d
 8040c06:	781b      	ldrb	r3, [r3, #0]
 8040c08:	2b01      	cmp	r3, #1
 8040c0a:	d114      	bne.n	8040c36 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8040c0c:	78fa      	ldrb	r2, [r7, #3]
 8040c0e:	6879      	ldr	r1, [r7, #4]
 8040c10:	4613      	mov	r3, r2
 8040c12:	011b      	lsls	r3, r3, #4
 8040c14:	1a9b      	subs	r3, r3, r2
 8040c16:	009b      	lsls	r3, r3, #2
 8040c18:	440b      	add	r3, r1
 8040c1a:	334d      	adds	r3, #77	@ 0x4d
 8040c1c:	2202      	movs	r2, #2
 8040c1e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8040c20:	78fa      	ldrb	r2, [r7, #3]
 8040c22:	6879      	ldr	r1, [r7, #4]
 8040c24:	4613      	mov	r3, r2
 8040c26:	011b      	lsls	r3, r3, #4
 8040c28:	1a9b      	subs	r3, r3, r2
 8040c2a:	009b      	lsls	r3, r3, #2
 8040c2c:	440b      	add	r3, r1
 8040c2e:	334c      	adds	r3, #76	@ 0x4c
 8040c30:	2201      	movs	r2, #1
 8040c32:	701a      	strb	r2, [r3, #0]
 8040c34:	e2cc      	b.n	80411d0 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8040c36:	78fa      	ldrb	r2, [r7, #3]
 8040c38:	6879      	ldr	r1, [r7, #4]
 8040c3a:	4613      	mov	r3, r2
 8040c3c:	011b      	lsls	r3, r3, #4
 8040c3e:	1a9b      	subs	r3, r3, r2
 8040c40:	009b      	lsls	r3, r3, #2
 8040c42:	440b      	add	r3, r1
 8040c44:	334d      	adds	r3, #77	@ 0x4d
 8040c46:	781b      	ldrb	r3, [r3, #0]
 8040c48:	2b06      	cmp	r3, #6
 8040c4a:	d114      	bne.n	8040c76 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8040c4c:	78fa      	ldrb	r2, [r7, #3]
 8040c4e:	6879      	ldr	r1, [r7, #4]
 8040c50:	4613      	mov	r3, r2
 8040c52:	011b      	lsls	r3, r3, #4
 8040c54:	1a9b      	subs	r3, r3, r2
 8040c56:	009b      	lsls	r3, r3, #2
 8040c58:	440b      	add	r3, r1
 8040c5a:	334d      	adds	r3, #77	@ 0x4d
 8040c5c:	2202      	movs	r2, #2
 8040c5e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8040c60:	78fa      	ldrb	r2, [r7, #3]
 8040c62:	6879      	ldr	r1, [r7, #4]
 8040c64:	4613      	mov	r3, r2
 8040c66:	011b      	lsls	r3, r3, #4
 8040c68:	1a9b      	subs	r3, r3, r2
 8040c6a:	009b      	lsls	r3, r3, #2
 8040c6c:	440b      	add	r3, r1
 8040c6e:	334c      	adds	r3, #76	@ 0x4c
 8040c70:	2205      	movs	r2, #5
 8040c72:	701a      	strb	r2, [r3, #0]
 8040c74:	e2ac      	b.n	80411d0 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8040c76:	78fa      	ldrb	r2, [r7, #3]
 8040c78:	6879      	ldr	r1, [r7, #4]
 8040c7a:	4613      	mov	r3, r2
 8040c7c:	011b      	lsls	r3, r3, #4
 8040c7e:	1a9b      	subs	r3, r3, r2
 8040c80:	009b      	lsls	r3, r3, #2
 8040c82:	440b      	add	r3, r1
 8040c84:	334d      	adds	r3, #77	@ 0x4d
 8040c86:	781b      	ldrb	r3, [r3, #0]
 8040c88:	2b07      	cmp	r3, #7
 8040c8a:	d00b      	beq.n	8040ca4 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8040c8c:	78fa      	ldrb	r2, [r7, #3]
 8040c8e:	6879      	ldr	r1, [r7, #4]
 8040c90:	4613      	mov	r3, r2
 8040c92:	011b      	lsls	r3, r3, #4
 8040c94:	1a9b      	subs	r3, r3, r2
 8040c96:	009b      	lsls	r3, r3, #2
 8040c98:	440b      	add	r3, r1
 8040c9a:	334d      	adds	r3, #77	@ 0x4d
 8040c9c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8040c9e:	2b09      	cmp	r3, #9
 8040ca0:	f040 80a6 	bne.w	8040df0 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8040ca4:	78fa      	ldrb	r2, [r7, #3]
 8040ca6:	6879      	ldr	r1, [r7, #4]
 8040ca8:	4613      	mov	r3, r2
 8040caa:	011b      	lsls	r3, r3, #4
 8040cac:	1a9b      	subs	r3, r3, r2
 8040cae:	009b      	lsls	r3, r3, #2
 8040cb0:	440b      	add	r3, r1
 8040cb2:	334d      	adds	r3, #77	@ 0x4d
 8040cb4:	2202      	movs	r2, #2
 8040cb6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8040cb8:	78fa      	ldrb	r2, [r7, #3]
 8040cba:	6879      	ldr	r1, [r7, #4]
 8040cbc:	4613      	mov	r3, r2
 8040cbe:	011b      	lsls	r3, r3, #4
 8040cc0:	1a9b      	subs	r3, r3, r2
 8040cc2:	009b      	lsls	r3, r3, #2
 8040cc4:	440b      	add	r3, r1
 8040cc6:	3344      	adds	r3, #68	@ 0x44
 8040cc8:	681b      	ldr	r3, [r3, #0]
 8040cca:	1c59      	adds	r1, r3, #1
 8040ccc:	6878      	ldr	r0, [r7, #4]
 8040cce:	4613      	mov	r3, r2
 8040cd0:	011b      	lsls	r3, r3, #4
 8040cd2:	1a9b      	subs	r3, r3, r2
 8040cd4:	009b      	lsls	r3, r3, #2
 8040cd6:	4403      	add	r3, r0
 8040cd8:	3344      	adds	r3, #68	@ 0x44
 8040cda:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8040cdc:	78fa      	ldrb	r2, [r7, #3]
 8040cde:	6879      	ldr	r1, [r7, #4]
 8040ce0:	4613      	mov	r3, r2
 8040ce2:	011b      	lsls	r3, r3, #4
 8040ce4:	1a9b      	subs	r3, r3, r2
 8040ce6:	009b      	lsls	r3, r3, #2
 8040ce8:	440b      	add	r3, r1
 8040cea:	3344      	adds	r3, #68	@ 0x44
 8040cec:	681b      	ldr	r3, [r3, #0]
 8040cee:	2b02      	cmp	r3, #2
 8040cf0:	d943      	bls.n	8040d7a <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8040cf2:	78fa      	ldrb	r2, [r7, #3]
 8040cf4:	6879      	ldr	r1, [r7, #4]
 8040cf6:	4613      	mov	r3, r2
 8040cf8:	011b      	lsls	r3, r3, #4
 8040cfa:	1a9b      	subs	r3, r3, r2
 8040cfc:	009b      	lsls	r3, r3, #2
 8040cfe:	440b      	add	r3, r1
 8040d00:	3344      	adds	r3, #68	@ 0x44
 8040d02:	2200      	movs	r2, #0
 8040d04:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8040d06:	78fa      	ldrb	r2, [r7, #3]
 8040d08:	6879      	ldr	r1, [r7, #4]
 8040d0a:	4613      	mov	r3, r2
 8040d0c:	011b      	lsls	r3, r3, #4
 8040d0e:	1a9b      	subs	r3, r3, r2
 8040d10:	009b      	lsls	r3, r3, #2
 8040d12:	440b      	add	r3, r1
 8040d14:	331a      	adds	r3, #26
 8040d16:	781b      	ldrb	r3, [r3, #0]
 8040d18:	2b01      	cmp	r3, #1
 8040d1a:	d123      	bne.n	8040d64 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8040d1c:	78fa      	ldrb	r2, [r7, #3]
 8040d1e:	6879      	ldr	r1, [r7, #4]
 8040d20:	4613      	mov	r3, r2
 8040d22:	011b      	lsls	r3, r3, #4
 8040d24:	1a9b      	subs	r3, r3, r2
 8040d26:	009b      	lsls	r3, r3, #2
 8040d28:	440b      	add	r3, r1
 8040d2a:	331b      	adds	r3, #27
 8040d2c:	2200      	movs	r2, #0
 8040d2e:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8040d30:	78fa      	ldrb	r2, [r7, #3]
 8040d32:	6879      	ldr	r1, [r7, #4]
 8040d34:	4613      	mov	r3, r2
 8040d36:	011b      	lsls	r3, r3, #4
 8040d38:	1a9b      	subs	r3, r3, r2
 8040d3a:	009b      	lsls	r3, r3, #2
 8040d3c:	440b      	add	r3, r1
 8040d3e:	331c      	adds	r3, #28
 8040d40:	2200      	movs	r2, #0
 8040d42:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8040d44:	78fb      	ldrb	r3, [r7, #3]
 8040d46:	015a      	lsls	r2, r3, #5
 8040d48:	693b      	ldr	r3, [r7, #16]
 8040d4a:	4413      	add	r3, r2
 8040d4c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8040d50:	685b      	ldr	r3, [r3, #4]
 8040d52:	78fa      	ldrb	r2, [r7, #3]
 8040d54:	0151      	lsls	r1, r2, #5
 8040d56:	693a      	ldr	r2, [r7, #16]
 8040d58:	440a      	add	r2, r1
 8040d5a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8040d5e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8040d62:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8040d64:	78fa      	ldrb	r2, [r7, #3]
 8040d66:	6879      	ldr	r1, [r7, #4]
 8040d68:	4613      	mov	r3, r2
 8040d6a:	011b      	lsls	r3, r3, #4
 8040d6c:	1a9b      	subs	r3, r3, r2
 8040d6e:	009b      	lsls	r3, r3, #2
 8040d70:	440b      	add	r3, r1
 8040d72:	334c      	adds	r3, #76	@ 0x4c
 8040d74:	2204      	movs	r2, #4
 8040d76:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8040d78:	e229      	b.n	80411ce <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8040d7a:	78fa      	ldrb	r2, [r7, #3]
 8040d7c:	6879      	ldr	r1, [r7, #4]
 8040d7e:	4613      	mov	r3, r2
 8040d80:	011b      	lsls	r3, r3, #4
 8040d82:	1a9b      	subs	r3, r3, r2
 8040d84:	009b      	lsls	r3, r3, #2
 8040d86:	440b      	add	r3, r1
 8040d88:	334c      	adds	r3, #76	@ 0x4c
 8040d8a:	2202      	movs	r2, #2
 8040d8c:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8040d8e:	78fa      	ldrb	r2, [r7, #3]
 8040d90:	6879      	ldr	r1, [r7, #4]
 8040d92:	4613      	mov	r3, r2
 8040d94:	011b      	lsls	r3, r3, #4
 8040d96:	1a9b      	subs	r3, r3, r2
 8040d98:	009b      	lsls	r3, r3, #2
 8040d9a:	440b      	add	r3, r1
 8040d9c:	3326      	adds	r3, #38	@ 0x26
 8040d9e:	781b      	ldrb	r3, [r3, #0]
 8040da0:	2b00      	cmp	r3, #0
 8040da2:	d00b      	beq.n	8040dbc <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8040da4:	78fa      	ldrb	r2, [r7, #3]
 8040da6:	6879      	ldr	r1, [r7, #4]
 8040da8:	4613      	mov	r3, r2
 8040daa:	011b      	lsls	r3, r3, #4
 8040dac:	1a9b      	subs	r3, r3, r2
 8040dae:	009b      	lsls	r3, r3, #2
 8040db0:	440b      	add	r3, r1
 8040db2:	3326      	adds	r3, #38	@ 0x26
 8040db4:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8040db6:	2b02      	cmp	r3, #2
 8040db8:	f040 8209 	bne.w	80411ce <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8040dbc:	78fb      	ldrb	r3, [r7, #3]
 8040dbe:	015a      	lsls	r2, r3, #5
 8040dc0:	693b      	ldr	r3, [r7, #16]
 8040dc2:	4413      	add	r3, r2
 8040dc4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8040dc8:	681b      	ldr	r3, [r3, #0]
 8040dca:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8040dcc:	68fb      	ldr	r3, [r7, #12]
 8040dce:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8040dd2:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8040dd4:	68fb      	ldr	r3, [r7, #12]
 8040dd6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8040dda:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8040ddc:	78fb      	ldrb	r3, [r7, #3]
 8040dde:	015a      	lsls	r2, r3, #5
 8040de0:	693b      	ldr	r3, [r7, #16]
 8040de2:	4413      	add	r3, r2
 8040de4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8040de8:	461a      	mov	r2, r3
 8040dea:	68fb      	ldr	r3, [r7, #12]
 8040dec:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8040dee:	e1ee      	b.n	80411ce <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8040df0:	78fa      	ldrb	r2, [r7, #3]
 8040df2:	6879      	ldr	r1, [r7, #4]
 8040df4:	4613      	mov	r3, r2
 8040df6:	011b      	lsls	r3, r3, #4
 8040df8:	1a9b      	subs	r3, r3, r2
 8040dfa:	009b      	lsls	r3, r3, #2
 8040dfc:	440b      	add	r3, r1
 8040dfe:	334d      	adds	r3, #77	@ 0x4d
 8040e00:	781b      	ldrb	r3, [r3, #0]
 8040e02:	2b05      	cmp	r3, #5
 8040e04:	f040 80c8 	bne.w	8040f98 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8040e08:	78fa      	ldrb	r2, [r7, #3]
 8040e0a:	6879      	ldr	r1, [r7, #4]
 8040e0c:	4613      	mov	r3, r2
 8040e0e:	011b      	lsls	r3, r3, #4
 8040e10:	1a9b      	subs	r3, r3, r2
 8040e12:	009b      	lsls	r3, r3, #2
 8040e14:	440b      	add	r3, r1
 8040e16:	334d      	adds	r3, #77	@ 0x4d
 8040e18:	2202      	movs	r2, #2
 8040e1a:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8040e1c:	78fa      	ldrb	r2, [r7, #3]
 8040e1e:	6879      	ldr	r1, [r7, #4]
 8040e20:	4613      	mov	r3, r2
 8040e22:	011b      	lsls	r3, r3, #4
 8040e24:	1a9b      	subs	r3, r3, r2
 8040e26:	009b      	lsls	r3, r3, #2
 8040e28:	440b      	add	r3, r1
 8040e2a:	331b      	adds	r3, #27
 8040e2c:	781b      	ldrb	r3, [r3, #0]
 8040e2e:	2b01      	cmp	r3, #1
 8040e30:	f040 81ce 	bne.w	80411d0 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8040e34:	78fa      	ldrb	r2, [r7, #3]
 8040e36:	6879      	ldr	r1, [r7, #4]
 8040e38:	4613      	mov	r3, r2
 8040e3a:	011b      	lsls	r3, r3, #4
 8040e3c:	1a9b      	subs	r3, r3, r2
 8040e3e:	009b      	lsls	r3, r3, #2
 8040e40:	440b      	add	r3, r1
 8040e42:	3326      	adds	r3, #38	@ 0x26
 8040e44:	781b      	ldrb	r3, [r3, #0]
 8040e46:	2b03      	cmp	r3, #3
 8040e48:	d16b      	bne.n	8040f22 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8040e4a:	78fa      	ldrb	r2, [r7, #3]
 8040e4c:	6879      	ldr	r1, [r7, #4]
 8040e4e:	4613      	mov	r3, r2
 8040e50:	011b      	lsls	r3, r3, #4
 8040e52:	1a9b      	subs	r3, r3, r2
 8040e54:	009b      	lsls	r3, r3, #2
 8040e56:	440b      	add	r3, r1
 8040e58:	3348      	adds	r3, #72	@ 0x48
 8040e5a:	681b      	ldr	r3, [r3, #0]
 8040e5c:	1c59      	adds	r1, r3, #1
 8040e5e:	6878      	ldr	r0, [r7, #4]
 8040e60:	4613      	mov	r3, r2
 8040e62:	011b      	lsls	r3, r3, #4
 8040e64:	1a9b      	subs	r3, r3, r2
 8040e66:	009b      	lsls	r3, r3, #2
 8040e68:	4403      	add	r3, r0
 8040e6a:	3348      	adds	r3, #72	@ 0x48
 8040e6c:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8040e6e:	78fa      	ldrb	r2, [r7, #3]
 8040e70:	6879      	ldr	r1, [r7, #4]
 8040e72:	4613      	mov	r3, r2
 8040e74:	011b      	lsls	r3, r3, #4
 8040e76:	1a9b      	subs	r3, r3, r2
 8040e78:	009b      	lsls	r3, r3, #2
 8040e7a:	440b      	add	r3, r1
 8040e7c:	3348      	adds	r3, #72	@ 0x48
 8040e7e:	681b      	ldr	r3, [r3, #0]
 8040e80:	2b02      	cmp	r3, #2
 8040e82:	d943      	bls.n	8040f0c <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8040e84:	78fa      	ldrb	r2, [r7, #3]
 8040e86:	6879      	ldr	r1, [r7, #4]
 8040e88:	4613      	mov	r3, r2
 8040e8a:	011b      	lsls	r3, r3, #4
 8040e8c:	1a9b      	subs	r3, r3, r2
 8040e8e:	009b      	lsls	r3, r3, #2
 8040e90:	440b      	add	r3, r1
 8040e92:	3348      	adds	r3, #72	@ 0x48
 8040e94:	2200      	movs	r2, #0
 8040e96:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8040e98:	78fa      	ldrb	r2, [r7, #3]
 8040e9a:	6879      	ldr	r1, [r7, #4]
 8040e9c:	4613      	mov	r3, r2
 8040e9e:	011b      	lsls	r3, r3, #4
 8040ea0:	1a9b      	subs	r3, r3, r2
 8040ea2:	009b      	lsls	r3, r3, #2
 8040ea4:	440b      	add	r3, r1
 8040ea6:	331b      	adds	r3, #27
 8040ea8:	2200      	movs	r2, #0
 8040eaa:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8040eac:	78fa      	ldrb	r2, [r7, #3]
 8040eae:	6879      	ldr	r1, [r7, #4]
 8040eb0:	4613      	mov	r3, r2
 8040eb2:	011b      	lsls	r3, r3, #4
 8040eb4:	1a9b      	subs	r3, r3, r2
 8040eb6:	009b      	lsls	r3, r3, #2
 8040eb8:	440b      	add	r3, r1
 8040eba:	3344      	adds	r3, #68	@ 0x44
 8040ebc:	681b      	ldr	r3, [r3, #0]
 8040ebe:	2b02      	cmp	r3, #2
 8040ec0:	d809      	bhi.n	8040ed6 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8040ec2:	78fa      	ldrb	r2, [r7, #3]
 8040ec4:	6879      	ldr	r1, [r7, #4]
 8040ec6:	4613      	mov	r3, r2
 8040ec8:	011b      	lsls	r3, r3, #4
 8040eca:	1a9b      	subs	r3, r3, r2
 8040ecc:	009b      	lsls	r3, r3, #2
 8040ece:	440b      	add	r3, r1
 8040ed0:	331c      	adds	r3, #28
 8040ed2:	2201      	movs	r2, #1
 8040ed4:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8040ed6:	78fb      	ldrb	r3, [r7, #3]
 8040ed8:	015a      	lsls	r2, r3, #5
 8040eda:	693b      	ldr	r3, [r7, #16]
 8040edc:	4413      	add	r3, r2
 8040ede:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8040ee2:	685b      	ldr	r3, [r3, #4]
 8040ee4:	78fa      	ldrb	r2, [r7, #3]
 8040ee6:	0151      	lsls	r1, r2, #5
 8040ee8:	693a      	ldr	r2, [r7, #16]
 8040eea:	440a      	add	r2, r1
 8040eec:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8040ef0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8040ef4:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8040ef6:	78fa      	ldrb	r2, [r7, #3]
 8040ef8:	6879      	ldr	r1, [r7, #4]
 8040efa:	4613      	mov	r3, r2
 8040efc:	011b      	lsls	r3, r3, #4
 8040efe:	1a9b      	subs	r3, r3, r2
 8040f00:	009b      	lsls	r3, r3, #2
 8040f02:	440b      	add	r3, r1
 8040f04:	334c      	adds	r3, #76	@ 0x4c
 8040f06:	2204      	movs	r2, #4
 8040f08:	701a      	strb	r2, [r3, #0]
 8040f0a:	e014      	b.n	8040f36 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8040f0c:	78fa      	ldrb	r2, [r7, #3]
 8040f0e:	6879      	ldr	r1, [r7, #4]
 8040f10:	4613      	mov	r3, r2
 8040f12:	011b      	lsls	r3, r3, #4
 8040f14:	1a9b      	subs	r3, r3, r2
 8040f16:	009b      	lsls	r3, r3, #2
 8040f18:	440b      	add	r3, r1
 8040f1a:	334c      	adds	r3, #76	@ 0x4c
 8040f1c:	2202      	movs	r2, #2
 8040f1e:	701a      	strb	r2, [r3, #0]
 8040f20:	e009      	b.n	8040f36 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8040f22:	78fa      	ldrb	r2, [r7, #3]
 8040f24:	6879      	ldr	r1, [r7, #4]
 8040f26:	4613      	mov	r3, r2
 8040f28:	011b      	lsls	r3, r3, #4
 8040f2a:	1a9b      	subs	r3, r3, r2
 8040f2c:	009b      	lsls	r3, r3, #2
 8040f2e:	440b      	add	r3, r1
 8040f30:	334c      	adds	r3, #76	@ 0x4c
 8040f32:	2202      	movs	r2, #2
 8040f34:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8040f36:	78fa      	ldrb	r2, [r7, #3]
 8040f38:	6879      	ldr	r1, [r7, #4]
 8040f3a:	4613      	mov	r3, r2
 8040f3c:	011b      	lsls	r3, r3, #4
 8040f3e:	1a9b      	subs	r3, r3, r2
 8040f40:	009b      	lsls	r3, r3, #2
 8040f42:	440b      	add	r3, r1
 8040f44:	3326      	adds	r3, #38	@ 0x26
 8040f46:	781b      	ldrb	r3, [r3, #0]
 8040f48:	2b00      	cmp	r3, #0
 8040f4a:	d00b      	beq.n	8040f64 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8040f4c:	78fa      	ldrb	r2, [r7, #3]
 8040f4e:	6879      	ldr	r1, [r7, #4]
 8040f50:	4613      	mov	r3, r2
 8040f52:	011b      	lsls	r3, r3, #4
 8040f54:	1a9b      	subs	r3, r3, r2
 8040f56:	009b      	lsls	r3, r3, #2
 8040f58:	440b      	add	r3, r1
 8040f5a:	3326      	adds	r3, #38	@ 0x26
 8040f5c:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8040f5e:	2b02      	cmp	r3, #2
 8040f60:	f040 8136 	bne.w	80411d0 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8040f64:	78fb      	ldrb	r3, [r7, #3]
 8040f66:	015a      	lsls	r2, r3, #5
 8040f68:	693b      	ldr	r3, [r7, #16]
 8040f6a:	4413      	add	r3, r2
 8040f6c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8040f70:	681b      	ldr	r3, [r3, #0]
 8040f72:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8040f74:	68fb      	ldr	r3, [r7, #12]
 8040f76:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8040f7a:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8040f7c:	68fb      	ldr	r3, [r7, #12]
 8040f7e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8040f82:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8040f84:	78fb      	ldrb	r3, [r7, #3]
 8040f86:	015a      	lsls	r2, r3, #5
 8040f88:	693b      	ldr	r3, [r7, #16]
 8040f8a:	4413      	add	r3, r2
 8040f8c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8040f90:	461a      	mov	r2, r3
 8040f92:	68fb      	ldr	r3, [r7, #12]
 8040f94:	6013      	str	r3, [r2, #0]
 8040f96:	e11b      	b.n	80411d0 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8040f98:	78fa      	ldrb	r2, [r7, #3]
 8040f9a:	6879      	ldr	r1, [r7, #4]
 8040f9c:	4613      	mov	r3, r2
 8040f9e:	011b      	lsls	r3, r3, #4
 8040fa0:	1a9b      	subs	r3, r3, r2
 8040fa2:	009b      	lsls	r3, r3, #2
 8040fa4:	440b      	add	r3, r1
 8040fa6:	334d      	adds	r3, #77	@ 0x4d
 8040fa8:	781b      	ldrb	r3, [r3, #0]
 8040faa:	2b03      	cmp	r3, #3
 8040fac:	f040 8081 	bne.w	80410b2 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8040fb0:	78fa      	ldrb	r2, [r7, #3]
 8040fb2:	6879      	ldr	r1, [r7, #4]
 8040fb4:	4613      	mov	r3, r2
 8040fb6:	011b      	lsls	r3, r3, #4
 8040fb8:	1a9b      	subs	r3, r3, r2
 8040fba:	009b      	lsls	r3, r3, #2
 8040fbc:	440b      	add	r3, r1
 8040fbe:	334d      	adds	r3, #77	@ 0x4d
 8040fc0:	2202      	movs	r2, #2
 8040fc2:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8040fc4:	78fa      	ldrb	r2, [r7, #3]
 8040fc6:	6879      	ldr	r1, [r7, #4]
 8040fc8:	4613      	mov	r3, r2
 8040fca:	011b      	lsls	r3, r3, #4
 8040fcc:	1a9b      	subs	r3, r3, r2
 8040fce:	009b      	lsls	r3, r3, #2
 8040fd0:	440b      	add	r3, r1
 8040fd2:	331b      	adds	r3, #27
 8040fd4:	781b      	ldrb	r3, [r3, #0]
 8040fd6:	2b01      	cmp	r3, #1
 8040fd8:	f040 80fa 	bne.w	80411d0 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8040fdc:	78fa      	ldrb	r2, [r7, #3]
 8040fde:	6879      	ldr	r1, [r7, #4]
 8040fe0:	4613      	mov	r3, r2
 8040fe2:	011b      	lsls	r3, r3, #4
 8040fe4:	1a9b      	subs	r3, r3, r2
 8040fe6:	009b      	lsls	r3, r3, #2
 8040fe8:	440b      	add	r3, r1
 8040fea:	334c      	adds	r3, #76	@ 0x4c
 8040fec:	2202      	movs	r2, #2
 8040fee:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8040ff0:	78fb      	ldrb	r3, [r7, #3]
 8040ff2:	015a      	lsls	r2, r3, #5
 8040ff4:	693b      	ldr	r3, [r7, #16]
 8040ff6:	4413      	add	r3, r2
 8040ff8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8040ffc:	685b      	ldr	r3, [r3, #4]
 8040ffe:	78fa      	ldrb	r2, [r7, #3]
 8041000:	0151      	lsls	r1, r2, #5
 8041002:	693a      	ldr	r2, [r7, #16]
 8041004:	440a      	add	r2, r1
 8041006:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 804100a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 804100e:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8041010:	78fb      	ldrb	r3, [r7, #3]
 8041012:	015a      	lsls	r2, r3, #5
 8041014:	693b      	ldr	r3, [r7, #16]
 8041016:	4413      	add	r3, r2
 8041018:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 804101c:	68db      	ldr	r3, [r3, #12]
 804101e:	78fa      	ldrb	r2, [r7, #3]
 8041020:	0151      	lsls	r1, r2, #5
 8041022:	693a      	ldr	r2, [r7, #16]
 8041024:	440a      	add	r2, r1
 8041026:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 804102a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 804102e:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8041030:	78fb      	ldrb	r3, [r7, #3]
 8041032:	015a      	lsls	r2, r3, #5
 8041034:	693b      	ldr	r3, [r7, #16]
 8041036:	4413      	add	r3, r2
 8041038:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 804103c:	68db      	ldr	r3, [r3, #12]
 804103e:	78fa      	ldrb	r2, [r7, #3]
 8041040:	0151      	lsls	r1, r2, #5
 8041042:	693a      	ldr	r2, [r7, #16]
 8041044:	440a      	add	r2, r1
 8041046:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 804104a:	f023 0320 	bic.w	r3, r3, #32
 804104e:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8041050:	78fa      	ldrb	r2, [r7, #3]
 8041052:	6879      	ldr	r1, [r7, #4]
 8041054:	4613      	mov	r3, r2
 8041056:	011b      	lsls	r3, r3, #4
 8041058:	1a9b      	subs	r3, r3, r2
 804105a:	009b      	lsls	r3, r3, #2
 804105c:	440b      	add	r3, r1
 804105e:	3326      	adds	r3, #38	@ 0x26
 8041060:	781b      	ldrb	r3, [r3, #0]
 8041062:	2b00      	cmp	r3, #0
 8041064:	d00b      	beq.n	804107e <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8041066:	78fa      	ldrb	r2, [r7, #3]
 8041068:	6879      	ldr	r1, [r7, #4]
 804106a:	4613      	mov	r3, r2
 804106c:	011b      	lsls	r3, r3, #4
 804106e:	1a9b      	subs	r3, r3, r2
 8041070:	009b      	lsls	r3, r3, #2
 8041072:	440b      	add	r3, r1
 8041074:	3326      	adds	r3, #38	@ 0x26
 8041076:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8041078:	2b02      	cmp	r3, #2
 804107a:	f040 80a9 	bne.w	80411d0 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 804107e:	78fb      	ldrb	r3, [r7, #3]
 8041080:	015a      	lsls	r2, r3, #5
 8041082:	693b      	ldr	r3, [r7, #16]
 8041084:	4413      	add	r3, r2
 8041086:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 804108a:	681b      	ldr	r3, [r3, #0]
 804108c:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 804108e:	68fb      	ldr	r3, [r7, #12]
 8041090:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8041094:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8041096:	68fb      	ldr	r3, [r7, #12]
 8041098:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 804109c:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 804109e:	78fb      	ldrb	r3, [r7, #3]
 80410a0:	015a      	lsls	r2, r3, #5
 80410a2:	693b      	ldr	r3, [r7, #16]
 80410a4:	4413      	add	r3, r2
 80410a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80410aa:	461a      	mov	r2, r3
 80410ac:	68fb      	ldr	r3, [r7, #12]
 80410ae:	6013      	str	r3, [r2, #0]
 80410b0:	e08e      	b.n	80411d0 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80410b2:	78fa      	ldrb	r2, [r7, #3]
 80410b4:	6879      	ldr	r1, [r7, #4]
 80410b6:	4613      	mov	r3, r2
 80410b8:	011b      	lsls	r3, r3, #4
 80410ba:	1a9b      	subs	r3, r3, r2
 80410bc:	009b      	lsls	r3, r3, #2
 80410be:	440b      	add	r3, r1
 80410c0:	334d      	adds	r3, #77	@ 0x4d
 80410c2:	781b      	ldrb	r3, [r3, #0]
 80410c4:	2b04      	cmp	r3, #4
 80410c6:	d143      	bne.n	8041150 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80410c8:	78fa      	ldrb	r2, [r7, #3]
 80410ca:	6879      	ldr	r1, [r7, #4]
 80410cc:	4613      	mov	r3, r2
 80410ce:	011b      	lsls	r3, r3, #4
 80410d0:	1a9b      	subs	r3, r3, r2
 80410d2:	009b      	lsls	r3, r3, #2
 80410d4:	440b      	add	r3, r1
 80410d6:	334d      	adds	r3, #77	@ 0x4d
 80410d8:	2202      	movs	r2, #2
 80410da:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80410dc:	78fa      	ldrb	r2, [r7, #3]
 80410de:	6879      	ldr	r1, [r7, #4]
 80410e0:	4613      	mov	r3, r2
 80410e2:	011b      	lsls	r3, r3, #4
 80410e4:	1a9b      	subs	r3, r3, r2
 80410e6:	009b      	lsls	r3, r3, #2
 80410e8:	440b      	add	r3, r1
 80410ea:	334c      	adds	r3, #76	@ 0x4c
 80410ec:	2202      	movs	r2, #2
 80410ee:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80410f0:	78fa      	ldrb	r2, [r7, #3]
 80410f2:	6879      	ldr	r1, [r7, #4]
 80410f4:	4613      	mov	r3, r2
 80410f6:	011b      	lsls	r3, r3, #4
 80410f8:	1a9b      	subs	r3, r3, r2
 80410fa:	009b      	lsls	r3, r3, #2
 80410fc:	440b      	add	r3, r1
 80410fe:	3326      	adds	r3, #38	@ 0x26
 8041100:	781b      	ldrb	r3, [r3, #0]
 8041102:	2b00      	cmp	r3, #0
 8041104:	d00a      	beq.n	804111c <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8041106:	78fa      	ldrb	r2, [r7, #3]
 8041108:	6879      	ldr	r1, [r7, #4]
 804110a:	4613      	mov	r3, r2
 804110c:	011b      	lsls	r3, r3, #4
 804110e:	1a9b      	subs	r3, r3, r2
 8041110:	009b      	lsls	r3, r3, #2
 8041112:	440b      	add	r3, r1
 8041114:	3326      	adds	r3, #38	@ 0x26
 8041116:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8041118:	2b02      	cmp	r3, #2
 804111a:	d159      	bne.n	80411d0 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 804111c:	78fb      	ldrb	r3, [r7, #3]
 804111e:	015a      	lsls	r2, r3, #5
 8041120:	693b      	ldr	r3, [r7, #16]
 8041122:	4413      	add	r3, r2
 8041124:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8041128:	681b      	ldr	r3, [r3, #0]
 804112a:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 804112c:	68fb      	ldr	r3, [r7, #12]
 804112e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8041132:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8041134:	68fb      	ldr	r3, [r7, #12]
 8041136:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 804113a:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 804113c:	78fb      	ldrb	r3, [r7, #3]
 804113e:	015a      	lsls	r2, r3, #5
 8041140:	693b      	ldr	r3, [r7, #16]
 8041142:	4413      	add	r3, r2
 8041144:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8041148:	461a      	mov	r2, r3
 804114a:	68fb      	ldr	r3, [r7, #12]
 804114c:	6013      	str	r3, [r2, #0]
 804114e:	e03f      	b.n	80411d0 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8041150:	78fa      	ldrb	r2, [r7, #3]
 8041152:	6879      	ldr	r1, [r7, #4]
 8041154:	4613      	mov	r3, r2
 8041156:	011b      	lsls	r3, r3, #4
 8041158:	1a9b      	subs	r3, r3, r2
 804115a:	009b      	lsls	r3, r3, #2
 804115c:	440b      	add	r3, r1
 804115e:	334d      	adds	r3, #77	@ 0x4d
 8041160:	781b      	ldrb	r3, [r3, #0]
 8041162:	2b08      	cmp	r3, #8
 8041164:	d126      	bne.n	80411b4 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8041166:	78fa      	ldrb	r2, [r7, #3]
 8041168:	6879      	ldr	r1, [r7, #4]
 804116a:	4613      	mov	r3, r2
 804116c:	011b      	lsls	r3, r3, #4
 804116e:	1a9b      	subs	r3, r3, r2
 8041170:	009b      	lsls	r3, r3, #2
 8041172:	440b      	add	r3, r1
 8041174:	334d      	adds	r3, #77	@ 0x4d
 8041176:	2202      	movs	r2, #2
 8041178:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 804117a:	78fa      	ldrb	r2, [r7, #3]
 804117c:	6879      	ldr	r1, [r7, #4]
 804117e:	4613      	mov	r3, r2
 8041180:	011b      	lsls	r3, r3, #4
 8041182:	1a9b      	subs	r3, r3, r2
 8041184:	009b      	lsls	r3, r3, #2
 8041186:	440b      	add	r3, r1
 8041188:	3344      	adds	r3, #68	@ 0x44
 804118a:	681b      	ldr	r3, [r3, #0]
 804118c:	1c59      	adds	r1, r3, #1
 804118e:	6878      	ldr	r0, [r7, #4]
 8041190:	4613      	mov	r3, r2
 8041192:	011b      	lsls	r3, r3, #4
 8041194:	1a9b      	subs	r3, r3, r2
 8041196:	009b      	lsls	r3, r3, #2
 8041198:	4403      	add	r3, r0
 804119a:	3344      	adds	r3, #68	@ 0x44
 804119c:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 804119e:	78fa      	ldrb	r2, [r7, #3]
 80411a0:	6879      	ldr	r1, [r7, #4]
 80411a2:	4613      	mov	r3, r2
 80411a4:	011b      	lsls	r3, r3, #4
 80411a6:	1a9b      	subs	r3, r3, r2
 80411a8:	009b      	lsls	r3, r3, #2
 80411aa:	440b      	add	r3, r1
 80411ac:	334c      	adds	r3, #76	@ 0x4c
 80411ae:	2204      	movs	r2, #4
 80411b0:	701a      	strb	r2, [r3, #0]
 80411b2:	e00d      	b.n	80411d0 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 80411b4:	78fa      	ldrb	r2, [r7, #3]
 80411b6:	6879      	ldr	r1, [r7, #4]
 80411b8:	4613      	mov	r3, r2
 80411ba:	011b      	lsls	r3, r3, #4
 80411bc:	1a9b      	subs	r3, r3, r2
 80411be:	009b      	lsls	r3, r3, #2
 80411c0:	440b      	add	r3, r1
 80411c2:	334d      	adds	r3, #77	@ 0x4d
 80411c4:	781b      	ldrb	r3, [r3, #0]
 80411c6:	2b02      	cmp	r3, #2
 80411c8:	f000 8100 	beq.w	80413cc <HCD_HC_IN_IRQHandler+0xcca>
 80411cc:	e000      	b.n	80411d0 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80411ce:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80411d0:	78fa      	ldrb	r2, [r7, #3]
 80411d2:	6879      	ldr	r1, [r7, #4]
 80411d4:	4613      	mov	r3, r2
 80411d6:	011b      	lsls	r3, r3, #4
 80411d8:	1a9b      	subs	r3, r3, r2
 80411da:	009b      	lsls	r3, r3, #2
 80411dc:	440b      	add	r3, r1
 80411de:	334c      	adds	r3, #76	@ 0x4c
 80411e0:	781a      	ldrb	r2, [r3, #0]
 80411e2:	78fb      	ldrb	r3, [r7, #3]
 80411e4:	4619      	mov	r1, r3
 80411e6:	6878      	ldr	r0, [r7, #4]
 80411e8:	f001 faea 	bl	80427c0 <HAL_HCD_HC_NotifyURBChange_Callback>
 80411ec:	e0ef      	b.n	80413ce <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80411ee:	687b      	ldr	r3, [r7, #4]
 80411f0:	681b      	ldr	r3, [r3, #0]
 80411f2:	78fa      	ldrb	r2, [r7, #3]
 80411f4:	4611      	mov	r1, r2
 80411f6:	4618      	mov	r0, r3
 80411f8:	f000 ffea 	bl	80421d0 <USB_ReadChInterrupts>
 80411fc:	4603      	mov	r3, r0
 80411fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8041202:	2b40      	cmp	r3, #64	@ 0x40
 8041204:	d12f      	bne.n	8041266 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8041206:	78fb      	ldrb	r3, [r7, #3]
 8041208:	015a      	lsls	r2, r3, #5
 804120a:	693b      	ldr	r3, [r7, #16]
 804120c:	4413      	add	r3, r2
 804120e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8041212:	461a      	mov	r2, r3
 8041214:	2340      	movs	r3, #64	@ 0x40
 8041216:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8041218:	78fa      	ldrb	r2, [r7, #3]
 804121a:	6879      	ldr	r1, [r7, #4]
 804121c:	4613      	mov	r3, r2
 804121e:	011b      	lsls	r3, r3, #4
 8041220:	1a9b      	subs	r3, r3, r2
 8041222:	009b      	lsls	r3, r3, #2
 8041224:	440b      	add	r3, r1
 8041226:	334d      	adds	r3, #77	@ 0x4d
 8041228:	2205      	movs	r2, #5
 804122a:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 804122c:	78fa      	ldrb	r2, [r7, #3]
 804122e:	6879      	ldr	r1, [r7, #4]
 8041230:	4613      	mov	r3, r2
 8041232:	011b      	lsls	r3, r3, #4
 8041234:	1a9b      	subs	r3, r3, r2
 8041236:	009b      	lsls	r3, r3, #2
 8041238:	440b      	add	r3, r1
 804123a:	331a      	adds	r3, #26
 804123c:	781b      	ldrb	r3, [r3, #0]
 804123e:	2b00      	cmp	r3, #0
 8041240:	d109      	bne.n	8041256 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8041242:	78fa      	ldrb	r2, [r7, #3]
 8041244:	6879      	ldr	r1, [r7, #4]
 8041246:	4613      	mov	r3, r2
 8041248:	011b      	lsls	r3, r3, #4
 804124a:	1a9b      	subs	r3, r3, r2
 804124c:	009b      	lsls	r3, r3, #2
 804124e:	440b      	add	r3, r1
 8041250:	3344      	adds	r3, #68	@ 0x44
 8041252:	2200      	movs	r2, #0
 8041254:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8041256:	687b      	ldr	r3, [r7, #4]
 8041258:	681b      	ldr	r3, [r3, #0]
 804125a:	78fa      	ldrb	r2, [r7, #3]
 804125c:	4611      	mov	r1, r2
 804125e:	4618      	mov	r0, r3
 8041260:	f001 f833 	bl	80422ca <USB_HC_Halt>
 8041264:	e0b3      	b.n	80413ce <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8041266:	687b      	ldr	r3, [r7, #4]
 8041268:	681b      	ldr	r3, [r3, #0]
 804126a:	78fa      	ldrb	r2, [r7, #3]
 804126c:	4611      	mov	r1, r2
 804126e:	4618      	mov	r0, r3
 8041270:	f000 ffae 	bl	80421d0 <USB_ReadChInterrupts>
 8041274:	4603      	mov	r3, r0
 8041276:	f003 0310 	and.w	r3, r3, #16
 804127a:	2b10      	cmp	r3, #16
 804127c:	f040 80a7 	bne.w	80413ce <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8041280:	78fa      	ldrb	r2, [r7, #3]
 8041282:	6879      	ldr	r1, [r7, #4]
 8041284:	4613      	mov	r3, r2
 8041286:	011b      	lsls	r3, r3, #4
 8041288:	1a9b      	subs	r3, r3, r2
 804128a:	009b      	lsls	r3, r3, #2
 804128c:	440b      	add	r3, r1
 804128e:	3326      	adds	r3, #38	@ 0x26
 8041290:	781b      	ldrb	r3, [r3, #0]
 8041292:	2b03      	cmp	r3, #3
 8041294:	d11b      	bne.n	80412ce <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8041296:	78fa      	ldrb	r2, [r7, #3]
 8041298:	6879      	ldr	r1, [r7, #4]
 804129a:	4613      	mov	r3, r2
 804129c:	011b      	lsls	r3, r3, #4
 804129e:	1a9b      	subs	r3, r3, r2
 80412a0:	009b      	lsls	r3, r3, #2
 80412a2:	440b      	add	r3, r1
 80412a4:	3344      	adds	r3, #68	@ 0x44
 80412a6:	2200      	movs	r2, #0
 80412a8:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 80412aa:	78fa      	ldrb	r2, [r7, #3]
 80412ac:	6879      	ldr	r1, [r7, #4]
 80412ae:	4613      	mov	r3, r2
 80412b0:	011b      	lsls	r3, r3, #4
 80412b2:	1a9b      	subs	r3, r3, r2
 80412b4:	009b      	lsls	r3, r3, #2
 80412b6:	440b      	add	r3, r1
 80412b8:	334d      	adds	r3, #77	@ 0x4d
 80412ba:	2204      	movs	r2, #4
 80412bc:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80412be:	687b      	ldr	r3, [r7, #4]
 80412c0:	681b      	ldr	r3, [r3, #0]
 80412c2:	78fa      	ldrb	r2, [r7, #3]
 80412c4:	4611      	mov	r1, r2
 80412c6:	4618      	mov	r0, r3
 80412c8:	f000 ffff 	bl	80422ca <USB_HC_Halt>
 80412cc:	e03f      	b.n	804134e <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80412ce:	78fa      	ldrb	r2, [r7, #3]
 80412d0:	6879      	ldr	r1, [r7, #4]
 80412d2:	4613      	mov	r3, r2
 80412d4:	011b      	lsls	r3, r3, #4
 80412d6:	1a9b      	subs	r3, r3, r2
 80412d8:	009b      	lsls	r3, r3, #2
 80412da:	440b      	add	r3, r1
 80412dc:	3326      	adds	r3, #38	@ 0x26
 80412de:	781b      	ldrb	r3, [r3, #0]
 80412e0:	2b00      	cmp	r3, #0
 80412e2:	d00a      	beq.n	80412fa <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80412e4:	78fa      	ldrb	r2, [r7, #3]
 80412e6:	6879      	ldr	r1, [r7, #4]
 80412e8:	4613      	mov	r3, r2
 80412ea:	011b      	lsls	r3, r3, #4
 80412ec:	1a9b      	subs	r3, r3, r2
 80412ee:	009b      	lsls	r3, r3, #2
 80412f0:	440b      	add	r3, r1
 80412f2:	3326      	adds	r3, #38	@ 0x26
 80412f4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80412f6:	2b02      	cmp	r3, #2
 80412f8:	d129      	bne.n	804134e <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80412fa:	78fa      	ldrb	r2, [r7, #3]
 80412fc:	6879      	ldr	r1, [r7, #4]
 80412fe:	4613      	mov	r3, r2
 8041300:	011b      	lsls	r3, r3, #4
 8041302:	1a9b      	subs	r3, r3, r2
 8041304:	009b      	lsls	r3, r3, #2
 8041306:	440b      	add	r3, r1
 8041308:	3344      	adds	r3, #68	@ 0x44
 804130a:	2200      	movs	r2, #0
 804130c:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 804130e:	687b      	ldr	r3, [r7, #4]
 8041310:	799b      	ldrb	r3, [r3, #6]
 8041312:	2b00      	cmp	r3, #0
 8041314:	d00a      	beq.n	804132c <HCD_HC_IN_IRQHandler+0xc2a>
 8041316:	78fa      	ldrb	r2, [r7, #3]
 8041318:	6879      	ldr	r1, [r7, #4]
 804131a:	4613      	mov	r3, r2
 804131c:	011b      	lsls	r3, r3, #4
 804131e:	1a9b      	subs	r3, r3, r2
 8041320:	009b      	lsls	r3, r3, #2
 8041322:	440b      	add	r3, r1
 8041324:	331b      	adds	r3, #27
 8041326:	781b      	ldrb	r3, [r3, #0]
 8041328:	2b01      	cmp	r3, #1
 804132a:	d110      	bne.n	804134e <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 804132c:	78fa      	ldrb	r2, [r7, #3]
 804132e:	6879      	ldr	r1, [r7, #4]
 8041330:	4613      	mov	r3, r2
 8041332:	011b      	lsls	r3, r3, #4
 8041334:	1a9b      	subs	r3, r3, r2
 8041336:	009b      	lsls	r3, r3, #2
 8041338:	440b      	add	r3, r1
 804133a:	334d      	adds	r3, #77	@ 0x4d
 804133c:	2204      	movs	r2, #4
 804133e:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8041340:	687b      	ldr	r3, [r7, #4]
 8041342:	681b      	ldr	r3, [r3, #0]
 8041344:	78fa      	ldrb	r2, [r7, #3]
 8041346:	4611      	mov	r1, r2
 8041348:	4618      	mov	r0, r3
 804134a:	f000 ffbe 	bl	80422ca <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 804134e:	78fa      	ldrb	r2, [r7, #3]
 8041350:	6879      	ldr	r1, [r7, #4]
 8041352:	4613      	mov	r3, r2
 8041354:	011b      	lsls	r3, r3, #4
 8041356:	1a9b      	subs	r3, r3, r2
 8041358:	009b      	lsls	r3, r3, #2
 804135a:	440b      	add	r3, r1
 804135c:	331b      	adds	r3, #27
 804135e:	781b      	ldrb	r3, [r3, #0]
 8041360:	2b01      	cmp	r3, #1
 8041362:	d129      	bne.n	80413b8 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8041364:	78fa      	ldrb	r2, [r7, #3]
 8041366:	6879      	ldr	r1, [r7, #4]
 8041368:	4613      	mov	r3, r2
 804136a:	011b      	lsls	r3, r3, #4
 804136c:	1a9b      	subs	r3, r3, r2
 804136e:	009b      	lsls	r3, r3, #2
 8041370:	440b      	add	r3, r1
 8041372:	331b      	adds	r3, #27
 8041374:	2200      	movs	r2, #0
 8041376:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8041378:	78fb      	ldrb	r3, [r7, #3]
 804137a:	015a      	lsls	r2, r3, #5
 804137c:	693b      	ldr	r3, [r7, #16]
 804137e:	4413      	add	r3, r2
 8041380:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8041384:	685b      	ldr	r3, [r3, #4]
 8041386:	78fa      	ldrb	r2, [r7, #3]
 8041388:	0151      	lsls	r1, r2, #5
 804138a:	693a      	ldr	r2, [r7, #16]
 804138c:	440a      	add	r2, r1
 804138e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8041392:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8041396:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8041398:	78fb      	ldrb	r3, [r7, #3]
 804139a:	015a      	lsls	r2, r3, #5
 804139c:	693b      	ldr	r3, [r7, #16]
 804139e:	4413      	add	r3, r2
 80413a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80413a4:	68db      	ldr	r3, [r3, #12]
 80413a6:	78fa      	ldrb	r2, [r7, #3]
 80413a8:	0151      	lsls	r1, r2, #5
 80413aa:	693a      	ldr	r2, [r7, #16]
 80413ac:	440a      	add	r2, r1
 80413ae:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80413b2:	f043 0320 	orr.w	r3, r3, #32
 80413b6:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80413b8:	78fb      	ldrb	r3, [r7, #3]
 80413ba:	015a      	lsls	r2, r3, #5
 80413bc:	693b      	ldr	r3, [r7, #16]
 80413be:	4413      	add	r3, r2
 80413c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80413c4:	461a      	mov	r2, r3
 80413c6:	2310      	movs	r3, #16
 80413c8:	6093      	str	r3, [r2, #8]
 80413ca:	e000      	b.n	80413ce <HCD_HC_IN_IRQHandler+0xccc>
        return;
 80413cc:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 80413ce:	3718      	adds	r7, #24
 80413d0:	46bd      	mov	sp, r7
 80413d2:	bd80      	pop	{r7, pc}

080413d4 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80413d4:	b580      	push	{r7, lr}
 80413d6:	b086      	sub	sp, #24
 80413d8:	af00      	add	r7, sp, #0
 80413da:	6078      	str	r0, [r7, #4]
 80413dc:	460b      	mov	r3, r1
 80413de:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80413e0:	687b      	ldr	r3, [r7, #4]
 80413e2:	681b      	ldr	r3, [r3, #0]
 80413e4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80413e6:	697b      	ldr	r3, [r7, #20]
 80413e8:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 80413ea:	687b      	ldr	r3, [r7, #4]
 80413ec:	681b      	ldr	r3, [r3, #0]
 80413ee:	78fa      	ldrb	r2, [r7, #3]
 80413f0:	4611      	mov	r1, r2
 80413f2:	4618      	mov	r0, r3
 80413f4:	f000 feec 	bl	80421d0 <USB_ReadChInterrupts>
 80413f8:	4603      	mov	r3, r0
 80413fa:	f003 0304 	and.w	r3, r3, #4
 80413fe:	2b04      	cmp	r3, #4
 8041400:	d11b      	bne.n	804143a <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8041402:	78fb      	ldrb	r3, [r7, #3]
 8041404:	015a      	lsls	r2, r3, #5
 8041406:	693b      	ldr	r3, [r7, #16]
 8041408:	4413      	add	r3, r2
 804140a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 804140e:	461a      	mov	r2, r3
 8041410:	2304      	movs	r3, #4
 8041412:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8041414:	78fa      	ldrb	r2, [r7, #3]
 8041416:	6879      	ldr	r1, [r7, #4]
 8041418:	4613      	mov	r3, r2
 804141a:	011b      	lsls	r3, r3, #4
 804141c:	1a9b      	subs	r3, r3, r2
 804141e:	009b      	lsls	r3, r3, #2
 8041420:	440b      	add	r3, r1
 8041422:	334d      	adds	r3, #77	@ 0x4d
 8041424:	2207      	movs	r2, #7
 8041426:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8041428:	687b      	ldr	r3, [r7, #4]
 804142a:	681b      	ldr	r3, [r3, #0]
 804142c:	78fa      	ldrb	r2, [r7, #3]
 804142e:	4611      	mov	r1, r2
 8041430:	4618      	mov	r0, r3
 8041432:	f000 ff4a 	bl	80422ca <USB_HC_Halt>
 8041436:	f000 bc89 	b.w	8041d4c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 804143a:	687b      	ldr	r3, [r7, #4]
 804143c:	681b      	ldr	r3, [r3, #0]
 804143e:	78fa      	ldrb	r2, [r7, #3]
 8041440:	4611      	mov	r1, r2
 8041442:	4618      	mov	r0, r3
 8041444:	f000 fec4 	bl	80421d0 <USB_ReadChInterrupts>
 8041448:	4603      	mov	r3, r0
 804144a:	f003 0320 	and.w	r3, r3, #32
 804144e:	2b20      	cmp	r3, #32
 8041450:	f040 8082 	bne.w	8041558 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8041454:	78fb      	ldrb	r3, [r7, #3]
 8041456:	015a      	lsls	r2, r3, #5
 8041458:	693b      	ldr	r3, [r7, #16]
 804145a:	4413      	add	r3, r2
 804145c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8041460:	461a      	mov	r2, r3
 8041462:	2320      	movs	r3, #32
 8041464:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8041466:	78fa      	ldrb	r2, [r7, #3]
 8041468:	6879      	ldr	r1, [r7, #4]
 804146a:	4613      	mov	r3, r2
 804146c:	011b      	lsls	r3, r3, #4
 804146e:	1a9b      	subs	r3, r3, r2
 8041470:	009b      	lsls	r3, r3, #2
 8041472:	440b      	add	r3, r1
 8041474:	3319      	adds	r3, #25
 8041476:	781b      	ldrb	r3, [r3, #0]
 8041478:	2b01      	cmp	r3, #1
 804147a:	d124      	bne.n	80414c6 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 804147c:	78fa      	ldrb	r2, [r7, #3]
 804147e:	6879      	ldr	r1, [r7, #4]
 8041480:	4613      	mov	r3, r2
 8041482:	011b      	lsls	r3, r3, #4
 8041484:	1a9b      	subs	r3, r3, r2
 8041486:	009b      	lsls	r3, r3, #2
 8041488:	440b      	add	r3, r1
 804148a:	3319      	adds	r3, #25
 804148c:	2200      	movs	r2, #0
 804148e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8041490:	78fa      	ldrb	r2, [r7, #3]
 8041492:	6879      	ldr	r1, [r7, #4]
 8041494:	4613      	mov	r3, r2
 8041496:	011b      	lsls	r3, r3, #4
 8041498:	1a9b      	subs	r3, r3, r2
 804149a:	009b      	lsls	r3, r3, #2
 804149c:	440b      	add	r3, r1
 804149e:	334c      	adds	r3, #76	@ 0x4c
 80414a0:	2202      	movs	r2, #2
 80414a2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80414a4:	78fa      	ldrb	r2, [r7, #3]
 80414a6:	6879      	ldr	r1, [r7, #4]
 80414a8:	4613      	mov	r3, r2
 80414aa:	011b      	lsls	r3, r3, #4
 80414ac:	1a9b      	subs	r3, r3, r2
 80414ae:	009b      	lsls	r3, r3, #2
 80414b0:	440b      	add	r3, r1
 80414b2:	334d      	adds	r3, #77	@ 0x4d
 80414b4:	2203      	movs	r2, #3
 80414b6:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80414b8:	687b      	ldr	r3, [r7, #4]
 80414ba:	681b      	ldr	r3, [r3, #0]
 80414bc:	78fa      	ldrb	r2, [r7, #3]
 80414be:	4611      	mov	r1, r2
 80414c0:	4618      	mov	r0, r3
 80414c2:	f000 ff02 	bl	80422ca <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 80414c6:	78fa      	ldrb	r2, [r7, #3]
 80414c8:	6879      	ldr	r1, [r7, #4]
 80414ca:	4613      	mov	r3, r2
 80414cc:	011b      	lsls	r3, r3, #4
 80414ce:	1a9b      	subs	r3, r3, r2
 80414d0:	009b      	lsls	r3, r3, #2
 80414d2:	440b      	add	r3, r1
 80414d4:	331a      	adds	r3, #26
 80414d6:	781b      	ldrb	r3, [r3, #0]
 80414d8:	2b01      	cmp	r3, #1
 80414da:	f040 8437 	bne.w	8041d4c <HCD_HC_OUT_IRQHandler+0x978>
 80414de:	78fa      	ldrb	r2, [r7, #3]
 80414e0:	6879      	ldr	r1, [r7, #4]
 80414e2:	4613      	mov	r3, r2
 80414e4:	011b      	lsls	r3, r3, #4
 80414e6:	1a9b      	subs	r3, r3, r2
 80414e8:	009b      	lsls	r3, r3, #2
 80414ea:	440b      	add	r3, r1
 80414ec:	331b      	adds	r3, #27
 80414ee:	781b      	ldrb	r3, [r3, #0]
 80414f0:	2b00      	cmp	r3, #0
 80414f2:	f040 842b 	bne.w	8041d4c <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 80414f6:	78fa      	ldrb	r2, [r7, #3]
 80414f8:	6879      	ldr	r1, [r7, #4]
 80414fa:	4613      	mov	r3, r2
 80414fc:	011b      	lsls	r3, r3, #4
 80414fe:	1a9b      	subs	r3, r3, r2
 8041500:	009b      	lsls	r3, r3, #2
 8041502:	440b      	add	r3, r1
 8041504:	3326      	adds	r3, #38	@ 0x26
 8041506:	781b      	ldrb	r3, [r3, #0]
 8041508:	2b01      	cmp	r3, #1
 804150a:	d009      	beq.n	8041520 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 804150c:	78fa      	ldrb	r2, [r7, #3]
 804150e:	6879      	ldr	r1, [r7, #4]
 8041510:	4613      	mov	r3, r2
 8041512:	011b      	lsls	r3, r3, #4
 8041514:	1a9b      	subs	r3, r3, r2
 8041516:	009b      	lsls	r3, r3, #2
 8041518:	440b      	add	r3, r1
 804151a:	331b      	adds	r3, #27
 804151c:	2201      	movs	r2, #1
 804151e:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8041520:	78fa      	ldrb	r2, [r7, #3]
 8041522:	6879      	ldr	r1, [r7, #4]
 8041524:	4613      	mov	r3, r2
 8041526:	011b      	lsls	r3, r3, #4
 8041528:	1a9b      	subs	r3, r3, r2
 804152a:	009b      	lsls	r3, r3, #2
 804152c:	440b      	add	r3, r1
 804152e:	334d      	adds	r3, #77	@ 0x4d
 8041530:	2203      	movs	r2, #3
 8041532:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8041534:	687b      	ldr	r3, [r7, #4]
 8041536:	681b      	ldr	r3, [r3, #0]
 8041538:	78fa      	ldrb	r2, [r7, #3]
 804153a:	4611      	mov	r1, r2
 804153c:	4618      	mov	r0, r3
 804153e:	f000 fec4 	bl	80422ca <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8041542:	78fa      	ldrb	r2, [r7, #3]
 8041544:	6879      	ldr	r1, [r7, #4]
 8041546:	4613      	mov	r3, r2
 8041548:	011b      	lsls	r3, r3, #4
 804154a:	1a9b      	subs	r3, r3, r2
 804154c:	009b      	lsls	r3, r3, #2
 804154e:	440b      	add	r3, r1
 8041550:	3344      	adds	r3, #68	@ 0x44
 8041552:	2200      	movs	r2, #0
 8041554:	601a      	str	r2, [r3, #0]
 8041556:	e3f9      	b.n	8041d4c <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8041558:	687b      	ldr	r3, [r7, #4]
 804155a:	681b      	ldr	r3, [r3, #0]
 804155c:	78fa      	ldrb	r2, [r7, #3]
 804155e:	4611      	mov	r1, r2
 8041560:	4618      	mov	r0, r3
 8041562:	f000 fe35 	bl	80421d0 <USB_ReadChInterrupts>
 8041566:	4603      	mov	r3, r0
 8041568:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 804156c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8041570:	d111      	bne.n	8041596 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8041572:	78fb      	ldrb	r3, [r7, #3]
 8041574:	015a      	lsls	r2, r3, #5
 8041576:	693b      	ldr	r3, [r7, #16]
 8041578:	4413      	add	r3, r2
 804157a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 804157e:	461a      	mov	r2, r3
 8041580:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8041584:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8041586:	687b      	ldr	r3, [r7, #4]
 8041588:	681b      	ldr	r3, [r3, #0]
 804158a:	78fa      	ldrb	r2, [r7, #3]
 804158c:	4611      	mov	r1, r2
 804158e:	4618      	mov	r0, r3
 8041590:	f000 fe9b 	bl	80422ca <USB_HC_Halt>
 8041594:	e3da      	b.n	8041d4c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8041596:	687b      	ldr	r3, [r7, #4]
 8041598:	681b      	ldr	r3, [r3, #0]
 804159a:	78fa      	ldrb	r2, [r7, #3]
 804159c:	4611      	mov	r1, r2
 804159e:	4618      	mov	r0, r3
 80415a0:	f000 fe16 	bl	80421d0 <USB_ReadChInterrupts>
 80415a4:	4603      	mov	r3, r0
 80415a6:	f003 0301 	and.w	r3, r3, #1
 80415aa:	2b01      	cmp	r3, #1
 80415ac:	d168      	bne.n	8041680 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 80415ae:	78fa      	ldrb	r2, [r7, #3]
 80415b0:	6879      	ldr	r1, [r7, #4]
 80415b2:	4613      	mov	r3, r2
 80415b4:	011b      	lsls	r3, r3, #4
 80415b6:	1a9b      	subs	r3, r3, r2
 80415b8:	009b      	lsls	r3, r3, #2
 80415ba:	440b      	add	r3, r1
 80415bc:	3344      	adds	r3, #68	@ 0x44
 80415be:	2200      	movs	r2, #0
 80415c0:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80415c2:	687b      	ldr	r3, [r7, #4]
 80415c4:	681b      	ldr	r3, [r3, #0]
 80415c6:	78fa      	ldrb	r2, [r7, #3]
 80415c8:	4611      	mov	r1, r2
 80415ca:	4618      	mov	r0, r3
 80415cc:	f000 fe00 	bl	80421d0 <USB_ReadChInterrupts>
 80415d0:	4603      	mov	r3, r0
 80415d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80415d6:	2b40      	cmp	r3, #64	@ 0x40
 80415d8:	d112      	bne.n	8041600 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80415da:	78fa      	ldrb	r2, [r7, #3]
 80415dc:	6879      	ldr	r1, [r7, #4]
 80415de:	4613      	mov	r3, r2
 80415e0:	011b      	lsls	r3, r3, #4
 80415e2:	1a9b      	subs	r3, r3, r2
 80415e4:	009b      	lsls	r3, r3, #2
 80415e6:	440b      	add	r3, r1
 80415e8:	3319      	adds	r3, #25
 80415ea:	2201      	movs	r2, #1
 80415ec:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80415ee:	78fb      	ldrb	r3, [r7, #3]
 80415f0:	015a      	lsls	r2, r3, #5
 80415f2:	693b      	ldr	r3, [r7, #16]
 80415f4:	4413      	add	r3, r2
 80415f6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80415fa:	461a      	mov	r2, r3
 80415fc:	2340      	movs	r3, #64	@ 0x40
 80415fe:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8041600:	78fa      	ldrb	r2, [r7, #3]
 8041602:	6879      	ldr	r1, [r7, #4]
 8041604:	4613      	mov	r3, r2
 8041606:	011b      	lsls	r3, r3, #4
 8041608:	1a9b      	subs	r3, r3, r2
 804160a:	009b      	lsls	r3, r3, #2
 804160c:	440b      	add	r3, r1
 804160e:	331b      	adds	r3, #27
 8041610:	781b      	ldrb	r3, [r3, #0]
 8041612:	2b00      	cmp	r3, #0
 8041614:	d019      	beq.n	804164a <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8041616:	78fa      	ldrb	r2, [r7, #3]
 8041618:	6879      	ldr	r1, [r7, #4]
 804161a:	4613      	mov	r3, r2
 804161c:	011b      	lsls	r3, r3, #4
 804161e:	1a9b      	subs	r3, r3, r2
 8041620:	009b      	lsls	r3, r3, #2
 8041622:	440b      	add	r3, r1
 8041624:	331b      	adds	r3, #27
 8041626:	2200      	movs	r2, #0
 8041628:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 804162a:	78fb      	ldrb	r3, [r7, #3]
 804162c:	015a      	lsls	r2, r3, #5
 804162e:	693b      	ldr	r3, [r7, #16]
 8041630:	4413      	add	r3, r2
 8041632:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8041636:	685b      	ldr	r3, [r3, #4]
 8041638:	78fa      	ldrb	r2, [r7, #3]
 804163a:	0151      	lsls	r1, r2, #5
 804163c:	693a      	ldr	r2, [r7, #16]
 804163e:	440a      	add	r2, r1
 8041640:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8041644:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8041648:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 804164a:	78fb      	ldrb	r3, [r7, #3]
 804164c:	015a      	lsls	r2, r3, #5
 804164e:	693b      	ldr	r3, [r7, #16]
 8041650:	4413      	add	r3, r2
 8041652:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8041656:	461a      	mov	r2, r3
 8041658:	2301      	movs	r3, #1
 804165a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 804165c:	78fa      	ldrb	r2, [r7, #3]
 804165e:	6879      	ldr	r1, [r7, #4]
 8041660:	4613      	mov	r3, r2
 8041662:	011b      	lsls	r3, r3, #4
 8041664:	1a9b      	subs	r3, r3, r2
 8041666:	009b      	lsls	r3, r3, #2
 8041668:	440b      	add	r3, r1
 804166a:	334d      	adds	r3, #77	@ 0x4d
 804166c:	2201      	movs	r2, #1
 804166e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8041670:	687b      	ldr	r3, [r7, #4]
 8041672:	681b      	ldr	r3, [r3, #0]
 8041674:	78fa      	ldrb	r2, [r7, #3]
 8041676:	4611      	mov	r1, r2
 8041678:	4618      	mov	r0, r3
 804167a:	f000 fe26 	bl	80422ca <USB_HC_Halt>
 804167e:	e365      	b.n	8041d4c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8041680:	687b      	ldr	r3, [r7, #4]
 8041682:	681b      	ldr	r3, [r3, #0]
 8041684:	78fa      	ldrb	r2, [r7, #3]
 8041686:	4611      	mov	r1, r2
 8041688:	4618      	mov	r0, r3
 804168a:	f000 fda1 	bl	80421d0 <USB_ReadChInterrupts>
 804168e:	4603      	mov	r3, r0
 8041690:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8041694:	2b40      	cmp	r3, #64	@ 0x40
 8041696:	d139      	bne.n	804170c <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8041698:	78fa      	ldrb	r2, [r7, #3]
 804169a:	6879      	ldr	r1, [r7, #4]
 804169c:	4613      	mov	r3, r2
 804169e:	011b      	lsls	r3, r3, #4
 80416a0:	1a9b      	subs	r3, r3, r2
 80416a2:	009b      	lsls	r3, r3, #2
 80416a4:	440b      	add	r3, r1
 80416a6:	334d      	adds	r3, #77	@ 0x4d
 80416a8:	2205      	movs	r2, #5
 80416aa:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80416ac:	78fa      	ldrb	r2, [r7, #3]
 80416ae:	6879      	ldr	r1, [r7, #4]
 80416b0:	4613      	mov	r3, r2
 80416b2:	011b      	lsls	r3, r3, #4
 80416b4:	1a9b      	subs	r3, r3, r2
 80416b6:	009b      	lsls	r3, r3, #2
 80416b8:	440b      	add	r3, r1
 80416ba:	331a      	adds	r3, #26
 80416bc:	781b      	ldrb	r3, [r3, #0]
 80416be:	2b00      	cmp	r3, #0
 80416c0:	d109      	bne.n	80416d6 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80416c2:	78fa      	ldrb	r2, [r7, #3]
 80416c4:	6879      	ldr	r1, [r7, #4]
 80416c6:	4613      	mov	r3, r2
 80416c8:	011b      	lsls	r3, r3, #4
 80416ca:	1a9b      	subs	r3, r3, r2
 80416cc:	009b      	lsls	r3, r3, #2
 80416ce:	440b      	add	r3, r1
 80416d0:	3319      	adds	r3, #25
 80416d2:	2201      	movs	r2, #1
 80416d4:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 80416d6:	78fa      	ldrb	r2, [r7, #3]
 80416d8:	6879      	ldr	r1, [r7, #4]
 80416da:	4613      	mov	r3, r2
 80416dc:	011b      	lsls	r3, r3, #4
 80416de:	1a9b      	subs	r3, r3, r2
 80416e0:	009b      	lsls	r3, r3, #2
 80416e2:	440b      	add	r3, r1
 80416e4:	3344      	adds	r3, #68	@ 0x44
 80416e6:	2200      	movs	r2, #0
 80416e8:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80416ea:	687b      	ldr	r3, [r7, #4]
 80416ec:	681b      	ldr	r3, [r3, #0]
 80416ee:	78fa      	ldrb	r2, [r7, #3]
 80416f0:	4611      	mov	r1, r2
 80416f2:	4618      	mov	r0, r3
 80416f4:	f000 fde9 	bl	80422ca <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80416f8:	78fb      	ldrb	r3, [r7, #3]
 80416fa:	015a      	lsls	r2, r3, #5
 80416fc:	693b      	ldr	r3, [r7, #16]
 80416fe:	4413      	add	r3, r2
 8041700:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8041704:	461a      	mov	r2, r3
 8041706:	2340      	movs	r3, #64	@ 0x40
 8041708:	6093      	str	r3, [r2, #8]
 804170a:	e31f      	b.n	8041d4c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 804170c:	687b      	ldr	r3, [r7, #4]
 804170e:	681b      	ldr	r3, [r3, #0]
 8041710:	78fa      	ldrb	r2, [r7, #3]
 8041712:	4611      	mov	r1, r2
 8041714:	4618      	mov	r0, r3
 8041716:	f000 fd5b 	bl	80421d0 <USB_ReadChInterrupts>
 804171a:	4603      	mov	r3, r0
 804171c:	f003 0308 	and.w	r3, r3, #8
 8041720:	2b08      	cmp	r3, #8
 8041722:	d11a      	bne.n	804175a <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8041724:	78fb      	ldrb	r3, [r7, #3]
 8041726:	015a      	lsls	r2, r3, #5
 8041728:	693b      	ldr	r3, [r7, #16]
 804172a:	4413      	add	r3, r2
 804172c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8041730:	461a      	mov	r2, r3
 8041732:	2308      	movs	r3, #8
 8041734:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8041736:	78fa      	ldrb	r2, [r7, #3]
 8041738:	6879      	ldr	r1, [r7, #4]
 804173a:	4613      	mov	r3, r2
 804173c:	011b      	lsls	r3, r3, #4
 804173e:	1a9b      	subs	r3, r3, r2
 8041740:	009b      	lsls	r3, r3, #2
 8041742:	440b      	add	r3, r1
 8041744:	334d      	adds	r3, #77	@ 0x4d
 8041746:	2206      	movs	r2, #6
 8041748:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 804174a:	687b      	ldr	r3, [r7, #4]
 804174c:	681b      	ldr	r3, [r3, #0]
 804174e:	78fa      	ldrb	r2, [r7, #3]
 8041750:	4611      	mov	r1, r2
 8041752:	4618      	mov	r0, r3
 8041754:	f000 fdb9 	bl	80422ca <USB_HC_Halt>
 8041758:	e2f8      	b.n	8041d4c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 804175a:	687b      	ldr	r3, [r7, #4]
 804175c:	681b      	ldr	r3, [r3, #0]
 804175e:	78fa      	ldrb	r2, [r7, #3]
 8041760:	4611      	mov	r1, r2
 8041762:	4618      	mov	r0, r3
 8041764:	f000 fd34 	bl	80421d0 <USB_ReadChInterrupts>
 8041768:	4603      	mov	r3, r0
 804176a:	f003 0310 	and.w	r3, r3, #16
 804176e:	2b10      	cmp	r3, #16
 8041770:	d144      	bne.n	80417fc <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8041772:	78fa      	ldrb	r2, [r7, #3]
 8041774:	6879      	ldr	r1, [r7, #4]
 8041776:	4613      	mov	r3, r2
 8041778:	011b      	lsls	r3, r3, #4
 804177a:	1a9b      	subs	r3, r3, r2
 804177c:	009b      	lsls	r3, r3, #2
 804177e:	440b      	add	r3, r1
 8041780:	3344      	adds	r3, #68	@ 0x44
 8041782:	2200      	movs	r2, #0
 8041784:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8041786:	78fa      	ldrb	r2, [r7, #3]
 8041788:	6879      	ldr	r1, [r7, #4]
 804178a:	4613      	mov	r3, r2
 804178c:	011b      	lsls	r3, r3, #4
 804178e:	1a9b      	subs	r3, r3, r2
 8041790:	009b      	lsls	r3, r3, #2
 8041792:	440b      	add	r3, r1
 8041794:	334d      	adds	r3, #77	@ 0x4d
 8041796:	2204      	movs	r2, #4
 8041798:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 804179a:	78fa      	ldrb	r2, [r7, #3]
 804179c:	6879      	ldr	r1, [r7, #4]
 804179e:	4613      	mov	r3, r2
 80417a0:	011b      	lsls	r3, r3, #4
 80417a2:	1a9b      	subs	r3, r3, r2
 80417a4:	009b      	lsls	r3, r3, #2
 80417a6:	440b      	add	r3, r1
 80417a8:	3319      	adds	r3, #25
 80417aa:	781b      	ldrb	r3, [r3, #0]
 80417ac:	2b00      	cmp	r3, #0
 80417ae:	d114      	bne.n	80417da <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 80417b0:	78fa      	ldrb	r2, [r7, #3]
 80417b2:	6879      	ldr	r1, [r7, #4]
 80417b4:	4613      	mov	r3, r2
 80417b6:	011b      	lsls	r3, r3, #4
 80417b8:	1a9b      	subs	r3, r3, r2
 80417ba:	009b      	lsls	r3, r3, #2
 80417bc:	440b      	add	r3, r1
 80417be:	3318      	adds	r3, #24
 80417c0:	781b      	ldrb	r3, [r3, #0]
 80417c2:	2b00      	cmp	r3, #0
 80417c4:	d109      	bne.n	80417da <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 80417c6:	78fa      	ldrb	r2, [r7, #3]
 80417c8:	6879      	ldr	r1, [r7, #4]
 80417ca:	4613      	mov	r3, r2
 80417cc:	011b      	lsls	r3, r3, #4
 80417ce:	1a9b      	subs	r3, r3, r2
 80417d0:	009b      	lsls	r3, r3, #2
 80417d2:	440b      	add	r3, r1
 80417d4:	3319      	adds	r3, #25
 80417d6:	2201      	movs	r2, #1
 80417d8:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80417da:	687b      	ldr	r3, [r7, #4]
 80417dc:	681b      	ldr	r3, [r3, #0]
 80417de:	78fa      	ldrb	r2, [r7, #3]
 80417e0:	4611      	mov	r1, r2
 80417e2:	4618      	mov	r0, r3
 80417e4:	f000 fd71 	bl	80422ca <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80417e8:	78fb      	ldrb	r3, [r7, #3]
 80417ea:	015a      	lsls	r2, r3, #5
 80417ec:	693b      	ldr	r3, [r7, #16]
 80417ee:	4413      	add	r3, r2
 80417f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80417f4:	461a      	mov	r2, r3
 80417f6:	2310      	movs	r3, #16
 80417f8:	6093      	str	r3, [r2, #8]
 80417fa:	e2a7      	b.n	8041d4c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 80417fc:	687b      	ldr	r3, [r7, #4]
 80417fe:	681b      	ldr	r3, [r3, #0]
 8041800:	78fa      	ldrb	r2, [r7, #3]
 8041802:	4611      	mov	r1, r2
 8041804:	4618      	mov	r0, r3
 8041806:	f000 fce3 	bl	80421d0 <USB_ReadChInterrupts>
 804180a:	4603      	mov	r3, r0
 804180c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8041810:	2b80      	cmp	r3, #128	@ 0x80
 8041812:	f040 8083 	bne.w	804191c <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 8041816:	687b      	ldr	r3, [r7, #4]
 8041818:	799b      	ldrb	r3, [r3, #6]
 804181a:	2b00      	cmp	r3, #0
 804181c:	d111      	bne.n	8041842 <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 804181e:	78fa      	ldrb	r2, [r7, #3]
 8041820:	6879      	ldr	r1, [r7, #4]
 8041822:	4613      	mov	r3, r2
 8041824:	011b      	lsls	r3, r3, #4
 8041826:	1a9b      	subs	r3, r3, r2
 8041828:	009b      	lsls	r3, r3, #2
 804182a:	440b      	add	r3, r1
 804182c:	334d      	adds	r3, #77	@ 0x4d
 804182e:	2207      	movs	r2, #7
 8041830:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8041832:	687b      	ldr	r3, [r7, #4]
 8041834:	681b      	ldr	r3, [r3, #0]
 8041836:	78fa      	ldrb	r2, [r7, #3]
 8041838:	4611      	mov	r1, r2
 804183a:	4618      	mov	r0, r3
 804183c:	f000 fd45 	bl	80422ca <USB_HC_Halt>
 8041840:	e062      	b.n	8041908 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8041842:	78fa      	ldrb	r2, [r7, #3]
 8041844:	6879      	ldr	r1, [r7, #4]
 8041846:	4613      	mov	r3, r2
 8041848:	011b      	lsls	r3, r3, #4
 804184a:	1a9b      	subs	r3, r3, r2
 804184c:	009b      	lsls	r3, r3, #2
 804184e:	440b      	add	r3, r1
 8041850:	3344      	adds	r3, #68	@ 0x44
 8041852:	681b      	ldr	r3, [r3, #0]
 8041854:	1c59      	adds	r1, r3, #1
 8041856:	6878      	ldr	r0, [r7, #4]
 8041858:	4613      	mov	r3, r2
 804185a:	011b      	lsls	r3, r3, #4
 804185c:	1a9b      	subs	r3, r3, r2
 804185e:	009b      	lsls	r3, r3, #2
 8041860:	4403      	add	r3, r0
 8041862:	3344      	adds	r3, #68	@ 0x44
 8041864:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8041866:	78fa      	ldrb	r2, [r7, #3]
 8041868:	6879      	ldr	r1, [r7, #4]
 804186a:	4613      	mov	r3, r2
 804186c:	011b      	lsls	r3, r3, #4
 804186e:	1a9b      	subs	r3, r3, r2
 8041870:	009b      	lsls	r3, r3, #2
 8041872:	440b      	add	r3, r1
 8041874:	3344      	adds	r3, #68	@ 0x44
 8041876:	681b      	ldr	r3, [r3, #0]
 8041878:	2b02      	cmp	r3, #2
 804187a:	d922      	bls.n	80418c2 <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 804187c:	78fa      	ldrb	r2, [r7, #3]
 804187e:	6879      	ldr	r1, [r7, #4]
 8041880:	4613      	mov	r3, r2
 8041882:	011b      	lsls	r3, r3, #4
 8041884:	1a9b      	subs	r3, r3, r2
 8041886:	009b      	lsls	r3, r3, #2
 8041888:	440b      	add	r3, r1
 804188a:	3344      	adds	r3, #68	@ 0x44
 804188c:	2200      	movs	r2, #0
 804188e:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8041890:	78fa      	ldrb	r2, [r7, #3]
 8041892:	6879      	ldr	r1, [r7, #4]
 8041894:	4613      	mov	r3, r2
 8041896:	011b      	lsls	r3, r3, #4
 8041898:	1a9b      	subs	r3, r3, r2
 804189a:	009b      	lsls	r3, r3, #2
 804189c:	440b      	add	r3, r1
 804189e:	334c      	adds	r3, #76	@ 0x4c
 80418a0:	2204      	movs	r2, #4
 80418a2:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80418a4:	78fa      	ldrb	r2, [r7, #3]
 80418a6:	6879      	ldr	r1, [r7, #4]
 80418a8:	4613      	mov	r3, r2
 80418aa:	011b      	lsls	r3, r3, #4
 80418ac:	1a9b      	subs	r3, r3, r2
 80418ae:	009b      	lsls	r3, r3, #2
 80418b0:	440b      	add	r3, r1
 80418b2:	334c      	adds	r3, #76	@ 0x4c
 80418b4:	781a      	ldrb	r2, [r3, #0]
 80418b6:	78fb      	ldrb	r3, [r7, #3]
 80418b8:	4619      	mov	r1, r3
 80418ba:	6878      	ldr	r0, [r7, #4]
 80418bc:	f000 ff80 	bl	80427c0 <HAL_HCD_HC_NotifyURBChange_Callback>
 80418c0:	e022      	b.n	8041908 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80418c2:	78fa      	ldrb	r2, [r7, #3]
 80418c4:	6879      	ldr	r1, [r7, #4]
 80418c6:	4613      	mov	r3, r2
 80418c8:	011b      	lsls	r3, r3, #4
 80418ca:	1a9b      	subs	r3, r3, r2
 80418cc:	009b      	lsls	r3, r3, #2
 80418ce:	440b      	add	r3, r1
 80418d0:	334c      	adds	r3, #76	@ 0x4c
 80418d2:	2202      	movs	r2, #2
 80418d4:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80418d6:	78fb      	ldrb	r3, [r7, #3]
 80418d8:	015a      	lsls	r2, r3, #5
 80418da:	693b      	ldr	r3, [r7, #16]
 80418dc:	4413      	add	r3, r2
 80418de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80418e2:	681b      	ldr	r3, [r3, #0]
 80418e4:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80418e6:	68fb      	ldr	r3, [r7, #12]
 80418e8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80418ec:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80418ee:	68fb      	ldr	r3, [r7, #12]
 80418f0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80418f4:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80418f6:	78fb      	ldrb	r3, [r7, #3]
 80418f8:	015a      	lsls	r2, r3, #5
 80418fa:	693b      	ldr	r3, [r7, #16]
 80418fc:	4413      	add	r3, r2
 80418fe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8041902:	461a      	mov	r2, r3
 8041904:	68fb      	ldr	r3, [r7, #12]
 8041906:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8041908:	78fb      	ldrb	r3, [r7, #3]
 804190a:	015a      	lsls	r2, r3, #5
 804190c:	693b      	ldr	r3, [r7, #16]
 804190e:	4413      	add	r3, r2
 8041910:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8041914:	461a      	mov	r2, r3
 8041916:	2380      	movs	r3, #128	@ 0x80
 8041918:	6093      	str	r3, [r2, #8]
 804191a:	e217      	b.n	8041d4c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 804191c:	687b      	ldr	r3, [r7, #4]
 804191e:	681b      	ldr	r3, [r3, #0]
 8041920:	78fa      	ldrb	r2, [r7, #3]
 8041922:	4611      	mov	r1, r2
 8041924:	4618      	mov	r0, r3
 8041926:	f000 fc53 	bl	80421d0 <USB_ReadChInterrupts>
 804192a:	4603      	mov	r3, r0
 804192c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8041930:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8041934:	d11b      	bne.n	804196e <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8041936:	78fa      	ldrb	r2, [r7, #3]
 8041938:	6879      	ldr	r1, [r7, #4]
 804193a:	4613      	mov	r3, r2
 804193c:	011b      	lsls	r3, r3, #4
 804193e:	1a9b      	subs	r3, r3, r2
 8041940:	009b      	lsls	r3, r3, #2
 8041942:	440b      	add	r3, r1
 8041944:	334d      	adds	r3, #77	@ 0x4d
 8041946:	2209      	movs	r2, #9
 8041948:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 804194a:	687b      	ldr	r3, [r7, #4]
 804194c:	681b      	ldr	r3, [r3, #0]
 804194e:	78fa      	ldrb	r2, [r7, #3]
 8041950:	4611      	mov	r1, r2
 8041952:	4618      	mov	r0, r3
 8041954:	f000 fcb9 	bl	80422ca <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8041958:	78fb      	ldrb	r3, [r7, #3]
 804195a:	015a      	lsls	r2, r3, #5
 804195c:	693b      	ldr	r3, [r7, #16]
 804195e:	4413      	add	r3, r2
 8041960:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8041964:	461a      	mov	r2, r3
 8041966:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 804196a:	6093      	str	r3, [r2, #8]
 804196c:	e1ee      	b.n	8041d4c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 804196e:	687b      	ldr	r3, [r7, #4]
 8041970:	681b      	ldr	r3, [r3, #0]
 8041972:	78fa      	ldrb	r2, [r7, #3]
 8041974:	4611      	mov	r1, r2
 8041976:	4618      	mov	r0, r3
 8041978:	f000 fc2a 	bl	80421d0 <USB_ReadChInterrupts>
 804197c:	4603      	mov	r3, r0
 804197e:	f003 0302 	and.w	r3, r3, #2
 8041982:	2b02      	cmp	r3, #2
 8041984:	f040 81df 	bne.w	8041d46 <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8041988:	78fb      	ldrb	r3, [r7, #3]
 804198a:	015a      	lsls	r2, r3, #5
 804198c:	693b      	ldr	r3, [r7, #16]
 804198e:	4413      	add	r3, r2
 8041990:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8041994:	461a      	mov	r2, r3
 8041996:	2302      	movs	r3, #2
 8041998:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 804199a:	78fa      	ldrb	r2, [r7, #3]
 804199c:	6879      	ldr	r1, [r7, #4]
 804199e:	4613      	mov	r3, r2
 80419a0:	011b      	lsls	r3, r3, #4
 80419a2:	1a9b      	subs	r3, r3, r2
 80419a4:	009b      	lsls	r3, r3, #2
 80419a6:	440b      	add	r3, r1
 80419a8:	334d      	adds	r3, #77	@ 0x4d
 80419aa:	781b      	ldrb	r3, [r3, #0]
 80419ac:	2b01      	cmp	r3, #1
 80419ae:	f040 8093 	bne.w	8041ad8 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80419b2:	78fa      	ldrb	r2, [r7, #3]
 80419b4:	6879      	ldr	r1, [r7, #4]
 80419b6:	4613      	mov	r3, r2
 80419b8:	011b      	lsls	r3, r3, #4
 80419ba:	1a9b      	subs	r3, r3, r2
 80419bc:	009b      	lsls	r3, r3, #2
 80419be:	440b      	add	r3, r1
 80419c0:	334d      	adds	r3, #77	@ 0x4d
 80419c2:	2202      	movs	r2, #2
 80419c4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80419c6:	78fa      	ldrb	r2, [r7, #3]
 80419c8:	6879      	ldr	r1, [r7, #4]
 80419ca:	4613      	mov	r3, r2
 80419cc:	011b      	lsls	r3, r3, #4
 80419ce:	1a9b      	subs	r3, r3, r2
 80419d0:	009b      	lsls	r3, r3, #2
 80419d2:	440b      	add	r3, r1
 80419d4:	334c      	adds	r3, #76	@ 0x4c
 80419d6:	2201      	movs	r2, #1
 80419d8:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80419da:	78fa      	ldrb	r2, [r7, #3]
 80419dc:	6879      	ldr	r1, [r7, #4]
 80419de:	4613      	mov	r3, r2
 80419e0:	011b      	lsls	r3, r3, #4
 80419e2:	1a9b      	subs	r3, r3, r2
 80419e4:	009b      	lsls	r3, r3, #2
 80419e6:	440b      	add	r3, r1
 80419e8:	3326      	adds	r3, #38	@ 0x26
 80419ea:	781b      	ldrb	r3, [r3, #0]
 80419ec:	2b02      	cmp	r3, #2
 80419ee:	d00b      	beq.n	8041a08 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 80419f0:	78fa      	ldrb	r2, [r7, #3]
 80419f2:	6879      	ldr	r1, [r7, #4]
 80419f4:	4613      	mov	r3, r2
 80419f6:	011b      	lsls	r3, r3, #4
 80419f8:	1a9b      	subs	r3, r3, r2
 80419fa:	009b      	lsls	r3, r3, #2
 80419fc:	440b      	add	r3, r1
 80419fe:	3326      	adds	r3, #38	@ 0x26
 8041a00:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8041a02:	2b03      	cmp	r3, #3
 8041a04:	f040 8190 	bne.w	8041d28 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 8041a08:	687b      	ldr	r3, [r7, #4]
 8041a0a:	799b      	ldrb	r3, [r3, #6]
 8041a0c:	2b00      	cmp	r3, #0
 8041a0e:	d115      	bne.n	8041a3c <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8041a10:	78fa      	ldrb	r2, [r7, #3]
 8041a12:	6879      	ldr	r1, [r7, #4]
 8041a14:	4613      	mov	r3, r2
 8041a16:	011b      	lsls	r3, r3, #4
 8041a18:	1a9b      	subs	r3, r3, r2
 8041a1a:	009b      	lsls	r3, r3, #2
 8041a1c:	440b      	add	r3, r1
 8041a1e:	333d      	adds	r3, #61	@ 0x3d
 8041a20:	781b      	ldrb	r3, [r3, #0]
 8041a22:	78fa      	ldrb	r2, [r7, #3]
 8041a24:	f083 0301 	eor.w	r3, r3, #1
 8041a28:	b2d8      	uxtb	r0, r3
 8041a2a:	6879      	ldr	r1, [r7, #4]
 8041a2c:	4613      	mov	r3, r2
 8041a2e:	011b      	lsls	r3, r3, #4
 8041a30:	1a9b      	subs	r3, r3, r2
 8041a32:	009b      	lsls	r3, r3, #2
 8041a34:	440b      	add	r3, r1
 8041a36:	333d      	adds	r3, #61	@ 0x3d
 8041a38:	4602      	mov	r2, r0
 8041a3a:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8041a3c:	687b      	ldr	r3, [r7, #4]
 8041a3e:	799b      	ldrb	r3, [r3, #6]
 8041a40:	2b01      	cmp	r3, #1
 8041a42:	f040 8171 	bne.w	8041d28 <HCD_HC_OUT_IRQHandler+0x954>
 8041a46:	78fa      	ldrb	r2, [r7, #3]
 8041a48:	6879      	ldr	r1, [r7, #4]
 8041a4a:	4613      	mov	r3, r2
 8041a4c:	011b      	lsls	r3, r3, #4
 8041a4e:	1a9b      	subs	r3, r3, r2
 8041a50:	009b      	lsls	r3, r3, #2
 8041a52:	440b      	add	r3, r1
 8041a54:	3334      	adds	r3, #52	@ 0x34
 8041a56:	681b      	ldr	r3, [r3, #0]
 8041a58:	2b00      	cmp	r3, #0
 8041a5a:	f000 8165 	beq.w	8041d28 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8041a5e:	78fa      	ldrb	r2, [r7, #3]
 8041a60:	6879      	ldr	r1, [r7, #4]
 8041a62:	4613      	mov	r3, r2
 8041a64:	011b      	lsls	r3, r3, #4
 8041a66:	1a9b      	subs	r3, r3, r2
 8041a68:	009b      	lsls	r3, r3, #2
 8041a6a:	440b      	add	r3, r1
 8041a6c:	3334      	adds	r3, #52	@ 0x34
 8041a6e:	6819      	ldr	r1, [r3, #0]
 8041a70:	78fa      	ldrb	r2, [r7, #3]
 8041a72:	6878      	ldr	r0, [r7, #4]
 8041a74:	4613      	mov	r3, r2
 8041a76:	011b      	lsls	r3, r3, #4
 8041a78:	1a9b      	subs	r3, r3, r2
 8041a7a:	009b      	lsls	r3, r3, #2
 8041a7c:	4403      	add	r3, r0
 8041a7e:	3328      	adds	r3, #40	@ 0x28
 8041a80:	881b      	ldrh	r3, [r3, #0]
 8041a82:	440b      	add	r3, r1
 8041a84:	1e59      	subs	r1, r3, #1
 8041a86:	78fa      	ldrb	r2, [r7, #3]
 8041a88:	6878      	ldr	r0, [r7, #4]
 8041a8a:	4613      	mov	r3, r2
 8041a8c:	011b      	lsls	r3, r3, #4
 8041a8e:	1a9b      	subs	r3, r3, r2
 8041a90:	009b      	lsls	r3, r3, #2
 8041a92:	4403      	add	r3, r0
 8041a94:	3328      	adds	r3, #40	@ 0x28
 8041a96:	881b      	ldrh	r3, [r3, #0]
 8041a98:	fbb1 f3f3 	udiv	r3, r1, r3
 8041a9c:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8041a9e:	68bb      	ldr	r3, [r7, #8]
 8041aa0:	f003 0301 	and.w	r3, r3, #1
 8041aa4:	2b00      	cmp	r3, #0
 8041aa6:	f000 813f 	beq.w	8041d28 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8041aaa:	78fa      	ldrb	r2, [r7, #3]
 8041aac:	6879      	ldr	r1, [r7, #4]
 8041aae:	4613      	mov	r3, r2
 8041ab0:	011b      	lsls	r3, r3, #4
 8041ab2:	1a9b      	subs	r3, r3, r2
 8041ab4:	009b      	lsls	r3, r3, #2
 8041ab6:	440b      	add	r3, r1
 8041ab8:	333d      	adds	r3, #61	@ 0x3d
 8041aba:	781b      	ldrb	r3, [r3, #0]
 8041abc:	78fa      	ldrb	r2, [r7, #3]
 8041abe:	f083 0301 	eor.w	r3, r3, #1
 8041ac2:	b2d8      	uxtb	r0, r3
 8041ac4:	6879      	ldr	r1, [r7, #4]
 8041ac6:	4613      	mov	r3, r2
 8041ac8:	011b      	lsls	r3, r3, #4
 8041aca:	1a9b      	subs	r3, r3, r2
 8041acc:	009b      	lsls	r3, r3, #2
 8041ace:	440b      	add	r3, r1
 8041ad0:	333d      	adds	r3, #61	@ 0x3d
 8041ad2:	4602      	mov	r2, r0
 8041ad4:	701a      	strb	r2, [r3, #0]
 8041ad6:	e127      	b.n	8041d28 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8041ad8:	78fa      	ldrb	r2, [r7, #3]
 8041ada:	6879      	ldr	r1, [r7, #4]
 8041adc:	4613      	mov	r3, r2
 8041ade:	011b      	lsls	r3, r3, #4
 8041ae0:	1a9b      	subs	r3, r3, r2
 8041ae2:	009b      	lsls	r3, r3, #2
 8041ae4:	440b      	add	r3, r1
 8041ae6:	334d      	adds	r3, #77	@ 0x4d
 8041ae8:	781b      	ldrb	r3, [r3, #0]
 8041aea:	2b03      	cmp	r3, #3
 8041aec:	d120      	bne.n	8041b30 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8041aee:	78fa      	ldrb	r2, [r7, #3]
 8041af0:	6879      	ldr	r1, [r7, #4]
 8041af2:	4613      	mov	r3, r2
 8041af4:	011b      	lsls	r3, r3, #4
 8041af6:	1a9b      	subs	r3, r3, r2
 8041af8:	009b      	lsls	r3, r3, #2
 8041afa:	440b      	add	r3, r1
 8041afc:	334d      	adds	r3, #77	@ 0x4d
 8041afe:	2202      	movs	r2, #2
 8041b00:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8041b02:	78fa      	ldrb	r2, [r7, #3]
 8041b04:	6879      	ldr	r1, [r7, #4]
 8041b06:	4613      	mov	r3, r2
 8041b08:	011b      	lsls	r3, r3, #4
 8041b0a:	1a9b      	subs	r3, r3, r2
 8041b0c:	009b      	lsls	r3, r3, #2
 8041b0e:	440b      	add	r3, r1
 8041b10:	331b      	adds	r3, #27
 8041b12:	781b      	ldrb	r3, [r3, #0]
 8041b14:	2b01      	cmp	r3, #1
 8041b16:	f040 8107 	bne.w	8041d28 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8041b1a:	78fa      	ldrb	r2, [r7, #3]
 8041b1c:	6879      	ldr	r1, [r7, #4]
 8041b1e:	4613      	mov	r3, r2
 8041b20:	011b      	lsls	r3, r3, #4
 8041b22:	1a9b      	subs	r3, r3, r2
 8041b24:	009b      	lsls	r3, r3, #2
 8041b26:	440b      	add	r3, r1
 8041b28:	334c      	adds	r3, #76	@ 0x4c
 8041b2a:	2202      	movs	r2, #2
 8041b2c:	701a      	strb	r2, [r3, #0]
 8041b2e:	e0fb      	b.n	8041d28 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8041b30:	78fa      	ldrb	r2, [r7, #3]
 8041b32:	6879      	ldr	r1, [r7, #4]
 8041b34:	4613      	mov	r3, r2
 8041b36:	011b      	lsls	r3, r3, #4
 8041b38:	1a9b      	subs	r3, r3, r2
 8041b3a:	009b      	lsls	r3, r3, #2
 8041b3c:	440b      	add	r3, r1
 8041b3e:	334d      	adds	r3, #77	@ 0x4d
 8041b40:	781b      	ldrb	r3, [r3, #0]
 8041b42:	2b04      	cmp	r3, #4
 8041b44:	d13a      	bne.n	8041bbc <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8041b46:	78fa      	ldrb	r2, [r7, #3]
 8041b48:	6879      	ldr	r1, [r7, #4]
 8041b4a:	4613      	mov	r3, r2
 8041b4c:	011b      	lsls	r3, r3, #4
 8041b4e:	1a9b      	subs	r3, r3, r2
 8041b50:	009b      	lsls	r3, r3, #2
 8041b52:	440b      	add	r3, r1
 8041b54:	334d      	adds	r3, #77	@ 0x4d
 8041b56:	2202      	movs	r2, #2
 8041b58:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8041b5a:	78fa      	ldrb	r2, [r7, #3]
 8041b5c:	6879      	ldr	r1, [r7, #4]
 8041b5e:	4613      	mov	r3, r2
 8041b60:	011b      	lsls	r3, r3, #4
 8041b62:	1a9b      	subs	r3, r3, r2
 8041b64:	009b      	lsls	r3, r3, #2
 8041b66:	440b      	add	r3, r1
 8041b68:	334c      	adds	r3, #76	@ 0x4c
 8041b6a:	2202      	movs	r2, #2
 8041b6c:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8041b6e:	78fa      	ldrb	r2, [r7, #3]
 8041b70:	6879      	ldr	r1, [r7, #4]
 8041b72:	4613      	mov	r3, r2
 8041b74:	011b      	lsls	r3, r3, #4
 8041b76:	1a9b      	subs	r3, r3, r2
 8041b78:	009b      	lsls	r3, r3, #2
 8041b7a:	440b      	add	r3, r1
 8041b7c:	331b      	adds	r3, #27
 8041b7e:	781b      	ldrb	r3, [r3, #0]
 8041b80:	2b01      	cmp	r3, #1
 8041b82:	f040 80d1 	bne.w	8041d28 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8041b86:	78fa      	ldrb	r2, [r7, #3]
 8041b88:	6879      	ldr	r1, [r7, #4]
 8041b8a:	4613      	mov	r3, r2
 8041b8c:	011b      	lsls	r3, r3, #4
 8041b8e:	1a9b      	subs	r3, r3, r2
 8041b90:	009b      	lsls	r3, r3, #2
 8041b92:	440b      	add	r3, r1
 8041b94:	331b      	adds	r3, #27
 8041b96:	2200      	movs	r2, #0
 8041b98:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8041b9a:	78fb      	ldrb	r3, [r7, #3]
 8041b9c:	015a      	lsls	r2, r3, #5
 8041b9e:	693b      	ldr	r3, [r7, #16]
 8041ba0:	4413      	add	r3, r2
 8041ba2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8041ba6:	685b      	ldr	r3, [r3, #4]
 8041ba8:	78fa      	ldrb	r2, [r7, #3]
 8041baa:	0151      	lsls	r1, r2, #5
 8041bac:	693a      	ldr	r2, [r7, #16]
 8041bae:	440a      	add	r2, r1
 8041bb0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8041bb4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8041bb8:	6053      	str	r3, [r2, #4]
 8041bba:	e0b5      	b.n	8041d28 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8041bbc:	78fa      	ldrb	r2, [r7, #3]
 8041bbe:	6879      	ldr	r1, [r7, #4]
 8041bc0:	4613      	mov	r3, r2
 8041bc2:	011b      	lsls	r3, r3, #4
 8041bc4:	1a9b      	subs	r3, r3, r2
 8041bc6:	009b      	lsls	r3, r3, #2
 8041bc8:	440b      	add	r3, r1
 8041bca:	334d      	adds	r3, #77	@ 0x4d
 8041bcc:	781b      	ldrb	r3, [r3, #0]
 8041bce:	2b05      	cmp	r3, #5
 8041bd0:	d114      	bne.n	8041bfc <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8041bd2:	78fa      	ldrb	r2, [r7, #3]
 8041bd4:	6879      	ldr	r1, [r7, #4]
 8041bd6:	4613      	mov	r3, r2
 8041bd8:	011b      	lsls	r3, r3, #4
 8041bda:	1a9b      	subs	r3, r3, r2
 8041bdc:	009b      	lsls	r3, r3, #2
 8041bde:	440b      	add	r3, r1
 8041be0:	334d      	adds	r3, #77	@ 0x4d
 8041be2:	2202      	movs	r2, #2
 8041be4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8041be6:	78fa      	ldrb	r2, [r7, #3]
 8041be8:	6879      	ldr	r1, [r7, #4]
 8041bea:	4613      	mov	r3, r2
 8041bec:	011b      	lsls	r3, r3, #4
 8041bee:	1a9b      	subs	r3, r3, r2
 8041bf0:	009b      	lsls	r3, r3, #2
 8041bf2:	440b      	add	r3, r1
 8041bf4:	334c      	adds	r3, #76	@ 0x4c
 8041bf6:	2202      	movs	r2, #2
 8041bf8:	701a      	strb	r2, [r3, #0]
 8041bfa:	e095      	b.n	8041d28 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8041bfc:	78fa      	ldrb	r2, [r7, #3]
 8041bfe:	6879      	ldr	r1, [r7, #4]
 8041c00:	4613      	mov	r3, r2
 8041c02:	011b      	lsls	r3, r3, #4
 8041c04:	1a9b      	subs	r3, r3, r2
 8041c06:	009b      	lsls	r3, r3, #2
 8041c08:	440b      	add	r3, r1
 8041c0a:	334d      	adds	r3, #77	@ 0x4d
 8041c0c:	781b      	ldrb	r3, [r3, #0]
 8041c0e:	2b06      	cmp	r3, #6
 8041c10:	d114      	bne.n	8041c3c <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8041c12:	78fa      	ldrb	r2, [r7, #3]
 8041c14:	6879      	ldr	r1, [r7, #4]
 8041c16:	4613      	mov	r3, r2
 8041c18:	011b      	lsls	r3, r3, #4
 8041c1a:	1a9b      	subs	r3, r3, r2
 8041c1c:	009b      	lsls	r3, r3, #2
 8041c1e:	440b      	add	r3, r1
 8041c20:	334d      	adds	r3, #77	@ 0x4d
 8041c22:	2202      	movs	r2, #2
 8041c24:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8041c26:	78fa      	ldrb	r2, [r7, #3]
 8041c28:	6879      	ldr	r1, [r7, #4]
 8041c2a:	4613      	mov	r3, r2
 8041c2c:	011b      	lsls	r3, r3, #4
 8041c2e:	1a9b      	subs	r3, r3, r2
 8041c30:	009b      	lsls	r3, r3, #2
 8041c32:	440b      	add	r3, r1
 8041c34:	334c      	adds	r3, #76	@ 0x4c
 8041c36:	2205      	movs	r2, #5
 8041c38:	701a      	strb	r2, [r3, #0]
 8041c3a:	e075      	b.n	8041d28 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8041c3c:	78fa      	ldrb	r2, [r7, #3]
 8041c3e:	6879      	ldr	r1, [r7, #4]
 8041c40:	4613      	mov	r3, r2
 8041c42:	011b      	lsls	r3, r3, #4
 8041c44:	1a9b      	subs	r3, r3, r2
 8041c46:	009b      	lsls	r3, r3, #2
 8041c48:	440b      	add	r3, r1
 8041c4a:	334d      	adds	r3, #77	@ 0x4d
 8041c4c:	781b      	ldrb	r3, [r3, #0]
 8041c4e:	2b07      	cmp	r3, #7
 8041c50:	d00a      	beq.n	8041c68 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8041c52:	78fa      	ldrb	r2, [r7, #3]
 8041c54:	6879      	ldr	r1, [r7, #4]
 8041c56:	4613      	mov	r3, r2
 8041c58:	011b      	lsls	r3, r3, #4
 8041c5a:	1a9b      	subs	r3, r3, r2
 8041c5c:	009b      	lsls	r3, r3, #2
 8041c5e:	440b      	add	r3, r1
 8041c60:	334d      	adds	r3, #77	@ 0x4d
 8041c62:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8041c64:	2b09      	cmp	r3, #9
 8041c66:	d170      	bne.n	8041d4a <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8041c68:	78fa      	ldrb	r2, [r7, #3]
 8041c6a:	6879      	ldr	r1, [r7, #4]
 8041c6c:	4613      	mov	r3, r2
 8041c6e:	011b      	lsls	r3, r3, #4
 8041c70:	1a9b      	subs	r3, r3, r2
 8041c72:	009b      	lsls	r3, r3, #2
 8041c74:	440b      	add	r3, r1
 8041c76:	334d      	adds	r3, #77	@ 0x4d
 8041c78:	2202      	movs	r2, #2
 8041c7a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8041c7c:	78fa      	ldrb	r2, [r7, #3]
 8041c7e:	6879      	ldr	r1, [r7, #4]
 8041c80:	4613      	mov	r3, r2
 8041c82:	011b      	lsls	r3, r3, #4
 8041c84:	1a9b      	subs	r3, r3, r2
 8041c86:	009b      	lsls	r3, r3, #2
 8041c88:	440b      	add	r3, r1
 8041c8a:	3344      	adds	r3, #68	@ 0x44
 8041c8c:	681b      	ldr	r3, [r3, #0]
 8041c8e:	1c59      	adds	r1, r3, #1
 8041c90:	6878      	ldr	r0, [r7, #4]
 8041c92:	4613      	mov	r3, r2
 8041c94:	011b      	lsls	r3, r3, #4
 8041c96:	1a9b      	subs	r3, r3, r2
 8041c98:	009b      	lsls	r3, r3, #2
 8041c9a:	4403      	add	r3, r0
 8041c9c:	3344      	adds	r3, #68	@ 0x44
 8041c9e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8041ca0:	78fa      	ldrb	r2, [r7, #3]
 8041ca2:	6879      	ldr	r1, [r7, #4]
 8041ca4:	4613      	mov	r3, r2
 8041ca6:	011b      	lsls	r3, r3, #4
 8041ca8:	1a9b      	subs	r3, r3, r2
 8041caa:	009b      	lsls	r3, r3, #2
 8041cac:	440b      	add	r3, r1
 8041cae:	3344      	adds	r3, #68	@ 0x44
 8041cb0:	681b      	ldr	r3, [r3, #0]
 8041cb2:	2b02      	cmp	r3, #2
 8041cb4:	d914      	bls.n	8041ce0 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8041cb6:	78fa      	ldrb	r2, [r7, #3]
 8041cb8:	6879      	ldr	r1, [r7, #4]
 8041cba:	4613      	mov	r3, r2
 8041cbc:	011b      	lsls	r3, r3, #4
 8041cbe:	1a9b      	subs	r3, r3, r2
 8041cc0:	009b      	lsls	r3, r3, #2
 8041cc2:	440b      	add	r3, r1
 8041cc4:	3344      	adds	r3, #68	@ 0x44
 8041cc6:	2200      	movs	r2, #0
 8041cc8:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8041cca:	78fa      	ldrb	r2, [r7, #3]
 8041ccc:	6879      	ldr	r1, [r7, #4]
 8041cce:	4613      	mov	r3, r2
 8041cd0:	011b      	lsls	r3, r3, #4
 8041cd2:	1a9b      	subs	r3, r3, r2
 8041cd4:	009b      	lsls	r3, r3, #2
 8041cd6:	440b      	add	r3, r1
 8041cd8:	334c      	adds	r3, #76	@ 0x4c
 8041cda:	2204      	movs	r2, #4
 8041cdc:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8041cde:	e022      	b.n	8041d26 <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8041ce0:	78fa      	ldrb	r2, [r7, #3]
 8041ce2:	6879      	ldr	r1, [r7, #4]
 8041ce4:	4613      	mov	r3, r2
 8041ce6:	011b      	lsls	r3, r3, #4
 8041ce8:	1a9b      	subs	r3, r3, r2
 8041cea:	009b      	lsls	r3, r3, #2
 8041cec:	440b      	add	r3, r1
 8041cee:	334c      	adds	r3, #76	@ 0x4c
 8041cf0:	2202      	movs	r2, #2
 8041cf2:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8041cf4:	78fb      	ldrb	r3, [r7, #3]
 8041cf6:	015a      	lsls	r2, r3, #5
 8041cf8:	693b      	ldr	r3, [r7, #16]
 8041cfa:	4413      	add	r3, r2
 8041cfc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8041d00:	681b      	ldr	r3, [r3, #0]
 8041d02:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8041d04:	68fb      	ldr	r3, [r7, #12]
 8041d06:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8041d0a:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8041d0c:	68fb      	ldr	r3, [r7, #12]
 8041d0e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8041d12:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8041d14:	78fb      	ldrb	r3, [r7, #3]
 8041d16:	015a      	lsls	r2, r3, #5
 8041d18:	693b      	ldr	r3, [r7, #16]
 8041d1a:	4413      	add	r3, r2
 8041d1c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8041d20:	461a      	mov	r2, r3
 8041d22:	68fb      	ldr	r3, [r7, #12]
 8041d24:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8041d26:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8041d28:	78fa      	ldrb	r2, [r7, #3]
 8041d2a:	6879      	ldr	r1, [r7, #4]
 8041d2c:	4613      	mov	r3, r2
 8041d2e:	011b      	lsls	r3, r3, #4
 8041d30:	1a9b      	subs	r3, r3, r2
 8041d32:	009b      	lsls	r3, r3, #2
 8041d34:	440b      	add	r3, r1
 8041d36:	334c      	adds	r3, #76	@ 0x4c
 8041d38:	781a      	ldrb	r2, [r3, #0]
 8041d3a:	78fb      	ldrb	r3, [r7, #3]
 8041d3c:	4619      	mov	r1, r3
 8041d3e:	6878      	ldr	r0, [r7, #4]
 8041d40:	f000 fd3e 	bl	80427c0 <HAL_HCD_HC_NotifyURBChange_Callback>
 8041d44:	e002      	b.n	8041d4c <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8041d46:	bf00      	nop
 8041d48:	e000      	b.n	8041d4c <HCD_HC_OUT_IRQHandler+0x978>
      return;
 8041d4a:	bf00      	nop
  }
}
 8041d4c:	3718      	adds	r7, #24
 8041d4e:	46bd      	mov	sp, r7
 8041d50:	bd80      	pop	{r7, pc}

08041d52 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8041d52:	b580      	push	{r7, lr}
 8041d54:	b08a      	sub	sp, #40	@ 0x28
 8041d56:	af00      	add	r7, sp, #0
 8041d58:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8041d5a:	687b      	ldr	r3, [r7, #4]
 8041d5c:	681b      	ldr	r3, [r3, #0]
 8041d5e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8041d60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8041d62:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8041d64:	687b      	ldr	r3, [r7, #4]
 8041d66:	681b      	ldr	r3, [r3, #0]
 8041d68:	6a1b      	ldr	r3, [r3, #32]
 8041d6a:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8041d6c:	69fb      	ldr	r3, [r7, #28]
 8041d6e:	f003 030f 	and.w	r3, r3, #15
 8041d72:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8041d74:	69fb      	ldr	r3, [r7, #28]
 8041d76:	0c5b      	lsrs	r3, r3, #17
 8041d78:	f003 030f 	and.w	r3, r3, #15
 8041d7c:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8041d7e:	69fb      	ldr	r3, [r7, #28]
 8041d80:	091b      	lsrs	r3, r3, #4
 8041d82:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8041d86:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8041d88:	697b      	ldr	r3, [r7, #20]
 8041d8a:	2b02      	cmp	r3, #2
 8041d8c:	d004      	beq.n	8041d98 <HCD_RXQLVL_IRQHandler+0x46>
 8041d8e:	697b      	ldr	r3, [r7, #20]
 8041d90:	2b05      	cmp	r3, #5
 8041d92:	f000 80b6 	beq.w	8041f02 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8041d96:	e0b7      	b.n	8041f08 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8041d98:	693b      	ldr	r3, [r7, #16]
 8041d9a:	2b00      	cmp	r3, #0
 8041d9c:	f000 80b3 	beq.w	8041f06 <HCD_RXQLVL_IRQHandler+0x1b4>
 8041da0:	6879      	ldr	r1, [r7, #4]
 8041da2:	69ba      	ldr	r2, [r7, #24]
 8041da4:	4613      	mov	r3, r2
 8041da6:	011b      	lsls	r3, r3, #4
 8041da8:	1a9b      	subs	r3, r3, r2
 8041daa:	009b      	lsls	r3, r3, #2
 8041dac:	440b      	add	r3, r1
 8041dae:	332c      	adds	r3, #44	@ 0x2c
 8041db0:	681b      	ldr	r3, [r3, #0]
 8041db2:	2b00      	cmp	r3, #0
 8041db4:	f000 80a7 	beq.w	8041f06 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8041db8:	6879      	ldr	r1, [r7, #4]
 8041dba:	69ba      	ldr	r2, [r7, #24]
 8041dbc:	4613      	mov	r3, r2
 8041dbe:	011b      	lsls	r3, r3, #4
 8041dc0:	1a9b      	subs	r3, r3, r2
 8041dc2:	009b      	lsls	r3, r3, #2
 8041dc4:	440b      	add	r3, r1
 8041dc6:	3338      	adds	r3, #56	@ 0x38
 8041dc8:	681a      	ldr	r2, [r3, #0]
 8041dca:	693b      	ldr	r3, [r7, #16]
 8041dcc:	18d1      	adds	r1, r2, r3
 8041dce:	6878      	ldr	r0, [r7, #4]
 8041dd0:	69ba      	ldr	r2, [r7, #24]
 8041dd2:	4613      	mov	r3, r2
 8041dd4:	011b      	lsls	r3, r3, #4
 8041dd6:	1a9b      	subs	r3, r3, r2
 8041dd8:	009b      	lsls	r3, r3, #2
 8041dda:	4403      	add	r3, r0
 8041ddc:	3334      	adds	r3, #52	@ 0x34
 8041dde:	681b      	ldr	r3, [r3, #0]
 8041de0:	4299      	cmp	r1, r3
 8041de2:	f200 8083 	bhi.w	8041eec <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8041de6:	687b      	ldr	r3, [r7, #4]
 8041de8:	6818      	ldr	r0, [r3, #0]
 8041dea:	6879      	ldr	r1, [r7, #4]
 8041dec:	69ba      	ldr	r2, [r7, #24]
 8041dee:	4613      	mov	r3, r2
 8041df0:	011b      	lsls	r3, r3, #4
 8041df2:	1a9b      	subs	r3, r3, r2
 8041df4:	009b      	lsls	r3, r3, #2
 8041df6:	440b      	add	r3, r1
 8041df8:	332c      	adds	r3, #44	@ 0x2c
 8041dfa:	681b      	ldr	r3, [r3, #0]
 8041dfc:	693a      	ldr	r2, [r7, #16]
 8041dfe:	b292      	uxth	r2, r2
 8041e00:	4619      	mov	r1, r3
 8041e02:	f000 f97a 	bl	80420fa <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8041e06:	6879      	ldr	r1, [r7, #4]
 8041e08:	69ba      	ldr	r2, [r7, #24]
 8041e0a:	4613      	mov	r3, r2
 8041e0c:	011b      	lsls	r3, r3, #4
 8041e0e:	1a9b      	subs	r3, r3, r2
 8041e10:	009b      	lsls	r3, r3, #2
 8041e12:	440b      	add	r3, r1
 8041e14:	332c      	adds	r3, #44	@ 0x2c
 8041e16:	681a      	ldr	r2, [r3, #0]
 8041e18:	693b      	ldr	r3, [r7, #16]
 8041e1a:	18d1      	adds	r1, r2, r3
 8041e1c:	6878      	ldr	r0, [r7, #4]
 8041e1e:	69ba      	ldr	r2, [r7, #24]
 8041e20:	4613      	mov	r3, r2
 8041e22:	011b      	lsls	r3, r3, #4
 8041e24:	1a9b      	subs	r3, r3, r2
 8041e26:	009b      	lsls	r3, r3, #2
 8041e28:	4403      	add	r3, r0
 8041e2a:	332c      	adds	r3, #44	@ 0x2c
 8041e2c:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8041e2e:	6879      	ldr	r1, [r7, #4]
 8041e30:	69ba      	ldr	r2, [r7, #24]
 8041e32:	4613      	mov	r3, r2
 8041e34:	011b      	lsls	r3, r3, #4
 8041e36:	1a9b      	subs	r3, r3, r2
 8041e38:	009b      	lsls	r3, r3, #2
 8041e3a:	440b      	add	r3, r1
 8041e3c:	3338      	adds	r3, #56	@ 0x38
 8041e3e:	681a      	ldr	r2, [r3, #0]
 8041e40:	693b      	ldr	r3, [r7, #16]
 8041e42:	18d1      	adds	r1, r2, r3
 8041e44:	6878      	ldr	r0, [r7, #4]
 8041e46:	69ba      	ldr	r2, [r7, #24]
 8041e48:	4613      	mov	r3, r2
 8041e4a:	011b      	lsls	r3, r3, #4
 8041e4c:	1a9b      	subs	r3, r3, r2
 8041e4e:	009b      	lsls	r3, r3, #2
 8041e50:	4403      	add	r3, r0
 8041e52:	3338      	adds	r3, #56	@ 0x38
 8041e54:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8041e56:	69bb      	ldr	r3, [r7, #24]
 8041e58:	015a      	lsls	r2, r3, #5
 8041e5a:	6a3b      	ldr	r3, [r7, #32]
 8041e5c:	4413      	add	r3, r2
 8041e5e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8041e62:	691b      	ldr	r3, [r3, #16]
 8041e64:	0cdb      	lsrs	r3, r3, #19
 8041e66:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8041e6a:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8041e6c:	6879      	ldr	r1, [r7, #4]
 8041e6e:	69ba      	ldr	r2, [r7, #24]
 8041e70:	4613      	mov	r3, r2
 8041e72:	011b      	lsls	r3, r3, #4
 8041e74:	1a9b      	subs	r3, r3, r2
 8041e76:	009b      	lsls	r3, r3, #2
 8041e78:	440b      	add	r3, r1
 8041e7a:	3328      	adds	r3, #40	@ 0x28
 8041e7c:	881b      	ldrh	r3, [r3, #0]
 8041e7e:	461a      	mov	r2, r3
 8041e80:	693b      	ldr	r3, [r7, #16]
 8041e82:	4293      	cmp	r3, r2
 8041e84:	d13f      	bne.n	8041f06 <HCD_RXQLVL_IRQHandler+0x1b4>
 8041e86:	68fb      	ldr	r3, [r7, #12]
 8041e88:	2b00      	cmp	r3, #0
 8041e8a:	d03c      	beq.n	8041f06 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8041e8c:	69bb      	ldr	r3, [r7, #24]
 8041e8e:	015a      	lsls	r2, r3, #5
 8041e90:	6a3b      	ldr	r3, [r7, #32]
 8041e92:	4413      	add	r3, r2
 8041e94:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8041e98:	681b      	ldr	r3, [r3, #0]
 8041e9a:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8041e9c:	68bb      	ldr	r3, [r7, #8]
 8041e9e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8041ea2:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8041ea4:	68bb      	ldr	r3, [r7, #8]
 8041ea6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8041eaa:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8041eac:	69bb      	ldr	r3, [r7, #24]
 8041eae:	015a      	lsls	r2, r3, #5
 8041eb0:	6a3b      	ldr	r3, [r7, #32]
 8041eb2:	4413      	add	r3, r2
 8041eb4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8041eb8:	461a      	mov	r2, r3
 8041eba:	68bb      	ldr	r3, [r7, #8]
 8041ebc:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8041ebe:	6879      	ldr	r1, [r7, #4]
 8041ec0:	69ba      	ldr	r2, [r7, #24]
 8041ec2:	4613      	mov	r3, r2
 8041ec4:	011b      	lsls	r3, r3, #4
 8041ec6:	1a9b      	subs	r3, r3, r2
 8041ec8:	009b      	lsls	r3, r3, #2
 8041eca:	440b      	add	r3, r1
 8041ecc:	333c      	adds	r3, #60	@ 0x3c
 8041ece:	781b      	ldrb	r3, [r3, #0]
 8041ed0:	f083 0301 	eor.w	r3, r3, #1
 8041ed4:	b2d8      	uxtb	r0, r3
 8041ed6:	6879      	ldr	r1, [r7, #4]
 8041ed8:	69ba      	ldr	r2, [r7, #24]
 8041eda:	4613      	mov	r3, r2
 8041edc:	011b      	lsls	r3, r3, #4
 8041ede:	1a9b      	subs	r3, r3, r2
 8041ee0:	009b      	lsls	r3, r3, #2
 8041ee2:	440b      	add	r3, r1
 8041ee4:	333c      	adds	r3, #60	@ 0x3c
 8041ee6:	4602      	mov	r2, r0
 8041ee8:	701a      	strb	r2, [r3, #0]
      break;
 8041eea:	e00c      	b.n	8041f06 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8041eec:	6879      	ldr	r1, [r7, #4]
 8041eee:	69ba      	ldr	r2, [r7, #24]
 8041ef0:	4613      	mov	r3, r2
 8041ef2:	011b      	lsls	r3, r3, #4
 8041ef4:	1a9b      	subs	r3, r3, r2
 8041ef6:	009b      	lsls	r3, r3, #2
 8041ef8:	440b      	add	r3, r1
 8041efa:	334c      	adds	r3, #76	@ 0x4c
 8041efc:	2204      	movs	r2, #4
 8041efe:	701a      	strb	r2, [r3, #0]
      break;
 8041f00:	e001      	b.n	8041f06 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8041f02:	bf00      	nop
 8041f04:	e000      	b.n	8041f08 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8041f06:	bf00      	nop
  }
}
 8041f08:	bf00      	nop
 8041f0a:	3728      	adds	r7, #40	@ 0x28
 8041f0c:	46bd      	mov	sp, r7
 8041f0e:	bd80      	pop	{r7, pc}

08041f10 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8041f10:	b580      	push	{r7, lr}
 8041f12:	b086      	sub	sp, #24
 8041f14:	af00      	add	r7, sp, #0
 8041f16:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8041f18:	687b      	ldr	r3, [r7, #4]
 8041f1a:	681b      	ldr	r3, [r3, #0]
 8041f1c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8041f1e:	697b      	ldr	r3, [r7, #20]
 8041f20:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8041f22:	693b      	ldr	r3, [r7, #16]
 8041f24:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8041f28:	681b      	ldr	r3, [r3, #0]
 8041f2a:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8041f2c:	693b      	ldr	r3, [r7, #16]
 8041f2e:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8041f32:	681b      	ldr	r3, [r3, #0]
 8041f34:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8041f36:	68bb      	ldr	r3, [r7, #8]
 8041f38:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8041f3c:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8041f3e:	68fb      	ldr	r3, [r7, #12]
 8041f40:	f003 0302 	and.w	r3, r3, #2
 8041f44:	2b02      	cmp	r3, #2
 8041f46:	d10b      	bne.n	8041f60 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8041f48:	68fb      	ldr	r3, [r7, #12]
 8041f4a:	f003 0301 	and.w	r3, r3, #1
 8041f4e:	2b01      	cmp	r3, #1
 8041f50:	d102      	bne.n	8041f58 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8041f52:	6878      	ldr	r0, [r7, #4]
 8041f54:	f000 fc18 	bl	8042788 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8041f58:	68bb      	ldr	r3, [r7, #8]
 8041f5a:	f043 0302 	orr.w	r3, r3, #2
 8041f5e:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8041f60:	68fb      	ldr	r3, [r7, #12]
 8041f62:	f003 0308 	and.w	r3, r3, #8
 8041f66:	2b08      	cmp	r3, #8
 8041f68:	d132      	bne.n	8041fd0 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8041f6a:	68bb      	ldr	r3, [r7, #8]
 8041f6c:	f043 0308 	orr.w	r3, r3, #8
 8041f70:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8041f72:	68fb      	ldr	r3, [r7, #12]
 8041f74:	f003 0304 	and.w	r3, r3, #4
 8041f78:	2b04      	cmp	r3, #4
 8041f7a:	d126      	bne.n	8041fca <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8041f7c:	687b      	ldr	r3, [r7, #4]
 8041f7e:	7a5b      	ldrb	r3, [r3, #9]
 8041f80:	2b02      	cmp	r3, #2
 8041f82:	d113      	bne.n	8041fac <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8041f84:	68fb      	ldr	r3, [r7, #12]
 8041f86:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8041f8a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8041f8e:	d106      	bne.n	8041f9e <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8041f90:	687b      	ldr	r3, [r7, #4]
 8041f92:	681b      	ldr	r3, [r3, #0]
 8041f94:	2102      	movs	r1, #2
 8041f96:	4618      	mov	r0, r3
 8041f98:	f000 f949 	bl	804222e <USB_InitFSLSPClkSel>
 8041f9c:	e011      	b.n	8041fc2 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8041f9e:	687b      	ldr	r3, [r7, #4]
 8041fa0:	681b      	ldr	r3, [r3, #0]
 8041fa2:	2101      	movs	r1, #1
 8041fa4:	4618      	mov	r0, r3
 8041fa6:	f000 f942 	bl	804222e <USB_InitFSLSPClkSel>
 8041faa:	e00a      	b.n	8041fc2 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8041fac:	687b      	ldr	r3, [r7, #4]
 8041fae:	79db      	ldrb	r3, [r3, #7]
 8041fb0:	2b01      	cmp	r3, #1
 8041fb2:	d106      	bne.n	8041fc2 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8041fb4:	693b      	ldr	r3, [r7, #16]
 8041fb6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8041fba:	461a      	mov	r2, r3
 8041fbc:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8041fc0:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8041fc2:	6878      	ldr	r0, [r7, #4]
 8041fc4:	f000 fc0a 	bl	80427dc <HAL_HCD_PortEnabled_Callback>
 8041fc8:	e002      	b.n	8041fd0 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8041fca:	6878      	ldr	r0, [r7, #4]
 8041fcc:	f000 fc14 	bl	80427f8 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8041fd0:	68fb      	ldr	r3, [r7, #12]
 8041fd2:	f003 0320 	and.w	r3, r3, #32
 8041fd6:	2b20      	cmp	r3, #32
 8041fd8:	d103      	bne.n	8041fe2 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8041fda:	68bb      	ldr	r3, [r7, #8]
 8041fdc:	f043 0320 	orr.w	r3, r3, #32
 8041fe0:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8041fe2:	693b      	ldr	r3, [r7, #16]
 8041fe4:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8041fe8:	461a      	mov	r2, r3
 8041fea:	68bb      	ldr	r3, [r7, #8]
 8041fec:	6013      	str	r3, [r2, #0]
}
 8041fee:	bf00      	nop
 8041ff0:	3718      	adds	r7, #24
 8041ff2:	46bd      	mov	sp, r7
 8041ff4:	bd80      	pop	{r7, pc}

08041ff6 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8041ff6:	b480      	push	{r7}
 8041ff8:	b083      	sub	sp, #12
 8041ffa:	af00      	add	r7, sp, #0
 8041ffc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8041ffe:	687b      	ldr	r3, [r7, #4]
 8042000:	689b      	ldr	r3, [r3, #8]
 8042002:	f043 0201 	orr.w	r2, r3, #1
 8042006:	687b      	ldr	r3, [r7, #4]
 8042008:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 804200a:	2300      	movs	r3, #0
}
 804200c:	4618      	mov	r0, r3
 804200e:	370c      	adds	r7, #12
 8042010:	46bd      	mov	sp, r7
 8042012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042016:	4770      	bx	lr

08042018 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8042018:	b480      	push	{r7}
 804201a:	b083      	sub	sp, #12
 804201c:	af00      	add	r7, sp, #0
 804201e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8042020:	687b      	ldr	r3, [r7, #4]
 8042022:	689b      	ldr	r3, [r3, #8]
 8042024:	f023 0201 	bic.w	r2, r3, #1
 8042028:	687b      	ldr	r3, [r7, #4]
 804202a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 804202c:	2300      	movs	r3, #0
}
 804202e:	4618      	mov	r0, r3
 8042030:	370c      	adds	r7, #12
 8042032:	46bd      	mov	sp, r7
 8042034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042038:	4770      	bx	lr

0804203a <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 804203a:	b480      	push	{r7}
 804203c:	b085      	sub	sp, #20
 804203e:	af00      	add	r7, sp, #0
 8042040:	6078      	str	r0, [r7, #4]
 8042042:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8042044:	2300      	movs	r3, #0
 8042046:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8042048:	68fb      	ldr	r3, [r7, #12]
 804204a:	3301      	adds	r3, #1
 804204c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 804204e:	68fb      	ldr	r3, [r7, #12]
 8042050:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8042054:	d901      	bls.n	804205a <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8042056:	2303      	movs	r3, #3
 8042058:	e01b      	b.n	8042092 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 804205a:	687b      	ldr	r3, [r7, #4]
 804205c:	691b      	ldr	r3, [r3, #16]
 804205e:	2b00      	cmp	r3, #0
 8042060:	daf2      	bge.n	8042048 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8042062:	2300      	movs	r3, #0
 8042064:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8042066:	683b      	ldr	r3, [r7, #0]
 8042068:	019b      	lsls	r3, r3, #6
 804206a:	f043 0220 	orr.w	r2, r3, #32
 804206e:	687b      	ldr	r3, [r7, #4]
 8042070:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8042072:	68fb      	ldr	r3, [r7, #12]
 8042074:	3301      	adds	r3, #1
 8042076:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8042078:	68fb      	ldr	r3, [r7, #12]
 804207a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 804207e:	d901      	bls.n	8042084 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8042080:	2303      	movs	r3, #3
 8042082:	e006      	b.n	8042092 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8042084:	687b      	ldr	r3, [r7, #4]
 8042086:	691b      	ldr	r3, [r3, #16]
 8042088:	f003 0320 	and.w	r3, r3, #32
 804208c:	2b20      	cmp	r3, #32
 804208e:	d0f0      	beq.n	8042072 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8042090:	2300      	movs	r3, #0
}
 8042092:	4618      	mov	r0, r3
 8042094:	3714      	adds	r7, #20
 8042096:	46bd      	mov	sp, r7
 8042098:	f85d 7b04 	ldr.w	r7, [sp], #4
 804209c:	4770      	bx	lr

0804209e <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 804209e:	b480      	push	{r7}
 80420a0:	b085      	sub	sp, #20
 80420a2:	af00      	add	r7, sp, #0
 80420a4:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80420a6:	2300      	movs	r3, #0
 80420a8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80420aa:	68fb      	ldr	r3, [r7, #12]
 80420ac:	3301      	adds	r3, #1
 80420ae:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80420b0:	68fb      	ldr	r3, [r7, #12]
 80420b2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80420b6:	d901      	bls.n	80420bc <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80420b8:	2303      	movs	r3, #3
 80420ba:	e018      	b.n	80420ee <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80420bc:	687b      	ldr	r3, [r7, #4]
 80420be:	691b      	ldr	r3, [r3, #16]
 80420c0:	2b00      	cmp	r3, #0
 80420c2:	daf2      	bge.n	80420aa <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80420c4:	2300      	movs	r3, #0
 80420c6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80420c8:	687b      	ldr	r3, [r7, #4]
 80420ca:	2210      	movs	r2, #16
 80420cc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80420ce:	68fb      	ldr	r3, [r7, #12]
 80420d0:	3301      	adds	r3, #1
 80420d2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80420d4:	68fb      	ldr	r3, [r7, #12]
 80420d6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80420da:	d901      	bls.n	80420e0 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80420dc:	2303      	movs	r3, #3
 80420de:	e006      	b.n	80420ee <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80420e0:	687b      	ldr	r3, [r7, #4]
 80420e2:	691b      	ldr	r3, [r3, #16]
 80420e4:	f003 0310 	and.w	r3, r3, #16
 80420e8:	2b10      	cmp	r3, #16
 80420ea:	d0f0      	beq.n	80420ce <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80420ec:	2300      	movs	r3, #0
}
 80420ee:	4618      	mov	r0, r3
 80420f0:	3714      	adds	r7, #20
 80420f2:	46bd      	mov	sp, r7
 80420f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80420f8:	4770      	bx	lr

080420fa <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80420fa:	b480      	push	{r7}
 80420fc:	b08b      	sub	sp, #44	@ 0x2c
 80420fe:	af00      	add	r7, sp, #0
 8042100:	60f8      	str	r0, [r7, #12]
 8042102:	60b9      	str	r1, [r7, #8]
 8042104:	4613      	mov	r3, r2
 8042106:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8042108:	68fb      	ldr	r3, [r7, #12]
 804210a:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 804210c:	68bb      	ldr	r3, [r7, #8]
 804210e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8042110:	88fb      	ldrh	r3, [r7, #6]
 8042112:	089b      	lsrs	r3, r3, #2
 8042114:	b29b      	uxth	r3, r3
 8042116:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8042118:	88fb      	ldrh	r3, [r7, #6]
 804211a:	f003 0303 	and.w	r3, r3, #3
 804211e:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8042120:	2300      	movs	r3, #0
 8042122:	623b      	str	r3, [r7, #32]
 8042124:	e014      	b.n	8042150 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8042126:	69bb      	ldr	r3, [r7, #24]
 8042128:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 804212c:	681a      	ldr	r2, [r3, #0]
 804212e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8042130:	601a      	str	r2, [r3, #0]
    pDest++;
 8042132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8042134:	3301      	adds	r3, #1
 8042136:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8042138:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 804213a:	3301      	adds	r3, #1
 804213c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 804213e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8042140:	3301      	adds	r3, #1
 8042142:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8042144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8042146:	3301      	adds	r3, #1
 8042148:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 804214a:	6a3b      	ldr	r3, [r7, #32]
 804214c:	3301      	adds	r3, #1
 804214e:	623b      	str	r3, [r7, #32]
 8042150:	6a3a      	ldr	r2, [r7, #32]
 8042152:	697b      	ldr	r3, [r7, #20]
 8042154:	429a      	cmp	r2, r3
 8042156:	d3e6      	bcc.n	8042126 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8042158:	8bfb      	ldrh	r3, [r7, #30]
 804215a:	2b00      	cmp	r3, #0
 804215c:	d01e      	beq.n	804219c <USB_ReadPacket+0xa2>
  {
    i = 0U;
 804215e:	2300      	movs	r3, #0
 8042160:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8042162:	69bb      	ldr	r3, [r7, #24]
 8042164:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8042168:	461a      	mov	r2, r3
 804216a:	f107 0310 	add.w	r3, r7, #16
 804216e:	6812      	ldr	r2, [r2, #0]
 8042170:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8042172:	693a      	ldr	r2, [r7, #16]
 8042174:	6a3b      	ldr	r3, [r7, #32]
 8042176:	b2db      	uxtb	r3, r3
 8042178:	00db      	lsls	r3, r3, #3
 804217a:	fa22 f303 	lsr.w	r3, r2, r3
 804217e:	b2da      	uxtb	r2, r3
 8042180:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8042182:	701a      	strb	r2, [r3, #0]
      i++;
 8042184:	6a3b      	ldr	r3, [r7, #32]
 8042186:	3301      	adds	r3, #1
 8042188:	623b      	str	r3, [r7, #32]
      pDest++;
 804218a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 804218c:	3301      	adds	r3, #1
 804218e:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8042190:	8bfb      	ldrh	r3, [r7, #30]
 8042192:	3b01      	subs	r3, #1
 8042194:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8042196:	8bfb      	ldrh	r3, [r7, #30]
 8042198:	2b00      	cmp	r3, #0
 804219a:	d1ea      	bne.n	8042172 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 804219c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 804219e:	4618      	mov	r0, r3
 80421a0:	372c      	adds	r7, #44	@ 0x2c
 80421a2:	46bd      	mov	sp, r7
 80421a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80421a8:	4770      	bx	lr

080421aa <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80421aa:	b480      	push	{r7}
 80421ac:	b085      	sub	sp, #20
 80421ae:	af00      	add	r7, sp, #0
 80421b0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80421b2:	687b      	ldr	r3, [r7, #4]
 80421b4:	695b      	ldr	r3, [r3, #20]
 80421b6:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80421b8:	687b      	ldr	r3, [r7, #4]
 80421ba:	699b      	ldr	r3, [r3, #24]
 80421bc:	68fa      	ldr	r2, [r7, #12]
 80421be:	4013      	ands	r3, r2
 80421c0:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80421c2:	68fb      	ldr	r3, [r7, #12]
}
 80421c4:	4618      	mov	r0, r3
 80421c6:	3714      	adds	r7, #20
 80421c8:	46bd      	mov	sp, r7
 80421ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80421ce:	4770      	bx	lr

080421d0 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 80421d0:	b480      	push	{r7}
 80421d2:	b085      	sub	sp, #20
 80421d4:	af00      	add	r7, sp, #0
 80421d6:	6078      	str	r0, [r7, #4]
 80421d8:	460b      	mov	r3, r1
 80421da:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80421dc:	687b      	ldr	r3, [r7, #4]
 80421de:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 80421e0:	78fb      	ldrb	r3, [r7, #3]
 80421e2:	015a      	lsls	r2, r3, #5
 80421e4:	68fb      	ldr	r3, [r7, #12]
 80421e6:	4413      	add	r3, r2
 80421e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80421ec:	689b      	ldr	r3, [r3, #8]
 80421ee:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 80421f0:	78fb      	ldrb	r3, [r7, #3]
 80421f2:	015a      	lsls	r2, r3, #5
 80421f4:	68fb      	ldr	r3, [r7, #12]
 80421f6:	4413      	add	r3, r2
 80421f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80421fc:	68db      	ldr	r3, [r3, #12]
 80421fe:	68ba      	ldr	r2, [r7, #8]
 8042200:	4013      	ands	r3, r2
 8042202:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8042204:	68bb      	ldr	r3, [r7, #8]
}
 8042206:	4618      	mov	r0, r3
 8042208:	3714      	adds	r7, #20
 804220a:	46bd      	mov	sp, r7
 804220c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042210:	4770      	bx	lr

08042212 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8042212:	b480      	push	{r7}
 8042214:	b083      	sub	sp, #12
 8042216:	af00      	add	r7, sp, #0
 8042218:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 804221a:	687b      	ldr	r3, [r7, #4]
 804221c:	695b      	ldr	r3, [r3, #20]
 804221e:	f003 0301 	and.w	r3, r3, #1
}
 8042222:	4618      	mov	r0, r3
 8042224:	370c      	adds	r7, #12
 8042226:	46bd      	mov	sp, r7
 8042228:	f85d 7b04 	ldr.w	r7, [sp], #4
 804222c:	4770      	bx	lr

0804222e <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 804222e:	b480      	push	{r7}
 8042230:	b085      	sub	sp, #20
 8042232:	af00      	add	r7, sp, #0
 8042234:	6078      	str	r0, [r7, #4]
 8042236:	460b      	mov	r3, r1
 8042238:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 804223a:	687b      	ldr	r3, [r7, #4]
 804223c:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 804223e:	68fb      	ldr	r3, [r7, #12]
 8042240:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8042244:	681b      	ldr	r3, [r3, #0]
 8042246:	68fa      	ldr	r2, [r7, #12]
 8042248:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 804224c:	f023 0303 	bic.w	r3, r3, #3
 8042250:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8042252:	68fb      	ldr	r3, [r7, #12]
 8042254:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8042258:	681a      	ldr	r2, [r3, #0]
 804225a:	78fb      	ldrb	r3, [r7, #3]
 804225c:	f003 0303 	and.w	r3, r3, #3
 8042260:	68f9      	ldr	r1, [r7, #12]
 8042262:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8042266:	4313      	orrs	r3, r2
 8042268:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 804226a:	78fb      	ldrb	r3, [r7, #3]
 804226c:	2b01      	cmp	r3, #1
 804226e:	d107      	bne.n	8042280 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8042270:	68fb      	ldr	r3, [r7, #12]
 8042272:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8042276:	461a      	mov	r2, r3
 8042278:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 804227c:	6053      	str	r3, [r2, #4]
 804227e:	e00c      	b.n	804229a <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8042280:	78fb      	ldrb	r3, [r7, #3]
 8042282:	2b02      	cmp	r3, #2
 8042284:	d107      	bne.n	8042296 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8042286:	68fb      	ldr	r3, [r7, #12]
 8042288:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 804228c:	461a      	mov	r2, r3
 804228e:	f241 7370 	movw	r3, #6000	@ 0x1770
 8042292:	6053      	str	r3, [r2, #4]
 8042294:	e001      	b.n	804229a <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8042296:	2301      	movs	r3, #1
 8042298:	e000      	b.n	804229c <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 804229a:	2300      	movs	r3, #0
}
 804229c:	4618      	mov	r0, r3
 804229e:	3714      	adds	r7, #20
 80422a0:	46bd      	mov	sp, r7
 80422a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80422a6:	4770      	bx	lr

080422a8 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80422a8:	b480      	push	{r7}
 80422aa:	b085      	sub	sp, #20
 80422ac:	af00      	add	r7, sp, #0
 80422ae:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80422b0:	687b      	ldr	r3, [r7, #4]
 80422b2:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80422b4:	68fb      	ldr	r3, [r7, #12]
 80422b6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80422ba:	695b      	ldr	r3, [r3, #20]
 80422bc:	b29b      	uxth	r3, r3
}
 80422be:	4618      	mov	r0, r3
 80422c0:	3714      	adds	r7, #20
 80422c2:	46bd      	mov	sp, r7
 80422c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80422c8:	4770      	bx	lr

080422ca <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80422ca:	b480      	push	{r7}
 80422cc:	b089      	sub	sp, #36	@ 0x24
 80422ce:	af00      	add	r7, sp, #0
 80422d0:	6078      	str	r0, [r7, #4]
 80422d2:	460b      	mov	r3, r1
 80422d4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80422d6:	687b      	ldr	r3, [r7, #4]
 80422d8:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80422da:	78fb      	ldrb	r3, [r7, #3]
 80422dc:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80422de:	2300      	movs	r3, #0
 80422e0:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80422e2:	69bb      	ldr	r3, [r7, #24]
 80422e4:	015a      	lsls	r2, r3, #5
 80422e6:	69fb      	ldr	r3, [r7, #28]
 80422e8:	4413      	add	r3, r2
 80422ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80422ee:	681b      	ldr	r3, [r3, #0]
 80422f0:	0c9b      	lsrs	r3, r3, #18
 80422f2:	f003 0303 	and.w	r3, r3, #3
 80422f6:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80422f8:	69bb      	ldr	r3, [r7, #24]
 80422fa:	015a      	lsls	r2, r3, #5
 80422fc:	69fb      	ldr	r3, [r7, #28]
 80422fe:	4413      	add	r3, r2
 8042300:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8042304:	681b      	ldr	r3, [r3, #0]
 8042306:	0fdb      	lsrs	r3, r3, #31
 8042308:	f003 0301 	and.w	r3, r3, #1
 804230c:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 804230e:	69bb      	ldr	r3, [r7, #24]
 8042310:	015a      	lsls	r2, r3, #5
 8042312:	69fb      	ldr	r3, [r7, #28]
 8042314:	4413      	add	r3, r2
 8042316:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 804231a:	685b      	ldr	r3, [r3, #4]
 804231c:	0fdb      	lsrs	r3, r3, #31
 804231e:	f003 0301 	and.w	r3, r3, #1
 8042322:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8042324:	687b      	ldr	r3, [r7, #4]
 8042326:	689b      	ldr	r3, [r3, #8]
 8042328:	f003 0320 	and.w	r3, r3, #32
 804232c:	2b20      	cmp	r3, #32
 804232e:	d10d      	bne.n	804234c <USB_HC_Halt+0x82>
 8042330:	68fb      	ldr	r3, [r7, #12]
 8042332:	2b00      	cmp	r3, #0
 8042334:	d10a      	bne.n	804234c <USB_HC_Halt+0x82>
 8042336:	693b      	ldr	r3, [r7, #16]
 8042338:	2b00      	cmp	r3, #0
 804233a:	d005      	beq.n	8042348 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 804233c:	697b      	ldr	r3, [r7, #20]
 804233e:	2b01      	cmp	r3, #1
 8042340:	d002      	beq.n	8042348 <USB_HC_Halt+0x7e>
 8042342:	697b      	ldr	r3, [r7, #20]
 8042344:	2b03      	cmp	r3, #3
 8042346:	d101      	bne.n	804234c <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8042348:	2300      	movs	r3, #0
 804234a:	e0d8      	b.n	80424fe <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 804234c:	697b      	ldr	r3, [r7, #20]
 804234e:	2b00      	cmp	r3, #0
 8042350:	d002      	beq.n	8042358 <USB_HC_Halt+0x8e>
 8042352:	697b      	ldr	r3, [r7, #20]
 8042354:	2b02      	cmp	r3, #2
 8042356:	d173      	bne.n	8042440 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8042358:	69bb      	ldr	r3, [r7, #24]
 804235a:	015a      	lsls	r2, r3, #5
 804235c:	69fb      	ldr	r3, [r7, #28]
 804235e:	4413      	add	r3, r2
 8042360:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8042364:	681b      	ldr	r3, [r3, #0]
 8042366:	69ba      	ldr	r2, [r7, #24]
 8042368:	0151      	lsls	r1, r2, #5
 804236a:	69fa      	ldr	r2, [r7, #28]
 804236c:	440a      	add	r2, r1
 804236e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8042372:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8042376:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8042378:	687b      	ldr	r3, [r7, #4]
 804237a:	689b      	ldr	r3, [r3, #8]
 804237c:	f003 0320 	and.w	r3, r3, #32
 8042380:	2b00      	cmp	r3, #0
 8042382:	d14a      	bne.n	804241a <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8042384:	687b      	ldr	r3, [r7, #4]
 8042386:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8042388:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 804238c:	2b00      	cmp	r3, #0
 804238e:	d133      	bne.n	80423f8 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8042390:	69bb      	ldr	r3, [r7, #24]
 8042392:	015a      	lsls	r2, r3, #5
 8042394:	69fb      	ldr	r3, [r7, #28]
 8042396:	4413      	add	r3, r2
 8042398:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 804239c:	681b      	ldr	r3, [r3, #0]
 804239e:	69ba      	ldr	r2, [r7, #24]
 80423a0:	0151      	lsls	r1, r2, #5
 80423a2:	69fa      	ldr	r2, [r7, #28]
 80423a4:	440a      	add	r2, r1
 80423a6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80423aa:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80423ae:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80423b0:	69bb      	ldr	r3, [r7, #24]
 80423b2:	015a      	lsls	r2, r3, #5
 80423b4:	69fb      	ldr	r3, [r7, #28]
 80423b6:	4413      	add	r3, r2
 80423b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80423bc:	681b      	ldr	r3, [r3, #0]
 80423be:	69ba      	ldr	r2, [r7, #24]
 80423c0:	0151      	lsls	r1, r2, #5
 80423c2:	69fa      	ldr	r2, [r7, #28]
 80423c4:	440a      	add	r2, r1
 80423c6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80423ca:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80423ce:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 80423d0:	68bb      	ldr	r3, [r7, #8]
 80423d2:	3301      	adds	r3, #1
 80423d4:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 80423d6:	68bb      	ldr	r3, [r7, #8]
 80423d8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80423dc:	d82e      	bhi.n	804243c <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80423de:	69bb      	ldr	r3, [r7, #24]
 80423e0:	015a      	lsls	r2, r3, #5
 80423e2:	69fb      	ldr	r3, [r7, #28]
 80423e4:	4413      	add	r3, r2
 80423e6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80423ea:	681b      	ldr	r3, [r3, #0]
 80423ec:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80423f0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80423f4:	d0ec      	beq.n	80423d0 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80423f6:	e081      	b.n	80424fc <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80423f8:	69bb      	ldr	r3, [r7, #24]
 80423fa:	015a      	lsls	r2, r3, #5
 80423fc:	69fb      	ldr	r3, [r7, #28]
 80423fe:	4413      	add	r3, r2
 8042400:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8042404:	681b      	ldr	r3, [r3, #0]
 8042406:	69ba      	ldr	r2, [r7, #24]
 8042408:	0151      	lsls	r1, r2, #5
 804240a:	69fa      	ldr	r2, [r7, #28]
 804240c:	440a      	add	r2, r1
 804240e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8042412:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8042416:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8042418:	e070      	b.n	80424fc <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 804241a:	69bb      	ldr	r3, [r7, #24]
 804241c:	015a      	lsls	r2, r3, #5
 804241e:	69fb      	ldr	r3, [r7, #28]
 8042420:	4413      	add	r3, r2
 8042422:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8042426:	681b      	ldr	r3, [r3, #0]
 8042428:	69ba      	ldr	r2, [r7, #24]
 804242a:	0151      	lsls	r1, r2, #5
 804242c:	69fa      	ldr	r2, [r7, #28]
 804242e:	440a      	add	r2, r1
 8042430:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8042434:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8042438:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 804243a:	e05f      	b.n	80424fc <USB_HC_Halt+0x232>
            break;
 804243c:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 804243e:	e05d      	b.n	80424fc <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8042440:	69bb      	ldr	r3, [r7, #24]
 8042442:	015a      	lsls	r2, r3, #5
 8042444:	69fb      	ldr	r3, [r7, #28]
 8042446:	4413      	add	r3, r2
 8042448:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 804244c:	681b      	ldr	r3, [r3, #0]
 804244e:	69ba      	ldr	r2, [r7, #24]
 8042450:	0151      	lsls	r1, r2, #5
 8042452:	69fa      	ldr	r2, [r7, #28]
 8042454:	440a      	add	r2, r1
 8042456:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 804245a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 804245e:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8042460:	69fb      	ldr	r3, [r7, #28]
 8042462:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8042466:	691b      	ldr	r3, [r3, #16]
 8042468:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 804246c:	2b00      	cmp	r3, #0
 804246e:	d133      	bne.n	80424d8 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8042470:	69bb      	ldr	r3, [r7, #24]
 8042472:	015a      	lsls	r2, r3, #5
 8042474:	69fb      	ldr	r3, [r7, #28]
 8042476:	4413      	add	r3, r2
 8042478:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 804247c:	681b      	ldr	r3, [r3, #0]
 804247e:	69ba      	ldr	r2, [r7, #24]
 8042480:	0151      	lsls	r1, r2, #5
 8042482:	69fa      	ldr	r2, [r7, #28]
 8042484:	440a      	add	r2, r1
 8042486:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 804248a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 804248e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8042490:	69bb      	ldr	r3, [r7, #24]
 8042492:	015a      	lsls	r2, r3, #5
 8042494:	69fb      	ldr	r3, [r7, #28]
 8042496:	4413      	add	r3, r2
 8042498:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 804249c:	681b      	ldr	r3, [r3, #0]
 804249e:	69ba      	ldr	r2, [r7, #24]
 80424a0:	0151      	lsls	r1, r2, #5
 80424a2:	69fa      	ldr	r2, [r7, #28]
 80424a4:	440a      	add	r2, r1
 80424a6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80424aa:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80424ae:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 80424b0:	68bb      	ldr	r3, [r7, #8]
 80424b2:	3301      	adds	r3, #1
 80424b4:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 80424b6:	68bb      	ldr	r3, [r7, #8]
 80424b8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80424bc:	d81d      	bhi.n	80424fa <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80424be:	69bb      	ldr	r3, [r7, #24]
 80424c0:	015a      	lsls	r2, r3, #5
 80424c2:	69fb      	ldr	r3, [r7, #28]
 80424c4:	4413      	add	r3, r2
 80424c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80424ca:	681b      	ldr	r3, [r3, #0]
 80424cc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80424d0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80424d4:	d0ec      	beq.n	80424b0 <USB_HC_Halt+0x1e6>
 80424d6:	e011      	b.n	80424fc <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80424d8:	69bb      	ldr	r3, [r7, #24]
 80424da:	015a      	lsls	r2, r3, #5
 80424dc:	69fb      	ldr	r3, [r7, #28]
 80424de:	4413      	add	r3, r2
 80424e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80424e4:	681b      	ldr	r3, [r3, #0]
 80424e6:	69ba      	ldr	r2, [r7, #24]
 80424e8:	0151      	lsls	r1, r2, #5
 80424ea:	69fa      	ldr	r2, [r7, #28]
 80424ec:	440a      	add	r2, r1
 80424ee:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80424f2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80424f6:	6013      	str	r3, [r2, #0]
 80424f8:	e000      	b.n	80424fc <USB_HC_Halt+0x232>
          break;
 80424fa:	bf00      	nop
    }
  }

  return HAL_OK;
 80424fc:	2300      	movs	r3, #0
}
 80424fe:	4618      	mov	r0, r3
 8042500:	3724      	adds	r7, #36	@ 0x24
 8042502:	46bd      	mov	sp, r7
 8042504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042508:	4770      	bx	lr

0804250a <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 804250a:	b580      	push	{r7, lr}
 804250c:	b088      	sub	sp, #32
 804250e:	af00      	add	r7, sp, #0
 8042510:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8042512:	2300      	movs	r3, #0
 8042514:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8042516:	687b      	ldr	r3, [r7, #4]
 8042518:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 804251a:	2300      	movs	r3, #0
 804251c:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 804251e:	6878      	ldr	r0, [r7, #4]
 8042520:	f7ff fd7a 	bl	8042018 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8042524:	2110      	movs	r1, #16
 8042526:	6878      	ldr	r0, [r7, #4]
 8042528:	f7ff fd87 	bl	804203a <USB_FlushTxFifo>
 804252c:	4603      	mov	r3, r0
 804252e:	2b00      	cmp	r3, #0
 8042530:	d001      	beq.n	8042536 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8042532:	2301      	movs	r3, #1
 8042534:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8042536:	6878      	ldr	r0, [r7, #4]
 8042538:	f7ff fdb1 	bl	804209e <USB_FlushRxFifo>
 804253c:	4603      	mov	r3, r0
 804253e:	2b00      	cmp	r3, #0
 8042540:	d001      	beq.n	8042546 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8042542:	2301      	movs	r3, #1
 8042544:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8042546:	2300      	movs	r3, #0
 8042548:	61bb      	str	r3, [r7, #24]
 804254a:	e01f      	b.n	804258c <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 804254c:	69bb      	ldr	r3, [r7, #24]
 804254e:	015a      	lsls	r2, r3, #5
 8042550:	697b      	ldr	r3, [r7, #20]
 8042552:	4413      	add	r3, r2
 8042554:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8042558:	681b      	ldr	r3, [r3, #0]
 804255a:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 804255c:	693b      	ldr	r3, [r7, #16]
 804255e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8042562:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8042564:	693b      	ldr	r3, [r7, #16]
 8042566:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 804256a:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 804256c:	693b      	ldr	r3, [r7, #16]
 804256e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8042572:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8042574:	69bb      	ldr	r3, [r7, #24]
 8042576:	015a      	lsls	r2, r3, #5
 8042578:	697b      	ldr	r3, [r7, #20]
 804257a:	4413      	add	r3, r2
 804257c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8042580:	461a      	mov	r2, r3
 8042582:	693b      	ldr	r3, [r7, #16]
 8042584:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8042586:	69bb      	ldr	r3, [r7, #24]
 8042588:	3301      	adds	r3, #1
 804258a:	61bb      	str	r3, [r7, #24]
 804258c:	69bb      	ldr	r3, [r7, #24]
 804258e:	2b0f      	cmp	r3, #15
 8042590:	d9dc      	bls.n	804254c <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8042592:	2300      	movs	r3, #0
 8042594:	61bb      	str	r3, [r7, #24]
 8042596:	e034      	b.n	8042602 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8042598:	69bb      	ldr	r3, [r7, #24]
 804259a:	015a      	lsls	r2, r3, #5
 804259c:	697b      	ldr	r3, [r7, #20]
 804259e:	4413      	add	r3, r2
 80425a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80425a4:	681b      	ldr	r3, [r3, #0]
 80425a6:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 80425a8:	693b      	ldr	r3, [r7, #16]
 80425aa:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80425ae:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 80425b0:	693b      	ldr	r3, [r7, #16]
 80425b2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80425b6:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80425b8:	693b      	ldr	r3, [r7, #16]
 80425ba:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80425be:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80425c0:	69bb      	ldr	r3, [r7, #24]
 80425c2:	015a      	lsls	r2, r3, #5
 80425c4:	697b      	ldr	r3, [r7, #20]
 80425c6:	4413      	add	r3, r2
 80425c8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80425cc:	461a      	mov	r2, r3
 80425ce:	693b      	ldr	r3, [r7, #16]
 80425d0:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 80425d2:	68fb      	ldr	r3, [r7, #12]
 80425d4:	3301      	adds	r3, #1
 80425d6:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 80425d8:	68fb      	ldr	r3, [r7, #12]
 80425da:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80425de:	d80c      	bhi.n	80425fa <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80425e0:	69bb      	ldr	r3, [r7, #24]
 80425e2:	015a      	lsls	r2, r3, #5
 80425e4:	697b      	ldr	r3, [r7, #20]
 80425e6:	4413      	add	r3, r2
 80425e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80425ec:	681b      	ldr	r3, [r3, #0]
 80425ee:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80425f2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80425f6:	d0ec      	beq.n	80425d2 <USB_StopHost+0xc8>
 80425f8:	e000      	b.n	80425fc <USB_StopHost+0xf2>
        break;
 80425fa:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80425fc:	69bb      	ldr	r3, [r7, #24]
 80425fe:	3301      	adds	r3, #1
 8042600:	61bb      	str	r3, [r7, #24]
 8042602:	69bb      	ldr	r3, [r7, #24]
 8042604:	2b0f      	cmp	r3, #15
 8042606:	d9c7      	bls.n	8042598 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8042608:	697b      	ldr	r3, [r7, #20]
 804260a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 804260e:	461a      	mov	r2, r3
 8042610:	f04f 33ff 	mov.w	r3, #4294967295
 8042614:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8042616:	687b      	ldr	r3, [r7, #4]
 8042618:	f04f 32ff 	mov.w	r2, #4294967295
 804261c:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 804261e:	6878      	ldr	r0, [r7, #4]
 8042620:	f7ff fce9 	bl	8041ff6 <USB_EnableGlobalInt>

  return ret;
 8042624:	7ffb      	ldrb	r3, [r7, #31]
}
 8042626:	4618      	mov	r0, r3
 8042628:	3720      	adds	r7, #32
 804262a:	46bd      	mov	sp, r7
 804262c:	bd80      	pop	{r7, pc}

0804262e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 804262e:	b580      	push	{r7, lr}
 8042630:	b082      	sub	sp, #8
 8042632:	af00      	add	r7, sp, #0
 8042634:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8042636:	687b      	ldr	r3, [r7, #4]
 8042638:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 804263c:	1c5a      	adds	r2, r3, #1
 804263e:	687b      	ldr	r3, [r7, #4]
 8042640:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 8042644:	6878      	ldr	r0, [r7, #4]
 8042646:	f000 f804 	bl	8042652 <USBH_HandleSof>
}
 804264a:	bf00      	nop
 804264c:	3708      	adds	r7, #8
 804264e:	46bd      	mov	sp, r7
 8042650:	bd80      	pop	{r7, pc}

08042652 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8042652:	b580      	push	{r7, lr}
 8042654:	b082      	sub	sp, #8
 8042656:	af00      	add	r7, sp, #0
 8042658:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 804265a:	687b      	ldr	r3, [r7, #4]
 804265c:	781b      	ldrb	r3, [r3, #0]
 804265e:	b2db      	uxtb	r3, r3
 8042660:	2b0b      	cmp	r3, #11
 8042662:	d10a      	bne.n	804267a <USBH_HandleSof+0x28>
 8042664:	687b      	ldr	r3, [r7, #4]
 8042666:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 804266a:	2b00      	cmp	r3, #0
 804266c:	d005      	beq.n	804267a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 804266e:	687b      	ldr	r3, [r7, #4]
 8042670:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8042674:	699b      	ldr	r3, [r3, #24]
 8042676:	6878      	ldr	r0, [r7, #4]
 8042678:	4798      	blx	r3
  }
}
 804267a:	bf00      	nop
 804267c:	3708      	adds	r7, #8
 804267e:	46bd      	mov	sp, r7
 8042680:	bd80      	pop	{r7, pc}

08042682 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8042682:	b480      	push	{r7}
 8042684:	b083      	sub	sp, #12
 8042686:	af00      	add	r7, sp, #0
 8042688:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 804268a:	687b      	ldr	r3, [r7, #4]
 804268c:	2201      	movs	r2, #1
 804268e:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8042692:	bf00      	nop
}
 8042694:	370c      	adds	r7, #12
 8042696:	46bd      	mov	sp, r7
 8042698:	f85d 7b04 	ldr.w	r7, [sp], #4
 804269c:	4770      	bx	lr

0804269e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 804269e:	b480      	push	{r7}
 80426a0:	b083      	sub	sp, #12
 80426a2:	af00      	add	r7, sp, #0
 80426a4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80426a6:	687b      	ldr	r3, [r7, #4]
 80426a8:	2200      	movs	r2, #0
 80426aa:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 80426ae:	bf00      	nop
}
 80426b0:	370c      	adds	r7, #12
 80426b2:	46bd      	mov	sp, r7
 80426b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80426b8:	4770      	bx	lr

080426ba <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80426ba:	b480      	push	{r7}
 80426bc:	b083      	sub	sp, #12
 80426be:	af00      	add	r7, sp, #0
 80426c0:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80426c2:	687b      	ldr	r3, [r7, #4]
 80426c4:	2201      	movs	r2, #1
 80426c6:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 80426ca:	687b      	ldr	r3, [r7, #4]
 80426cc:	2200      	movs	r2, #0
 80426ce:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 80426d2:	687b      	ldr	r3, [r7, #4]
 80426d4:	2200      	movs	r2, #0
 80426d6:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80426da:	2300      	movs	r3, #0
}
 80426dc:	4618      	mov	r0, r3
 80426de:	370c      	adds	r7, #12
 80426e0:	46bd      	mov	sp, r7
 80426e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80426e6:	4770      	bx	lr

080426e8 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80426e8:	b580      	push	{r7, lr}
 80426ea:	b082      	sub	sp, #8
 80426ec:	af00      	add	r7, sp, #0
 80426ee:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80426f0:	687b      	ldr	r3, [r7, #4]
 80426f2:	2201      	movs	r2, #1
 80426f4:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 80426f8:	687b      	ldr	r3, [r7, #4]
 80426fa:	2200      	movs	r2, #0
 80426fc:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 8042700:	687b      	ldr	r3, [r7, #4]
 8042702:	2200      	movs	r2, #0
 8042704:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8042708:	6878      	ldr	r0, [r7, #4]
 804270a:	f000 f883 	bl	8042814 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 804270e:	687b      	ldr	r3, [r7, #4]
 8042710:	791b      	ldrb	r3, [r3, #4]
 8042712:	4619      	mov	r1, r3
 8042714:	6878      	ldr	r0, [r7, #4]
 8042716:	f000 f80b 	bl	8042730 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 804271a:	687b      	ldr	r3, [r7, #4]
 804271c:	795b      	ldrb	r3, [r3, #5]
 804271e:	4619      	mov	r1, r3
 8042720:	6878      	ldr	r0, [r7, #4]
 8042722:	f000 f805 	bl	8042730 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8042726:	2300      	movs	r3, #0
}
 8042728:	4618      	mov	r0, r3
 804272a:	3708      	adds	r7, #8
 804272c:	46bd      	mov	sp, r7
 804272e:	bd80      	pop	{r7, pc}

08042730 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8042730:	b480      	push	{r7}
 8042732:	b083      	sub	sp, #12
 8042734:	af00      	add	r7, sp, #0
 8042736:	6078      	str	r0, [r7, #4]
 8042738:	460b      	mov	r3, r1
 804273a:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 804273c:	78fb      	ldrb	r3, [r7, #3]
 804273e:	2b0f      	cmp	r3, #15
 8042740:	d80d      	bhi.n	804275e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8042742:	78fb      	ldrb	r3, [r7, #3]
 8042744:	687a      	ldr	r2, [r7, #4]
 8042746:	33e0      	adds	r3, #224	@ 0xe0
 8042748:	009b      	lsls	r3, r3, #2
 804274a:	4413      	add	r3, r2
 804274c:	685a      	ldr	r2, [r3, #4]
 804274e:	78fb      	ldrb	r3, [r7, #3]
 8042750:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8042754:	6879      	ldr	r1, [r7, #4]
 8042756:	33e0      	adds	r3, #224	@ 0xe0
 8042758:	009b      	lsls	r3, r3, #2
 804275a:	440b      	add	r3, r1
 804275c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 804275e:	2300      	movs	r3, #0
}
 8042760:	4618      	mov	r0, r3
 8042762:	370c      	adds	r7, #12
 8042764:	46bd      	mov	sp, r7
 8042766:	f85d 7b04 	ldr.w	r7, [sp], #4
 804276a:	4770      	bx	lr

0804276c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 804276c:	b580      	push	{r7, lr}
 804276e:	b082      	sub	sp, #8
 8042770:	af00      	add	r7, sp, #0
 8042772:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8042774:	687b      	ldr	r3, [r7, #4]
 8042776:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 804277a:	4618      	mov	r0, r3
 804277c:	f7ff ff57 	bl	804262e <USBH_LL_IncTimer>
}
 8042780:	bf00      	nop
 8042782:	3708      	adds	r7, #8
 8042784:	46bd      	mov	sp, r7
 8042786:	bd80      	pop	{r7, pc}

08042788 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8042788:	b580      	push	{r7, lr}
 804278a:	b082      	sub	sp, #8
 804278c:	af00      	add	r7, sp, #0
 804278e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8042790:	687b      	ldr	r3, [r7, #4]
 8042792:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8042796:	4618      	mov	r0, r3
 8042798:	f7ff ff8f 	bl	80426ba <USBH_LL_Connect>
}
 804279c:	bf00      	nop
 804279e:	3708      	adds	r7, #8
 80427a0:	46bd      	mov	sp, r7
 80427a2:	bd80      	pop	{r7, pc}

080427a4 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80427a4:	b580      	push	{r7, lr}
 80427a6:	b082      	sub	sp, #8
 80427a8:	af00      	add	r7, sp, #0
 80427aa:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80427ac:	687b      	ldr	r3, [r7, #4]
 80427ae:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80427b2:	4618      	mov	r0, r3
 80427b4:	f7ff ff98 	bl	80426e8 <USBH_LL_Disconnect>
}
 80427b8:	bf00      	nop
 80427ba:	3708      	adds	r7, #8
 80427bc:	46bd      	mov	sp, r7
 80427be:	bd80      	pop	{r7, pc}

080427c0 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80427c0:	b480      	push	{r7}
 80427c2:	b083      	sub	sp, #12
 80427c4:	af00      	add	r7, sp, #0
 80427c6:	6078      	str	r0, [r7, #4]
 80427c8:	460b      	mov	r3, r1
 80427ca:	70fb      	strb	r3, [r7, #3]
 80427cc:	4613      	mov	r3, r2
 80427ce:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 80427d0:	bf00      	nop
 80427d2:	370c      	adds	r7, #12
 80427d4:	46bd      	mov	sp, r7
 80427d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80427da:	4770      	bx	lr

080427dc <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80427dc:	b580      	push	{r7, lr}
 80427de:	b082      	sub	sp, #8
 80427e0:	af00      	add	r7, sp, #0
 80427e2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80427e4:	687b      	ldr	r3, [r7, #4]
 80427e6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80427ea:	4618      	mov	r0, r3
 80427ec:	f7ff ff49 	bl	8042682 <USBH_LL_PortEnabled>
}
 80427f0:	bf00      	nop
 80427f2:	3708      	adds	r7, #8
 80427f4:	46bd      	mov	sp, r7
 80427f6:	bd80      	pop	{r7, pc}

080427f8 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80427f8:	b580      	push	{r7, lr}
 80427fa:	b082      	sub	sp, #8
 80427fc:	af00      	add	r7, sp, #0
 80427fe:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8042800:	687b      	ldr	r3, [r7, #4]
 8042802:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8042806:	4618      	mov	r0, r3
 8042808:	f7ff ff49 	bl	804269e <USBH_LL_PortDisabled>
}
 804280c:	bf00      	nop
 804280e:	3708      	adds	r7, #8
 8042810:	46bd      	mov	sp, r7
 8042812:	bd80      	pop	{r7, pc}

08042814 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8042814:	b580      	push	{r7, lr}
 8042816:	b084      	sub	sp, #16
 8042818:	af00      	add	r7, sp, #0
 804281a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 804281c:	2300      	movs	r3, #0
 804281e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8042820:	2300      	movs	r3, #0
 8042822:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8042824:	687b      	ldr	r3, [r7, #4]
 8042826:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 804282a:	4618      	mov	r0, r3
 804282c:	f7fd ff4c 	bl	80406c8 <HAL_HCD_Stop>
 8042830:	4603      	mov	r3, r0
 8042832:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8042834:	7bfb      	ldrb	r3, [r7, #15]
 8042836:	4618      	mov	r0, r3
 8042838:	f000 f808 	bl	804284c <USBH_Get_USB_Status>
 804283c:	4603      	mov	r3, r0
 804283e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8042840:	7bbb      	ldrb	r3, [r7, #14]
}
 8042842:	4618      	mov	r0, r3
 8042844:	3710      	adds	r7, #16
 8042846:	46bd      	mov	sp, r7
 8042848:	bd80      	pop	{r7, pc}
	...

0804284c <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 804284c:	b480      	push	{r7}
 804284e:	b085      	sub	sp, #20
 8042850:	af00      	add	r7, sp, #0
 8042852:	4603      	mov	r3, r0
 8042854:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8042856:	2300      	movs	r3, #0
 8042858:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 804285a:	79fb      	ldrb	r3, [r7, #7]
 804285c:	2b03      	cmp	r3, #3
 804285e:	d817      	bhi.n	8042890 <USBH_Get_USB_Status+0x44>
 8042860:	a201      	add	r2, pc, #4	@ (adr r2, 8042868 <USBH_Get_USB_Status+0x1c>)
 8042862:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8042866:	bf00      	nop
 8042868:	08042879 	.word	0x08042879
 804286c:	0804287f 	.word	0x0804287f
 8042870:	08042885 	.word	0x08042885
 8042874:	0804288b 	.word	0x0804288b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8042878:	2300      	movs	r3, #0
 804287a:	73fb      	strb	r3, [r7, #15]
    break;
 804287c:	e00b      	b.n	8042896 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 804287e:	2302      	movs	r3, #2
 8042880:	73fb      	strb	r3, [r7, #15]
    break;
 8042882:	e008      	b.n	8042896 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8042884:	2301      	movs	r3, #1
 8042886:	73fb      	strb	r3, [r7, #15]
    break;
 8042888:	e005      	b.n	8042896 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 804288a:	2302      	movs	r3, #2
 804288c:	73fb      	strb	r3, [r7, #15]
    break;
 804288e:	e002      	b.n	8042896 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8042890:	2302      	movs	r3, #2
 8042892:	73fb      	strb	r3, [r7, #15]
    break;
 8042894:	bf00      	nop
  }
  return usb_status;
 8042896:	7bfb      	ldrb	r3, [r7, #15]
}
 8042898:	4618      	mov	r0, r3
 804289a:	3714      	adds	r7, #20
 804289c:	46bd      	mov	sp, r7
 804289e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80428a2:	4770      	bx	lr

080428a4 <__libc_init_array>:
 80428a4:	b570      	push	{r4, r5, r6, lr}
 80428a6:	4d0d      	ldr	r5, [pc, #52]	@ (80428dc <__libc_init_array+0x38>)
 80428a8:	4c0d      	ldr	r4, [pc, #52]	@ (80428e0 <__libc_init_array+0x3c>)
 80428aa:	1b64      	subs	r4, r4, r5
 80428ac:	10a4      	asrs	r4, r4, #2
 80428ae:	2600      	movs	r6, #0
 80428b0:	42a6      	cmp	r6, r4
 80428b2:	d109      	bne.n	80428c8 <__libc_init_array+0x24>
 80428b4:	4d0b      	ldr	r5, [pc, #44]	@ (80428e4 <__libc_init_array+0x40>)
 80428b6:	4c0c      	ldr	r4, [pc, #48]	@ (80428e8 <__libc_init_array+0x44>)
 80428b8:	f000 f818 	bl	80428ec <_init>
 80428bc:	1b64      	subs	r4, r4, r5
 80428be:	10a4      	asrs	r4, r4, #2
 80428c0:	2600      	movs	r6, #0
 80428c2:	42a6      	cmp	r6, r4
 80428c4:	d105      	bne.n	80428d2 <__libc_init_array+0x2e>
 80428c6:	bd70      	pop	{r4, r5, r6, pc}
 80428c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80428cc:	4798      	blx	r3
 80428ce:	3601      	adds	r6, #1
 80428d0:	e7ee      	b.n	80428b0 <__libc_init_array+0xc>
 80428d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80428d6:	4798      	blx	r3
 80428d8:	3601      	adds	r6, #1
 80428da:	e7f2      	b.n	80428c2 <__libc_init_array+0x1e>
 80428dc:	08042904 	.word	0x08042904
 80428e0:	08042904 	.word	0x08042904
 80428e4:	08042904 	.word	0x08042904
 80428e8:	08042908 	.word	0x08042908

080428ec <_init>:
 80428ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80428ee:	bf00      	nop
 80428f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80428f2:	bc08      	pop	{r3}
 80428f4:	469e      	mov	lr, r3
 80428f6:	4770      	bx	lr

080428f8 <_fini>:
 80428f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80428fa:	bf00      	nop
 80428fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80428fe:	bc08      	pop	{r3}
 8042900:	469e      	mov	lr, r3
 8042902:	4770      	bx	lr
