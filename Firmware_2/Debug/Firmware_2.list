
Firmware_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08040000  08040000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c68  08040198  08040198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08042e00  08042e00  00003e00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08042e10  08042e10  00004018  2**0
                  CONTENTS
  4 .ARM          00000008  08042e10  08042e10  00003e10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08042e18  08042e18  00004018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08042e18  08042e18  00003e18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08042e1c  08042e1c  00003e1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000018  20000000  08042e20  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000404  20000018  08042e38  00004018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000041c  08042e38  0000441c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00004018  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009856  00000000  00000000  00004048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b4b  00000000  00000000  0000d89e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000810  00000000  00000000  0000f3f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005f8  00000000  00000000  0000fc00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000165b0  00000000  00000000  000101f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009a3d  00000000  00000000  000267a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008bbc7  00000000  00000000  000301e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bbdac  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000209c  00000000  00000000  000bbdf0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  000bde8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08040198 <__do_global_dtors_aux>:
 8040198:	b510      	push	{r4, lr}
 804019a:	4c05      	ldr	r4, [pc, #20]	@ (80401b0 <__do_global_dtors_aux+0x18>)
 804019c:	7823      	ldrb	r3, [r4, #0]
 804019e:	b933      	cbnz	r3, 80401ae <__do_global_dtors_aux+0x16>
 80401a0:	4b04      	ldr	r3, [pc, #16]	@ (80401b4 <__do_global_dtors_aux+0x1c>)
 80401a2:	b113      	cbz	r3, 80401aa <__do_global_dtors_aux+0x12>
 80401a4:	4804      	ldr	r0, [pc, #16]	@ (80401b8 <__do_global_dtors_aux+0x20>)
 80401a6:	f3af 8000 	nop.w
 80401aa:	2301      	movs	r3, #1
 80401ac:	7023      	strb	r3, [r4, #0]
 80401ae:	bd10      	pop	{r4, pc}
 80401b0:	20000018 	.word	0x20000018
 80401b4:	00000000 	.word	0x00000000
 80401b8:	08042de8 	.word	0x08042de8

080401bc <frame_dummy>:
 80401bc:	b508      	push	{r3, lr}
 80401be:	4b03      	ldr	r3, [pc, #12]	@ (80401cc <frame_dummy+0x10>)
 80401c0:	b11b      	cbz	r3, 80401ca <frame_dummy+0xe>
 80401c2:	4903      	ldr	r1, [pc, #12]	@ (80401d0 <frame_dummy+0x14>)
 80401c4:	4803      	ldr	r0, [pc, #12]	@ (80401d4 <frame_dummy+0x18>)
 80401c6:	f3af 8000 	nop.w
 80401ca:	bd08      	pop	{r3, pc}
 80401cc:	00000000 	.word	0x00000000
 80401d0:	2000001c 	.word	0x2000001c
 80401d4:	08042de8 	.word	0x08042de8

080401d8 <strlen>:
 80401d8:	4603      	mov	r3, r0
 80401da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80401de:	2a00      	cmp	r2, #0
 80401e0:	d1fb      	bne.n	80401da <strlen+0x2>
 80401e2:	1a18      	subs	r0, r3, r0
 80401e4:	3801      	subs	r0, #1
 80401e6:	4770      	bx	lr

080401e8 <Button_Init>:
#include "main.h"
#include <string.h>

#define GPIOA_BASE_ADDR 0x40020000

void Button_Init() {
 80401e8:	b480      	push	{r7}
 80401ea:	b083      	sub	sp, #12
 80401ec:	af00      	add	r7, sp, #0

    // 1. Enable GPIO_A clock
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80401ee:	2300      	movs	r3, #0
 80401f0:	603b      	str	r3, [r7, #0]
 80401f2:	4b0d      	ldr	r3, [pc, #52]	@ (8040228 <Button_Init+0x40>)
 80401f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80401f6:	4a0c      	ldr	r2, [pc, #48]	@ (8040228 <Button_Init+0x40>)
 80401f8:	f043 0301 	orr.w	r3, r3, #1
 80401fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80401fe:	4b0a      	ldr	r3, [pc, #40]	@ (8040228 <Button_Init+0x40>)
 8040200:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8040202:	f003 0301 	and.w	r3, r3, #1
 8040206:	603b      	str	r3, [r7, #0]
 8040208:	683b      	ldr	r3, [r7, #0]

    // 2. Set PA0 as input
    uint32_t* GPIOA_MODER = (uint32_t*)(GPIOA_BASE_ADDR + 0x00);
 804020a:	4b08      	ldr	r3, [pc, #32]	@ (804022c <Button_Init+0x44>)
 804020c:	607b      	str	r3, [r7, #4]
    *GPIOA_MODER &= ~(0b11 << 0);
 804020e:	687b      	ldr	r3, [r7, #4]
 8040210:	681b      	ldr	r3, [r3, #0]
 8040212:	f023 0203 	bic.w	r2, r3, #3
 8040216:	687b      	ldr	r3, [r7, #4]
 8040218:	601a      	str	r2, [r3, #0]
}
 804021a:	bf00      	nop
 804021c:	370c      	adds	r7, #12
 804021e:	46bd      	mov	sp, r7
 8040220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040224:	4770      	bx	lr
 8040226:	bf00      	nop
 8040228:	40023800 	.word	0x40023800
 804022c:	40020000 	.word	0x40020000

08040230 <Led_Init>:

#define GPIOD_BASE_ADDR 0x40020C00 // Get addr from  Data sheet <- Memory mapping

void Led_Init() {
 8040230:	b480      	push	{r7}
 8040232:	b083      	sub	sp, #12
 8040234:	af00      	add	r7, sp, #0
    // 1. Enable GPIO_D clock
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8040236:	2300      	movs	r3, #0
 8040238:	603b      	str	r3, [r7, #0]
 804023a:	4b10      	ldr	r3, [pc, #64]	@ (804027c <Led_Init+0x4c>)
 804023c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 804023e:	4a0f      	ldr	r2, [pc, #60]	@ (804027c <Led_Init+0x4c>)
 8040240:	f043 0308 	orr.w	r3, r3, #8
 8040244:	6313      	str	r3, [r2, #48]	@ 0x30
 8040246:	4b0d      	ldr	r3, [pc, #52]	@ (804027c <Led_Init+0x4c>)
 8040248:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 804024a:	f003 0308 	and.w	r3, r3, #8
 804024e:	603b      	str	r3, [r7, #0]
 8040250:	683b      	ldr	r3, [r7, #0]

    // 2. Set PD12, PD13, PD14 and PD15 as outputs - Get PD numbers from schematic
    uint32_t* GPIOD_MODER = (uint32_t*)(GPIOD_BASE_ADDR + 0x00); 
 8040252:	4b0b      	ldr	r3, [pc, #44]	@ (8040280 <Led_Init+0x50>)
 8040254:	607b      	str	r3, [r7, #4]
    *GPIOD_MODER &= (0b11111111 << 24); // Clear
 8040256:	687b      	ldr	r3, [r7, #4]
 8040258:	681b      	ldr	r3, [r3, #0]
 804025a:	f003 427f 	and.w	r2, r3, #4278190080	@ 0xff000000
 804025e:	687b      	ldr	r3, [r7, #4]
 8040260:	601a      	str	r2, [r3, #0]
    *GPIOD_MODER |= (0b01010101 << 24); // Set
 8040262:	687b      	ldr	r3, [r7, #4]
 8040264:	681b      	ldr	r3, [r3, #0]
 8040266:	f043 42aa 	orr.w	r2, r3, #1426063360	@ 0x55000000
 804026a:	687b      	ldr	r3, [r7, #4]
 804026c:	601a      	str	r2, [r3, #0]
}
 804026e:	bf00      	nop
 8040270:	370c      	adds	r7, #12
 8040272:	46bd      	mov	sp, r7
 8040274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040278:	4770      	bx	lr
 804027a:	bf00      	nop
 804027c:	40023800 	.word	0x40023800
 8040280:	40020c00 	.word	0x40020c00

08040284 <Led_Ctrl>:
int RED_LED     = 14;
int BLUE_LED    = 15;
int ON          = 1;
int OFF         = 0;

void Led_Ctrl(int LED, int OnOff) {
 8040284:	b480      	push	{r7}
 8040286:	b085      	sub	sp, #20
 8040288:	af00      	add	r7, sp, #0
 804028a:	6078      	str	r0, [r7, #4]
 804028c:	6039      	str	r1, [r7, #0]
    uint32_t* GPIOD_ODR = (uint32_t*)(GPIOD_BASE_ADDR + 0x14); 
 804028e:	4b0f      	ldr	r3, [pc, #60]	@ (80402cc <Led_Ctrl+0x48>)
 8040290:	60fb      	str	r3, [r7, #12]

    if (OnOff == 1)
 8040292:	683b      	ldr	r3, [r7, #0]
 8040294:	2b01      	cmp	r3, #1
 8040296:	d109      	bne.n	80402ac <Led_Ctrl+0x28>
        *GPIOD_ODR |=  (0b1 << LED);
 8040298:	68fb      	ldr	r3, [r7, #12]
 804029a:	681b      	ldr	r3, [r3, #0]
 804029c:	2101      	movs	r1, #1
 804029e:	687a      	ldr	r2, [r7, #4]
 80402a0:	fa01 f202 	lsl.w	r2, r1, r2
 80402a4:	431a      	orrs	r2, r3
 80402a6:	68fb      	ldr	r3, [r7, #12]
 80402a8:	601a      	str	r2, [r3, #0]
    else 
        *GPIOD_ODR &= ~(0b1 << LED);
}
 80402aa:	e009      	b.n	80402c0 <Led_Ctrl+0x3c>
        *GPIOD_ODR &= ~(0b1 << LED);
 80402ac:	68fb      	ldr	r3, [r7, #12]
 80402ae:	681b      	ldr	r3, [r3, #0]
 80402b0:	2101      	movs	r1, #1
 80402b2:	687a      	ldr	r2, [r7, #4]
 80402b4:	fa01 f202 	lsl.w	r2, r1, r2
 80402b8:	43d2      	mvns	r2, r2
 80402ba:	401a      	ands	r2, r3
 80402bc:	68fb      	ldr	r3, [r7, #12]
 80402be:	601a      	str	r2, [r3, #0]
}
 80402c0:	bf00      	nop
 80402c2:	3714      	adds	r7, #20
 80402c4:	46bd      	mov	sp, r7
 80402c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80402ca:	4770      	bx	lr
 80402cc:	40020c14 	.word	0x40020c14

080402d0 <Button_Status>:

// 4 - Check if the button is pressed or not
int Button_Status() {
 80402d0:	b480      	push	{r7}
 80402d2:	b083      	sub	sp, #12
 80402d4:	af00      	add	r7, sp, #0
    uint32_t* GPIOA_IDR = (uint32_t*)(GPIOA_BASE_ADDR + 0x10);
 80402d6:	4b06      	ldr	r3, [pc, #24]	@ (80402f0 <Button_Status+0x20>)
 80402d8:	607b      	str	r3, [r7, #4]
    return (*GPIOA_IDR >> 0) & 1;
 80402da:	687b      	ldr	r3, [r7, #4]
 80402dc:	681b      	ldr	r3, [r3, #0]
 80402de:	f003 0301 	and.w	r3, r3, #1
}
 80402e2:	4618      	mov	r0, r3
 80402e4:	370c      	adds	r7, #12
 80402e6:	46bd      	mov	sp, r7
 80402e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80402ec:	4770      	bx	lr
 80402ee:	bf00      	nop
 80402f0:	40020010 	.word	0x40020010

080402f4 <Button_Interrupt_Int>:

#define EXTI_BASE_ADDR 0x40013C00
#define ISER_BASE_ADDR 0xE000E100 // From ref manual - M4

void Button_Interrupt_Int() {
 80402f4:	b480      	push	{r7}
 80402f6:	b085      	sub	sp, #20
 80402f8:	af00      	add	r7, sp, #0

  // Config EXTI to send interrupt to NVIC when detect rising of failling edge

  // select trigger for EXTI0 is rising
  uint32_t* EXTI_RTSR = (uint32_t*)(EXTI_BASE_ADDR + 0x08);
 80402fa:	4b13      	ldr	r3, [pc, #76]	@ (8040348 <Button_Interrupt_Int+0x54>)
 80402fc:	60fb      	str	r3, [r7, #12]
  *EXTI_RTSR |= (0b1 << 0);
 80402fe:	68fb      	ldr	r3, [r7, #12]
 8040300:	681b      	ldr	r3, [r3, #0]
 8040302:	f043 0201 	orr.w	r2, r3, #1
 8040306:	68fb      	ldr	r3, [r7, #12]
 8040308:	601a      	str	r2, [r3, #0]

  // select trigger for EXTI0 is falling
  uint32_t* EXTI_FTSR = (uint32_t*)(EXTI_BASE_ADDR + 0x0C);
 804030a:	4b10      	ldr	r3, [pc, #64]	@ (804034c <Button_Interrupt_Int+0x58>)
 804030c:	60bb      	str	r3, [r7, #8]
  *EXTI_FTSR |= (0b1 << 0);
 804030e:	68bb      	ldr	r3, [r7, #8]
 8040310:	681b      	ldr	r3, [r3, #0]
 8040312:	f043 0201 	orr.w	r2, r3, #1
 8040316:	68bb      	ldr	r3, [r7, #8]
 8040318:	601a      	str	r2, [r3, #0]

  // masking
  uint32_t* EXTI_IMR = (uint32_t*)(EXTI_BASE_ADDR + 0x00);
 804031a:	4b0d      	ldr	r3, [pc, #52]	@ (8040350 <Button_Interrupt_Int+0x5c>)
 804031c:	607b      	str	r3, [r7, #4]
  *EXTI_IMR |= (0b1 << 0);
 804031e:	687b      	ldr	r3, [r7, #4]
 8040320:	681b      	ldr	r3, [r3, #0]
 8040322:	f043 0201 	orr.w	r2, r3, #1
 8040326:	687b      	ldr	r3, [r7, #4]
 8040328:	601a      	str	r2, [r3, #0]

  // NVIC accepts interrupt from EXTI0
  /*
    From vectore table in ref manual - stm32, we know position of EXTI0 interrupt is 6
  */
  uint32_t* ISER0 = (uint32_t*)(ISER_BASE_ADDR + 0x00);
 804032a:	4b0a      	ldr	r3, [pc, #40]	@ (8040354 <Button_Interrupt_Int+0x60>)
 804032c:	603b      	str	r3, [r7, #0]
  *ISER0 |= (0b1 << 6);
 804032e:	683b      	ldr	r3, [r7, #0]
 8040330:	681b      	ldr	r3, [r3, #0]
 8040332:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8040336:	683b      	ldr	r3, [r7, #0]
 8040338:	601a      	str	r2, [r3, #0]

}
 804033a:	bf00      	nop
 804033c:	3714      	adds	r7, #20
 804033e:	46bd      	mov	sp, r7
 8040340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040344:	4770      	bx	lr
 8040346:	bf00      	nop
 8040348:	40013c08 	.word	0x40013c08
 804034c:	40013c0c 	.word	0x40013c0c
 8040350:	40013c00 	.word	0x40013c00
 8040354:	e000e100 	.word	0xe000e100

08040358 <EXTI0_IRQHandler>:

void EXTI0_IRQHandler() {
 8040358:	b590      	push	{r4, r7, lr}
 804035a:	b083      	sub	sp, #12
 804035c:	af00      	add	r7, sp, #0

  Led_Ctrl(GREEN_LED, Button_Status());
 804035e:	4b0a      	ldr	r3, [pc, #40]	@ (8040388 <EXTI0_IRQHandler+0x30>)
 8040360:	681c      	ldr	r4, [r3, #0]
 8040362:	f7ff ffb5 	bl	80402d0 <Button_Status>
 8040366:	4603      	mov	r3, r0
 8040368:	4619      	mov	r1, r3
 804036a:	4620      	mov	r0, r4
 804036c:	f7ff ff8a 	bl	8040284 <Led_Ctrl>

  // Clear interrupt flag to exit handler function
  uint32_t* EXTI_PR = (uint32_t*)(EXTI_BASE_ADDR + 0x14);
 8040370:	4b06      	ldr	r3, [pc, #24]	@ (804038c <EXTI0_IRQHandler+0x34>)
 8040372:	607b      	str	r3, [r7, #4]
  *EXTI_PR |= (0b1 << 0);
 8040374:	687b      	ldr	r3, [r7, #4]
 8040376:	681b      	ldr	r3, [r3, #0]
 8040378:	f043 0201 	orr.w	r2, r3, #1
 804037c:	687b      	ldr	r3, [r7, #4]
 804037e:	601a      	str	r2, [r3, #0]
}
 8040380:	bf00      	nop
 8040382:	370c      	adds	r7, #12
 8040384:	46bd      	mov	sp, r7
 8040386:	bd90      	pop	{r4, r7, pc}
 8040388:	20000000 	.word	0x20000000
 804038c:	40013c14 	.word	0x40013c14

08040390 <Uart_Init>:
// 6. Config UART
#define GPIOB_BASE_ADDR 0x40020400
#define USART1_BASE_ADDR 0x40011000

void Uart_Init()
{
 8040390:	b480      	push	{r7}
 8040392:	b087      	sub	sp, #28
 8040394:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8040396:	2300      	movs	r3, #0
 8040398:	607b      	str	r3, [r7, #4]
 804039a:	4b35      	ldr	r3, [pc, #212]	@ (8040470 <Uart_Init+0xe0>)
 804039c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 804039e:	4a34      	ldr	r2, [pc, #208]	@ (8040470 <Uart_Init+0xe0>)
 80403a0:	f043 0302 	orr.w	r3, r3, #2
 80403a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80403a6:	4b32      	ldr	r3, [pc, #200]	@ (8040470 <Uart_Init+0xe0>)
 80403a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80403aa:	f003 0302 	and.w	r3, r3, #2
 80403ae:	607b      	str	r3, [r7, #4]
 80403b0:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_USART1_CLK_ENABLE();
 80403b2:	2300      	movs	r3, #0
 80403b4:	603b      	str	r3, [r7, #0]
 80403b6:	4b2e      	ldr	r3, [pc, #184]	@ (8040470 <Uart_Init+0xe0>)
 80403b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80403ba:	4a2d      	ldr	r2, [pc, #180]	@ (8040470 <Uart_Init+0xe0>)
 80403bc:	f043 0310 	orr.w	r3, r3, #16
 80403c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80403c2:	4b2b      	ldr	r3, [pc, #172]	@ (8040470 <Uart_Init+0xe0>)
 80403c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80403c6:	f003 0310 	and.w	r3, r3, #16
 80403ca:	603b      	str	r3, [r7, #0]
 80403cc:	683b      	ldr	r3, [r7, #0]
	uint32_t* GPIOB_MODER = (uint32_t*)(GPIOB_BASE_ADDR + 0x00);
 80403ce:	4b29      	ldr	r3, [pc, #164]	@ (8040474 <Uart_Init+0xe4>)
 80403d0:	617b      	str	r3, [r7, #20]
	uint32_t* GPIOB_AFRL  = (uint32_t*)(GPIOB_BASE_ADDR + 0x20);
 80403d2:	4b29      	ldr	r3, [pc, #164]	@ (8040478 <Uart_Init+0xe8>)
 80403d4:	613b      	str	r3, [r7, #16]
	uint32_t* USART_BRR  = (uint32_t*)(USART1_BASE_ADDR + 0x08);
 80403d6:	4b29      	ldr	r3, [pc, #164]	@ (804047c <Uart_Init+0xec>)
 80403d8:	60fb      	str	r3, [r7, #12]
	uint32_t* USART_CR1  = (uint32_t*)(USART1_BASE_ADDR + 0x0C);
 80403da:	4b29      	ldr	r3, [pc, #164]	@ (8040480 <Uart_Init+0xf0>)
 80403dc:	60bb      	str	r3, [r7, #8]


	*GPIOB_MODER &= ~(0b1111 << 12); // CLEAR
 80403de:	697b      	ldr	r3, [r7, #20]
 80403e0:	681b      	ldr	r3, [r3, #0]
 80403e2:	f423 4270 	bic.w	r2, r3, #61440	@ 0xf000
 80403e6:	697b      	ldr	r3, [r7, #20]
 80403e8:	601a      	str	r2, [r3, #0]
	*GPIOB_MODER |= (0b1010 << 12);
 80403ea:	697b      	ldr	r3, [r7, #20]
 80403ec:	681b      	ldr	r3, [r3, #0]
 80403ee:	f443 4220 	orr.w	r2, r3, #40960	@ 0xa000
 80403f2:	697b      	ldr	r3, [r7, #20]
 80403f4:	601a      	str	r2, [r3, #0]

	*GPIOB_AFRL	&= ~(0xff << 24);
 80403f6:	693b      	ldr	r3, [r7, #16]
 80403f8:	681b      	ldr	r3, [r3, #0]
 80403fa:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 80403fe:	693b      	ldr	r3, [r7, #16]
 8040400:	601a      	str	r2, [r3, #0]
	*GPIOB_AFRL	|= (0b01110111 << 24);
 8040402:	693b      	ldr	r3, [r7, #16]
 8040404:	681b      	ldr	r3, [r3, #0]
 8040406:	f043 42ee 	orr.w	r2, r3, #1996488704	@ 0x77000000
 804040a:	693b      	ldr	r3, [r7, #16]
 804040c:	601a      	str	r2, [r3, #0]

	// set baud rate ~ 9600 -> UARTDIV = 104.16667 -> mantissa = 104 & fraction = 0.16667 * 16 = 3
	*USART_BRR &= ~(0xffff << 0);
 804040e:	68fb      	ldr	r3, [r7, #12]
 8040410:	681b      	ldr	r3, [r3, #0]
 8040412:	0c1b      	lsrs	r3, r3, #16
 8040414:	041b      	lsls	r3, r3, #16
 8040416:	68fa      	ldr	r2, [r7, #12]
 8040418:	6013      	str	r3, [r2, #0]
	*USART_BRR |= (3 << 0);
 804041a:	68fb      	ldr	r3, [r7, #12]
 804041c:	681b      	ldr	r3, [r3, #0]
 804041e:	f043 0203 	orr.w	r2, r3, #3
 8040422:	68fb      	ldr	r3, [r7, #12]
 8040424:	601a      	str	r2, [r3, #0]
	*USART_BRR |= (104 << 4);
 8040426:	68fb      	ldr	r3, [r7, #12]
 8040428:	681b      	ldr	r3, [r3, #0]
 804042a:	f443 62d0 	orr.w	r2, r3, #1664	@ 0x680
 804042e:	68fb      	ldr	r3, [r7, #12]
 8040430:	601a      	str	r2, [r3, #0]

	// data frame
	*USART_CR1 |= (0b1 << 10); // Enable parity
 8040432:	68bb      	ldr	r3, [r7, #8]
 8040434:	681b      	ldr	r3, [r3, #0]
 8040436:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 804043a:	68bb      	ldr	r3, [r7, #8]
 804043c:	601a      	str	r2, [r3, #0]
	*USART_CR1 |= (0b1 << 12); // 9 bits length
 804043e:	68bb      	ldr	r3, [r7, #8]
 8040440:	681b      	ldr	r3, [r3, #0]
 8040442:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8040446:	68bb      	ldr	r3, [r7, #8]
 8040448:	601a      	str	r2, [r3, #0]

	// enable UART
	*USART_CR1 |= (0b1 << 13);
 804044a:	68bb      	ldr	r3, [r7, #8]
 804044c:	681b      	ldr	r3, [r3, #0]
 804044e:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8040452:	68bb      	ldr	r3, [r7, #8]
 8040454:	601a      	str	r2, [r3, #0]

  // transmiter, receiver
	*USART_CR1 |= (0b11 << 2);
 8040456:	68bb      	ldr	r3, [r7, #8]
 8040458:	681b      	ldr	r3, [r3, #0]
 804045a:	f043 020c 	orr.w	r2, r3, #12
 804045e:	68bb      	ldr	r3, [r7, #8]
 8040460:	601a      	str	r2, [r3, #0]
}
 8040462:	bf00      	nop
 8040464:	371c      	adds	r7, #28
 8040466:	46bd      	mov	sp, r7
 8040468:	f85d 7b04 	ldr.w	r7, [sp], #4
 804046c:	4770      	bx	lr
 804046e:	bf00      	nop
 8040470:	40023800 	.word	0x40023800
 8040474:	40020400 	.word	0x40020400
 8040478:	40020420 	.word	0x40020420
 804047c:	40011008 	.word	0x40011008
 8040480:	4001100c 	.word	0x4001100c

08040484 <uart_send_one_byte>:

void uart_send_one_byte(char data)
{
 8040484:	b480      	push	{r7}
 8040486:	b085      	sub	sp, #20
 8040488:	af00      	add	r7, sp, #0
 804048a:	4603      	mov	r3, r0
 804048c:	71fb      	strb	r3, [r7, #7]
	uint32_t* USART_SR = (uint32_t*)(USART1_BASE_ADDR + 0x00);
 804048e:	4b0e      	ldr	r3, [pc, #56]	@ (80404c8 <uart_send_one_byte+0x44>)
 8040490:	60fb      	str	r3, [r7, #12]
	uint32_t* USART_DR = (uint32_t*)(USART1_BASE_ADDR + 0x04);
 8040492:	4b0e      	ldr	r3, [pc, #56]	@ (80404cc <uart_send_one_byte+0x48>)
 8040494:	60bb      	str	r3, [r7, #8]
	// wait for TXE == 1
	while (((*USART_SR >> 7) & 1) == 0);
 8040496:	bf00      	nop
 8040498:	68fb      	ldr	r3, [r7, #12]
 804049a:	681b      	ldr	r3, [r3, #0]
 804049c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80404a0:	2b00      	cmp	r3, #0
 80404a2:	d0f9      	beq.n	8040498 <uart_send_one_byte+0x14>

	*USART_DR = data;
 80404a4:	79fa      	ldrb	r2, [r7, #7]
 80404a6:	68bb      	ldr	r3, [r7, #8]
 80404a8:	601a      	str	r2, [r3, #0]

	while (((*USART_SR >> 6) & 1) == 0);
 80404aa:	bf00      	nop
 80404ac:	68fb      	ldr	r3, [r7, #12]
 80404ae:	681b      	ldr	r3, [r3, #0]
 80404b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80404b4:	2b00      	cmp	r3, #0
 80404b6:	d0f9      	beq.n	80404ac <uart_send_one_byte+0x28>
}
 80404b8:	bf00      	nop
 80404ba:	bf00      	nop
 80404bc:	3714      	adds	r7, #20
 80404be:	46bd      	mov	sp, r7
 80404c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80404c4:	4770      	bx	lr
 80404c6:	bf00      	nop
 80404c8:	40011000 	.word	0x40011000
 80404cc:	40011004 	.word	0x40011004

080404d0 <uart_send_string>:

void uart_send_string(char* str)
{
 80404d0:	b580      	push	{r7, lr}
 80404d2:	b084      	sub	sp, #16
 80404d4:	af00      	add	r7, sp, #0
 80404d6:	6078      	str	r0, [r7, #4]

	// Get size of string
	int size;
	size = strlen(str);
 80404d8:	6878      	ldr	r0, [r7, #4]
 80404da:	f7ff fe7d 	bl	80401d8 <strlen>
 80404de:	4603      	mov	r3, r0
 80404e0:	60bb      	str	r3, [r7, #8]

	for (int i = 0; i < size; i++)
 80404e2:	2300      	movs	r3, #0
 80404e4:	60fb      	str	r3, [r7, #12]
 80404e6:	e009      	b.n	80404fc <uart_send_string+0x2c>
		uart_send_one_byte(str[i]);
 80404e8:	68fb      	ldr	r3, [r7, #12]
 80404ea:	687a      	ldr	r2, [r7, #4]
 80404ec:	4413      	add	r3, r2
 80404ee:	781b      	ldrb	r3, [r3, #0]
 80404f0:	4618      	mov	r0, r3
 80404f2:	f7ff ffc7 	bl	8040484 <uart_send_one_byte>
	for (int i = 0; i < size; i++)
 80404f6:	68fb      	ldr	r3, [r7, #12]
 80404f8:	3301      	adds	r3, #1
 80404fa:	60fb      	str	r3, [r7, #12]
 80404fc:	68fa      	ldr	r2, [r7, #12]
 80404fe:	68bb      	ldr	r3, [r7, #8]
 8040500:	429a      	cmp	r2, r3
 8040502:	dbf1      	blt.n	80404e8 <uart_send_string+0x18>
}
 8040504:	bf00      	nop
 8040506:	bf00      	nop
 8040508:	3710      	adds	r7, #16
 804050a:	46bd      	mov	sp, r7
 804050c:	bd80      	pop	{r7, pc}
	...

08040510 <main>:

int main() {
 8040510:	b580      	push	{r7, lr}
 8040512:	af00      	add	r7, sp, #0

  HAL_Init();
 8040514:	f000 f8cc 	bl	80406b0 <HAL_Init>
  Button_Init();
 8040518:	f7ff fe66 	bl	80401e8 <Button_Init>
  Led_Init();
 804051c:	f7ff fe88 	bl	8040230 <Led_Init>
  Button_Interrupt_Int();
 8040520:	f7ff fee8 	bl	80402f4 <Button_Interrupt_Int>
  Uart_Init();
 8040524:	f7ff ff34 	bl	8040390 <Uart_Init>
  // Uart_Interrupt_Init();

  uart_send_string("Firmware 2 ON!\n");
 8040528:	480e      	ldr	r0, [pc, #56]	@ (8040564 <main+0x54>)
 804052a:	f7ff ffd1 	bl	80404d0 <uart_send_string>


  while(1) {
     Led_Ctrl(RED_LED, ON);
 804052e:	4b0e      	ldr	r3, [pc, #56]	@ (8040568 <main+0x58>)
 8040530:	681b      	ldr	r3, [r3, #0]
 8040532:	4a0e      	ldr	r2, [pc, #56]	@ (804056c <main+0x5c>)
 8040534:	6812      	ldr	r2, [r2, #0]
 8040536:	4611      	mov	r1, r2
 8040538:	4618      	mov	r0, r3
 804053a:	f7ff fea3 	bl	8040284 <Led_Ctrl>
     HAL_Delay(1000);
 804053e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8040542:	f000 f927 	bl	8040794 <HAL_Delay>
     Led_Ctrl(RED_LED, OFF);
 8040546:	4b08      	ldr	r3, [pc, #32]	@ (8040568 <main+0x58>)
 8040548:	681b      	ldr	r3, [r3, #0]
 804054a:	4a09      	ldr	r2, [pc, #36]	@ (8040570 <main+0x60>)
 804054c:	6812      	ldr	r2, [r2, #0]
 804054e:	4611      	mov	r1, r2
 8040550:	4618      	mov	r0, r3
 8040552:	f7ff fe97 	bl	8040284 <Led_Ctrl>
     HAL_Delay(1000);
 8040556:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 804055a:	f000 f91b 	bl	8040794 <HAL_Delay>
     Led_Ctrl(RED_LED, ON);
 804055e:	bf00      	nop
 8040560:	e7e5      	b.n	804052e <main+0x1e>
 8040562:	bf00      	nop
 8040564:	08042e00 	.word	0x08042e00
 8040568:	20000004 	.word	0x20000004
 804056c:	20000008 	.word	0x20000008
 8040570:	20000034 	.word	0x20000034

08040574 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8040574:	b580      	push	{r7, lr}
 8040576:	b082      	sub	sp, #8
 8040578:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 804057a:	2300      	movs	r3, #0
 804057c:	607b      	str	r3, [r7, #4]
 804057e:	4b10      	ldr	r3, [pc, #64]	@ (80405c0 <HAL_MspInit+0x4c>)
 8040580:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8040582:	4a0f      	ldr	r2, [pc, #60]	@ (80405c0 <HAL_MspInit+0x4c>)
 8040584:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8040588:	6453      	str	r3, [r2, #68]	@ 0x44
 804058a:	4b0d      	ldr	r3, [pc, #52]	@ (80405c0 <HAL_MspInit+0x4c>)
 804058c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 804058e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8040592:	607b      	str	r3, [r7, #4]
 8040594:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8040596:	2300      	movs	r3, #0
 8040598:	603b      	str	r3, [r7, #0]
 804059a:	4b09      	ldr	r3, [pc, #36]	@ (80405c0 <HAL_MspInit+0x4c>)
 804059c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 804059e:	4a08      	ldr	r2, [pc, #32]	@ (80405c0 <HAL_MspInit+0x4c>)
 80405a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80405a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80405a6:	4b06      	ldr	r3, [pc, #24]	@ (80405c0 <HAL_MspInit+0x4c>)
 80405a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80405aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80405ae:	603b      	str	r3, [r7, #0]
 80405b0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80405b2:	2007      	movs	r0, #7
 80405b4:	f000 f9c4 	bl	8040940 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80405b8:	bf00      	nop
 80405ba:	3708      	adds	r7, #8
 80405bc:	46bd      	mov	sp, r7
 80405be:	bd80      	pop	{r7, pc}
 80405c0:	40023800 	.word	0x40023800

080405c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80405c4:	b480      	push	{r7}
 80405c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80405c8:	bf00      	nop
 80405ca:	e7fd      	b.n	80405c8 <NMI_Handler+0x4>

080405cc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80405cc:	b480      	push	{r7}
 80405ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80405d0:	bf00      	nop
 80405d2:	e7fd      	b.n	80405d0 <HardFault_Handler+0x4>

080405d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80405d4:	b480      	push	{r7}
 80405d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80405d8:	bf00      	nop
 80405da:	e7fd      	b.n	80405d8 <MemManage_Handler+0x4>

080405dc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80405dc:	b480      	push	{r7}
 80405de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80405e0:	bf00      	nop
 80405e2:	e7fd      	b.n	80405e0 <BusFault_Handler+0x4>

080405e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80405e4:	b480      	push	{r7}
 80405e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80405e8:	bf00      	nop
 80405ea:	e7fd      	b.n	80405e8 <UsageFault_Handler+0x4>

080405ec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80405ec:	b480      	push	{r7}
 80405ee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80405f0:	bf00      	nop
 80405f2:	46bd      	mov	sp, r7
 80405f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80405f8:	4770      	bx	lr

080405fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80405fa:	b480      	push	{r7}
 80405fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80405fe:	bf00      	nop
 8040600:	46bd      	mov	sp, r7
 8040602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040606:	4770      	bx	lr

08040608 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8040608:	b480      	push	{r7}
 804060a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 804060c:	bf00      	nop
 804060e:	46bd      	mov	sp, r7
 8040610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040614:	4770      	bx	lr

08040616 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8040616:	b580      	push	{r7, lr}
 8040618:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 804061a:	f000 f89b 	bl	8040754 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 804061e:	bf00      	nop
 8040620:	bd80      	pop	{r7, pc}
	...

08040624 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8040624:	b580      	push	{r7, lr}
 8040626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8040628:	4802      	ldr	r0, [pc, #8]	@ (8040634 <OTG_FS_IRQHandler+0x10>)
 804062a:	f000 f9bc 	bl	80409a6 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 804062e:	bf00      	nop
 8040630:	bd80      	pop	{r7, pc}
 8040632:	bf00      	nop
 8040634:	2000003c 	.word	0x2000003c

08040638 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8040638:	b480      	push	{r7}
 804063a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 804063c:	4b06      	ldr	r3, [pc, #24]	@ (8040658 <SystemInit+0x20>)
 804063e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8040642:	4a05      	ldr	r2, [pc, #20]	@ (8040658 <SystemInit+0x20>)
 8040644:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8040648:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 804064c:	bf00      	nop
 804064e:	46bd      	mov	sp, r7
 8040650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040654:	4770      	bx	lr
 8040656:	bf00      	nop
 8040658:	e000ed00 	.word	0xe000ed00

0804065c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 804065c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8040694 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8040660:	f7ff ffea 	bl	8040638 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8040664:	480c      	ldr	r0, [pc, #48]	@ (8040698 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8040666:	490d      	ldr	r1, [pc, #52]	@ (804069c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8040668:	4a0d      	ldr	r2, [pc, #52]	@ (80406a0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 804066a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 804066c:	e002      	b.n	8040674 <LoopCopyDataInit>

0804066e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 804066e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8040670:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8040672:	3304      	adds	r3, #4

08040674 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8040674:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8040676:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8040678:	d3f9      	bcc.n	804066e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 804067a:	4a0a      	ldr	r2, [pc, #40]	@ (80406a4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 804067c:	4c0a      	ldr	r4, [pc, #40]	@ (80406a8 <LoopFillZerobss+0x22>)
  movs r3, #0
 804067e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8040680:	e001      	b.n	8040686 <LoopFillZerobss>

08040682 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8040682:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8040684:	3204      	adds	r2, #4

08040686 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8040686:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8040688:	d3fb      	bcc.n	8040682 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 804068a:	f002 fb89 	bl	8042da0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 804068e:	f7ff ff3f 	bl	8040510 <main>
  bx  lr    
 8040692:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8040694:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8040698:	20000000 	.word	0x20000000
  ldr r1, =_edata
 804069c:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 80406a0:	08042e20 	.word	0x08042e20
  ldr r2, =_sbss
 80406a4:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 80406a8:	2000041c 	.word	0x2000041c

080406ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80406ac:	e7fe      	b.n	80406ac <ADC_IRQHandler>
	...

080406b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80406b0:	b580      	push	{r7, lr}
 80406b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80406b4:	4b0e      	ldr	r3, [pc, #56]	@ (80406f0 <HAL_Init+0x40>)
 80406b6:	681b      	ldr	r3, [r3, #0]
 80406b8:	4a0d      	ldr	r2, [pc, #52]	@ (80406f0 <HAL_Init+0x40>)
 80406ba:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80406be:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80406c0:	4b0b      	ldr	r3, [pc, #44]	@ (80406f0 <HAL_Init+0x40>)
 80406c2:	681b      	ldr	r3, [r3, #0]
 80406c4:	4a0a      	ldr	r2, [pc, #40]	@ (80406f0 <HAL_Init+0x40>)
 80406c6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80406ca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80406cc:	4b08      	ldr	r3, [pc, #32]	@ (80406f0 <HAL_Init+0x40>)
 80406ce:	681b      	ldr	r3, [r3, #0]
 80406d0:	4a07      	ldr	r2, [pc, #28]	@ (80406f0 <HAL_Init+0x40>)
 80406d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80406d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80406d8:	2003      	movs	r0, #3
 80406da:	f000 f931 	bl	8040940 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80406de:	2000      	movs	r0, #0
 80406e0:	f000 f808 	bl	80406f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80406e4:	f7ff ff46 	bl	8040574 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80406e8:	2300      	movs	r3, #0
}
 80406ea:	4618      	mov	r0, r3
 80406ec:	bd80      	pop	{r7, pc}
 80406ee:	bf00      	nop
 80406f0:	40023c00 	.word	0x40023c00

080406f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80406f4:	b580      	push	{r7, lr}
 80406f6:	b082      	sub	sp, #8
 80406f8:	af00      	add	r7, sp, #0
 80406fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80406fc:	4b12      	ldr	r3, [pc, #72]	@ (8040748 <HAL_InitTick+0x54>)
 80406fe:	681a      	ldr	r2, [r3, #0]
 8040700:	4b12      	ldr	r3, [pc, #72]	@ (804074c <HAL_InitTick+0x58>)
 8040702:	781b      	ldrb	r3, [r3, #0]
 8040704:	4619      	mov	r1, r3
 8040706:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 804070a:	fbb3 f3f1 	udiv	r3, r3, r1
 804070e:	fbb2 f3f3 	udiv	r3, r2, r3
 8040712:	4618      	mov	r0, r3
 8040714:	f000 f93b 	bl	804098e <HAL_SYSTICK_Config>
 8040718:	4603      	mov	r3, r0
 804071a:	2b00      	cmp	r3, #0
 804071c:	d001      	beq.n	8040722 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 804071e:	2301      	movs	r3, #1
 8040720:	e00e      	b.n	8040740 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8040722:	687b      	ldr	r3, [r7, #4]
 8040724:	2b0f      	cmp	r3, #15
 8040726:	d80a      	bhi.n	804073e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8040728:	2200      	movs	r2, #0
 804072a:	6879      	ldr	r1, [r7, #4]
 804072c:	f04f 30ff 	mov.w	r0, #4294967295
 8040730:	f000 f911 	bl	8040956 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8040734:	4a06      	ldr	r2, [pc, #24]	@ (8040750 <HAL_InitTick+0x5c>)
 8040736:	687b      	ldr	r3, [r7, #4]
 8040738:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 804073a:	2300      	movs	r3, #0
 804073c:	e000      	b.n	8040740 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 804073e:	2301      	movs	r3, #1
}
 8040740:	4618      	mov	r0, r3
 8040742:	3708      	adds	r7, #8
 8040744:	46bd      	mov	sp, r7
 8040746:	bd80      	pop	{r7, pc}
 8040748:	2000000c 	.word	0x2000000c
 804074c:	20000014 	.word	0x20000014
 8040750:	20000010 	.word	0x20000010

08040754 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8040754:	b480      	push	{r7}
 8040756:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8040758:	4b06      	ldr	r3, [pc, #24]	@ (8040774 <HAL_IncTick+0x20>)
 804075a:	781b      	ldrb	r3, [r3, #0]
 804075c:	461a      	mov	r2, r3
 804075e:	4b06      	ldr	r3, [pc, #24]	@ (8040778 <HAL_IncTick+0x24>)
 8040760:	681b      	ldr	r3, [r3, #0]
 8040762:	4413      	add	r3, r2
 8040764:	4a04      	ldr	r2, [pc, #16]	@ (8040778 <HAL_IncTick+0x24>)
 8040766:	6013      	str	r3, [r2, #0]
}
 8040768:	bf00      	nop
 804076a:	46bd      	mov	sp, r7
 804076c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040770:	4770      	bx	lr
 8040772:	bf00      	nop
 8040774:	20000014 	.word	0x20000014
 8040778:	20000038 	.word	0x20000038

0804077c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 804077c:	b480      	push	{r7}
 804077e:	af00      	add	r7, sp, #0
  return uwTick;
 8040780:	4b03      	ldr	r3, [pc, #12]	@ (8040790 <HAL_GetTick+0x14>)
 8040782:	681b      	ldr	r3, [r3, #0]
}
 8040784:	4618      	mov	r0, r3
 8040786:	46bd      	mov	sp, r7
 8040788:	f85d 7b04 	ldr.w	r7, [sp], #4
 804078c:	4770      	bx	lr
 804078e:	bf00      	nop
 8040790:	20000038 	.word	0x20000038

08040794 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8040794:	b580      	push	{r7, lr}
 8040796:	b084      	sub	sp, #16
 8040798:	af00      	add	r7, sp, #0
 804079a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 804079c:	f7ff ffee 	bl	804077c <HAL_GetTick>
 80407a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80407a2:	687b      	ldr	r3, [r7, #4]
 80407a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80407a6:	68fb      	ldr	r3, [r7, #12]
 80407a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80407ac:	d005      	beq.n	80407ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80407ae:	4b0a      	ldr	r3, [pc, #40]	@ (80407d8 <HAL_Delay+0x44>)
 80407b0:	781b      	ldrb	r3, [r3, #0]
 80407b2:	461a      	mov	r2, r3
 80407b4:	68fb      	ldr	r3, [r7, #12]
 80407b6:	4413      	add	r3, r2
 80407b8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80407ba:	bf00      	nop
 80407bc:	f7ff ffde 	bl	804077c <HAL_GetTick>
 80407c0:	4602      	mov	r2, r0
 80407c2:	68bb      	ldr	r3, [r7, #8]
 80407c4:	1ad3      	subs	r3, r2, r3
 80407c6:	68fa      	ldr	r2, [r7, #12]
 80407c8:	429a      	cmp	r2, r3
 80407ca:	d8f7      	bhi.n	80407bc <HAL_Delay+0x28>
  {
  }
}
 80407cc:	bf00      	nop
 80407ce:	bf00      	nop
 80407d0:	3710      	adds	r7, #16
 80407d2:	46bd      	mov	sp, r7
 80407d4:	bd80      	pop	{r7, pc}
 80407d6:	bf00      	nop
 80407d8:	20000014 	.word	0x20000014

080407dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80407dc:	b480      	push	{r7}
 80407de:	b085      	sub	sp, #20
 80407e0:	af00      	add	r7, sp, #0
 80407e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80407e4:	687b      	ldr	r3, [r7, #4]
 80407e6:	f003 0307 	and.w	r3, r3, #7
 80407ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80407ec:	4b0c      	ldr	r3, [pc, #48]	@ (8040820 <__NVIC_SetPriorityGrouping+0x44>)
 80407ee:	68db      	ldr	r3, [r3, #12]
 80407f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80407f2:	68ba      	ldr	r2, [r7, #8]
 80407f4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80407f8:	4013      	ands	r3, r2
 80407fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80407fc:	68fb      	ldr	r3, [r7, #12]
 80407fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8040800:	68bb      	ldr	r3, [r7, #8]
 8040802:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8040804:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8040808:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 804080c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 804080e:	4a04      	ldr	r2, [pc, #16]	@ (8040820 <__NVIC_SetPriorityGrouping+0x44>)
 8040810:	68bb      	ldr	r3, [r7, #8]
 8040812:	60d3      	str	r3, [r2, #12]
}
 8040814:	bf00      	nop
 8040816:	3714      	adds	r7, #20
 8040818:	46bd      	mov	sp, r7
 804081a:	f85d 7b04 	ldr.w	r7, [sp], #4
 804081e:	4770      	bx	lr
 8040820:	e000ed00 	.word	0xe000ed00

08040824 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8040824:	b480      	push	{r7}
 8040826:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8040828:	4b04      	ldr	r3, [pc, #16]	@ (804083c <__NVIC_GetPriorityGrouping+0x18>)
 804082a:	68db      	ldr	r3, [r3, #12]
 804082c:	0a1b      	lsrs	r3, r3, #8
 804082e:	f003 0307 	and.w	r3, r3, #7
}
 8040832:	4618      	mov	r0, r3
 8040834:	46bd      	mov	sp, r7
 8040836:	f85d 7b04 	ldr.w	r7, [sp], #4
 804083a:	4770      	bx	lr
 804083c:	e000ed00 	.word	0xe000ed00

08040840 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8040840:	b480      	push	{r7}
 8040842:	b083      	sub	sp, #12
 8040844:	af00      	add	r7, sp, #0
 8040846:	4603      	mov	r3, r0
 8040848:	6039      	str	r1, [r7, #0]
 804084a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 804084c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8040850:	2b00      	cmp	r3, #0
 8040852:	db0a      	blt.n	804086a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8040854:	683b      	ldr	r3, [r7, #0]
 8040856:	b2da      	uxtb	r2, r3
 8040858:	490c      	ldr	r1, [pc, #48]	@ (804088c <__NVIC_SetPriority+0x4c>)
 804085a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 804085e:	0112      	lsls	r2, r2, #4
 8040860:	b2d2      	uxtb	r2, r2
 8040862:	440b      	add	r3, r1
 8040864:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8040868:	e00a      	b.n	8040880 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 804086a:	683b      	ldr	r3, [r7, #0]
 804086c:	b2da      	uxtb	r2, r3
 804086e:	4908      	ldr	r1, [pc, #32]	@ (8040890 <__NVIC_SetPriority+0x50>)
 8040870:	79fb      	ldrb	r3, [r7, #7]
 8040872:	f003 030f 	and.w	r3, r3, #15
 8040876:	3b04      	subs	r3, #4
 8040878:	0112      	lsls	r2, r2, #4
 804087a:	b2d2      	uxtb	r2, r2
 804087c:	440b      	add	r3, r1
 804087e:	761a      	strb	r2, [r3, #24]
}
 8040880:	bf00      	nop
 8040882:	370c      	adds	r7, #12
 8040884:	46bd      	mov	sp, r7
 8040886:	f85d 7b04 	ldr.w	r7, [sp], #4
 804088a:	4770      	bx	lr
 804088c:	e000e100 	.word	0xe000e100
 8040890:	e000ed00 	.word	0xe000ed00

08040894 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8040894:	b480      	push	{r7}
 8040896:	b089      	sub	sp, #36	@ 0x24
 8040898:	af00      	add	r7, sp, #0
 804089a:	60f8      	str	r0, [r7, #12]
 804089c:	60b9      	str	r1, [r7, #8]
 804089e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80408a0:	68fb      	ldr	r3, [r7, #12]
 80408a2:	f003 0307 	and.w	r3, r3, #7
 80408a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80408a8:	69fb      	ldr	r3, [r7, #28]
 80408aa:	f1c3 0307 	rsb	r3, r3, #7
 80408ae:	2b04      	cmp	r3, #4
 80408b0:	bf28      	it	cs
 80408b2:	2304      	movcs	r3, #4
 80408b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80408b6:	69fb      	ldr	r3, [r7, #28]
 80408b8:	3304      	adds	r3, #4
 80408ba:	2b06      	cmp	r3, #6
 80408bc:	d902      	bls.n	80408c4 <NVIC_EncodePriority+0x30>
 80408be:	69fb      	ldr	r3, [r7, #28]
 80408c0:	3b03      	subs	r3, #3
 80408c2:	e000      	b.n	80408c6 <NVIC_EncodePriority+0x32>
 80408c4:	2300      	movs	r3, #0
 80408c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80408c8:	f04f 32ff 	mov.w	r2, #4294967295
 80408cc:	69bb      	ldr	r3, [r7, #24]
 80408ce:	fa02 f303 	lsl.w	r3, r2, r3
 80408d2:	43da      	mvns	r2, r3
 80408d4:	68bb      	ldr	r3, [r7, #8]
 80408d6:	401a      	ands	r2, r3
 80408d8:	697b      	ldr	r3, [r7, #20]
 80408da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80408dc:	f04f 31ff 	mov.w	r1, #4294967295
 80408e0:	697b      	ldr	r3, [r7, #20]
 80408e2:	fa01 f303 	lsl.w	r3, r1, r3
 80408e6:	43d9      	mvns	r1, r3
 80408e8:	687b      	ldr	r3, [r7, #4]
 80408ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80408ec:	4313      	orrs	r3, r2
         );
}
 80408ee:	4618      	mov	r0, r3
 80408f0:	3724      	adds	r7, #36	@ 0x24
 80408f2:	46bd      	mov	sp, r7
 80408f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80408f8:	4770      	bx	lr
	...

080408fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80408fc:	b580      	push	{r7, lr}
 80408fe:	b082      	sub	sp, #8
 8040900:	af00      	add	r7, sp, #0
 8040902:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8040904:	687b      	ldr	r3, [r7, #4]
 8040906:	3b01      	subs	r3, #1
 8040908:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 804090c:	d301      	bcc.n	8040912 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 804090e:	2301      	movs	r3, #1
 8040910:	e00f      	b.n	8040932 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8040912:	4a0a      	ldr	r2, [pc, #40]	@ (804093c <SysTick_Config+0x40>)
 8040914:	687b      	ldr	r3, [r7, #4]
 8040916:	3b01      	subs	r3, #1
 8040918:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 804091a:	210f      	movs	r1, #15
 804091c:	f04f 30ff 	mov.w	r0, #4294967295
 8040920:	f7ff ff8e 	bl	8040840 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8040924:	4b05      	ldr	r3, [pc, #20]	@ (804093c <SysTick_Config+0x40>)
 8040926:	2200      	movs	r2, #0
 8040928:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 804092a:	4b04      	ldr	r3, [pc, #16]	@ (804093c <SysTick_Config+0x40>)
 804092c:	2207      	movs	r2, #7
 804092e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8040930:	2300      	movs	r3, #0
}
 8040932:	4618      	mov	r0, r3
 8040934:	3708      	adds	r7, #8
 8040936:	46bd      	mov	sp, r7
 8040938:	bd80      	pop	{r7, pc}
 804093a:	bf00      	nop
 804093c:	e000e010 	.word	0xe000e010

08040940 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8040940:	b580      	push	{r7, lr}
 8040942:	b082      	sub	sp, #8
 8040944:	af00      	add	r7, sp, #0
 8040946:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8040948:	6878      	ldr	r0, [r7, #4]
 804094a:	f7ff ff47 	bl	80407dc <__NVIC_SetPriorityGrouping>
}
 804094e:	bf00      	nop
 8040950:	3708      	adds	r7, #8
 8040952:	46bd      	mov	sp, r7
 8040954:	bd80      	pop	{r7, pc}

08040956 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8040956:	b580      	push	{r7, lr}
 8040958:	b086      	sub	sp, #24
 804095a:	af00      	add	r7, sp, #0
 804095c:	4603      	mov	r3, r0
 804095e:	60b9      	str	r1, [r7, #8]
 8040960:	607a      	str	r2, [r7, #4]
 8040962:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8040964:	2300      	movs	r3, #0
 8040966:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8040968:	f7ff ff5c 	bl	8040824 <__NVIC_GetPriorityGrouping>
 804096c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 804096e:	687a      	ldr	r2, [r7, #4]
 8040970:	68b9      	ldr	r1, [r7, #8]
 8040972:	6978      	ldr	r0, [r7, #20]
 8040974:	f7ff ff8e 	bl	8040894 <NVIC_EncodePriority>
 8040978:	4602      	mov	r2, r0
 804097a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 804097e:	4611      	mov	r1, r2
 8040980:	4618      	mov	r0, r3
 8040982:	f7ff ff5d 	bl	8040840 <__NVIC_SetPriority>
}
 8040986:	bf00      	nop
 8040988:	3718      	adds	r7, #24
 804098a:	46bd      	mov	sp, r7
 804098c:	bd80      	pop	{r7, pc}

0804098e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 804098e:	b580      	push	{r7, lr}
 8040990:	b082      	sub	sp, #8
 8040992:	af00      	add	r7, sp, #0
 8040994:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8040996:	6878      	ldr	r0, [r7, #4]
 8040998:	f7ff ffb0 	bl	80408fc <SysTick_Config>
 804099c:	4603      	mov	r3, r0
}
 804099e:	4618      	mov	r0, r3
 80409a0:	3708      	adds	r7, #8
 80409a2:	46bd      	mov	sp, r7
 80409a4:	bd80      	pop	{r7, pc}

080409a6 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80409a6:	b580      	push	{r7, lr}
 80409a8:	b086      	sub	sp, #24
 80409aa:	af00      	add	r7, sp, #0
 80409ac:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80409ae:	687b      	ldr	r3, [r7, #4]
 80409b0:	681b      	ldr	r3, [r3, #0]
 80409b2:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80409b4:	693b      	ldr	r3, [r7, #16]
 80409b6:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80409b8:	687b      	ldr	r3, [r7, #4]
 80409ba:	681b      	ldr	r3, [r3, #0]
 80409bc:	4618      	mov	r0, r3
 80409be:	f001 fea7 	bl	8042710 <USB_GetMode>
 80409c2:	4603      	mov	r3, r0
 80409c4:	2b01      	cmp	r3, #1
 80409c6:	f040 80fb 	bne.w	8040bc0 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80409ca:	687b      	ldr	r3, [r7, #4]
 80409cc:	681b      	ldr	r3, [r3, #0]
 80409ce:	4618      	mov	r0, r3
 80409d0:	f001 fe6a 	bl	80426a8 <USB_ReadInterrupts>
 80409d4:	4603      	mov	r3, r0
 80409d6:	2b00      	cmp	r3, #0
 80409d8:	f000 80f1 	beq.w	8040bbe <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80409dc:	687b      	ldr	r3, [r7, #4]
 80409de:	681b      	ldr	r3, [r3, #0]
 80409e0:	4618      	mov	r0, r3
 80409e2:	f001 fe61 	bl	80426a8 <USB_ReadInterrupts>
 80409e6:	4603      	mov	r3, r0
 80409e8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80409ec:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80409f0:	d104      	bne.n	80409fc <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80409f2:	687b      	ldr	r3, [r7, #4]
 80409f4:	681b      	ldr	r3, [r3, #0]
 80409f6:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80409fa:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80409fc:	687b      	ldr	r3, [r7, #4]
 80409fe:	681b      	ldr	r3, [r3, #0]
 8040a00:	4618      	mov	r0, r3
 8040a02:	f001 fe51 	bl	80426a8 <USB_ReadInterrupts>
 8040a06:	4603      	mov	r3, r0
 8040a08:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8040a0c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8040a10:	d104      	bne.n	8040a1c <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8040a12:	687b      	ldr	r3, [r7, #4]
 8040a14:	681b      	ldr	r3, [r3, #0]
 8040a16:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8040a1a:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8040a1c:	687b      	ldr	r3, [r7, #4]
 8040a1e:	681b      	ldr	r3, [r3, #0]
 8040a20:	4618      	mov	r0, r3
 8040a22:	f001 fe41 	bl	80426a8 <USB_ReadInterrupts>
 8040a26:	4603      	mov	r3, r0
 8040a28:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8040a2c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8040a30:	d104      	bne.n	8040a3c <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8040a32:	687b      	ldr	r3, [r7, #4]
 8040a34:	681b      	ldr	r3, [r3, #0]
 8040a36:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8040a3a:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8040a3c:	687b      	ldr	r3, [r7, #4]
 8040a3e:	681b      	ldr	r3, [r3, #0]
 8040a40:	4618      	mov	r0, r3
 8040a42:	f001 fe31 	bl	80426a8 <USB_ReadInterrupts>
 8040a46:	4603      	mov	r3, r0
 8040a48:	f003 0302 	and.w	r3, r3, #2
 8040a4c:	2b02      	cmp	r3, #2
 8040a4e:	d103      	bne.n	8040a58 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8040a50:	687b      	ldr	r3, [r7, #4]
 8040a52:	681b      	ldr	r3, [r3, #0]
 8040a54:	2202      	movs	r2, #2
 8040a56:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8040a58:	687b      	ldr	r3, [r7, #4]
 8040a5a:	681b      	ldr	r3, [r3, #0]
 8040a5c:	4618      	mov	r0, r3
 8040a5e:	f001 fe23 	bl	80426a8 <USB_ReadInterrupts>
 8040a62:	4603      	mov	r3, r0
 8040a64:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8040a68:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8040a6c:	d120      	bne.n	8040ab0 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8040a6e:	687b      	ldr	r3, [r7, #4]
 8040a70:	681b      	ldr	r3, [r3, #0]
 8040a72:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8040a76:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8040a78:	68fb      	ldr	r3, [r7, #12]
 8040a7a:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8040a7e:	681b      	ldr	r3, [r3, #0]
 8040a80:	f003 0301 	and.w	r3, r3, #1
 8040a84:	2b00      	cmp	r3, #0
 8040a86:	d113      	bne.n	8040ab0 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8040a88:	2110      	movs	r1, #16
 8040a8a:	6938      	ldr	r0, [r7, #16]
 8040a8c:	f001 fd54 	bl	8042538 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8040a90:	6938      	ldr	r0, [r7, #16]
 8040a92:	f001 fd83 	bl	804259c <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8040a96:	687b      	ldr	r3, [r7, #4]
 8040a98:	7a5b      	ldrb	r3, [r3, #9]
 8040a9a:	2b02      	cmp	r3, #2
 8040a9c:	d105      	bne.n	8040aaa <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8040a9e:	687b      	ldr	r3, [r7, #4]
 8040aa0:	681b      	ldr	r3, [r3, #0]
 8040aa2:	2101      	movs	r1, #1
 8040aa4:	4618      	mov	r0, r3
 8040aa6:	f001 fe41 	bl	804272c <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8040aaa:	6878      	ldr	r0, [r7, #4]
 8040aac:	f002 f8f9 	bl	8042ca2 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8040ab0:	687b      	ldr	r3, [r7, #4]
 8040ab2:	681b      	ldr	r3, [r3, #0]
 8040ab4:	4618      	mov	r0, r3
 8040ab6:	f001 fdf7 	bl	80426a8 <USB_ReadInterrupts>
 8040aba:	4603      	mov	r3, r0
 8040abc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8040ac0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8040ac4:	d102      	bne.n	8040acc <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8040ac6:	6878      	ldr	r0, [r7, #4]
 8040ac8:	f001 fca1 	bl	804240e <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8040acc:	687b      	ldr	r3, [r7, #4]
 8040ace:	681b      	ldr	r3, [r3, #0]
 8040ad0:	4618      	mov	r0, r3
 8040ad2:	f001 fde9 	bl	80426a8 <USB_ReadInterrupts>
 8040ad6:	4603      	mov	r3, r0
 8040ad8:	f003 0308 	and.w	r3, r3, #8
 8040adc:	2b08      	cmp	r3, #8
 8040ade:	d106      	bne.n	8040aee <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8040ae0:	6878      	ldr	r0, [r7, #4]
 8040ae2:	f002 f8c2 	bl	8042c6a <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8040ae6:	687b      	ldr	r3, [r7, #4]
 8040ae8:	681b      	ldr	r3, [r3, #0]
 8040aea:	2208      	movs	r2, #8
 8040aec:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8040aee:	687b      	ldr	r3, [r7, #4]
 8040af0:	681b      	ldr	r3, [r3, #0]
 8040af2:	4618      	mov	r0, r3
 8040af4:	f001 fdd8 	bl	80426a8 <USB_ReadInterrupts>
 8040af8:	4603      	mov	r3, r0
 8040afa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8040afe:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8040b02:	d139      	bne.n	8040b78 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8040b04:	687b      	ldr	r3, [r7, #4]
 8040b06:	681b      	ldr	r3, [r3, #0]
 8040b08:	4618      	mov	r0, r3
 8040b0a:	f001 fe4c 	bl	80427a6 <USB_HC_ReadInterrupt>
 8040b0e:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8040b10:	2300      	movs	r3, #0
 8040b12:	617b      	str	r3, [r7, #20]
 8040b14:	e025      	b.n	8040b62 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8040b16:	697b      	ldr	r3, [r7, #20]
 8040b18:	f003 030f 	and.w	r3, r3, #15
 8040b1c:	68ba      	ldr	r2, [r7, #8]
 8040b1e:	fa22 f303 	lsr.w	r3, r2, r3
 8040b22:	f003 0301 	and.w	r3, r3, #1
 8040b26:	2b00      	cmp	r3, #0
 8040b28:	d018      	beq.n	8040b5c <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8040b2a:	697b      	ldr	r3, [r7, #20]
 8040b2c:	015a      	lsls	r2, r3, #5
 8040b2e:	68fb      	ldr	r3, [r7, #12]
 8040b30:	4413      	add	r3, r2
 8040b32:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8040b36:	681b      	ldr	r3, [r3, #0]
 8040b38:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8040b3c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8040b40:	d106      	bne.n	8040b50 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8040b42:	697b      	ldr	r3, [r7, #20]
 8040b44:	b2db      	uxtb	r3, r3
 8040b46:	4619      	mov	r1, r3
 8040b48:	6878      	ldr	r0, [r7, #4]
 8040b4a:	f000 f859 	bl	8040c00 <HCD_HC_IN_IRQHandler>
 8040b4e:	e005      	b.n	8040b5c <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8040b50:	697b      	ldr	r3, [r7, #20]
 8040b52:	b2db      	uxtb	r3, r3
 8040b54:	4619      	mov	r1, r3
 8040b56:	6878      	ldr	r0, [r7, #4]
 8040b58:	f000 febb 	bl	80418d2 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8040b5c:	697b      	ldr	r3, [r7, #20]
 8040b5e:	3301      	adds	r3, #1
 8040b60:	617b      	str	r3, [r7, #20]
 8040b62:	687b      	ldr	r3, [r7, #4]
 8040b64:	795b      	ldrb	r3, [r3, #5]
 8040b66:	461a      	mov	r2, r3
 8040b68:	697b      	ldr	r3, [r7, #20]
 8040b6a:	4293      	cmp	r3, r2
 8040b6c:	d3d3      	bcc.n	8040b16 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8040b6e:	687b      	ldr	r3, [r7, #4]
 8040b70:	681b      	ldr	r3, [r3, #0]
 8040b72:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8040b76:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8040b78:	687b      	ldr	r3, [r7, #4]
 8040b7a:	681b      	ldr	r3, [r3, #0]
 8040b7c:	4618      	mov	r0, r3
 8040b7e:	f001 fd93 	bl	80426a8 <USB_ReadInterrupts>
 8040b82:	4603      	mov	r3, r0
 8040b84:	f003 0310 	and.w	r3, r3, #16
 8040b88:	2b10      	cmp	r3, #16
 8040b8a:	d101      	bne.n	8040b90 <HAL_HCD_IRQHandler+0x1ea>
 8040b8c:	2301      	movs	r3, #1
 8040b8e:	e000      	b.n	8040b92 <HAL_HCD_IRQHandler+0x1ec>
 8040b90:	2300      	movs	r3, #0
 8040b92:	2b00      	cmp	r3, #0
 8040b94:	d014      	beq.n	8040bc0 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8040b96:	687b      	ldr	r3, [r7, #4]
 8040b98:	681b      	ldr	r3, [r3, #0]
 8040b9a:	699a      	ldr	r2, [r3, #24]
 8040b9c:	687b      	ldr	r3, [r7, #4]
 8040b9e:	681b      	ldr	r3, [r3, #0]
 8040ba0:	f022 0210 	bic.w	r2, r2, #16
 8040ba4:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8040ba6:	6878      	ldr	r0, [r7, #4]
 8040ba8:	f001 fb52 	bl	8042250 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8040bac:	687b      	ldr	r3, [r7, #4]
 8040bae:	681b      	ldr	r3, [r3, #0]
 8040bb0:	699a      	ldr	r2, [r3, #24]
 8040bb2:	687b      	ldr	r3, [r7, #4]
 8040bb4:	681b      	ldr	r3, [r3, #0]
 8040bb6:	f042 0210 	orr.w	r2, r2, #16
 8040bba:	619a      	str	r2, [r3, #24]
 8040bbc:	e000      	b.n	8040bc0 <HAL_HCD_IRQHandler+0x21a>
      return;
 8040bbe:	bf00      	nop
    }
  }
}
 8040bc0:	3718      	adds	r7, #24
 8040bc2:	46bd      	mov	sp, r7
 8040bc4:	bd80      	pop	{r7, pc}

08040bc6 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8040bc6:	b580      	push	{r7, lr}
 8040bc8:	b082      	sub	sp, #8
 8040bca:	af00      	add	r7, sp, #0
 8040bcc:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8040bce:	687b      	ldr	r3, [r7, #4]
 8040bd0:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8040bd4:	2b01      	cmp	r3, #1
 8040bd6:	d101      	bne.n	8040bdc <HAL_HCD_Stop+0x16>
 8040bd8:	2302      	movs	r3, #2
 8040bda:	e00d      	b.n	8040bf8 <HAL_HCD_Stop+0x32>
 8040bdc:	687b      	ldr	r3, [r7, #4]
 8040bde:	2201      	movs	r2, #1
 8040be0:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8040be4:	687b      	ldr	r3, [r7, #4]
 8040be6:	681b      	ldr	r3, [r3, #0]
 8040be8:	4618      	mov	r0, r3
 8040bea:	f001 ff0d 	bl	8042a08 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8040bee:	687b      	ldr	r3, [r7, #4]
 8040bf0:	2200      	movs	r2, #0
 8040bf2:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8040bf6:	2300      	movs	r3, #0
}
 8040bf8:	4618      	mov	r0, r3
 8040bfa:	3708      	adds	r7, #8
 8040bfc:	46bd      	mov	sp, r7
 8040bfe:	bd80      	pop	{r7, pc}

08040c00 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8040c00:	b580      	push	{r7, lr}
 8040c02:	b086      	sub	sp, #24
 8040c04:	af00      	add	r7, sp, #0
 8040c06:	6078      	str	r0, [r7, #4]
 8040c08:	460b      	mov	r3, r1
 8040c0a:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8040c0c:	687b      	ldr	r3, [r7, #4]
 8040c0e:	681b      	ldr	r3, [r3, #0]
 8040c10:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8040c12:	697b      	ldr	r3, [r7, #20]
 8040c14:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8040c16:	687b      	ldr	r3, [r7, #4]
 8040c18:	681b      	ldr	r3, [r3, #0]
 8040c1a:	78fa      	ldrb	r2, [r7, #3]
 8040c1c:	4611      	mov	r1, r2
 8040c1e:	4618      	mov	r0, r3
 8040c20:	f001 fd55 	bl	80426ce <USB_ReadChInterrupts>
 8040c24:	4603      	mov	r3, r0
 8040c26:	f003 0304 	and.w	r3, r3, #4
 8040c2a:	2b04      	cmp	r3, #4
 8040c2c:	d11a      	bne.n	8040c64 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8040c2e:	78fb      	ldrb	r3, [r7, #3]
 8040c30:	015a      	lsls	r2, r3, #5
 8040c32:	693b      	ldr	r3, [r7, #16]
 8040c34:	4413      	add	r3, r2
 8040c36:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8040c3a:	461a      	mov	r2, r3
 8040c3c:	2304      	movs	r3, #4
 8040c3e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8040c40:	78fa      	ldrb	r2, [r7, #3]
 8040c42:	6879      	ldr	r1, [r7, #4]
 8040c44:	4613      	mov	r3, r2
 8040c46:	011b      	lsls	r3, r3, #4
 8040c48:	1a9b      	subs	r3, r3, r2
 8040c4a:	009b      	lsls	r3, r3, #2
 8040c4c:	440b      	add	r3, r1
 8040c4e:	334d      	adds	r3, #77	@ 0x4d
 8040c50:	2207      	movs	r2, #7
 8040c52:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8040c54:	687b      	ldr	r3, [r7, #4]
 8040c56:	681b      	ldr	r3, [r3, #0]
 8040c58:	78fa      	ldrb	r2, [r7, #3]
 8040c5a:	4611      	mov	r1, r2
 8040c5c:	4618      	mov	r0, r3
 8040c5e:	f001 fdb3 	bl	80427c8 <USB_HC_Halt>
 8040c62:	e09e      	b.n	8040da2 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8040c64:	687b      	ldr	r3, [r7, #4]
 8040c66:	681b      	ldr	r3, [r3, #0]
 8040c68:	78fa      	ldrb	r2, [r7, #3]
 8040c6a:	4611      	mov	r1, r2
 8040c6c:	4618      	mov	r0, r3
 8040c6e:	f001 fd2e 	bl	80426ce <USB_ReadChInterrupts>
 8040c72:	4603      	mov	r3, r0
 8040c74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8040c78:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8040c7c:	d11b      	bne.n	8040cb6 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8040c7e:	78fb      	ldrb	r3, [r7, #3]
 8040c80:	015a      	lsls	r2, r3, #5
 8040c82:	693b      	ldr	r3, [r7, #16]
 8040c84:	4413      	add	r3, r2
 8040c86:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8040c8a:	461a      	mov	r2, r3
 8040c8c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8040c90:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8040c92:	78fa      	ldrb	r2, [r7, #3]
 8040c94:	6879      	ldr	r1, [r7, #4]
 8040c96:	4613      	mov	r3, r2
 8040c98:	011b      	lsls	r3, r3, #4
 8040c9a:	1a9b      	subs	r3, r3, r2
 8040c9c:	009b      	lsls	r3, r3, #2
 8040c9e:	440b      	add	r3, r1
 8040ca0:	334d      	adds	r3, #77	@ 0x4d
 8040ca2:	2208      	movs	r2, #8
 8040ca4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8040ca6:	687b      	ldr	r3, [r7, #4]
 8040ca8:	681b      	ldr	r3, [r3, #0]
 8040caa:	78fa      	ldrb	r2, [r7, #3]
 8040cac:	4611      	mov	r1, r2
 8040cae:	4618      	mov	r0, r3
 8040cb0:	f001 fd8a 	bl	80427c8 <USB_HC_Halt>
 8040cb4:	e075      	b.n	8040da2 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8040cb6:	687b      	ldr	r3, [r7, #4]
 8040cb8:	681b      	ldr	r3, [r3, #0]
 8040cba:	78fa      	ldrb	r2, [r7, #3]
 8040cbc:	4611      	mov	r1, r2
 8040cbe:	4618      	mov	r0, r3
 8040cc0:	f001 fd05 	bl	80426ce <USB_ReadChInterrupts>
 8040cc4:	4603      	mov	r3, r0
 8040cc6:	f003 0308 	and.w	r3, r3, #8
 8040cca:	2b08      	cmp	r3, #8
 8040ccc:	d11a      	bne.n	8040d04 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8040cce:	78fb      	ldrb	r3, [r7, #3]
 8040cd0:	015a      	lsls	r2, r3, #5
 8040cd2:	693b      	ldr	r3, [r7, #16]
 8040cd4:	4413      	add	r3, r2
 8040cd6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8040cda:	461a      	mov	r2, r3
 8040cdc:	2308      	movs	r3, #8
 8040cde:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8040ce0:	78fa      	ldrb	r2, [r7, #3]
 8040ce2:	6879      	ldr	r1, [r7, #4]
 8040ce4:	4613      	mov	r3, r2
 8040ce6:	011b      	lsls	r3, r3, #4
 8040ce8:	1a9b      	subs	r3, r3, r2
 8040cea:	009b      	lsls	r3, r3, #2
 8040cec:	440b      	add	r3, r1
 8040cee:	334d      	adds	r3, #77	@ 0x4d
 8040cf0:	2206      	movs	r2, #6
 8040cf2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8040cf4:	687b      	ldr	r3, [r7, #4]
 8040cf6:	681b      	ldr	r3, [r3, #0]
 8040cf8:	78fa      	ldrb	r2, [r7, #3]
 8040cfa:	4611      	mov	r1, r2
 8040cfc:	4618      	mov	r0, r3
 8040cfe:	f001 fd63 	bl	80427c8 <USB_HC_Halt>
 8040d02:	e04e      	b.n	8040da2 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8040d04:	687b      	ldr	r3, [r7, #4]
 8040d06:	681b      	ldr	r3, [r3, #0]
 8040d08:	78fa      	ldrb	r2, [r7, #3]
 8040d0a:	4611      	mov	r1, r2
 8040d0c:	4618      	mov	r0, r3
 8040d0e:	f001 fcde 	bl	80426ce <USB_ReadChInterrupts>
 8040d12:	4603      	mov	r3, r0
 8040d14:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8040d18:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8040d1c:	d11b      	bne.n	8040d56 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8040d1e:	78fb      	ldrb	r3, [r7, #3]
 8040d20:	015a      	lsls	r2, r3, #5
 8040d22:	693b      	ldr	r3, [r7, #16]
 8040d24:	4413      	add	r3, r2
 8040d26:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8040d2a:	461a      	mov	r2, r3
 8040d2c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8040d30:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8040d32:	78fa      	ldrb	r2, [r7, #3]
 8040d34:	6879      	ldr	r1, [r7, #4]
 8040d36:	4613      	mov	r3, r2
 8040d38:	011b      	lsls	r3, r3, #4
 8040d3a:	1a9b      	subs	r3, r3, r2
 8040d3c:	009b      	lsls	r3, r3, #2
 8040d3e:	440b      	add	r3, r1
 8040d40:	334d      	adds	r3, #77	@ 0x4d
 8040d42:	2209      	movs	r2, #9
 8040d44:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8040d46:	687b      	ldr	r3, [r7, #4]
 8040d48:	681b      	ldr	r3, [r3, #0]
 8040d4a:	78fa      	ldrb	r2, [r7, #3]
 8040d4c:	4611      	mov	r1, r2
 8040d4e:	4618      	mov	r0, r3
 8040d50:	f001 fd3a 	bl	80427c8 <USB_HC_Halt>
 8040d54:	e025      	b.n	8040da2 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8040d56:	687b      	ldr	r3, [r7, #4]
 8040d58:	681b      	ldr	r3, [r3, #0]
 8040d5a:	78fa      	ldrb	r2, [r7, #3]
 8040d5c:	4611      	mov	r1, r2
 8040d5e:	4618      	mov	r0, r3
 8040d60:	f001 fcb5 	bl	80426ce <USB_ReadChInterrupts>
 8040d64:	4603      	mov	r3, r0
 8040d66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8040d6a:	2b80      	cmp	r3, #128	@ 0x80
 8040d6c:	d119      	bne.n	8040da2 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8040d6e:	78fb      	ldrb	r3, [r7, #3]
 8040d70:	015a      	lsls	r2, r3, #5
 8040d72:	693b      	ldr	r3, [r7, #16]
 8040d74:	4413      	add	r3, r2
 8040d76:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8040d7a:	461a      	mov	r2, r3
 8040d7c:	2380      	movs	r3, #128	@ 0x80
 8040d7e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8040d80:	78fa      	ldrb	r2, [r7, #3]
 8040d82:	6879      	ldr	r1, [r7, #4]
 8040d84:	4613      	mov	r3, r2
 8040d86:	011b      	lsls	r3, r3, #4
 8040d88:	1a9b      	subs	r3, r3, r2
 8040d8a:	009b      	lsls	r3, r3, #2
 8040d8c:	440b      	add	r3, r1
 8040d8e:	334d      	adds	r3, #77	@ 0x4d
 8040d90:	2207      	movs	r2, #7
 8040d92:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8040d94:	687b      	ldr	r3, [r7, #4]
 8040d96:	681b      	ldr	r3, [r3, #0]
 8040d98:	78fa      	ldrb	r2, [r7, #3]
 8040d9a:	4611      	mov	r1, r2
 8040d9c:	4618      	mov	r0, r3
 8040d9e:	f001 fd13 	bl	80427c8 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8040da2:	687b      	ldr	r3, [r7, #4]
 8040da4:	681b      	ldr	r3, [r3, #0]
 8040da6:	78fa      	ldrb	r2, [r7, #3]
 8040da8:	4611      	mov	r1, r2
 8040daa:	4618      	mov	r0, r3
 8040dac:	f001 fc8f 	bl	80426ce <USB_ReadChInterrupts>
 8040db0:	4603      	mov	r3, r0
 8040db2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8040db6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8040dba:	d112      	bne.n	8040de2 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8040dbc:	687b      	ldr	r3, [r7, #4]
 8040dbe:	681b      	ldr	r3, [r3, #0]
 8040dc0:	78fa      	ldrb	r2, [r7, #3]
 8040dc2:	4611      	mov	r1, r2
 8040dc4:	4618      	mov	r0, r3
 8040dc6:	f001 fcff 	bl	80427c8 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8040dca:	78fb      	ldrb	r3, [r7, #3]
 8040dcc:	015a      	lsls	r2, r3, #5
 8040dce:	693b      	ldr	r3, [r7, #16]
 8040dd0:	4413      	add	r3, r2
 8040dd2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8040dd6:	461a      	mov	r2, r3
 8040dd8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8040ddc:	6093      	str	r3, [r2, #8]
 8040dde:	f000 bd75 	b.w	80418cc <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8040de2:	687b      	ldr	r3, [r7, #4]
 8040de4:	681b      	ldr	r3, [r3, #0]
 8040de6:	78fa      	ldrb	r2, [r7, #3]
 8040de8:	4611      	mov	r1, r2
 8040dea:	4618      	mov	r0, r3
 8040dec:	f001 fc6f 	bl	80426ce <USB_ReadChInterrupts>
 8040df0:	4603      	mov	r3, r0
 8040df2:	f003 0301 	and.w	r3, r3, #1
 8040df6:	2b01      	cmp	r3, #1
 8040df8:	f040 8128 	bne.w	804104c <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8040dfc:	78fb      	ldrb	r3, [r7, #3]
 8040dfe:	015a      	lsls	r2, r3, #5
 8040e00:	693b      	ldr	r3, [r7, #16]
 8040e02:	4413      	add	r3, r2
 8040e04:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8040e08:	461a      	mov	r2, r3
 8040e0a:	2320      	movs	r3, #32
 8040e0c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8040e0e:	78fa      	ldrb	r2, [r7, #3]
 8040e10:	6879      	ldr	r1, [r7, #4]
 8040e12:	4613      	mov	r3, r2
 8040e14:	011b      	lsls	r3, r3, #4
 8040e16:	1a9b      	subs	r3, r3, r2
 8040e18:	009b      	lsls	r3, r3, #2
 8040e1a:	440b      	add	r3, r1
 8040e1c:	331b      	adds	r3, #27
 8040e1e:	781b      	ldrb	r3, [r3, #0]
 8040e20:	2b01      	cmp	r3, #1
 8040e22:	d119      	bne.n	8040e58 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8040e24:	78fa      	ldrb	r2, [r7, #3]
 8040e26:	6879      	ldr	r1, [r7, #4]
 8040e28:	4613      	mov	r3, r2
 8040e2a:	011b      	lsls	r3, r3, #4
 8040e2c:	1a9b      	subs	r3, r3, r2
 8040e2e:	009b      	lsls	r3, r3, #2
 8040e30:	440b      	add	r3, r1
 8040e32:	331b      	adds	r3, #27
 8040e34:	2200      	movs	r2, #0
 8040e36:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8040e38:	78fb      	ldrb	r3, [r7, #3]
 8040e3a:	015a      	lsls	r2, r3, #5
 8040e3c:	693b      	ldr	r3, [r7, #16]
 8040e3e:	4413      	add	r3, r2
 8040e40:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8040e44:	685b      	ldr	r3, [r3, #4]
 8040e46:	78fa      	ldrb	r2, [r7, #3]
 8040e48:	0151      	lsls	r1, r2, #5
 8040e4a:	693a      	ldr	r2, [r7, #16]
 8040e4c:	440a      	add	r2, r1
 8040e4e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8040e52:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8040e56:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8040e58:	687b      	ldr	r3, [r7, #4]
 8040e5a:	799b      	ldrb	r3, [r3, #6]
 8040e5c:	2b00      	cmp	r3, #0
 8040e5e:	d01b      	beq.n	8040e98 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8040e60:	78fa      	ldrb	r2, [r7, #3]
 8040e62:	6879      	ldr	r1, [r7, #4]
 8040e64:	4613      	mov	r3, r2
 8040e66:	011b      	lsls	r3, r3, #4
 8040e68:	1a9b      	subs	r3, r3, r2
 8040e6a:	009b      	lsls	r3, r3, #2
 8040e6c:	440b      	add	r3, r1
 8040e6e:	3330      	adds	r3, #48	@ 0x30
 8040e70:	6819      	ldr	r1, [r3, #0]
 8040e72:	78fb      	ldrb	r3, [r7, #3]
 8040e74:	015a      	lsls	r2, r3, #5
 8040e76:	693b      	ldr	r3, [r7, #16]
 8040e78:	4413      	add	r3, r2
 8040e7a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8040e7e:	691b      	ldr	r3, [r3, #16]
 8040e80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8040e84:	78fa      	ldrb	r2, [r7, #3]
 8040e86:	1ac9      	subs	r1, r1, r3
 8040e88:	6878      	ldr	r0, [r7, #4]
 8040e8a:	4613      	mov	r3, r2
 8040e8c:	011b      	lsls	r3, r3, #4
 8040e8e:	1a9b      	subs	r3, r3, r2
 8040e90:	009b      	lsls	r3, r3, #2
 8040e92:	4403      	add	r3, r0
 8040e94:	3338      	adds	r3, #56	@ 0x38
 8040e96:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8040e98:	78fa      	ldrb	r2, [r7, #3]
 8040e9a:	6879      	ldr	r1, [r7, #4]
 8040e9c:	4613      	mov	r3, r2
 8040e9e:	011b      	lsls	r3, r3, #4
 8040ea0:	1a9b      	subs	r3, r3, r2
 8040ea2:	009b      	lsls	r3, r3, #2
 8040ea4:	440b      	add	r3, r1
 8040ea6:	334d      	adds	r3, #77	@ 0x4d
 8040ea8:	2201      	movs	r2, #1
 8040eaa:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8040eac:	78fa      	ldrb	r2, [r7, #3]
 8040eae:	6879      	ldr	r1, [r7, #4]
 8040eb0:	4613      	mov	r3, r2
 8040eb2:	011b      	lsls	r3, r3, #4
 8040eb4:	1a9b      	subs	r3, r3, r2
 8040eb6:	009b      	lsls	r3, r3, #2
 8040eb8:	440b      	add	r3, r1
 8040eba:	3344      	adds	r3, #68	@ 0x44
 8040ebc:	2200      	movs	r2, #0
 8040ebe:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8040ec0:	78fb      	ldrb	r3, [r7, #3]
 8040ec2:	015a      	lsls	r2, r3, #5
 8040ec4:	693b      	ldr	r3, [r7, #16]
 8040ec6:	4413      	add	r3, r2
 8040ec8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8040ecc:	461a      	mov	r2, r3
 8040ece:	2301      	movs	r3, #1
 8040ed0:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8040ed2:	78fa      	ldrb	r2, [r7, #3]
 8040ed4:	6879      	ldr	r1, [r7, #4]
 8040ed6:	4613      	mov	r3, r2
 8040ed8:	011b      	lsls	r3, r3, #4
 8040eda:	1a9b      	subs	r3, r3, r2
 8040edc:	009b      	lsls	r3, r3, #2
 8040ede:	440b      	add	r3, r1
 8040ee0:	3326      	adds	r3, #38	@ 0x26
 8040ee2:	781b      	ldrb	r3, [r3, #0]
 8040ee4:	2b00      	cmp	r3, #0
 8040ee6:	d00a      	beq.n	8040efe <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8040ee8:	78fa      	ldrb	r2, [r7, #3]
 8040eea:	6879      	ldr	r1, [r7, #4]
 8040eec:	4613      	mov	r3, r2
 8040eee:	011b      	lsls	r3, r3, #4
 8040ef0:	1a9b      	subs	r3, r3, r2
 8040ef2:	009b      	lsls	r3, r3, #2
 8040ef4:	440b      	add	r3, r1
 8040ef6:	3326      	adds	r3, #38	@ 0x26
 8040ef8:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8040efa:	2b02      	cmp	r3, #2
 8040efc:	d110      	bne.n	8040f20 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8040efe:	687b      	ldr	r3, [r7, #4]
 8040f00:	681b      	ldr	r3, [r3, #0]
 8040f02:	78fa      	ldrb	r2, [r7, #3]
 8040f04:	4611      	mov	r1, r2
 8040f06:	4618      	mov	r0, r3
 8040f08:	f001 fc5e 	bl	80427c8 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8040f0c:	78fb      	ldrb	r3, [r7, #3]
 8040f0e:	015a      	lsls	r2, r3, #5
 8040f10:	693b      	ldr	r3, [r7, #16]
 8040f12:	4413      	add	r3, r2
 8040f14:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8040f18:	461a      	mov	r2, r3
 8040f1a:	2310      	movs	r3, #16
 8040f1c:	6093      	str	r3, [r2, #8]
 8040f1e:	e03d      	b.n	8040f9c <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8040f20:	78fa      	ldrb	r2, [r7, #3]
 8040f22:	6879      	ldr	r1, [r7, #4]
 8040f24:	4613      	mov	r3, r2
 8040f26:	011b      	lsls	r3, r3, #4
 8040f28:	1a9b      	subs	r3, r3, r2
 8040f2a:	009b      	lsls	r3, r3, #2
 8040f2c:	440b      	add	r3, r1
 8040f2e:	3326      	adds	r3, #38	@ 0x26
 8040f30:	781b      	ldrb	r3, [r3, #0]
 8040f32:	2b03      	cmp	r3, #3
 8040f34:	d00a      	beq.n	8040f4c <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8040f36:	78fa      	ldrb	r2, [r7, #3]
 8040f38:	6879      	ldr	r1, [r7, #4]
 8040f3a:	4613      	mov	r3, r2
 8040f3c:	011b      	lsls	r3, r3, #4
 8040f3e:	1a9b      	subs	r3, r3, r2
 8040f40:	009b      	lsls	r3, r3, #2
 8040f42:	440b      	add	r3, r1
 8040f44:	3326      	adds	r3, #38	@ 0x26
 8040f46:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8040f48:	2b01      	cmp	r3, #1
 8040f4a:	d127      	bne.n	8040f9c <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8040f4c:	78fb      	ldrb	r3, [r7, #3]
 8040f4e:	015a      	lsls	r2, r3, #5
 8040f50:	693b      	ldr	r3, [r7, #16]
 8040f52:	4413      	add	r3, r2
 8040f54:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8040f58:	681b      	ldr	r3, [r3, #0]
 8040f5a:	78fa      	ldrb	r2, [r7, #3]
 8040f5c:	0151      	lsls	r1, r2, #5
 8040f5e:	693a      	ldr	r2, [r7, #16]
 8040f60:	440a      	add	r2, r1
 8040f62:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8040f66:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8040f6a:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8040f6c:	78fa      	ldrb	r2, [r7, #3]
 8040f6e:	6879      	ldr	r1, [r7, #4]
 8040f70:	4613      	mov	r3, r2
 8040f72:	011b      	lsls	r3, r3, #4
 8040f74:	1a9b      	subs	r3, r3, r2
 8040f76:	009b      	lsls	r3, r3, #2
 8040f78:	440b      	add	r3, r1
 8040f7a:	334c      	adds	r3, #76	@ 0x4c
 8040f7c:	2201      	movs	r2, #1
 8040f7e:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8040f80:	78fa      	ldrb	r2, [r7, #3]
 8040f82:	6879      	ldr	r1, [r7, #4]
 8040f84:	4613      	mov	r3, r2
 8040f86:	011b      	lsls	r3, r3, #4
 8040f88:	1a9b      	subs	r3, r3, r2
 8040f8a:	009b      	lsls	r3, r3, #2
 8040f8c:	440b      	add	r3, r1
 8040f8e:	334c      	adds	r3, #76	@ 0x4c
 8040f90:	781a      	ldrb	r2, [r3, #0]
 8040f92:	78fb      	ldrb	r3, [r7, #3]
 8040f94:	4619      	mov	r1, r3
 8040f96:	6878      	ldr	r0, [r7, #4]
 8040f98:	f001 fe91 	bl	8042cbe <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8040f9c:	687b      	ldr	r3, [r7, #4]
 8040f9e:	799b      	ldrb	r3, [r3, #6]
 8040fa0:	2b01      	cmp	r3, #1
 8040fa2:	d13b      	bne.n	804101c <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8040fa4:	78fa      	ldrb	r2, [r7, #3]
 8040fa6:	6879      	ldr	r1, [r7, #4]
 8040fa8:	4613      	mov	r3, r2
 8040faa:	011b      	lsls	r3, r3, #4
 8040fac:	1a9b      	subs	r3, r3, r2
 8040fae:	009b      	lsls	r3, r3, #2
 8040fb0:	440b      	add	r3, r1
 8040fb2:	3338      	adds	r3, #56	@ 0x38
 8040fb4:	6819      	ldr	r1, [r3, #0]
 8040fb6:	78fa      	ldrb	r2, [r7, #3]
 8040fb8:	6878      	ldr	r0, [r7, #4]
 8040fba:	4613      	mov	r3, r2
 8040fbc:	011b      	lsls	r3, r3, #4
 8040fbe:	1a9b      	subs	r3, r3, r2
 8040fc0:	009b      	lsls	r3, r3, #2
 8040fc2:	4403      	add	r3, r0
 8040fc4:	3328      	adds	r3, #40	@ 0x28
 8040fc6:	881b      	ldrh	r3, [r3, #0]
 8040fc8:	440b      	add	r3, r1
 8040fca:	1e59      	subs	r1, r3, #1
 8040fcc:	78fa      	ldrb	r2, [r7, #3]
 8040fce:	6878      	ldr	r0, [r7, #4]
 8040fd0:	4613      	mov	r3, r2
 8040fd2:	011b      	lsls	r3, r3, #4
 8040fd4:	1a9b      	subs	r3, r3, r2
 8040fd6:	009b      	lsls	r3, r3, #2
 8040fd8:	4403      	add	r3, r0
 8040fda:	3328      	adds	r3, #40	@ 0x28
 8040fdc:	881b      	ldrh	r3, [r3, #0]
 8040fde:	fbb1 f3f3 	udiv	r3, r1, r3
 8040fe2:	f003 0301 	and.w	r3, r3, #1
 8040fe6:	2b00      	cmp	r3, #0
 8040fe8:	f000 8470 	beq.w	80418cc <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8040fec:	78fa      	ldrb	r2, [r7, #3]
 8040fee:	6879      	ldr	r1, [r7, #4]
 8040ff0:	4613      	mov	r3, r2
 8040ff2:	011b      	lsls	r3, r3, #4
 8040ff4:	1a9b      	subs	r3, r3, r2
 8040ff6:	009b      	lsls	r3, r3, #2
 8040ff8:	440b      	add	r3, r1
 8040ffa:	333c      	adds	r3, #60	@ 0x3c
 8040ffc:	781b      	ldrb	r3, [r3, #0]
 8040ffe:	78fa      	ldrb	r2, [r7, #3]
 8041000:	f083 0301 	eor.w	r3, r3, #1
 8041004:	b2d8      	uxtb	r0, r3
 8041006:	6879      	ldr	r1, [r7, #4]
 8041008:	4613      	mov	r3, r2
 804100a:	011b      	lsls	r3, r3, #4
 804100c:	1a9b      	subs	r3, r3, r2
 804100e:	009b      	lsls	r3, r3, #2
 8041010:	440b      	add	r3, r1
 8041012:	333c      	adds	r3, #60	@ 0x3c
 8041014:	4602      	mov	r2, r0
 8041016:	701a      	strb	r2, [r3, #0]
 8041018:	f000 bc58 	b.w	80418cc <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 804101c:	78fa      	ldrb	r2, [r7, #3]
 804101e:	6879      	ldr	r1, [r7, #4]
 8041020:	4613      	mov	r3, r2
 8041022:	011b      	lsls	r3, r3, #4
 8041024:	1a9b      	subs	r3, r3, r2
 8041026:	009b      	lsls	r3, r3, #2
 8041028:	440b      	add	r3, r1
 804102a:	333c      	adds	r3, #60	@ 0x3c
 804102c:	781b      	ldrb	r3, [r3, #0]
 804102e:	78fa      	ldrb	r2, [r7, #3]
 8041030:	f083 0301 	eor.w	r3, r3, #1
 8041034:	b2d8      	uxtb	r0, r3
 8041036:	6879      	ldr	r1, [r7, #4]
 8041038:	4613      	mov	r3, r2
 804103a:	011b      	lsls	r3, r3, #4
 804103c:	1a9b      	subs	r3, r3, r2
 804103e:	009b      	lsls	r3, r3, #2
 8041040:	440b      	add	r3, r1
 8041042:	333c      	adds	r3, #60	@ 0x3c
 8041044:	4602      	mov	r2, r0
 8041046:	701a      	strb	r2, [r3, #0]
 8041048:	f000 bc40 	b.w	80418cc <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 804104c:	687b      	ldr	r3, [r7, #4]
 804104e:	681b      	ldr	r3, [r3, #0]
 8041050:	78fa      	ldrb	r2, [r7, #3]
 8041052:	4611      	mov	r1, r2
 8041054:	4618      	mov	r0, r3
 8041056:	f001 fb3a 	bl	80426ce <USB_ReadChInterrupts>
 804105a:	4603      	mov	r3, r0
 804105c:	f003 0320 	and.w	r3, r3, #32
 8041060:	2b20      	cmp	r3, #32
 8041062:	d131      	bne.n	80410c8 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8041064:	78fb      	ldrb	r3, [r7, #3]
 8041066:	015a      	lsls	r2, r3, #5
 8041068:	693b      	ldr	r3, [r7, #16]
 804106a:	4413      	add	r3, r2
 804106c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8041070:	461a      	mov	r2, r3
 8041072:	2320      	movs	r3, #32
 8041074:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8041076:	78fa      	ldrb	r2, [r7, #3]
 8041078:	6879      	ldr	r1, [r7, #4]
 804107a:	4613      	mov	r3, r2
 804107c:	011b      	lsls	r3, r3, #4
 804107e:	1a9b      	subs	r3, r3, r2
 8041080:	009b      	lsls	r3, r3, #2
 8041082:	440b      	add	r3, r1
 8041084:	331a      	adds	r3, #26
 8041086:	781b      	ldrb	r3, [r3, #0]
 8041088:	2b01      	cmp	r3, #1
 804108a:	f040 841f 	bne.w	80418cc <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 804108e:	78fa      	ldrb	r2, [r7, #3]
 8041090:	6879      	ldr	r1, [r7, #4]
 8041092:	4613      	mov	r3, r2
 8041094:	011b      	lsls	r3, r3, #4
 8041096:	1a9b      	subs	r3, r3, r2
 8041098:	009b      	lsls	r3, r3, #2
 804109a:	440b      	add	r3, r1
 804109c:	331b      	adds	r3, #27
 804109e:	2201      	movs	r2, #1
 80410a0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80410a2:	78fa      	ldrb	r2, [r7, #3]
 80410a4:	6879      	ldr	r1, [r7, #4]
 80410a6:	4613      	mov	r3, r2
 80410a8:	011b      	lsls	r3, r3, #4
 80410aa:	1a9b      	subs	r3, r3, r2
 80410ac:	009b      	lsls	r3, r3, #2
 80410ae:	440b      	add	r3, r1
 80410b0:	334d      	adds	r3, #77	@ 0x4d
 80410b2:	2203      	movs	r2, #3
 80410b4:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80410b6:	687b      	ldr	r3, [r7, #4]
 80410b8:	681b      	ldr	r3, [r3, #0]
 80410ba:	78fa      	ldrb	r2, [r7, #3]
 80410bc:	4611      	mov	r1, r2
 80410be:	4618      	mov	r0, r3
 80410c0:	f001 fb82 	bl	80427c8 <USB_HC_Halt>
 80410c4:	f000 bc02 	b.w	80418cc <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80410c8:	687b      	ldr	r3, [r7, #4]
 80410ca:	681b      	ldr	r3, [r3, #0]
 80410cc:	78fa      	ldrb	r2, [r7, #3]
 80410ce:	4611      	mov	r1, r2
 80410d0:	4618      	mov	r0, r3
 80410d2:	f001 fafc 	bl	80426ce <USB_ReadChInterrupts>
 80410d6:	4603      	mov	r3, r0
 80410d8:	f003 0302 	and.w	r3, r3, #2
 80410dc:	2b02      	cmp	r3, #2
 80410de:	f040 8305 	bne.w	80416ec <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80410e2:	78fb      	ldrb	r3, [r7, #3]
 80410e4:	015a      	lsls	r2, r3, #5
 80410e6:	693b      	ldr	r3, [r7, #16]
 80410e8:	4413      	add	r3, r2
 80410ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80410ee:	461a      	mov	r2, r3
 80410f0:	2302      	movs	r3, #2
 80410f2:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80410f4:	78fa      	ldrb	r2, [r7, #3]
 80410f6:	6879      	ldr	r1, [r7, #4]
 80410f8:	4613      	mov	r3, r2
 80410fa:	011b      	lsls	r3, r3, #4
 80410fc:	1a9b      	subs	r3, r3, r2
 80410fe:	009b      	lsls	r3, r3, #2
 8041100:	440b      	add	r3, r1
 8041102:	334d      	adds	r3, #77	@ 0x4d
 8041104:	781b      	ldrb	r3, [r3, #0]
 8041106:	2b01      	cmp	r3, #1
 8041108:	d114      	bne.n	8041134 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 804110a:	78fa      	ldrb	r2, [r7, #3]
 804110c:	6879      	ldr	r1, [r7, #4]
 804110e:	4613      	mov	r3, r2
 8041110:	011b      	lsls	r3, r3, #4
 8041112:	1a9b      	subs	r3, r3, r2
 8041114:	009b      	lsls	r3, r3, #2
 8041116:	440b      	add	r3, r1
 8041118:	334d      	adds	r3, #77	@ 0x4d
 804111a:	2202      	movs	r2, #2
 804111c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 804111e:	78fa      	ldrb	r2, [r7, #3]
 8041120:	6879      	ldr	r1, [r7, #4]
 8041122:	4613      	mov	r3, r2
 8041124:	011b      	lsls	r3, r3, #4
 8041126:	1a9b      	subs	r3, r3, r2
 8041128:	009b      	lsls	r3, r3, #2
 804112a:	440b      	add	r3, r1
 804112c:	334c      	adds	r3, #76	@ 0x4c
 804112e:	2201      	movs	r2, #1
 8041130:	701a      	strb	r2, [r3, #0]
 8041132:	e2cc      	b.n	80416ce <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8041134:	78fa      	ldrb	r2, [r7, #3]
 8041136:	6879      	ldr	r1, [r7, #4]
 8041138:	4613      	mov	r3, r2
 804113a:	011b      	lsls	r3, r3, #4
 804113c:	1a9b      	subs	r3, r3, r2
 804113e:	009b      	lsls	r3, r3, #2
 8041140:	440b      	add	r3, r1
 8041142:	334d      	adds	r3, #77	@ 0x4d
 8041144:	781b      	ldrb	r3, [r3, #0]
 8041146:	2b06      	cmp	r3, #6
 8041148:	d114      	bne.n	8041174 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 804114a:	78fa      	ldrb	r2, [r7, #3]
 804114c:	6879      	ldr	r1, [r7, #4]
 804114e:	4613      	mov	r3, r2
 8041150:	011b      	lsls	r3, r3, #4
 8041152:	1a9b      	subs	r3, r3, r2
 8041154:	009b      	lsls	r3, r3, #2
 8041156:	440b      	add	r3, r1
 8041158:	334d      	adds	r3, #77	@ 0x4d
 804115a:	2202      	movs	r2, #2
 804115c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 804115e:	78fa      	ldrb	r2, [r7, #3]
 8041160:	6879      	ldr	r1, [r7, #4]
 8041162:	4613      	mov	r3, r2
 8041164:	011b      	lsls	r3, r3, #4
 8041166:	1a9b      	subs	r3, r3, r2
 8041168:	009b      	lsls	r3, r3, #2
 804116a:	440b      	add	r3, r1
 804116c:	334c      	adds	r3, #76	@ 0x4c
 804116e:	2205      	movs	r2, #5
 8041170:	701a      	strb	r2, [r3, #0]
 8041172:	e2ac      	b.n	80416ce <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8041174:	78fa      	ldrb	r2, [r7, #3]
 8041176:	6879      	ldr	r1, [r7, #4]
 8041178:	4613      	mov	r3, r2
 804117a:	011b      	lsls	r3, r3, #4
 804117c:	1a9b      	subs	r3, r3, r2
 804117e:	009b      	lsls	r3, r3, #2
 8041180:	440b      	add	r3, r1
 8041182:	334d      	adds	r3, #77	@ 0x4d
 8041184:	781b      	ldrb	r3, [r3, #0]
 8041186:	2b07      	cmp	r3, #7
 8041188:	d00b      	beq.n	80411a2 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 804118a:	78fa      	ldrb	r2, [r7, #3]
 804118c:	6879      	ldr	r1, [r7, #4]
 804118e:	4613      	mov	r3, r2
 8041190:	011b      	lsls	r3, r3, #4
 8041192:	1a9b      	subs	r3, r3, r2
 8041194:	009b      	lsls	r3, r3, #2
 8041196:	440b      	add	r3, r1
 8041198:	334d      	adds	r3, #77	@ 0x4d
 804119a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 804119c:	2b09      	cmp	r3, #9
 804119e:	f040 80a6 	bne.w	80412ee <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80411a2:	78fa      	ldrb	r2, [r7, #3]
 80411a4:	6879      	ldr	r1, [r7, #4]
 80411a6:	4613      	mov	r3, r2
 80411a8:	011b      	lsls	r3, r3, #4
 80411aa:	1a9b      	subs	r3, r3, r2
 80411ac:	009b      	lsls	r3, r3, #2
 80411ae:	440b      	add	r3, r1
 80411b0:	334d      	adds	r3, #77	@ 0x4d
 80411b2:	2202      	movs	r2, #2
 80411b4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80411b6:	78fa      	ldrb	r2, [r7, #3]
 80411b8:	6879      	ldr	r1, [r7, #4]
 80411ba:	4613      	mov	r3, r2
 80411bc:	011b      	lsls	r3, r3, #4
 80411be:	1a9b      	subs	r3, r3, r2
 80411c0:	009b      	lsls	r3, r3, #2
 80411c2:	440b      	add	r3, r1
 80411c4:	3344      	adds	r3, #68	@ 0x44
 80411c6:	681b      	ldr	r3, [r3, #0]
 80411c8:	1c59      	adds	r1, r3, #1
 80411ca:	6878      	ldr	r0, [r7, #4]
 80411cc:	4613      	mov	r3, r2
 80411ce:	011b      	lsls	r3, r3, #4
 80411d0:	1a9b      	subs	r3, r3, r2
 80411d2:	009b      	lsls	r3, r3, #2
 80411d4:	4403      	add	r3, r0
 80411d6:	3344      	adds	r3, #68	@ 0x44
 80411d8:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80411da:	78fa      	ldrb	r2, [r7, #3]
 80411dc:	6879      	ldr	r1, [r7, #4]
 80411de:	4613      	mov	r3, r2
 80411e0:	011b      	lsls	r3, r3, #4
 80411e2:	1a9b      	subs	r3, r3, r2
 80411e4:	009b      	lsls	r3, r3, #2
 80411e6:	440b      	add	r3, r1
 80411e8:	3344      	adds	r3, #68	@ 0x44
 80411ea:	681b      	ldr	r3, [r3, #0]
 80411ec:	2b02      	cmp	r3, #2
 80411ee:	d943      	bls.n	8041278 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80411f0:	78fa      	ldrb	r2, [r7, #3]
 80411f2:	6879      	ldr	r1, [r7, #4]
 80411f4:	4613      	mov	r3, r2
 80411f6:	011b      	lsls	r3, r3, #4
 80411f8:	1a9b      	subs	r3, r3, r2
 80411fa:	009b      	lsls	r3, r3, #2
 80411fc:	440b      	add	r3, r1
 80411fe:	3344      	adds	r3, #68	@ 0x44
 8041200:	2200      	movs	r2, #0
 8041202:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8041204:	78fa      	ldrb	r2, [r7, #3]
 8041206:	6879      	ldr	r1, [r7, #4]
 8041208:	4613      	mov	r3, r2
 804120a:	011b      	lsls	r3, r3, #4
 804120c:	1a9b      	subs	r3, r3, r2
 804120e:	009b      	lsls	r3, r3, #2
 8041210:	440b      	add	r3, r1
 8041212:	331a      	adds	r3, #26
 8041214:	781b      	ldrb	r3, [r3, #0]
 8041216:	2b01      	cmp	r3, #1
 8041218:	d123      	bne.n	8041262 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 804121a:	78fa      	ldrb	r2, [r7, #3]
 804121c:	6879      	ldr	r1, [r7, #4]
 804121e:	4613      	mov	r3, r2
 8041220:	011b      	lsls	r3, r3, #4
 8041222:	1a9b      	subs	r3, r3, r2
 8041224:	009b      	lsls	r3, r3, #2
 8041226:	440b      	add	r3, r1
 8041228:	331b      	adds	r3, #27
 804122a:	2200      	movs	r2, #0
 804122c:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 804122e:	78fa      	ldrb	r2, [r7, #3]
 8041230:	6879      	ldr	r1, [r7, #4]
 8041232:	4613      	mov	r3, r2
 8041234:	011b      	lsls	r3, r3, #4
 8041236:	1a9b      	subs	r3, r3, r2
 8041238:	009b      	lsls	r3, r3, #2
 804123a:	440b      	add	r3, r1
 804123c:	331c      	adds	r3, #28
 804123e:	2200      	movs	r2, #0
 8041240:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8041242:	78fb      	ldrb	r3, [r7, #3]
 8041244:	015a      	lsls	r2, r3, #5
 8041246:	693b      	ldr	r3, [r7, #16]
 8041248:	4413      	add	r3, r2
 804124a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 804124e:	685b      	ldr	r3, [r3, #4]
 8041250:	78fa      	ldrb	r2, [r7, #3]
 8041252:	0151      	lsls	r1, r2, #5
 8041254:	693a      	ldr	r2, [r7, #16]
 8041256:	440a      	add	r2, r1
 8041258:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 804125c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8041260:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8041262:	78fa      	ldrb	r2, [r7, #3]
 8041264:	6879      	ldr	r1, [r7, #4]
 8041266:	4613      	mov	r3, r2
 8041268:	011b      	lsls	r3, r3, #4
 804126a:	1a9b      	subs	r3, r3, r2
 804126c:	009b      	lsls	r3, r3, #2
 804126e:	440b      	add	r3, r1
 8041270:	334c      	adds	r3, #76	@ 0x4c
 8041272:	2204      	movs	r2, #4
 8041274:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8041276:	e229      	b.n	80416cc <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8041278:	78fa      	ldrb	r2, [r7, #3]
 804127a:	6879      	ldr	r1, [r7, #4]
 804127c:	4613      	mov	r3, r2
 804127e:	011b      	lsls	r3, r3, #4
 8041280:	1a9b      	subs	r3, r3, r2
 8041282:	009b      	lsls	r3, r3, #2
 8041284:	440b      	add	r3, r1
 8041286:	334c      	adds	r3, #76	@ 0x4c
 8041288:	2202      	movs	r2, #2
 804128a:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 804128c:	78fa      	ldrb	r2, [r7, #3]
 804128e:	6879      	ldr	r1, [r7, #4]
 8041290:	4613      	mov	r3, r2
 8041292:	011b      	lsls	r3, r3, #4
 8041294:	1a9b      	subs	r3, r3, r2
 8041296:	009b      	lsls	r3, r3, #2
 8041298:	440b      	add	r3, r1
 804129a:	3326      	adds	r3, #38	@ 0x26
 804129c:	781b      	ldrb	r3, [r3, #0]
 804129e:	2b00      	cmp	r3, #0
 80412a0:	d00b      	beq.n	80412ba <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80412a2:	78fa      	ldrb	r2, [r7, #3]
 80412a4:	6879      	ldr	r1, [r7, #4]
 80412a6:	4613      	mov	r3, r2
 80412a8:	011b      	lsls	r3, r3, #4
 80412aa:	1a9b      	subs	r3, r3, r2
 80412ac:	009b      	lsls	r3, r3, #2
 80412ae:	440b      	add	r3, r1
 80412b0:	3326      	adds	r3, #38	@ 0x26
 80412b2:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80412b4:	2b02      	cmp	r3, #2
 80412b6:	f040 8209 	bne.w	80416cc <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80412ba:	78fb      	ldrb	r3, [r7, #3]
 80412bc:	015a      	lsls	r2, r3, #5
 80412be:	693b      	ldr	r3, [r7, #16]
 80412c0:	4413      	add	r3, r2
 80412c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80412c6:	681b      	ldr	r3, [r3, #0]
 80412c8:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80412ca:	68fb      	ldr	r3, [r7, #12]
 80412cc:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80412d0:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80412d2:	68fb      	ldr	r3, [r7, #12]
 80412d4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80412d8:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80412da:	78fb      	ldrb	r3, [r7, #3]
 80412dc:	015a      	lsls	r2, r3, #5
 80412de:	693b      	ldr	r3, [r7, #16]
 80412e0:	4413      	add	r3, r2
 80412e2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80412e6:	461a      	mov	r2, r3
 80412e8:	68fb      	ldr	r3, [r7, #12]
 80412ea:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80412ec:	e1ee      	b.n	80416cc <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80412ee:	78fa      	ldrb	r2, [r7, #3]
 80412f0:	6879      	ldr	r1, [r7, #4]
 80412f2:	4613      	mov	r3, r2
 80412f4:	011b      	lsls	r3, r3, #4
 80412f6:	1a9b      	subs	r3, r3, r2
 80412f8:	009b      	lsls	r3, r3, #2
 80412fa:	440b      	add	r3, r1
 80412fc:	334d      	adds	r3, #77	@ 0x4d
 80412fe:	781b      	ldrb	r3, [r3, #0]
 8041300:	2b05      	cmp	r3, #5
 8041302:	f040 80c8 	bne.w	8041496 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8041306:	78fa      	ldrb	r2, [r7, #3]
 8041308:	6879      	ldr	r1, [r7, #4]
 804130a:	4613      	mov	r3, r2
 804130c:	011b      	lsls	r3, r3, #4
 804130e:	1a9b      	subs	r3, r3, r2
 8041310:	009b      	lsls	r3, r3, #2
 8041312:	440b      	add	r3, r1
 8041314:	334d      	adds	r3, #77	@ 0x4d
 8041316:	2202      	movs	r2, #2
 8041318:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 804131a:	78fa      	ldrb	r2, [r7, #3]
 804131c:	6879      	ldr	r1, [r7, #4]
 804131e:	4613      	mov	r3, r2
 8041320:	011b      	lsls	r3, r3, #4
 8041322:	1a9b      	subs	r3, r3, r2
 8041324:	009b      	lsls	r3, r3, #2
 8041326:	440b      	add	r3, r1
 8041328:	331b      	adds	r3, #27
 804132a:	781b      	ldrb	r3, [r3, #0]
 804132c:	2b01      	cmp	r3, #1
 804132e:	f040 81ce 	bne.w	80416ce <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8041332:	78fa      	ldrb	r2, [r7, #3]
 8041334:	6879      	ldr	r1, [r7, #4]
 8041336:	4613      	mov	r3, r2
 8041338:	011b      	lsls	r3, r3, #4
 804133a:	1a9b      	subs	r3, r3, r2
 804133c:	009b      	lsls	r3, r3, #2
 804133e:	440b      	add	r3, r1
 8041340:	3326      	adds	r3, #38	@ 0x26
 8041342:	781b      	ldrb	r3, [r3, #0]
 8041344:	2b03      	cmp	r3, #3
 8041346:	d16b      	bne.n	8041420 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8041348:	78fa      	ldrb	r2, [r7, #3]
 804134a:	6879      	ldr	r1, [r7, #4]
 804134c:	4613      	mov	r3, r2
 804134e:	011b      	lsls	r3, r3, #4
 8041350:	1a9b      	subs	r3, r3, r2
 8041352:	009b      	lsls	r3, r3, #2
 8041354:	440b      	add	r3, r1
 8041356:	3348      	adds	r3, #72	@ 0x48
 8041358:	681b      	ldr	r3, [r3, #0]
 804135a:	1c59      	adds	r1, r3, #1
 804135c:	6878      	ldr	r0, [r7, #4]
 804135e:	4613      	mov	r3, r2
 8041360:	011b      	lsls	r3, r3, #4
 8041362:	1a9b      	subs	r3, r3, r2
 8041364:	009b      	lsls	r3, r3, #2
 8041366:	4403      	add	r3, r0
 8041368:	3348      	adds	r3, #72	@ 0x48
 804136a:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 804136c:	78fa      	ldrb	r2, [r7, #3]
 804136e:	6879      	ldr	r1, [r7, #4]
 8041370:	4613      	mov	r3, r2
 8041372:	011b      	lsls	r3, r3, #4
 8041374:	1a9b      	subs	r3, r3, r2
 8041376:	009b      	lsls	r3, r3, #2
 8041378:	440b      	add	r3, r1
 804137a:	3348      	adds	r3, #72	@ 0x48
 804137c:	681b      	ldr	r3, [r3, #0]
 804137e:	2b02      	cmp	r3, #2
 8041380:	d943      	bls.n	804140a <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8041382:	78fa      	ldrb	r2, [r7, #3]
 8041384:	6879      	ldr	r1, [r7, #4]
 8041386:	4613      	mov	r3, r2
 8041388:	011b      	lsls	r3, r3, #4
 804138a:	1a9b      	subs	r3, r3, r2
 804138c:	009b      	lsls	r3, r3, #2
 804138e:	440b      	add	r3, r1
 8041390:	3348      	adds	r3, #72	@ 0x48
 8041392:	2200      	movs	r2, #0
 8041394:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8041396:	78fa      	ldrb	r2, [r7, #3]
 8041398:	6879      	ldr	r1, [r7, #4]
 804139a:	4613      	mov	r3, r2
 804139c:	011b      	lsls	r3, r3, #4
 804139e:	1a9b      	subs	r3, r3, r2
 80413a0:	009b      	lsls	r3, r3, #2
 80413a2:	440b      	add	r3, r1
 80413a4:	331b      	adds	r3, #27
 80413a6:	2200      	movs	r2, #0
 80413a8:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 80413aa:	78fa      	ldrb	r2, [r7, #3]
 80413ac:	6879      	ldr	r1, [r7, #4]
 80413ae:	4613      	mov	r3, r2
 80413b0:	011b      	lsls	r3, r3, #4
 80413b2:	1a9b      	subs	r3, r3, r2
 80413b4:	009b      	lsls	r3, r3, #2
 80413b6:	440b      	add	r3, r1
 80413b8:	3344      	adds	r3, #68	@ 0x44
 80413ba:	681b      	ldr	r3, [r3, #0]
 80413bc:	2b02      	cmp	r3, #2
 80413be:	d809      	bhi.n	80413d4 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 80413c0:	78fa      	ldrb	r2, [r7, #3]
 80413c2:	6879      	ldr	r1, [r7, #4]
 80413c4:	4613      	mov	r3, r2
 80413c6:	011b      	lsls	r3, r3, #4
 80413c8:	1a9b      	subs	r3, r3, r2
 80413ca:	009b      	lsls	r3, r3, #2
 80413cc:	440b      	add	r3, r1
 80413ce:	331c      	adds	r3, #28
 80413d0:	2201      	movs	r2, #1
 80413d2:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80413d4:	78fb      	ldrb	r3, [r7, #3]
 80413d6:	015a      	lsls	r2, r3, #5
 80413d8:	693b      	ldr	r3, [r7, #16]
 80413da:	4413      	add	r3, r2
 80413dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80413e0:	685b      	ldr	r3, [r3, #4]
 80413e2:	78fa      	ldrb	r2, [r7, #3]
 80413e4:	0151      	lsls	r1, r2, #5
 80413e6:	693a      	ldr	r2, [r7, #16]
 80413e8:	440a      	add	r2, r1
 80413ea:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80413ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80413f2:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 80413f4:	78fa      	ldrb	r2, [r7, #3]
 80413f6:	6879      	ldr	r1, [r7, #4]
 80413f8:	4613      	mov	r3, r2
 80413fa:	011b      	lsls	r3, r3, #4
 80413fc:	1a9b      	subs	r3, r3, r2
 80413fe:	009b      	lsls	r3, r3, #2
 8041400:	440b      	add	r3, r1
 8041402:	334c      	adds	r3, #76	@ 0x4c
 8041404:	2204      	movs	r2, #4
 8041406:	701a      	strb	r2, [r3, #0]
 8041408:	e014      	b.n	8041434 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 804140a:	78fa      	ldrb	r2, [r7, #3]
 804140c:	6879      	ldr	r1, [r7, #4]
 804140e:	4613      	mov	r3, r2
 8041410:	011b      	lsls	r3, r3, #4
 8041412:	1a9b      	subs	r3, r3, r2
 8041414:	009b      	lsls	r3, r3, #2
 8041416:	440b      	add	r3, r1
 8041418:	334c      	adds	r3, #76	@ 0x4c
 804141a:	2202      	movs	r2, #2
 804141c:	701a      	strb	r2, [r3, #0]
 804141e:	e009      	b.n	8041434 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8041420:	78fa      	ldrb	r2, [r7, #3]
 8041422:	6879      	ldr	r1, [r7, #4]
 8041424:	4613      	mov	r3, r2
 8041426:	011b      	lsls	r3, r3, #4
 8041428:	1a9b      	subs	r3, r3, r2
 804142a:	009b      	lsls	r3, r3, #2
 804142c:	440b      	add	r3, r1
 804142e:	334c      	adds	r3, #76	@ 0x4c
 8041430:	2202      	movs	r2, #2
 8041432:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8041434:	78fa      	ldrb	r2, [r7, #3]
 8041436:	6879      	ldr	r1, [r7, #4]
 8041438:	4613      	mov	r3, r2
 804143a:	011b      	lsls	r3, r3, #4
 804143c:	1a9b      	subs	r3, r3, r2
 804143e:	009b      	lsls	r3, r3, #2
 8041440:	440b      	add	r3, r1
 8041442:	3326      	adds	r3, #38	@ 0x26
 8041444:	781b      	ldrb	r3, [r3, #0]
 8041446:	2b00      	cmp	r3, #0
 8041448:	d00b      	beq.n	8041462 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 804144a:	78fa      	ldrb	r2, [r7, #3]
 804144c:	6879      	ldr	r1, [r7, #4]
 804144e:	4613      	mov	r3, r2
 8041450:	011b      	lsls	r3, r3, #4
 8041452:	1a9b      	subs	r3, r3, r2
 8041454:	009b      	lsls	r3, r3, #2
 8041456:	440b      	add	r3, r1
 8041458:	3326      	adds	r3, #38	@ 0x26
 804145a:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 804145c:	2b02      	cmp	r3, #2
 804145e:	f040 8136 	bne.w	80416ce <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8041462:	78fb      	ldrb	r3, [r7, #3]
 8041464:	015a      	lsls	r2, r3, #5
 8041466:	693b      	ldr	r3, [r7, #16]
 8041468:	4413      	add	r3, r2
 804146a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 804146e:	681b      	ldr	r3, [r3, #0]
 8041470:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8041472:	68fb      	ldr	r3, [r7, #12]
 8041474:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8041478:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 804147a:	68fb      	ldr	r3, [r7, #12]
 804147c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8041480:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8041482:	78fb      	ldrb	r3, [r7, #3]
 8041484:	015a      	lsls	r2, r3, #5
 8041486:	693b      	ldr	r3, [r7, #16]
 8041488:	4413      	add	r3, r2
 804148a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 804148e:	461a      	mov	r2, r3
 8041490:	68fb      	ldr	r3, [r7, #12]
 8041492:	6013      	str	r3, [r2, #0]
 8041494:	e11b      	b.n	80416ce <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8041496:	78fa      	ldrb	r2, [r7, #3]
 8041498:	6879      	ldr	r1, [r7, #4]
 804149a:	4613      	mov	r3, r2
 804149c:	011b      	lsls	r3, r3, #4
 804149e:	1a9b      	subs	r3, r3, r2
 80414a0:	009b      	lsls	r3, r3, #2
 80414a2:	440b      	add	r3, r1
 80414a4:	334d      	adds	r3, #77	@ 0x4d
 80414a6:	781b      	ldrb	r3, [r3, #0]
 80414a8:	2b03      	cmp	r3, #3
 80414aa:	f040 8081 	bne.w	80415b0 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80414ae:	78fa      	ldrb	r2, [r7, #3]
 80414b0:	6879      	ldr	r1, [r7, #4]
 80414b2:	4613      	mov	r3, r2
 80414b4:	011b      	lsls	r3, r3, #4
 80414b6:	1a9b      	subs	r3, r3, r2
 80414b8:	009b      	lsls	r3, r3, #2
 80414ba:	440b      	add	r3, r1
 80414bc:	334d      	adds	r3, #77	@ 0x4d
 80414be:	2202      	movs	r2, #2
 80414c0:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80414c2:	78fa      	ldrb	r2, [r7, #3]
 80414c4:	6879      	ldr	r1, [r7, #4]
 80414c6:	4613      	mov	r3, r2
 80414c8:	011b      	lsls	r3, r3, #4
 80414ca:	1a9b      	subs	r3, r3, r2
 80414cc:	009b      	lsls	r3, r3, #2
 80414ce:	440b      	add	r3, r1
 80414d0:	331b      	adds	r3, #27
 80414d2:	781b      	ldrb	r3, [r3, #0]
 80414d4:	2b01      	cmp	r3, #1
 80414d6:	f040 80fa 	bne.w	80416ce <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80414da:	78fa      	ldrb	r2, [r7, #3]
 80414dc:	6879      	ldr	r1, [r7, #4]
 80414de:	4613      	mov	r3, r2
 80414e0:	011b      	lsls	r3, r3, #4
 80414e2:	1a9b      	subs	r3, r3, r2
 80414e4:	009b      	lsls	r3, r3, #2
 80414e6:	440b      	add	r3, r1
 80414e8:	334c      	adds	r3, #76	@ 0x4c
 80414ea:	2202      	movs	r2, #2
 80414ec:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80414ee:	78fb      	ldrb	r3, [r7, #3]
 80414f0:	015a      	lsls	r2, r3, #5
 80414f2:	693b      	ldr	r3, [r7, #16]
 80414f4:	4413      	add	r3, r2
 80414f6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80414fa:	685b      	ldr	r3, [r3, #4]
 80414fc:	78fa      	ldrb	r2, [r7, #3]
 80414fe:	0151      	lsls	r1, r2, #5
 8041500:	693a      	ldr	r2, [r7, #16]
 8041502:	440a      	add	r2, r1
 8041504:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8041508:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 804150c:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 804150e:	78fb      	ldrb	r3, [r7, #3]
 8041510:	015a      	lsls	r2, r3, #5
 8041512:	693b      	ldr	r3, [r7, #16]
 8041514:	4413      	add	r3, r2
 8041516:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 804151a:	68db      	ldr	r3, [r3, #12]
 804151c:	78fa      	ldrb	r2, [r7, #3]
 804151e:	0151      	lsls	r1, r2, #5
 8041520:	693a      	ldr	r2, [r7, #16]
 8041522:	440a      	add	r2, r1
 8041524:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8041528:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 804152c:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 804152e:	78fb      	ldrb	r3, [r7, #3]
 8041530:	015a      	lsls	r2, r3, #5
 8041532:	693b      	ldr	r3, [r7, #16]
 8041534:	4413      	add	r3, r2
 8041536:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 804153a:	68db      	ldr	r3, [r3, #12]
 804153c:	78fa      	ldrb	r2, [r7, #3]
 804153e:	0151      	lsls	r1, r2, #5
 8041540:	693a      	ldr	r2, [r7, #16]
 8041542:	440a      	add	r2, r1
 8041544:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8041548:	f023 0320 	bic.w	r3, r3, #32
 804154c:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 804154e:	78fa      	ldrb	r2, [r7, #3]
 8041550:	6879      	ldr	r1, [r7, #4]
 8041552:	4613      	mov	r3, r2
 8041554:	011b      	lsls	r3, r3, #4
 8041556:	1a9b      	subs	r3, r3, r2
 8041558:	009b      	lsls	r3, r3, #2
 804155a:	440b      	add	r3, r1
 804155c:	3326      	adds	r3, #38	@ 0x26
 804155e:	781b      	ldrb	r3, [r3, #0]
 8041560:	2b00      	cmp	r3, #0
 8041562:	d00b      	beq.n	804157c <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8041564:	78fa      	ldrb	r2, [r7, #3]
 8041566:	6879      	ldr	r1, [r7, #4]
 8041568:	4613      	mov	r3, r2
 804156a:	011b      	lsls	r3, r3, #4
 804156c:	1a9b      	subs	r3, r3, r2
 804156e:	009b      	lsls	r3, r3, #2
 8041570:	440b      	add	r3, r1
 8041572:	3326      	adds	r3, #38	@ 0x26
 8041574:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8041576:	2b02      	cmp	r3, #2
 8041578:	f040 80a9 	bne.w	80416ce <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 804157c:	78fb      	ldrb	r3, [r7, #3]
 804157e:	015a      	lsls	r2, r3, #5
 8041580:	693b      	ldr	r3, [r7, #16]
 8041582:	4413      	add	r3, r2
 8041584:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8041588:	681b      	ldr	r3, [r3, #0]
 804158a:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 804158c:	68fb      	ldr	r3, [r7, #12]
 804158e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8041592:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8041594:	68fb      	ldr	r3, [r7, #12]
 8041596:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 804159a:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 804159c:	78fb      	ldrb	r3, [r7, #3]
 804159e:	015a      	lsls	r2, r3, #5
 80415a0:	693b      	ldr	r3, [r7, #16]
 80415a2:	4413      	add	r3, r2
 80415a4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80415a8:	461a      	mov	r2, r3
 80415aa:	68fb      	ldr	r3, [r7, #12]
 80415ac:	6013      	str	r3, [r2, #0]
 80415ae:	e08e      	b.n	80416ce <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80415b0:	78fa      	ldrb	r2, [r7, #3]
 80415b2:	6879      	ldr	r1, [r7, #4]
 80415b4:	4613      	mov	r3, r2
 80415b6:	011b      	lsls	r3, r3, #4
 80415b8:	1a9b      	subs	r3, r3, r2
 80415ba:	009b      	lsls	r3, r3, #2
 80415bc:	440b      	add	r3, r1
 80415be:	334d      	adds	r3, #77	@ 0x4d
 80415c0:	781b      	ldrb	r3, [r3, #0]
 80415c2:	2b04      	cmp	r3, #4
 80415c4:	d143      	bne.n	804164e <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80415c6:	78fa      	ldrb	r2, [r7, #3]
 80415c8:	6879      	ldr	r1, [r7, #4]
 80415ca:	4613      	mov	r3, r2
 80415cc:	011b      	lsls	r3, r3, #4
 80415ce:	1a9b      	subs	r3, r3, r2
 80415d0:	009b      	lsls	r3, r3, #2
 80415d2:	440b      	add	r3, r1
 80415d4:	334d      	adds	r3, #77	@ 0x4d
 80415d6:	2202      	movs	r2, #2
 80415d8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80415da:	78fa      	ldrb	r2, [r7, #3]
 80415dc:	6879      	ldr	r1, [r7, #4]
 80415de:	4613      	mov	r3, r2
 80415e0:	011b      	lsls	r3, r3, #4
 80415e2:	1a9b      	subs	r3, r3, r2
 80415e4:	009b      	lsls	r3, r3, #2
 80415e6:	440b      	add	r3, r1
 80415e8:	334c      	adds	r3, #76	@ 0x4c
 80415ea:	2202      	movs	r2, #2
 80415ec:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80415ee:	78fa      	ldrb	r2, [r7, #3]
 80415f0:	6879      	ldr	r1, [r7, #4]
 80415f2:	4613      	mov	r3, r2
 80415f4:	011b      	lsls	r3, r3, #4
 80415f6:	1a9b      	subs	r3, r3, r2
 80415f8:	009b      	lsls	r3, r3, #2
 80415fa:	440b      	add	r3, r1
 80415fc:	3326      	adds	r3, #38	@ 0x26
 80415fe:	781b      	ldrb	r3, [r3, #0]
 8041600:	2b00      	cmp	r3, #0
 8041602:	d00a      	beq.n	804161a <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8041604:	78fa      	ldrb	r2, [r7, #3]
 8041606:	6879      	ldr	r1, [r7, #4]
 8041608:	4613      	mov	r3, r2
 804160a:	011b      	lsls	r3, r3, #4
 804160c:	1a9b      	subs	r3, r3, r2
 804160e:	009b      	lsls	r3, r3, #2
 8041610:	440b      	add	r3, r1
 8041612:	3326      	adds	r3, #38	@ 0x26
 8041614:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8041616:	2b02      	cmp	r3, #2
 8041618:	d159      	bne.n	80416ce <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 804161a:	78fb      	ldrb	r3, [r7, #3]
 804161c:	015a      	lsls	r2, r3, #5
 804161e:	693b      	ldr	r3, [r7, #16]
 8041620:	4413      	add	r3, r2
 8041622:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8041626:	681b      	ldr	r3, [r3, #0]
 8041628:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 804162a:	68fb      	ldr	r3, [r7, #12]
 804162c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8041630:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8041632:	68fb      	ldr	r3, [r7, #12]
 8041634:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8041638:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 804163a:	78fb      	ldrb	r3, [r7, #3]
 804163c:	015a      	lsls	r2, r3, #5
 804163e:	693b      	ldr	r3, [r7, #16]
 8041640:	4413      	add	r3, r2
 8041642:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8041646:	461a      	mov	r2, r3
 8041648:	68fb      	ldr	r3, [r7, #12]
 804164a:	6013      	str	r3, [r2, #0]
 804164c:	e03f      	b.n	80416ce <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 804164e:	78fa      	ldrb	r2, [r7, #3]
 8041650:	6879      	ldr	r1, [r7, #4]
 8041652:	4613      	mov	r3, r2
 8041654:	011b      	lsls	r3, r3, #4
 8041656:	1a9b      	subs	r3, r3, r2
 8041658:	009b      	lsls	r3, r3, #2
 804165a:	440b      	add	r3, r1
 804165c:	334d      	adds	r3, #77	@ 0x4d
 804165e:	781b      	ldrb	r3, [r3, #0]
 8041660:	2b08      	cmp	r3, #8
 8041662:	d126      	bne.n	80416b2 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8041664:	78fa      	ldrb	r2, [r7, #3]
 8041666:	6879      	ldr	r1, [r7, #4]
 8041668:	4613      	mov	r3, r2
 804166a:	011b      	lsls	r3, r3, #4
 804166c:	1a9b      	subs	r3, r3, r2
 804166e:	009b      	lsls	r3, r3, #2
 8041670:	440b      	add	r3, r1
 8041672:	334d      	adds	r3, #77	@ 0x4d
 8041674:	2202      	movs	r2, #2
 8041676:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8041678:	78fa      	ldrb	r2, [r7, #3]
 804167a:	6879      	ldr	r1, [r7, #4]
 804167c:	4613      	mov	r3, r2
 804167e:	011b      	lsls	r3, r3, #4
 8041680:	1a9b      	subs	r3, r3, r2
 8041682:	009b      	lsls	r3, r3, #2
 8041684:	440b      	add	r3, r1
 8041686:	3344      	adds	r3, #68	@ 0x44
 8041688:	681b      	ldr	r3, [r3, #0]
 804168a:	1c59      	adds	r1, r3, #1
 804168c:	6878      	ldr	r0, [r7, #4]
 804168e:	4613      	mov	r3, r2
 8041690:	011b      	lsls	r3, r3, #4
 8041692:	1a9b      	subs	r3, r3, r2
 8041694:	009b      	lsls	r3, r3, #2
 8041696:	4403      	add	r3, r0
 8041698:	3344      	adds	r3, #68	@ 0x44
 804169a:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 804169c:	78fa      	ldrb	r2, [r7, #3]
 804169e:	6879      	ldr	r1, [r7, #4]
 80416a0:	4613      	mov	r3, r2
 80416a2:	011b      	lsls	r3, r3, #4
 80416a4:	1a9b      	subs	r3, r3, r2
 80416a6:	009b      	lsls	r3, r3, #2
 80416a8:	440b      	add	r3, r1
 80416aa:	334c      	adds	r3, #76	@ 0x4c
 80416ac:	2204      	movs	r2, #4
 80416ae:	701a      	strb	r2, [r3, #0]
 80416b0:	e00d      	b.n	80416ce <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 80416b2:	78fa      	ldrb	r2, [r7, #3]
 80416b4:	6879      	ldr	r1, [r7, #4]
 80416b6:	4613      	mov	r3, r2
 80416b8:	011b      	lsls	r3, r3, #4
 80416ba:	1a9b      	subs	r3, r3, r2
 80416bc:	009b      	lsls	r3, r3, #2
 80416be:	440b      	add	r3, r1
 80416c0:	334d      	adds	r3, #77	@ 0x4d
 80416c2:	781b      	ldrb	r3, [r3, #0]
 80416c4:	2b02      	cmp	r3, #2
 80416c6:	f000 8100 	beq.w	80418ca <HCD_HC_IN_IRQHandler+0xcca>
 80416ca:	e000      	b.n	80416ce <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80416cc:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80416ce:	78fa      	ldrb	r2, [r7, #3]
 80416d0:	6879      	ldr	r1, [r7, #4]
 80416d2:	4613      	mov	r3, r2
 80416d4:	011b      	lsls	r3, r3, #4
 80416d6:	1a9b      	subs	r3, r3, r2
 80416d8:	009b      	lsls	r3, r3, #2
 80416da:	440b      	add	r3, r1
 80416dc:	334c      	adds	r3, #76	@ 0x4c
 80416de:	781a      	ldrb	r2, [r3, #0]
 80416e0:	78fb      	ldrb	r3, [r7, #3]
 80416e2:	4619      	mov	r1, r3
 80416e4:	6878      	ldr	r0, [r7, #4]
 80416e6:	f001 faea 	bl	8042cbe <HAL_HCD_HC_NotifyURBChange_Callback>
 80416ea:	e0ef      	b.n	80418cc <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80416ec:	687b      	ldr	r3, [r7, #4]
 80416ee:	681b      	ldr	r3, [r3, #0]
 80416f0:	78fa      	ldrb	r2, [r7, #3]
 80416f2:	4611      	mov	r1, r2
 80416f4:	4618      	mov	r0, r3
 80416f6:	f000 ffea 	bl	80426ce <USB_ReadChInterrupts>
 80416fa:	4603      	mov	r3, r0
 80416fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8041700:	2b40      	cmp	r3, #64	@ 0x40
 8041702:	d12f      	bne.n	8041764 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8041704:	78fb      	ldrb	r3, [r7, #3]
 8041706:	015a      	lsls	r2, r3, #5
 8041708:	693b      	ldr	r3, [r7, #16]
 804170a:	4413      	add	r3, r2
 804170c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8041710:	461a      	mov	r2, r3
 8041712:	2340      	movs	r3, #64	@ 0x40
 8041714:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8041716:	78fa      	ldrb	r2, [r7, #3]
 8041718:	6879      	ldr	r1, [r7, #4]
 804171a:	4613      	mov	r3, r2
 804171c:	011b      	lsls	r3, r3, #4
 804171e:	1a9b      	subs	r3, r3, r2
 8041720:	009b      	lsls	r3, r3, #2
 8041722:	440b      	add	r3, r1
 8041724:	334d      	adds	r3, #77	@ 0x4d
 8041726:	2205      	movs	r2, #5
 8041728:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 804172a:	78fa      	ldrb	r2, [r7, #3]
 804172c:	6879      	ldr	r1, [r7, #4]
 804172e:	4613      	mov	r3, r2
 8041730:	011b      	lsls	r3, r3, #4
 8041732:	1a9b      	subs	r3, r3, r2
 8041734:	009b      	lsls	r3, r3, #2
 8041736:	440b      	add	r3, r1
 8041738:	331a      	adds	r3, #26
 804173a:	781b      	ldrb	r3, [r3, #0]
 804173c:	2b00      	cmp	r3, #0
 804173e:	d109      	bne.n	8041754 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8041740:	78fa      	ldrb	r2, [r7, #3]
 8041742:	6879      	ldr	r1, [r7, #4]
 8041744:	4613      	mov	r3, r2
 8041746:	011b      	lsls	r3, r3, #4
 8041748:	1a9b      	subs	r3, r3, r2
 804174a:	009b      	lsls	r3, r3, #2
 804174c:	440b      	add	r3, r1
 804174e:	3344      	adds	r3, #68	@ 0x44
 8041750:	2200      	movs	r2, #0
 8041752:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8041754:	687b      	ldr	r3, [r7, #4]
 8041756:	681b      	ldr	r3, [r3, #0]
 8041758:	78fa      	ldrb	r2, [r7, #3]
 804175a:	4611      	mov	r1, r2
 804175c:	4618      	mov	r0, r3
 804175e:	f001 f833 	bl	80427c8 <USB_HC_Halt>
 8041762:	e0b3      	b.n	80418cc <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8041764:	687b      	ldr	r3, [r7, #4]
 8041766:	681b      	ldr	r3, [r3, #0]
 8041768:	78fa      	ldrb	r2, [r7, #3]
 804176a:	4611      	mov	r1, r2
 804176c:	4618      	mov	r0, r3
 804176e:	f000 ffae 	bl	80426ce <USB_ReadChInterrupts>
 8041772:	4603      	mov	r3, r0
 8041774:	f003 0310 	and.w	r3, r3, #16
 8041778:	2b10      	cmp	r3, #16
 804177a:	f040 80a7 	bne.w	80418cc <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 804177e:	78fa      	ldrb	r2, [r7, #3]
 8041780:	6879      	ldr	r1, [r7, #4]
 8041782:	4613      	mov	r3, r2
 8041784:	011b      	lsls	r3, r3, #4
 8041786:	1a9b      	subs	r3, r3, r2
 8041788:	009b      	lsls	r3, r3, #2
 804178a:	440b      	add	r3, r1
 804178c:	3326      	adds	r3, #38	@ 0x26
 804178e:	781b      	ldrb	r3, [r3, #0]
 8041790:	2b03      	cmp	r3, #3
 8041792:	d11b      	bne.n	80417cc <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8041794:	78fa      	ldrb	r2, [r7, #3]
 8041796:	6879      	ldr	r1, [r7, #4]
 8041798:	4613      	mov	r3, r2
 804179a:	011b      	lsls	r3, r3, #4
 804179c:	1a9b      	subs	r3, r3, r2
 804179e:	009b      	lsls	r3, r3, #2
 80417a0:	440b      	add	r3, r1
 80417a2:	3344      	adds	r3, #68	@ 0x44
 80417a4:	2200      	movs	r2, #0
 80417a6:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 80417a8:	78fa      	ldrb	r2, [r7, #3]
 80417aa:	6879      	ldr	r1, [r7, #4]
 80417ac:	4613      	mov	r3, r2
 80417ae:	011b      	lsls	r3, r3, #4
 80417b0:	1a9b      	subs	r3, r3, r2
 80417b2:	009b      	lsls	r3, r3, #2
 80417b4:	440b      	add	r3, r1
 80417b6:	334d      	adds	r3, #77	@ 0x4d
 80417b8:	2204      	movs	r2, #4
 80417ba:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80417bc:	687b      	ldr	r3, [r7, #4]
 80417be:	681b      	ldr	r3, [r3, #0]
 80417c0:	78fa      	ldrb	r2, [r7, #3]
 80417c2:	4611      	mov	r1, r2
 80417c4:	4618      	mov	r0, r3
 80417c6:	f000 ffff 	bl	80427c8 <USB_HC_Halt>
 80417ca:	e03f      	b.n	804184c <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80417cc:	78fa      	ldrb	r2, [r7, #3]
 80417ce:	6879      	ldr	r1, [r7, #4]
 80417d0:	4613      	mov	r3, r2
 80417d2:	011b      	lsls	r3, r3, #4
 80417d4:	1a9b      	subs	r3, r3, r2
 80417d6:	009b      	lsls	r3, r3, #2
 80417d8:	440b      	add	r3, r1
 80417da:	3326      	adds	r3, #38	@ 0x26
 80417dc:	781b      	ldrb	r3, [r3, #0]
 80417de:	2b00      	cmp	r3, #0
 80417e0:	d00a      	beq.n	80417f8 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80417e2:	78fa      	ldrb	r2, [r7, #3]
 80417e4:	6879      	ldr	r1, [r7, #4]
 80417e6:	4613      	mov	r3, r2
 80417e8:	011b      	lsls	r3, r3, #4
 80417ea:	1a9b      	subs	r3, r3, r2
 80417ec:	009b      	lsls	r3, r3, #2
 80417ee:	440b      	add	r3, r1
 80417f0:	3326      	adds	r3, #38	@ 0x26
 80417f2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80417f4:	2b02      	cmp	r3, #2
 80417f6:	d129      	bne.n	804184c <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80417f8:	78fa      	ldrb	r2, [r7, #3]
 80417fa:	6879      	ldr	r1, [r7, #4]
 80417fc:	4613      	mov	r3, r2
 80417fe:	011b      	lsls	r3, r3, #4
 8041800:	1a9b      	subs	r3, r3, r2
 8041802:	009b      	lsls	r3, r3, #2
 8041804:	440b      	add	r3, r1
 8041806:	3344      	adds	r3, #68	@ 0x44
 8041808:	2200      	movs	r2, #0
 804180a:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 804180c:	687b      	ldr	r3, [r7, #4]
 804180e:	799b      	ldrb	r3, [r3, #6]
 8041810:	2b00      	cmp	r3, #0
 8041812:	d00a      	beq.n	804182a <HCD_HC_IN_IRQHandler+0xc2a>
 8041814:	78fa      	ldrb	r2, [r7, #3]
 8041816:	6879      	ldr	r1, [r7, #4]
 8041818:	4613      	mov	r3, r2
 804181a:	011b      	lsls	r3, r3, #4
 804181c:	1a9b      	subs	r3, r3, r2
 804181e:	009b      	lsls	r3, r3, #2
 8041820:	440b      	add	r3, r1
 8041822:	331b      	adds	r3, #27
 8041824:	781b      	ldrb	r3, [r3, #0]
 8041826:	2b01      	cmp	r3, #1
 8041828:	d110      	bne.n	804184c <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 804182a:	78fa      	ldrb	r2, [r7, #3]
 804182c:	6879      	ldr	r1, [r7, #4]
 804182e:	4613      	mov	r3, r2
 8041830:	011b      	lsls	r3, r3, #4
 8041832:	1a9b      	subs	r3, r3, r2
 8041834:	009b      	lsls	r3, r3, #2
 8041836:	440b      	add	r3, r1
 8041838:	334d      	adds	r3, #77	@ 0x4d
 804183a:	2204      	movs	r2, #4
 804183c:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 804183e:	687b      	ldr	r3, [r7, #4]
 8041840:	681b      	ldr	r3, [r3, #0]
 8041842:	78fa      	ldrb	r2, [r7, #3]
 8041844:	4611      	mov	r1, r2
 8041846:	4618      	mov	r0, r3
 8041848:	f000 ffbe 	bl	80427c8 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 804184c:	78fa      	ldrb	r2, [r7, #3]
 804184e:	6879      	ldr	r1, [r7, #4]
 8041850:	4613      	mov	r3, r2
 8041852:	011b      	lsls	r3, r3, #4
 8041854:	1a9b      	subs	r3, r3, r2
 8041856:	009b      	lsls	r3, r3, #2
 8041858:	440b      	add	r3, r1
 804185a:	331b      	adds	r3, #27
 804185c:	781b      	ldrb	r3, [r3, #0]
 804185e:	2b01      	cmp	r3, #1
 8041860:	d129      	bne.n	80418b6 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8041862:	78fa      	ldrb	r2, [r7, #3]
 8041864:	6879      	ldr	r1, [r7, #4]
 8041866:	4613      	mov	r3, r2
 8041868:	011b      	lsls	r3, r3, #4
 804186a:	1a9b      	subs	r3, r3, r2
 804186c:	009b      	lsls	r3, r3, #2
 804186e:	440b      	add	r3, r1
 8041870:	331b      	adds	r3, #27
 8041872:	2200      	movs	r2, #0
 8041874:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8041876:	78fb      	ldrb	r3, [r7, #3]
 8041878:	015a      	lsls	r2, r3, #5
 804187a:	693b      	ldr	r3, [r7, #16]
 804187c:	4413      	add	r3, r2
 804187e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8041882:	685b      	ldr	r3, [r3, #4]
 8041884:	78fa      	ldrb	r2, [r7, #3]
 8041886:	0151      	lsls	r1, r2, #5
 8041888:	693a      	ldr	r2, [r7, #16]
 804188a:	440a      	add	r2, r1
 804188c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8041890:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8041894:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8041896:	78fb      	ldrb	r3, [r7, #3]
 8041898:	015a      	lsls	r2, r3, #5
 804189a:	693b      	ldr	r3, [r7, #16]
 804189c:	4413      	add	r3, r2
 804189e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80418a2:	68db      	ldr	r3, [r3, #12]
 80418a4:	78fa      	ldrb	r2, [r7, #3]
 80418a6:	0151      	lsls	r1, r2, #5
 80418a8:	693a      	ldr	r2, [r7, #16]
 80418aa:	440a      	add	r2, r1
 80418ac:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80418b0:	f043 0320 	orr.w	r3, r3, #32
 80418b4:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80418b6:	78fb      	ldrb	r3, [r7, #3]
 80418b8:	015a      	lsls	r2, r3, #5
 80418ba:	693b      	ldr	r3, [r7, #16]
 80418bc:	4413      	add	r3, r2
 80418be:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80418c2:	461a      	mov	r2, r3
 80418c4:	2310      	movs	r3, #16
 80418c6:	6093      	str	r3, [r2, #8]
 80418c8:	e000      	b.n	80418cc <HCD_HC_IN_IRQHandler+0xccc>
        return;
 80418ca:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 80418cc:	3718      	adds	r7, #24
 80418ce:	46bd      	mov	sp, r7
 80418d0:	bd80      	pop	{r7, pc}

080418d2 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80418d2:	b580      	push	{r7, lr}
 80418d4:	b086      	sub	sp, #24
 80418d6:	af00      	add	r7, sp, #0
 80418d8:	6078      	str	r0, [r7, #4]
 80418da:	460b      	mov	r3, r1
 80418dc:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80418de:	687b      	ldr	r3, [r7, #4]
 80418e0:	681b      	ldr	r3, [r3, #0]
 80418e2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80418e4:	697b      	ldr	r3, [r7, #20]
 80418e6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 80418e8:	687b      	ldr	r3, [r7, #4]
 80418ea:	681b      	ldr	r3, [r3, #0]
 80418ec:	78fa      	ldrb	r2, [r7, #3]
 80418ee:	4611      	mov	r1, r2
 80418f0:	4618      	mov	r0, r3
 80418f2:	f000 feec 	bl	80426ce <USB_ReadChInterrupts>
 80418f6:	4603      	mov	r3, r0
 80418f8:	f003 0304 	and.w	r3, r3, #4
 80418fc:	2b04      	cmp	r3, #4
 80418fe:	d11b      	bne.n	8041938 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8041900:	78fb      	ldrb	r3, [r7, #3]
 8041902:	015a      	lsls	r2, r3, #5
 8041904:	693b      	ldr	r3, [r7, #16]
 8041906:	4413      	add	r3, r2
 8041908:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 804190c:	461a      	mov	r2, r3
 804190e:	2304      	movs	r3, #4
 8041910:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8041912:	78fa      	ldrb	r2, [r7, #3]
 8041914:	6879      	ldr	r1, [r7, #4]
 8041916:	4613      	mov	r3, r2
 8041918:	011b      	lsls	r3, r3, #4
 804191a:	1a9b      	subs	r3, r3, r2
 804191c:	009b      	lsls	r3, r3, #2
 804191e:	440b      	add	r3, r1
 8041920:	334d      	adds	r3, #77	@ 0x4d
 8041922:	2207      	movs	r2, #7
 8041924:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8041926:	687b      	ldr	r3, [r7, #4]
 8041928:	681b      	ldr	r3, [r3, #0]
 804192a:	78fa      	ldrb	r2, [r7, #3]
 804192c:	4611      	mov	r1, r2
 804192e:	4618      	mov	r0, r3
 8041930:	f000 ff4a 	bl	80427c8 <USB_HC_Halt>
 8041934:	f000 bc89 	b.w	804224a <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8041938:	687b      	ldr	r3, [r7, #4]
 804193a:	681b      	ldr	r3, [r3, #0]
 804193c:	78fa      	ldrb	r2, [r7, #3]
 804193e:	4611      	mov	r1, r2
 8041940:	4618      	mov	r0, r3
 8041942:	f000 fec4 	bl	80426ce <USB_ReadChInterrupts>
 8041946:	4603      	mov	r3, r0
 8041948:	f003 0320 	and.w	r3, r3, #32
 804194c:	2b20      	cmp	r3, #32
 804194e:	f040 8082 	bne.w	8041a56 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8041952:	78fb      	ldrb	r3, [r7, #3]
 8041954:	015a      	lsls	r2, r3, #5
 8041956:	693b      	ldr	r3, [r7, #16]
 8041958:	4413      	add	r3, r2
 804195a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 804195e:	461a      	mov	r2, r3
 8041960:	2320      	movs	r3, #32
 8041962:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8041964:	78fa      	ldrb	r2, [r7, #3]
 8041966:	6879      	ldr	r1, [r7, #4]
 8041968:	4613      	mov	r3, r2
 804196a:	011b      	lsls	r3, r3, #4
 804196c:	1a9b      	subs	r3, r3, r2
 804196e:	009b      	lsls	r3, r3, #2
 8041970:	440b      	add	r3, r1
 8041972:	3319      	adds	r3, #25
 8041974:	781b      	ldrb	r3, [r3, #0]
 8041976:	2b01      	cmp	r3, #1
 8041978:	d124      	bne.n	80419c4 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 804197a:	78fa      	ldrb	r2, [r7, #3]
 804197c:	6879      	ldr	r1, [r7, #4]
 804197e:	4613      	mov	r3, r2
 8041980:	011b      	lsls	r3, r3, #4
 8041982:	1a9b      	subs	r3, r3, r2
 8041984:	009b      	lsls	r3, r3, #2
 8041986:	440b      	add	r3, r1
 8041988:	3319      	adds	r3, #25
 804198a:	2200      	movs	r2, #0
 804198c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 804198e:	78fa      	ldrb	r2, [r7, #3]
 8041990:	6879      	ldr	r1, [r7, #4]
 8041992:	4613      	mov	r3, r2
 8041994:	011b      	lsls	r3, r3, #4
 8041996:	1a9b      	subs	r3, r3, r2
 8041998:	009b      	lsls	r3, r3, #2
 804199a:	440b      	add	r3, r1
 804199c:	334c      	adds	r3, #76	@ 0x4c
 804199e:	2202      	movs	r2, #2
 80419a0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80419a2:	78fa      	ldrb	r2, [r7, #3]
 80419a4:	6879      	ldr	r1, [r7, #4]
 80419a6:	4613      	mov	r3, r2
 80419a8:	011b      	lsls	r3, r3, #4
 80419aa:	1a9b      	subs	r3, r3, r2
 80419ac:	009b      	lsls	r3, r3, #2
 80419ae:	440b      	add	r3, r1
 80419b0:	334d      	adds	r3, #77	@ 0x4d
 80419b2:	2203      	movs	r2, #3
 80419b4:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80419b6:	687b      	ldr	r3, [r7, #4]
 80419b8:	681b      	ldr	r3, [r3, #0]
 80419ba:	78fa      	ldrb	r2, [r7, #3]
 80419bc:	4611      	mov	r1, r2
 80419be:	4618      	mov	r0, r3
 80419c0:	f000 ff02 	bl	80427c8 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 80419c4:	78fa      	ldrb	r2, [r7, #3]
 80419c6:	6879      	ldr	r1, [r7, #4]
 80419c8:	4613      	mov	r3, r2
 80419ca:	011b      	lsls	r3, r3, #4
 80419cc:	1a9b      	subs	r3, r3, r2
 80419ce:	009b      	lsls	r3, r3, #2
 80419d0:	440b      	add	r3, r1
 80419d2:	331a      	adds	r3, #26
 80419d4:	781b      	ldrb	r3, [r3, #0]
 80419d6:	2b01      	cmp	r3, #1
 80419d8:	f040 8437 	bne.w	804224a <HCD_HC_OUT_IRQHandler+0x978>
 80419dc:	78fa      	ldrb	r2, [r7, #3]
 80419de:	6879      	ldr	r1, [r7, #4]
 80419e0:	4613      	mov	r3, r2
 80419e2:	011b      	lsls	r3, r3, #4
 80419e4:	1a9b      	subs	r3, r3, r2
 80419e6:	009b      	lsls	r3, r3, #2
 80419e8:	440b      	add	r3, r1
 80419ea:	331b      	adds	r3, #27
 80419ec:	781b      	ldrb	r3, [r3, #0]
 80419ee:	2b00      	cmp	r3, #0
 80419f0:	f040 842b 	bne.w	804224a <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 80419f4:	78fa      	ldrb	r2, [r7, #3]
 80419f6:	6879      	ldr	r1, [r7, #4]
 80419f8:	4613      	mov	r3, r2
 80419fa:	011b      	lsls	r3, r3, #4
 80419fc:	1a9b      	subs	r3, r3, r2
 80419fe:	009b      	lsls	r3, r3, #2
 8041a00:	440b      	add	r3, r1
 8041a02:	3326      	adds	r3, #38	@ 0x26
 8041a04:	781b      	ldrb	r3, [r3, #0]
 8041a06:	2b01      	cmp	r3, #1
 8041a08:	d009      	beq.n	8041a1e <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8041a0a:	78fa      	ldrb	r2, [r7, #3]
 8041a0c:	6879      	ldr	r1, [r7, #4]
 8041a0e:	4613      	mov	r3, r2
 8041a10:	011b      	lsls	r3, r3, #4
 8041a12:	1a9b      	subs	r3, r3, r2
 8041a14:	009b      	lsls	r3, r3, #2
 8041a16:	440b      	add	r3, r1
 8041a18:	331b      	adds	r3, #27
 8041a1a:	2201      	movs	r2, #1
 8041a1c:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8041a1e:	78fa      	ldrb	r2, [r7, #3]
 8041a20:	6879      	ldr	r1, [r7, #4]
 8041a22:	4613      	mov	r3, r2
 8041a24:	011b      	lsls	r3, r3, #4
 8041a26:	1a9b      	subs	r3, r3, r2
 8041a28:	009b      	lsls	r3, r3, #2
 8041a2a:	440b      	add	r3, r1
 8041a2c:	334d      	adds	r3, #77	@ 0x4d
 8041a2e:	2203      	movs	r2, #3
 8041a30:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8041a32:	687b      	ldr	r3, [r7, #4]
 8041a34:	681b      	ldr	r3, [r3, #0]
 8041a36:	78fa      	ldrb	r2, [r7, #3]
 8041a38:	4611      	mov	r1, r2
 8041a3a:	4618      	mov	r0, r3
 8041a3c:	f000 fec4 	bl	80427c8 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8041a40:	78fa      	ldrb	r2, [r7, #3]
 8041a42:	6879      	ldr	r1, [r7, #4]
 8041a44:	4613      	mov	r3, r2
 8041a46:	011b      	lsls	r3, r3, #4
 8041a48:	1a9b      	subs	r3, r3, r2
 8041a4a:	009b      	lsls	r3, r3, #2
 8041a4c:	440b      	add	r3, r1
 8041a4e:	3344      	adds	r3, #68	@ 0x44
 8041a50:	2200      	movs	r2, #0
 8041a52:	601a      	str	r2, [r3, #0]
 8041a54:	e3f9      	b.n	804224a <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8041a56:	687b      	ldr	r3, [r7, #4]
 8041a58:	681b      	ldr	r3, [r3, #0]
 8041a5a:	78fa      	ldrb	r2, [r7, #3]
 8041a5c:	4611      	mov	r1, r2
 8041a5e:	4618      	mov	r0, r3
 8041a60:	f000 fe35 	bl	80426ce <USB_ReadChInterrupts>
 8041a64:	4603      	mov	r3, r0
 8041a66:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8041a6a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8041a6e:	d111      	bne.n	8041a94 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8041a70:	78fb      	ldrb	r3, [r7, #3]
 8041a72:	015a      	lsls	r2, r3, #5
 8041a74:	693b      	ldr	r3, [r7, #16]
 8041a76:	4413      	add	r3, r2
 8041a78:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8041a7c:	461a      	mov	r2, r3
 8041a7e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8041a82:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8041a84:	687b      	ldr	r3, [r7, #4]
 8041a86:	681b      	ldr	r3, [r3, #0]
 8041a88:	78fa      	ldrb	r2, [r7, #3]
 8041a8a:	4611      	mov	r1, r2
 8041a8c:	4618      	mov	r0, r3
 8041a8e:	f000 fe9b 	bl	80427c8 <USB_HC_Halt>
 8041a92:	e3da      	b.n	804224a <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8041a94:	687b      	ldr	r3, [r7, #4]
 8041a96:	681b      	ldr	r3, [r3, #0]
 8041a98:	78fa      	ldrb	r2, [r7, #3]
 8041a9a:	4611      	mov	r1, r2
 8041a9c:	4618      	mov	r0, r3
 8041a9e:	f000 fe16 	bl	80426ce <USB_ReadChInterrupts>
 8041aa2:	4603      	mov	r3, r0
 8041aa4:	f003 0301 	and.w	r3, r3, #1
 8041aa8:	2b01      	cmp	r3, #1
 8041aaa:	d168      	bne.n	8041b7e <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8041aac:	78fa      	ldrb	r2, [r7, #3]
 8041aae:	6879      	ldr	r1, [r7, #4]
 8041ab0:	4613      	mov	r3, r2
 8041ab2:	011b      	lsls	r3, r3, #4
 8041ab4:	1a9b      	subs	r3, r3, r2
 8041ab6:	009b      	lsls	r3, r3, #2
 8041ab8:	440b      	add	r3, r1
 8041aba:	3344      	adds	r3, #68	@ 0x44
 8041abc:	2200      	movs	r2, #0
 8041abe:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8041ac0:	687b      	ldr	r3, [r7, #4]
 8041ac2:	681b      	ldr	r3, [r3, #0]
 8041ac4:	78fa      	ldrb	r2, [r7, #3]
 8041ac6:	4611      	mov	r1, r2
 8041ac8:	4618      	mov	r0, r3
 8041aca:	f000 fe00 	bl	80426ce <USB_ReadChInterrupts>
 8041ace:	4603      	mov	r3, r0
 8041ad0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8041ad4:	2b40      	cmp	r3, #64	@ 0x40
 8041ad6:	d112      	bne.n	8041afe <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8041ad8:	78fa      	ldrb	r2, [r7, #3]
 8041ada:	6879      	ldr	r1, [r7, #4]
 8041adc:	4613      	mov	r3, r2
 8041ade:	011b      	lsls	r3, r3, #4
 8041ae0:	1a9b      	subs	r3, r3, r2
 8041ae2:	009b      	lsls	r3, r3, #2
 8041ae4:	440b      	add	r3, r1
 8041ae6:	3319      	adds	r3, #25
 8041ae8:	2201      	movs	r2, #1
 8041aea:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8041aec:	78fb      	ldrb	r3, [r7, #3]
 8041aee:	015a      	lsls	r2, r3, #5
 8041af0:	693b      	ldr	r3, [r7, #16]
 8041af2:	4413      	add	r3, r2
 8041af4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8041af8:	461a      	mov	r2, r3
 8041afa:	2340      	movs	r3, #64	@ 0x40
 8041afc:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8041afe:	78fa      	ldrb	r2, [r7, #3]
 8041b00:	6879      	ldr	r1, [r7, #4]
 8041b02:	4613      	mov	r3, r2
 8041b04:	011b      	lsls	r3, r3, #4
 8041b06:	1a9b      	subs	r3, r3, r2
 8041b08:	009b      	lsls	r3, r3, #2
 8041b0a:	440b      	add	r3, r1
 8041b0c:	331b      	adds	r3, #27
 8041b0e:	781b      	ldrb	r3, [r3, #0]
 8041b10:	2b00      	cmp	r3, #0
 8041b12:	d019      	beq.n	8041b48 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8041b14:	78fa      	ldrb	r2, [r7, #3]
 8041b16:	6879      	ldr	r1, [r7, #4]
 8041b18:	4613      	mov	r3, r2
 8041b1a:	011b      	lsls	r3, r3, #4
 8041b1c:	1a9b      	subs	r3, r3, r2
 8041b1e:	009b      	lsls	r3, r3, #2
 8041b20:	440b      	add	r3, r1
 8041b22:	331b      	adds	r3, #27
 8041b24:	2200      	movs	r2, #0
 8041b26:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8041b28:	78fb      	ldrb	r3, [r7, #3]
 8041b2a:	015a      	lsls	r2, r3, #5
 8041b2c:	693b      	ldr	r3, [r7, #16]
 8041b2e:	4413      	add	r3, r2
 8041b30:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8041b34:	685b      	ldr	r3, [r3, #4]
 8041b36:	78fa      	ldrb	r2, [r7, #3]
 8041b38:	0151      	lsls	r1, r2, #5
 8041b3a:	693a      	ldr	r2, [r7, #16]
 8041b3c:	440a      	add	r2, r1
 8041b3e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8041b42:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8041b46:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8041b48:	78fb      	ldrb	r3, [r7, #3]
 8041b4a:	015a      	lsls	r2, r3, #5
 8041b4c:	693b      	ldr	r3, [r7, #16]
 8041b4e:	4413      	add	r3, r2
 8041b50:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8041b54:	461a      	mov	r2, r3
 8041b56:	2301      	movs	r3, #1
 8041b58:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8041b5a:	78fa      	ldrb	r2, [r7, #3]
 8041b5c:	6879      	ldr	r1, [r7, #4]
 8041b5e:	4613      	mov	r3, r2
 8041b60:	011b      	lsls	r3, r3, #4
 8041b62:	1a9b      	subs	r3, r3, r2
 8041b64:	009b      	lsls	r3, r3, #2
 8041b66:	440b      	add	r3, r1
 8041b68:	334d      	adds	r3, #77	@ 0x4d
 8041b6a:	2201      	movs	r2, #1
 8041b6c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8041b6e:	687b      	ldr	r3, [r7, #4]
 8041b70:	681b      	ldr	r3, [r3, #0]
 8041b72:	78fa      	ldrb	r2, [r7, #3]
 8041b74:	4611      	mov	r1, r2
 8041b76:	4618      	mov	r0, r3
 8041b78:	f000 fe26 	bl	80427c8 <USB_HC_Halt>
 8041b7c:	e365      	b.n	804224a <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8041b7e:	687b      	ldr	r3, [r7, #4]
 8041b80:	681b      	ldr	r3, [r3, #0]
 8041b82:	78fa      	ldrb	r2, [r7, #3]
 8041b84:	4611      	mov	r1, r2
 8041b86:	4618      	mov	r0, r3
 8041b88:	f000 fda1 	bl	80426ce <USB_ReadChInterrupts>
 8041b8c:	4603      	mov	r3, r0
 8041b8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8041b92:	2b40      	cmp	r3, #64	@ 0x40
 8041b94:	d139      	bne.n	8041c0a <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8041b96:	78fa      	ldrb	r2, [r7, #3]
 8041b98:	6879      	ldr	r1, [r7, #4]
 8041b9a:	4613      	mov	r3, r2
 8041b9c:	011b      	lsls	r3, r3, #4
 8041b9e:	1a9b      	subs	r3, r3, r2
 8041ba0:	009b      	lsls	r3, r3, #2
 8041ba2:	440b      	add	r3, r1
 8041ba4:	334d      	adds	r3, #77	@ 0x4d
 8041ba6:	2205      	movs	r2, #5
 8041ba8:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8041baa:	78fa      	ldrb	r2, [r7, #3]
 8041bac:	6879      	ldr	r1, [r7, #4]
 8041bae:	4613      	mov	r3, r2
 8041bb0:	011b      	lsls	r3, r3, #4
 8041bb2:	1a9b      	subs	r3, r3, r2
 8041bb4:	009b      	lsls	r3, r3, #2
 8041bb6:	440b      	add	r3, r1
 8041bb8:	331a      	adds	r3, #26
 8041bba:	781b      	ldrb	r3, [r3, #0]
 8041bbc:	2b00      	cmp	r3, #0
 8041bbe:	d109      	bne.n	8041bd4 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8041bc0:	78fa      	ldrb	r2, [r7, #3]
 8041bc2:	6879      	ldr	r1, [r7, #4]
 8041bc4:	4613      	mov	r3, r2
 8041bc6:	011b      	lsls	r3, r3, #4
 8041bc8:	1a9b      	subs	r3, r3, r2
 8041bca:	009b      	lsls	r3, r3, #2
 8041bcc:	440b      	add	r3, r1
 8041bce:	3319      	adds	r3, #25
 8041bd0:	2201      	movs	r2, #1
 8041bd2:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8041bd4:	78fa      	ldrb	r2, [r7, #3]
 8041bd6:	6879      	ldr	r1, [r7, #4]
 8041bd8:	4613      	mov	r3, r2
 8041bda:	011b      	lsls	r3, r3, #4
 8041bdc:	1a9b      	subs	r3, r3, r2
 8041bde:	009b      	lsls	r3, r3, #2
 8041be0:	440b      	add	r3, r1
 8041be2:	3344      	adds	r3, #68	@ 0x44
 8041be4:	2200      	movs	r2, #0
 8041be6:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8041be8:	687b      	ldr	r3, [r7, #4]
 8041bea:	681b      	ldr	r3, [r3, #0]
 8041bec:	78fa      	ldrb	r2, [r7, #3]
 8041bee:	4611      	mov	r1, r2
 8041bf0:	4618      	mov	r0, r3
 8041bf2:	f000 fde9 	bl	80427c8 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8041bf6:	78fb      	ldrb	r3, [r7, #3]
 8041bf8:	015a      	lsls	r2, r3, #5
 8041bfa:	693b      	ldr	r3, [r7, #16]
 8041bfc:	4413      	add	r3, r2
 8041bfe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8041c02:	461a      	mov	r2, r3
 8041c04:	2340      	movs	r3, #64	@ 0x40
 8041c06:	6093      	str	r3, [r2, #8]
 8041c08:	e31f      	b.n	804224a <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8041c0a:	687b      	ldr	r3, [r7, #4]
 8041c0c:	681b      	ldr	r3, [r3, #0]
 8041c0e:	78fa      	ldrb	r2, [r7, #3]
 8041c10:	4611      	mov	r1, r2
 8041c12:	4618      	mov	r0, r3
 8041c14:	f000 fd5b 	bl	80426ce <USB_ReadChInterrupts>
 8041c18:	4603      	mov	r3, r0
 8041c1a:	f003 0308 	and.w	r3, r3, #8
 8041c1e:	2b08      	cmp	r3, #8
 8041c20:	d11a      	bne.n	8041c58 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8041c22:	78fb      	ldrb	r3, [r7, #3]
 8041c24:	015a      	lsls	r2, r3, #5
 8041c26:	693b      	ldr	r3, [r7, #16]
 8041c28:	4413      	add	r3, r2
 8041c2a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8041c2e:	461a      	mov	r2, r3
 8041c30:	2308      	movs	r3, #8
 8041c32:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8041c34:	78fa      	ldrb	r2, [r7, #3]
 8041c36:	6879      	ldr	r1, [r7, #4]
 8041c38:	4613      	mov	r3, r2
 8041c3a:	011b      	lsls	r3, r3, #4
 8041c3c:	1a9b      	subs	r3, r3, r2
 8041c3e:	009b      	lsls	r3, r3, #2
 8041c40:	440b      	add	r3, r1
 8041c42:	334d      	adds	r3, #77	@ 0x4d
 8041c44:	2206      	movs	r2, #6
 8041c46:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8041c48:	687b      	ldr	r3, [r7, #4]
 8041c4a:	681b      	ldr	r3, [r3, #0]
 8041c4c:	78fa      	ldrb	r2, [r7, #3]
 8041c4e:	4611      	mov	r1, r2
 8041c50:	4618      	mov	r0, r3
 8041c52:	f000 fdb9 	bl	80427c8 <USB_HC_Halt>
 8041c56:	e2f8      	b.n	804224a <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8041c58:	687b      	ldr	r3, [r7, #4]
 8041c5a:	681b      	ldr	r3, [r3, #0]
 8041c5c:	78fa      	ldrb	r2, [r7, #3]
 8041c5e:	4611      	mov	r1, r2
 8041c60:	4618      	mov	r0, r3
 8041c62:	f000 fd34 	bl	80426ce <USB_ReadChInterrupts>
 8041c66:	4603      	mov	r3, r0
 8041c68:	f003 0310 	and.w	r3, r3, #16
 8041c6c:	2b10      	cmp	r3, #16
 8041c6e:	d144      	bne.n	8041cfa <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8041c70:	78fa      	ldrb	r2, [r7, #3]
 8041c72:	6879      	ldr	r1, [r7, #4]
 8041c74:	4613      	mov	r3, r2
 8041c76:	011b      	lsls	r3, r3, #4
 8041c78:	1a9b      	subs	r3, r3, r2
 8041c7a:	009b      	lsls	r3, r3, #2
 8041c7c:	440b      	add	r3, r1
 8041c7e:	3344      	adds	r3, #68	@ 0x44
 8041c80:	2200      	movs	r2, #0
 8041c82:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8041c84:	78fa      	ldrb	r2, [r7, #3]
 8041c86:	6879      	ldr	r1, [r7, #4]
 8041c88:	4613      	mov	r3, r2
 8041c8a:	011b      	lsls	r3, r3, #4
 8041c8c:	1a9b      	subs	r3, r3, r2
 8041c8e:	009b      	lsls	r3, r3, #2
 8041c90:	440b      	add	r3, r1
 8041c92:	334d      	adds	r3, #77	@ 0x4d
 8041c94:	2204      	movs	r2, #4
 8041c96:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8041c98:	78fa      	ldrb	r2, [r7, #3]
 8041c9a:	6879      	ldr	r1, [r7, #4]
 8041c9c:	4613      	mov	r3, r2
 8041c9e:	011b      	lsls	r3, r3, #4
 8041ca0:	1a9b      	subs	r3, r3, r2
 8041ca2:	009b      	lsls	r3, r3, #2
 8041ca4:	440b      	add	r3, r1
 8041ca6:	3319      	adds	r3, #25
 8041ca8:	781b      	ldrb	r3, [r3, #0]
 8041caa:	2b00      	cmp	r3, #0
 8041cac:	d114      	bne.n	8041cd8 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8041cae:	78fa      	ldrb	r2, [r7, #3]
 8041cb0:	6879      	ldr	r1, [r7, #4]
 8041cb2:	4613      	mov	r3, r2
 8041cb4:	011b      	lsls	r3, r3, #4
 8041cb6:	1a9b      	subs	r3, r3, r2
 8041cb8:	009b      	lsls	r3, r3, #2
 8041cba:	440b      	add	r3, r1
 8041cbc:	3318      	adds	r3, #24
 8041cbe:	781b      	ldrb	r3, [r3, #0]
 8041cc0:	2b00      	cmp	r3, #0
 8041cc2:	d109      	bne.n	8041cd8 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8041cc4:	78fa      	ldrb	r2, [r7, #3]
 8041cc6:	6879      	ldr	r1, [r7, #4]
 8041cc8:	4613      	mov	r3, r2
 8041cca:	011b      	lsls	r3, r3, #4
 8041ccc:	1a9b      	subs	r3, r3, r2
 8041cce:	009b      	lsls	r3, r3, #2
 8041cd0:	440b      	add	r3, r1
 8041cd2:	3319      	adds	r3, #25
 8041cd4:	2201      	movs	r2, #1
 8041cd6:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8041cd8:	687b      	ldr	r3, [r7, #4]
 8041cda:	681b      	ldr	r3, [r3, #0]
 8041cdc:	78fa      	ldrb	r2, [r7, #3]
 8041cde:	4611      	mov	r1, r2
 8041ce0:	4618      	mov	r0, r3
 8041ce2:	f000 fd71 	bl	80427c8 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8041ce6:	78fb      	ldrb	r3, [r7, #3]
 8041ce8:	015a      	lsls	r2, r3, #5
 8041cea:	693b      	ldr	r3, [r7, #16]
 8041cec:	4413      	add	r3, r2
 8041cee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8041cf2:	461a      	mov	r2, r3
 8041cf4:	2310      	movs	r3, #16
 8041cf6:	6093      	str	r3, [r2, #8]
 8041cf8:	e2a7      	b.n	804224a <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8041cfa:	687b      	ldr	r3, [r7, #4]
 8041cfc:	681b      	ldr	r3, [r3, #0]
 8041cfe:	78fa      	ldrb	r2, [r7, #3]
 8041d00:	4611      	mov	r1, r2
 8041d02:	4618      	mov	r0, r3
 8041d04:	f000 fce3 	bl	80426ce <USB_ReadChInterrupts>
 8041d08:	4603      	mov	r3, r0
 8041d0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8041d0e:	2b80      	cmp	r3, #128	@ 0x80
 8041d10:	f040 8083 	bne.w	8041e1a <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 8041d14:	687b      	ldr	r3, [r7, #4]
 8041d16:	799b      	ldrb	r3, [r3, #6]
 8041d18:	2b00      	cmp	r3, #0
 8041d1a:	d111      	bne.n	8041d40 <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8041d1c:	78fa      	ldrb	r2, [r7, #3]
 8041d1e:	6879      	ldr	r1, [r7, #4]
 8041d20:	4613      	mov	r3, r2
 8041d22:	011b      	lsls	r3, r3, #4
 8041d24:	1a9b      	subs	r3, r3, r2
 8041d26:	009b      	lsls	r3, r3, #2
 8041d28:	440b      	add	r3, r1
 8041d2a:	334d      	adds	r3, #77	@ 0x4d
 8041d2c:	2207      	movs	r2, #7
 8041d2e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8041d30:	687b      	ldr	r3, [r7, #4]
 8041d32:	681b      	ldr	r3, [r3, #0]
 8041d34:	78fa      	ldrb	r2, [r7, #3]
 8041d36:	4611      	mov	r1, r2
 8041d38:	4618      	mov	r0, r3
 8041d3a:	f000 fd45 	bl	80427c8 <USB_HC_Halt>
 8041d3e:	e062      	b.n	8041e06 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8041d40:	78fa      	ldrb	r2, [r7, #3]
 8041d42:	6879      	ldr	r1, [r7, #4]
 8041d44:	4613      	mov	r3, r2
 8041d46:	011b      	lsls	r3, r3, #4
 8041d48:	1a9b      	subs	r3, r3, r2
 8041d4a:	009b      	lsls	r3, r3, #2
 8041d4c:	440b      	add	r3, r1
 8041d4e:	3344      	adds	r3, #68	@ 0x44
 8041d50:	681b      	ldr	r3, [r3, #0]
 8041d52:	1c59      	adds	r1, r3, #1
 8041d54:	6878      	ldr	r0, [r7, #4]
 8041d56:	4613      	mov	r3, r2
 8041d58:	011b      	lsls	r3, r3, #4
 8041d5a:	1a9b      	subs	r3, r3, r2
 8041d5c:	009b      	lsls	r3, r3, #2
 8041d5e:	4403      	add	r3, r0
 8041d60:	3344      	adds	r3, #68	@ 0x44
 8041d62:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8041d64:	78fa      	ldrb	r2, [r7, #3]
 8041d66:	6879      	ldr	r1, [r7, #4]
 8041d68:	4613      	mov	r3, r2
 8041d6a:	011b      	lsls	r3, r3, #4
 8041d6c:	1a9b      	subs	r3, r3, r2
 8041d6e:	009b      	lsls	r3, r3, #2
 8041d70:	440b      	add	r3, r1
 8041d72:	3344      	adds	r3, #68	@ 0x44
 8041d74:	681b      	ldr	r3, [r3, #0]
 8041d76:	2b02      	cmp	r3, #2
 8041d78:	d922      	bls.n	8041dc0 <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8041d7a:	78fa      	ldrb	r2, [r7, #3]
 8041d7c:	6879      	ldr	r1, [r7, #4]
 8041d7e:	4613      	mov	r3, r2
 8041d80:	011b      	lsls	r3, r3, #4
 8041d82:	1a9b      	subs	r3, r3, r2
 8041d84:	009b      	lsls	r3, r3, #2
 8041d86:	440b      	add	r3, r1
 8041d88:	3344      	adds	r3, #68	@ 0x44
 8041d8a:	2200      	movs	r2, #0
 8041d8c:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8041d8e:	78fa      	ldrb	r2, [r7, #3]
 8041d90:	6879      	ldr	r1, [r7, #4]
 8041d92:	4613      	mov	r3, r2
 8041d94:	011b      	lsls	r3, r3, #4
 8041d96:	1a9b      	subs	r3, r3, r2
 8041d98:	009b      	lsls	r3, r3, #2
 8041d9a:	440b      	add	r3, r1
 8041d9c:	334c      	adds	r3, #76	@ 0x4c
 8041d9e:	2204      	movs	r2, #4
 8041da0:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8041da2:	78fa      	ldrb	r2, [r7, #3]
 8041da4:	6879      	ldr	r1, [r7, #4]
 8041da6:	4613      	mov	r3, r2
 8041da8:	011b      	lsls	r3, r3, #4
 8041daa:	1a9b      	subs	r3, r3, r2
 8041dac:	009b      	lsls	r3, r3, #2
 8041dae:	440b      	add	r3, r1
 8041db0:	334c      	adds	r3, #76	@ 0x4c
 8041db2:	781a      	ldrb	r2, [r3, #0]
 8041db4:	78fb      	ldrb	r3, [r7, #3]
 8041db6:	4619      	mov	r1, r3
 8041db8:	6878      	ldr	r0, [r7, #4]
 8041dba:	f000 ff80 	bl	8042cbe <HAL_HCD_HC_NotifyURBChange_Callback>
 8041dbe:	e022      	b.n	8041e06 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8041dc0:	78fa      	ldrb	r2, [r7, #3]
 8041dc2:	6879      	ldr	r1, [r7, #4]
 8041dc4:	4613      	mov	r3, r2
 8041dc6:	011b      	lsls	r3, r3, #4
 8041dc8:	1a9b      	subs	r3, r3, r2
 8041dca:	009b      	lsls	r3, r3, #2
 8041dcc:	440b      	add	r3, r1
 8041dce:	334c      	adds	r3, #76	@ 0x4c
 8041dd0:	2202      	movs	r2, #2
 8041dd2:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8041dd4:	78fb      	ldrb	r3, [r7, #3]
 8041dd6:	015a      	lsls	r2, r3, #5
 8041dd8:	693b      	ldr	r3, [r7, #16]
 8041dda:	4413      	add	r3, r2
 8041ddc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8041de0:	681b      	ldr	r3, [r3, #0]
 8041de2:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8041de4:	68fb      	ldr	r3, [r7, #12]
 8041de6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8041dea:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8041dec:	68fb      	ldr	r3, [r7, #12]
 8041dee:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8041df2:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8041df4:	78fb      	ldrb	r3, [r7, #3]
 8041df6:	015a      	lsls	r2, r3, #5
 8041df8:	693b      	ldr	r3, [r7, #16]
 8041dfa:	4413      	add	r3, r2
 8041dfc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8041e00:	461a      	mov	r2, r3
 8041e02:	68fb      	ldr	r3, [r7, #12]
 8041e04:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8041e06:	78fb      	ldrb	r3, [r7, #3]
 8041e08:	015a      	lsls	r2, r3, #5
 8041e0a:	693b      	ldr	r3, [r7, #16]
 8041e0c:	4413      	add	r3, r2
 8041e0e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8041e12:	461a      	mov	r2, r3
 8041e14:	2380      	movs	r3, #128	@ 0x80
 8041e16:	6093      	str	r3, [r2, #8]
 8041e18:	e217      	b.n	804224a <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8041e1a:	687b      	ldr	r3, [r7, #4]
 8041e1c:	681b      	ldr	r3, [r3, #0]
 8041e1e:	78fa      	ldrb	r2, [r7, #3]
 8041e20:	4611      	mov	r1, r2
 8041e22:	4618      	mov	r0, r3
 8041e24:	f000 fc53 	bl	80426ce <USB_ReadChInterrupts>
 8041e28:	4603      	mov	r3, r0
 8041e2a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8041e2e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8041e32:	d11b      	bne.n	8041e6c <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8041e34:	78fa      	ldrb	r2, [r7, #3]
 8041e36:	6879      	ldr	r1, [r7, #4]
 8041e38:	4613      	mov	r3, r2
 8041e3a:	011b      	lsls	r3, r3, #4
 8041e3c:	1a9b      	subs	r3, r3, r2
 8041e3e:	009b      	lsls	r3, r3, #2
 8041e40:	440b      	add	r3, r1
 8041e42:	334d      	adds	r3, #77	@ 0x4d
 8041e44:	2209      	movs	r2, #9
 8041e46:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8041e48:	687b      	ldr	r3, [r7, #4]
 8041e4a:	681b      	ldr	r3, [r3, #0]
 8041e4c:	78fa      	ldrb	r2, [r7, #3]
 8041e4e:	4611      	mov	r1, r2
 8041e50:	4618      	mov	r0, r3
 8041e52:	f000 fcb9 	bl	80427c8 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8041e56:	78fb      	ldrb	r3, [r7, #3]
 8041e58:	015a      	lsls	r2, r3, #5
 8041e5a:	693b      	ldr	r3, [r7, #16]
 8041e5c:	4413      	add	r3, r2
 8041e5e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8041e62:	461a      	mov	r2, r3
 8041e64:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8041e68:	6093      	str	r3, [r2, #8]
 8041e6a:	e1ee      	b.n	804224a <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8041e6c:	687b      	ldr	r3, [r7, #4]
 8041e6e:	681b      	ldr	r3, [r3, #0]
 8041e70:	78fa      	ldrb	r2, [r7, #3]
 8041e72:	4611      	mov	r1, r2
 8041e74:	4618      	mov	r0, r3
 8041e76:	f000 fc2a 	bl	80426ce <USB_ReadChInterrupts>
 8041e7a:	4603      	mov	r3, r0
 8041e7c:	f003 0302 	and.w	r3, r3, #2
 8041e80:	2b02      	cmp	r3, #2
 8041e82:	f040 81df 	bne.w	8042244 <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8041e86:	78fb      	ldrb	r3, [r7, #3]
 8041e88:	015a      	lsls	r2, r3, #5
 8041e8a:	693b      	ldr	r3, [r7, #16]
 8041e8c:	4413      	add	r3, r2
 8041e8e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8041e92:	461a      	mov	r2, r3
 8041e94:	2302      	movs	r3, #2
 8041e96:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8041e98:	78fa      	ldrb	r2, [r7, #3]
 8041e9a:	6879      	ldr	r1, [r7, #4]
 8041e9c:	4613      	mov	r3, r2
 8041e9e:	011b      	lsls	r3, r3, #4
 8041ea0:	1a9b      	subs	r3, r3, r2
 8041ea2:	009b      	lsls	r3, r3, #2
 8041ea4:	440b      	add	r3, r1
 8041ea6:	334d      	adds	r3, #77	@ 0x4d
 8041ea8:	781b      	ldrb	r3, [r3, #0]
 8041eaa:	2b01      	cmp	r3, #1
 8041eac:	f040 8093 	bne.w	8041fd6 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8041eb0:	78fa      	ldrb	r2, [r7, #3]
 8041eb2:	6879      	ldr	r1, [r7, #4]
 8041eb4:	4613      	mov	r3, r2
 8041eb6:	011b      	lsls	r3, r3, #4
 8041eb8:	1a9b      	subs	r3, r3, r2
 8041eba:	009b      	lsls	r3, r3, #2
 8041ebc:	440b      	add	r3, r1
 8041ebe:	334d      	adds	r3, #77	@ 0x4d
 8041ec0:	2202      	movs	r2, #2
 8041ec2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8041ec4:	78fa      	ldrb	r2, [r7, #3]
 8041ec6:	6879      	ldr	r1, [r7, #4]
 8041ec8:	4613      	mov	r3, r2
 8041eca:	011b      	lsls	r3, r3, #4
 8041ecc:	1a9b      	subs	r3, r3, r2
 8041ece:	009b      	lsls	r3, r3, #2
 8041ed0:	440b      	add	r3, r1
 8041ed2:	334c      	adds	r3, #76	@ 0x4c
 8041ed4:	2201      	movs	r2, #1
 8041ed6:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8041ed8:	78fa      	ldrb	r2, [r7, #3]
 8041eda:	6879      	ldr	r1, [r7, #4]
 8041edc:	4613      	mov	r3, r2
 8041ede:	011b      	lsls	r3, r3, #4
 8041ee0:	1a9b      	subs	r3, r3, r2
 8041ee2:	009b      	lsls	r3, r3, #2
 8041ee4:	440b      	add	r3, r1
 8041ee6:	3326      	adds	r3, #38	@ 0x26
 8041ee8:	781b      	ldrb	r3, [r3, #0]
 8041eea:	2b02      	cmp	r3, #2
 8041eec:	d00b      	beq.n	8041f06 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8041eee:	78fa      	ldrb	r2, [r7, #3]
 8041ef0:	6879      	ldr	r1, [r7, #4]
 8041ef2:	4613      	mov	r3, r2
 8041ef4:	011b      	lsls	r3, r3, #4
 8041ef6:	1a9b      	subs	r3, r3, r2
 8041ef8:	009b      	lsls	r3, r3, #2
 8041efa:	440b      	add	r3, r1
 8041efc:	3326      	adds	r3, #38	@ 0x26
 8041efe:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8041f00:	2b03      	cmp	r3, #3
 8041f02:	f040 8190 	bne.w	8042226 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 8041f06:	687b      	ldr	r3, [r7, #4]
 8041f08:	799b      	ldrb	r3, [r3, #6]
 8041f0a:	2b00      	cmp	r3, #0
 8041f0c:	d115      	bne.n	8041f3a <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8041f0e:	78fa      	ldrb	r2, [r7, #3]
 8041f10:	6879      	ldr	r1, [r7, #4]
 8041f12:	4613      	mov	r3, r2
 8041f14:	011b      	lsls	r3, r3, #4
 8041f16:	1a9b      	subs	r3, r3, r2
 8041f18:	009b      	lsls	r3, r3, #2
 8041f1a:	440b      	add	r3, r1
 8041f1c:	333d      	adds	r3, #61	@ 0x3d
 8041f1e:	781b      	ldrb	r3, [r3, #0]
 8041f20:	78fa      	ldrb	r2, [r7, #3]
 8041f22:	f083 0301 	eor.w	r3, r3, #1
 8041f26:	b2d8      	uxtb	r0, r3
 8041f28:	6879      	ldr	r1, [r7, #4]
 8041f2a:	4613      	mov	r3, r2
 8041f2c:	011b      	lsls	r3, r3, #4
 8041f2e:	1a9b      	subs	r3, r3, r2
 8041f30:	009b      	lsls	r3, r3, #2
 8041f32:	440b      	add	r3, r1
 8041f34:	333d      	adds	r3, #61	@ 0x3d
 8041f36:	4602      	mov	r2, r0
 8041f38:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8041f3a:	687b      	ldr	r3, [r7, #4]
 8041f3c:	799b      	ldrb	r3, [r3, #6]
 8041f3e:	2b01      	cmp	r3, #1
 8041f40:	f040 8171 	bne.w	8042226 <HCD_HC_OUT_IRQHandler+0x954>
 8041f44:	78fa      	ldrb	r2, [r7, #3]
 8041f46:	6879      	ldr	r1, [r7, #4]
 8041f48:	4613      	mov	r3, r2
 8041f4a:	011b      	lsls	r3, r3, #4
 8041f4c:	1a9b      	subs	r3, r3, r2
 8041f4e:	009b      	lsls	r3, r3, #2
 8041f50:	440b      	add	r3, r1
 8041f52:	3334      	adds	r3, #52	@ 0x34
 8041f54:	681b      	ldr	r3, [r3, #0]
 8041f56:	2b00      	cmp	r3, #0
 8041f58:	f000 8165 	beq.w	8042226 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8041f5c:	78fa      	ldrb	r2, [r7, #3]
 8041f5e:	6879      	ldr	r1, [r7, #4]
 8041f60:	4613      	mov	r3, r2
 8041f62:	011b      	lsls	r3, r3, #4
 8041f64:	1a9b      	subs	r3, r3, r2
 8041f66:	009b      	lsls	r3, r3, #2
 8041f68:	440b      	add	r3, r1
 8041f6a:	3334      	adds	r3, #52	@ 0x34
 8041f6c:	6819      	ldr	r1, [r3, #0]
 8041f6e:	78fa      	ldrb	r2, [r7, #3]
 8041f70:	6878      	ldr	r0, [r7, #4]
 8041f72:	4613      	mov	r3, r2
 8041f74:	011b      	lsls	r3, r3, #4
 8041f76:	1a9b      	subs	r3, r3, r2
 8041f78:	009b      	lsls	r3, r3, #2
 8041f7a:	4403      	add	r3, r0
 8041f7c:	3328      	adds	r3, #40	@ 0x28
 8041f7e:	881b      	ldrh	r3, [r3, #0]
 8041f80:	440b      	add	r3, r1
 8041f82:	1e59      	subs	r1, r3, #1
 8041f84:	78fa      	ldrb	r2, [r7, #3]
 8041f86:	6878      	ldr	r0, [r7, #4]
 8041f88:	4613      	mov	r3, r2
 8041f8a:	011b      	lsls	r3, r3, #4
 8041f8c:	1a9b      	subs	r3, r3, r2
 8041f8e:	009b      	lsls	r3, r3, #2
 8041f90:	4403      	add	r3, r0
 8041f92:	3328      	adds	r3, #40	@ 0x28
 8041f94:	881b      	ldrh	r3, [r3, #0]
 8041f96:	fbb1 f3f3 	udiv	r3, r1, r3
 8041f9a:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8041f9c:	68bb      	ldr	r3, [r7, #8]
 8041f9e:	f003 0301 	and.w	r3, r3, #1
 8041fa2:	2b00      	cmp	r3, #0
 8041fa4:	f000 813f 	beq.w	8042226 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8041fa8:	78fa      	ldrb	r2, [r7, #3]
 8041faa:	6879      	ldr	r1, [r7, #4]
 8041fac:	4613      	mov	r3, r2
 8041fae:	011b      	lsls	r3, r3, #4
 8041fb0:	1a9b      	subs	r3, r3, r2
 8041fb2:	009b      	lsls	r3, r3, #2
 8041fb4:	440b      	add	r3, r1
 8041fb6:	333d      	adds	r3, #61	@ 0x3d
 8041fb8:	781b      	ldrb	r3, [r3, #0]
 8041fba:	78fa      	ldrb	r2, [r7, #3]
 8041fbc:	f083 0301 	eor.w	r3, r3, #1
 8041fc0:	b2d8      	uxtb	r0, r3
 8041fc2:	6879      	ldr	r1, [r7, #4]
 8041fc4:	4613      	mov	r3, r2
 8041fc6:	011b      	lsls	r3, r3, #4
 8041fc8:	1a9b      	subs	r3, r3, r2
 8041fca:	009b      	lsls	r3, r3, #2
 8041fcc:	440b      	add	r3, r1
 8041fce:	333d      	adds	r3, #61	@ 0x3d
 8041fd0:	4602      	mov	r2, r0
 8041fd2:	701a      	strb	r2, [r3, #0]
 8041fd4:	e127      	b.n	8042226 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8041fd6:	78fa      	ldrb	r2, [r7, #3]
 8041fd8:	6879      	ldr	r1, [r7, #4]
 8041fda:	4613      	mov	r3, r2
 8041fdc:	011b      	lsls	r3, r3, #4
 8041fde:	1a9b      	subs	r3, r3, r2
 8041fe0:	009b      	lsls	r3, r3, #2
 8041fe2:	440b      	add	r3, r1
 8041fe4:	334d      	adds	r3, #77	@ 0x4d
 8041fe6:	781b      	ldrb	r3, [r3, #0]
 8041fe8:	2b03      	cmp	r3, #3
 8041fea:	d120      	bne.n	804202e <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8041fec:	78fa      	ldrb	r2, [r7, #3]
 8041fee:	6879      	ldr	r1, [r7, #4]
 8041ff0:	4613      	mov	r3, r2
 8041ff2:	011b      	lsls	r3, r3, #4
 8041ff4:	1a9b      	subs	r3, r3, r2
 8041ff6:	009b      	lsls	r3, r3, #2
 8041ff8:	440b      	add	r3, r1
 8041ffa:	334d      	adds	r3, #77	@ 0x4d
 8041ffc:	2202      	movs	r2, #2
 8041ffe:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8042000:	78fa      	ldrb	r2, [r7, #3]
 8042002:	6879      	ldr	r1, [r7, #4]
 8042004:	4613      	mov	r3, r2
 8042006:	011b      	lsls	r3, r3, #4
 8042008:	1a9b      	subs	r3, r3, r2
 804200a:	009b      	lsls	r3, r3, #2
 804200c:	440b      	add	r3, r1
 804200e:	331b      	adds	r3, #27
 8042010:	781b      	ldrb	r3, [r3, #0]
 8042012:	2b01      	cmp	r3, #1
 8042014:	f040 8107 	bne.w	8042226 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8042018:	78fa      	ldrb	r2, [r7, #3]
 804201a:	6879      	ldr	r1, [r7, #4]
 804201c:	4613      	mov	r3, r2
 804201e:	011b      	lsls	r3, r3, #4
 8042020:	1a9b      	subs	r3, r3, r2
 8042022:	009b      	lsls	r3, r3, #2
 8042024:	440b      	add	r3, r1
 8042026:	334c      	adds	r3, #76	@ 0x4c
 8042028:	2202      	movs	r2, #2
 804202a:	701a      	strb	r2, [r3, #0]
 804202c:	e0fb      	b.n	8042226 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 804202e:	78fa      	ldrb	r2, [r7, #3]
 8042030:	6879      	ldr	r1, [r7, #4]
 8042032:	4613      	mov	r3, r2
 8042034:	011b      	lsls	r3, r3, #4
 8042036:	1a9b      	subs	r3, r3, r2
 8042038:	009b      	lsls	r3, r3, #2
 804203a:	440b      	add	r3, r1
 804203c:	334d      	adds	r3, #77	@ 0x4d
 804203e:	781b      	ldrb	r3, [r3, #0]
 8042040:	2b04      	cmp	r3, #4
 8042042:	d13a      	bne.n	80420ba <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8042044:	78fa      	ldrb	r2, [r7, #3]
 8042046:	6879      	ldr	r1, [r7, #4]
 8042048:	4613      	mov	r3, r2
 804204a:	011b      	lsls	r3, r3, #4
 804204c:	1a9b      	subs	r3, r3, r2
 804204e:	009b      	lsls	r3, r3, #2
 8042050:	440b      	add	r3, r1
 8042052:	334d      	adds	r3, #77	@ 0x4d
 8042054:	2202      	movs	r2, #2
 8042056:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8042058:	78fa      	ldrb	r2, [r7, #3]
 804205a:	6879      	ldr	r1, [r7, #4]
 804205c:	4613      	mov	r3, r2
 804205e:	011b      	lsls	r3, r3, #4
 8042060:	1a9b      	subs	r3, r3, r2
 8042062:	009b      	lsls	r3, r3, #2
 8042064:	440b      	add	r3, r1
 8042066:	334c      	adds	r3, #76	@ 0x4c
 8042068:	2202      	movs	r2, #2
 804206a:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 804206c:	78fa      	ldrb	r2, [r7, #3]
 804206e:	6879      	ldr	r1, [r7, #4]
 8042070:	4613      	mov	r3, r2
 8042072:	011b      	lsls	r3, r3, #4
 8042074:	1a9b      	subs	r3, r3, r2
 8042076:	009b      	lsls	r3, r3, #2
 8042078:	440b      	add	r3, r1
 804207a:	331b      	adds	r3, #27
 804207c:	781b      	ldrb	r3, [r3, #0]
 804207e:	2b01      	cmp	r3, #1
 8042080:	f040 80d1 	bne.w	8042226 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8042084:	78fa      	ldrb	r2, [r7, #3]
 8042086:	6879      	ldr	r1, [r7, #4]
 8042088:	4613      	mov	r3, r2
 804208a:	011b      	lsls	r3, r3, #4
 804208c:	1a9b      	subs	r3, r3, r2
 804208e:	009b      	lsls	r3, r3, #2
 8042090:	440b      	add	r3, r1
 8042092:	331b      	adds	r3, #27
 8042094:	2200      	movs	r2, #0
 8042096:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8042098:	78fb      	ldrb	r3, [r7, #3]
 804209a:	015a      	lsls	r2, r3, #5
 804209c:	693b      	ldr	r3, [r7, #16]
 804209e:	4413      	add	r3, r2
 80420a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80420a4:	685b      	ldr	r3, [r3, #4]
 80420a6:	78fa      	ldrb	r2, [r7, #3]
 80420a8:	0151      	lsls	r1, r2, #5
 80420aa:	693a      	ldr	r2, [r7, #16]
 80420ac:	440a      	add	r2, r1
 80420ae:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80420b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80420b6:	6053      	str	r3, [r2, #4]
 80420b8:	e0b5      	b.n	8042226 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80420ba:	78fa      	ldrb	r2, [r7, #3]
 80420bc:	6879      	ldr	r1, [r7, #4]
 80420be:	4613      	mov	r3, r2
 80420c0:	011b      	lsls	r3, r3, #4
 80420c2:	1a9b      	subs	r3, r3, r2
 80420c4:	009b      	lsls	r3, r3, #2
 80420c6:	440b      	add	r3, r1
 80420c8:	334d      	adds	r3, #77	@ 0x4d
 80420ca:	781b      	ldrb	r3, [r3, #0]
 80420cc:	2b05      	cmp	r3, #5
 80420ce:	d114      	bne.n	80420fa <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80420d0:	78fa      	ldrb	r2, [r7, #3]
 80420d2:	6879      	ldr	r1, [r7, #4]
 80420d4:	4613      	mov	r3, r2
 80420d6:	011b      	lsls	r3, r3, #4
 80420d8:	1a9b      	subs	r3, r3, r2
 80420da:	009b      	lsls	r3, r3, #2
 80420dc:	440b      	add	r3, r1
 80420de:	334d      	adds	r3, #77	@ 0x4d
 80420e0:	2202      	movs	r2, #2
 80420e2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 80420e4:	78fa      	ldrb	r2, [r7, #3]
 80420e6:	6879      	ldr	r1, [r7, #4]
 80420e8:	4613      	mov	r3, r2
 80420ea:	011b      	lsls	r3, r3, #4
 80420ec:	1a9b      	subs	r3, r3, r2
 80420ee:	009b      	lsls	r3, r3, #2
 80420f0:	440b      	add	r3, r1
 80420f2:	334c      	adds	r3, #76	@ 0x4c
 80420f4:	2202      	movs	r2, #2
 80420f6:	701a      	strb	r2, [r3, #0]
 80420f8:	e095      	b.n	8042226 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80420fa:	78fa      	ldrb	r2, [r7, #3]
 80420fc:	6879      	ldr	r1, [r7, #4]
 80420fe:	4613      	mov	r3, r2
 8042100:	011b      	lsls	r3, r3, #4
 8042102:	1a9b      	subs	r3, r3, r2
 8042104:	009b      	lsls	r3, r3, #2
 8042106:	440b      	add	r3, r1
 8042108:	334d      	adds	r3, #77	@ 0x4d
 804210a:	781b      	ldrb	r3, [r3, #0]
 804210c:	2b06      	cmp	r3, #6
 804210e:	d114      	bne.n	804213a <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8042110:	78fa      	ldrb	r2, [r7, #3]
 8042112:	6879      	ldr	r1, [r7, #4]
 8042114:	4613      	mov	r3, r2
 8042116:	011b      	lsls	r3, r3, #4
 8042118:	1a9b      	subs	r3, r3, r2
 804211a:	009b      	lsls	r3, r3, #2
 804211c:	440b      	add	r3, r1
 804211e:	334d      	adds	r3, #77	@ 0x4d
 8042120:	2202      	movs	r2, #2
 8042122:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8042124:	78fa      	ldrb	r2, [r7, #3]
 8042126:	6879      	ldr	r1, [r7, #4]
 8042128:	4613      	mov	r3, r2
 804212a:	011b      	lsls	r3, r3, #4
 804212c:	1a9b      	subs	r3, r3, r2
 804212e:	009b      	lsls	r3, r3, #2
 8042130:	440b      	add	r3, r1
 8042132:	334c      	adds	r3, #76	@ 0x4c
 8042134:	2205      	movs	r2, #5
 8042136:	701a      	strb	r2, [r3, #0]
 8042138:	e075      	b.n	8042226 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 804213a:	78fa      	ldrb	r2, [r7, #3]
 804213c:	6879      	ldr	r1, [r7, #4]
 804213e:	4613      	mov	r3, r2
 8042140:	011b      	lsls	r3, r3, #4
 8042142:	1a9b      	subs	r3, r3, r2
 8042144:	009b      	lsls	r3, r3, #2
 8042146:	440b      	add	r3, r1
 8042148:	334d      	adds	r3, #77	@ 0x4d
 804214a:	781b      	ldrb	r3, [r3, #0]
 804214c:	2b07      	cmp	r3, #7
 804214e:	d00a      	beq.n	8042166 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8042150:	78fa      	ldrb	r2, [r7, #3]
 8042152:	6879      	ldr	r1, [r7, #4]
 8042154:	4613      	mov	r3, r2
 8042156:	011b      	lsls	r3, r3, #4
 8042158:	1a9b      	subs	r3, r3, r2
 804215a:	009b      	lsls	r3, r3, #2
 804215c:	440b      	add	r3, r1
 804215e:	334d      	adds	r3, #77	@ 0x4d
 8042160:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8042162:	2b09      	cmp	r3, #9
 8042164:	d170      	bne.n	8042248 <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8042166:	78fa      	ldrb	r2, [r7, #3]
 8042168:	6879      	ldr	r1, [r7, #4]
 804216a:	4613      	mov	r3, r2
 804216c:	011b      	lsls	r3, r3, #4
 804216e:	1a9b      	subs	r3, r3, r2
 8042170:	009b      	lsls	r3, r3, #2
 8042172:	440b      	add	r3, r1
 8042174:	334d      	adds	r3, #77	@ 0x4d
 8042176:	2202      	movs	r2, #2
 8042178:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 804217a:	78fa      	ldrb	r2, [r7, #3]
 804217c:	6879      	ldr	r1, [r7, #4]
 804217e:	4613      	mov	r3, r2
 8042180:	011b      	lsls	r3, r3, #4
 8042182:	1a9b      	subs	r3, r3, r2
 8042184:	009b      	lsls	r3, r3, #2
 8042186:	440b      	add	r3, r1
 8042188:	3344      	adds	r3, #68	@ 0x44
 804218a:	681b      	ldr	r3, [r3, #0]
 804218c:	1c59      	adds	r1, r3, #1
 804218e:	6878      	ldr	r0, [r7, #4]
 8042190:	4613      	mov	r3, r2
 8042192:	011b      	lsls	r3, r3, #4
 8042194:	1a9b      	subs	r3, r3, r2
 8042196:	009b      	lsls	r3, r3, #2
 8042198:	4403      	add	r3, r0
 804219a:	3344      	adds	r3, #68	@ 0x44
 804219c:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 804219e:	78fa      	ldrb	r2, [r7, #3]
 80421a0:	6879      	ldr	r1, [r7, #4]
 80421a2:	4613      	mov	r3, r2
 80421a4:	011b      	lsls	r3, r3, #4
 80421a6:	1a9b      	subs	r3, r3, r2
 80421a8:	009b      	lsls	r3, r3, #2
 80421aa:	440b      	add	r3, r1
 80421ac:	3344      	adds	r3, #68	@ 0x44
 80421ae:	681b      	ldr	r3, [r3, #0]
 80421b0:	2b02      	cmp	r3, #2
 80421b2:	d914      	bls.n	80421de <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80421b4:	78fa      	ldrb	r2, [r7, #3]
 80421b6:	6879      	ldr	r1, [r7, #4]
 80421b8:	4613      	mov	r3, r2
 80421ba:	011b      	lsls	r3, r3, #4
 80421bc:	1a9b      	subs	r3, r3, r2
 80421be:	009b      	lsls	r3, r3, #2
 80421c0:	440b      	add	r3, r1
 80421c2:	3344      	adds	r3, #68	@ 0x44
 80421c4:	2200      	movs	r2, #0
 80421c6:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80421c8:	78fa      	ldrb	r2, [r7, #3]
 80421ca:	6879      	ldr	r1, [r7, #4]
 80421cc:	4613      	mov	r3, r2
 80421ce:	011b      	lsls	r3, r3, #4
 80421d0:	1a9b      	subs	r3, r3, r2
 80421d2:	009b      	lsls	r3, r3, #2
 80421d4:	440b      	add	r3, r1
 80421d6:	334c      	adds	r3, #76	@ 0x4c
 80421d8:	2204      	movs	r2, #4
 80421da:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80421dc:	e022      	b.n	8042224 <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80421de:	78fa      	ldrb	r2, [r7, #3]
 80421e0:	6879      	ldr	r1, [r7, #4]
 80421e2:	4613      	mov	r3, r2
 80421e4:	011b      	lsls	r3, r3, #4
 80421e6:	1a9b      	subs	r3, r3, r2
 80421e8:	009b      	lsls	r3, r3, #2
 80421ea:	440b      	add	r3, r1
 80421ec:	334c      	adds	r3, #76	@ 0x4c
 80421ee:	2202      	movs	r2, #2
 80421f0:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80421f2:	78fb      	ldrb	r3, [r7, #3]
 80421f4:	015a      	lsls	r2, r3, #5
 80421f6:	693b      	ldr	r3, [r7, #16]
 80421f8:	4413      	add	r3, r2
 80421fa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80421fe:	681b      	ldr	r3, [r3, #0]
 8042200:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8042202:	68fb      	ldr	r3, [r7, #12]
 8042204:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8042208:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 804220a:	68fb      	ldr	r3, [r7, #12]
 804220c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8042210:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8042212:	78fb      	ldrb	r3, [r7, #3]
 8042214:	015a      	lsls	r2, r3, #5
 8042216:	693b      	ldr	r3, [r7, #16]
 8042218:	4413      	add	r3, r2
 804221a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 804221e:	461a      	mov	r2, r3
 8042220:	68fb      	ldr	r3, [r7, #12]
 8042222:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8042224:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8042226:	78fa      	ldrb	r2, [r7, #3]
 8042228:	6879      	ldr	r1, [r7, #4]
 804222a:	4613      	mov	r3, r2
 804222c:	011b      	lsls	r3, r3, #4
 804222e:	1a9b      	subs	r3, r3, r2
 8042230:	009b      	lsls	r3, r3, #2
 8042232:	440b      	add	r3, r1
 8042234:	334c      	adds	r3, #76	@ 0x4c
 8042236:	781a      	ldrb	r2, [r3, #0]
 8042238:	78fb      	ldrb	r3, [r7, #3]
 804223a:	4619      	mov	r1, r3
 804223c:	6878      	ldr	r0, [r7, #4]
 804223e:	f000 fd3e 	bl	8042cbe <HAL_HCD_HC_NotifyURBChange_Callback>
 8042242:	e002      	b.n	804224a <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8042244:	bf00      	nop
 8042246:	e000      	b.n	804224a <HCD_HC_OUT_IRQHandler+0x978>
      return;
 8042248:	bf00      	nop
  }
}
 804224a:	3718      	adds	r7, #24
 804224c:	46bd      	mov	sp, r7
 804224e:	bd80      	pop	{r7, pc}

08042250 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8042250:	b580      	push	{r7, lr}
 8042252:	b08a      	sub	sp, #40	@ 0x28
 8042254:	af00      	add	r7, sp, #0
 8042256:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8042258:	687b      	ldr	r3, [r7, #4]
 804225a:	681b      	ldr	r3, [r3, #0]
 804225c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 804225e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8042260:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8042262:	687b      	ldr	r3, [r7, #4]
 8042264:	681b      	ldr	r3, [r3, #0]
 8042266:	6a1b      	ldr	r3, [r3, #32]
 8042268:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 804226a:	69fb      	ldr	r3, [r7, #28]
 804226c:	f003 030f 	and.w	r3, r3, #15
 8042270:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8042272:	69fb      	ldr	r3, [r7, #28]
 8042274:	0c5b      	lsrs	r3, r3, #17
 8042276:	f003 030f 	and.w	r3, r3, #15
 804227a:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 804227c:	69fb      	ldr	r3, [r7, #28]
 804227e:	091b      	lsrs	r3, r3, #4
 8042280:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8042284:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8042286:	697b      	ldr	r3, [r7, #20]
 8042288:	2b02      	cmp	r3, #2
 804228a:	d004      	beq.n	8042296 <HCD_RXQLVL_IRQHandler+0x46>
 804228c:	697b      	ldr	r3, [r7, #20]
 804228e:	2b05      	cmp	r3, #5
 8042290:	f000 80b6 	beq.w	8042400 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8042294:	e0b7      	b.n	8042406 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8042296:	693b      	ldr	r3, [r7, #16]
 8042298:	2b00      	cmp	r3, #0
 804229a:	f000 80b3 	beq.w	8042404 <HCD_RXQLVL_IRQHandler+0x1b4>
 804229e:	6879      	ldr	r1, [r7, #4]
 80422a0:	69ba      	ldr	r2, [r7, #24]
 80422a2:	4613      	mov	r3, r2
 80422a4:	011b      	lsls	r3, r3, #4
 80422a6:	1a9b      	subs	r3, r3, r2
 80422a8:	009b      	lsls	r3, r3, #2
 80422aa:	440b      	add	r3, r1
 80422ac:	332c      	adds	r3, #44	@ 0x2c
 80422ae:	681b      	ldr	r3, [r3, #0]
 80422b0:	2b00      	cmp	r3, #0
 80422b2:	f000 80a7 	beq.w	8042404 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 80422b6:	6879      	ldr	r1, [r7, #4]
 80422b8:	69ba      	ldr	r2, [r7, #24]
 80422ba:	4613      	mov	r3, r2
 80422bc:	011b      	lsls	r3, r3, #4
 80422be:	1a9b      	subs	r3, r3, r2
 80422c0:	009b      	lsls	r3, r3, #2
 80422c2:	440b      	add	r3, r1
 80422c4:	3338      	adds	r3, #56	@ 0x38
 80422c6:	681a      	ldr	r2, [r3, #0]
 80422c8:	693b      	ldr	r3, [r7, #16]
 80422ca:	18d1      	adds	r1, r2, r3
 80422cc:	6878      	ldr	r0, [r7, #4]
 80422ce:	69ba      	ldr	r2, [r7, #24]
 80422d0:	4613      	mov	r3, r2
 80422d2:	011b      	lsls	r3, r3, #4
 80422d4:	1a9b      	subs	r3, r3, r2
 80422d6:	009b      	lsls	r3, r3, #2
 80422d8:	4403      	add	r3, r0
 80422da:	3334      	adds	r3, #52	@ 0x34
 80422dc:	681b      	ldr	r3, [r3, #0]
 80422de:	4299      	cmp	r1, r3
 80422e0:	f200 8083 	bhi.w	80423ea <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 80422e4:	687b      	ldr	r3, [r7, #4]
 80422e6:	6818      	ldr	r0, [r3, #0]
 80422e8:	6879      	ldr	r1, [r7, #4]
 80422ea:	69ba      	ldr	r2, [r7, #24]
 80422ec:	4613      	mov	r3, r2
 80422ee:	011b      	lsls	r3, r3, #4
 80422f0:	1a9b      	subs	r3, r3, r2
 80422f2:	009b      	lsls	r3, r3, #2
 80422f4:	440b      	add	r3, r1
 80422f6:	332c      	adds	r3, #44	@ 0x2c
 80422f8:	681b      	ldr	r3, [r3, #0]
 80422fa:	693a      	ldr	r2, [r7, #16]
 80422fc:	b292      	uxth	r2, r2
 80422fe:	4619      	mov	r1, r3
 8042300:	f000 f97a 	bl	80425f8 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8042304:	6879      	ldr	r1, [r7, #4]
 8042306:	69ba      	ldr	r2, [r7, #24]
 8042308:	4613      	mov	r3, r2
 804230a:	011b      	lsls	r3, r3, #4
 804230c:	1a9b      	subs	r3, r3, r2
 804230e:	009b      	lsls	r3, r3, #2
 8042310:	440b      	add	r3, r1
 8042312:	332c      	adds	r3, #44	@ 0x2c
 8042314:	681a      	ldr	r2, [r3, #0]
 8042316:	693b      	ldr	r3, [r7, #16]
 8042318:	18d1      	adds	r1, r2, r3
 804231a:	6878      	ldr	r0, [r7, #4]
 804231c:	69ba      	ldr	r2, [r7, #24]
 804231e:	4613      	mov	r3, r2
 8042320:	011b      	lsls	r3, r3, #4
 8042322:	1a9b      	subs	r3, r3, r2
 8042324:	009b      	lsls	r3, r3, #2
 8042326:	4403      	add	r3, r0
 8042328:	332c      	adds	r3, #44	@ 0x2c
 804232a:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 804232c:	6879      	ldr	r1, [r7, #4]
 804232e:	69ba      	ldr	r2, [r7, #24]
 8042330:	4613      	mov	r3, r2
 8042332:	011b      	lsls	r3, r3, #4
 8042334:	1a9b      	subs	r3, r3, r2
 8042336:	009b      	lsls	r3, r3, #2
 8042338:	440b      	add	r3, r1
 804233a:	3338      	adds	r3, #56	@ 0x38
 804233c:	681a      	ldr	r2, [r3, #0]
 804233e:	693b      	ldr	r3, [r7, #16]
 8042340:	18d1      	adds	r1, r2, r3
 8042342:	6878      	ldr	r0, [r7, #4]
 8042344:	69ba      	ldr	r2, [r7, #24]
 8042346:	4613      	mov	r3, r2
 8042348:	011b      	lsls	r3, r3, #4
 804234a:	1a9b      	subs	r3, r3, r2
 804234c:	009b      	lsls	r3, r3, #2
 804234e:	4403      	add	r3, r0
 8042350:	3338      	adds	r3, #56	@ 0x38
 8042352:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8042354:	69bb      	ldr	r3, [r7, #24]
 8042356:	015a      	lsls	r2, r3, #5
 8042358:	6a3b      	ldr	r3, [r7, #32]
 804235a:	4413      	add	r3, r2
 804235c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8042360:	691b      	ldr	r3, [r3, #16]
 8042362:	0cdb      	lsrs	r3, r3, #19
 8042364:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8042368:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 804236a:	6879      	ldr	r1, [r7, #4]
 804236c:	69ba      	ldr	r2, [r7, #24]
 804236e:	4613      	mov	r3, r2
 8042370:	011b      	lsls	r3, r3, #4
 8042372:	1a9b      	subs	r3, r3, r2
 8042374:	009b      	lsls	r3, r3, #2
 8042376:	440b      	add	r3, r1
 8042378:	3328      	adds	r3, #40	@ 0x28
 804237a:	881b      	ldrh	r3, [r3, #0]
 804237c:	461a      	mov	r2, r3
 804237e:	693b      	ldr	r3, [r7, #16]
 8042380:	4293      	cmp	r3, r2
 8042382:	d13f      	bne.n	8042404 <HCD_RXQLVL_IRQHandler+0x1b4>
 8042384:	68fb      	ldr	r3, [r7, #12]
 8042386:	2b00      	cmp	r3, #0
 8042388:	d03c      	beq.n	8042404 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 804238a:	69bb      	ldr	r3, [r7, #24]
 804238c:	015a      	lsls	r2, r3, #5
 804238e:	6a3b      	ldr	r3, [r7, #32]
 8042390:	4413      	add	r3, r2
 8042392:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8042396:	681b      	ldr	r3, [r3, #0]
 8042398:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 804239a:	68bb      	ldr	r3, [r7, #8]
 804239c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80423a0:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80423a2:	68bb      	ldr	r3, [r7, #8]
 80423a4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80423a8:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 80423aa:	69bb      	ldr	r3, [r7, #24]
 80423ac:	015a      	lsls	r2, r3, #5
 80423ae:	6a3b      	ldr	r3, [r7, #32]
 80423b0:	4413      	add	r3, r2
 80423b2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80423b6:	461a      	mov	r2, r3
 80423b8:	68bb      	ldr	r3, [r7, #8]
 80423ba:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 80423bc:	6879      	ldr	r1, [r7, #4]
 80423be:	69ba      	ldr	r2, [r7, #24]
 80423c0:	4613      	mov	r3, r2
 80423c2:	011b      	lsls	r3, r3, #4
 80423c4:	1a9b      	subs	r3, r3, r2
 80423c6:	009b      	lsls	r3, r3, #2
 80423c8:	440b      	add	r3, r1
 80423ca:	333c      	adds	r3, #60	@ 0x3c
 80423cc:	781b      	ldrb	r3, [r3, #0]
 80423ce:	f083 0301 	eor.w	r3, r3, #1
 80423d2:	b2d8      	uxtb	r0, r3
 80423d4:	6879      	ldr	r1, [r7, #4]
 80423d6:	69ba      	ldr	r2, [r7, #24]
 80423d8:	4613      	mov	r3, r2
 80423da:	011b      	lsls	r3, r3, #4
 80423dc:	1a9b      	subs	r3, r3, r2
 80423de:	009b      	lsls	r3, r3, #2
 80423e0:	440b      	add	r3, r1
 80423e2:	333c      	adds	r3, #60	@ 0x3c
 80423e4:	4602      	mov	r2, r0
 80423e6:	701a      	strb	r2, [r3, #0]
      break;
 80423e8:	e00c      	b.n	8042404 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 80423ea:	6879      	ldr	r1, [r7, #4]
 80423ec:	69ba      	ldr	r2, [r7, #24]
 80423ee:	4613      	mov	r3, r2
 80423f0:	011b      	lsls	r3, r3, #4
 80423f2:	1a9b      	subs	r3, r3, r2
 80423f4:	009b      	lsls	r3, r3, #2
 80423f6:	440b      	add	r3, r1
 80423f8:	334c      	adds	r3, #76	@ 0x4c
 80423fa:	2204      	movs	r2, #4
 80423fc:	701a      	strb	r2, [r3, #0]
      break;
 80423fe:	e001      	b.n	8042404 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8042400:	bf00      	nop
 8042402:	e000      	b.n	8042406 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8042404:	bf00      	nop
  }
}
 8042406:	bf00      	nop
 8042408:	3728      	adds	r7, #40	@ 0x28
 804240a:	46bd      	mov	sp, r7
 804240c:	bd80      	pop	{r7, pc}

0804240e <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 804240e:	b580      	push	{r7, lr}
 8042410:	b086      	sub	sp, #24
 8042412:	af00      	add	r7, sp, #0
 8042414:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8042416:	687b      	ldr	r3, [r7, #4]
 8042418:	681b      	ldr	r3, [r3, #0]
 804241a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 804241c:	697b      	ldr	r3, [r7, #20]
 804241e:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8042420:	693b      	ldr	r3, [r7, #16]
 8042422:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8042426:	681b      	ldr	r3, [r3, #0]
 8042428:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 804242a:	693b      	ldr	r3, [r7, #16]
 804242c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8042430:	681b      	ldr	r3, [r3, #0]
 8042432:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8042434:	68bb      	ldr	r3, [r7, #8]
 8042436:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 804243a:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 804243c:	68fb      	ldr	r3, [r7, #12]
 804243e:	f003 0302 	and.w	r3, r3, #2
 8042442:	2b02      	cmp	r3, #2
 8042444:	d10b      	bne.n	804245e <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8042446:	68fb      	ldr	r3, [r7, #12]
 8042448:	f003 0301 	and.w	r3, r3, #1
 804244c:	2b01      	cmp	r3, #1
 804244e:	d102      	bne.n	8042456 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8042450:	6878      	ldr	r0, [r7, #4]
 8042452:	f000 fc18 	bl	8042c86 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8042456:	68bb      	ldr	r3, [r7, #8]
 8042458:	f043 0302 	orr.w	r3, r3, #2
 804245c:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 804245e:	68fb      	ldr	r3, [r7, #12]
 8042460:	f003 0308 	and.w	r3, r3, #8
 8042464:	2b08      	cmp	r3, #8
 8042466:	d132      	bne.n	80424ce <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8042468:	68bb      	ldr	r3, [r7, #8]
 804246a:	f043 0308 	orr.w	r3, r3, #8
 804246e:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8042470:	68fb      	ldr	r3, [r7, #12]
 8042472:	f003 0304 	and.w	r3, r3, #4
 8042476:	2b04      	cmp	r3, #4
 8042478:	d126      	bne.n	80424c8 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 804247a:	687b      	ldr	r3, [r7, #4]
 804247c:	7a5b      	ldrb	r3, [r3, #9]
 804247e:	2b02      	cmp	r3, #2
 8042480:	d113      	bne.n	80424aa <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8042482:	68fb      	ldr	r3, [r7, #12]
 8042484:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8042488:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 804248c:	d106      	bne.n	804249c <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 804248e:	687b      	ldr	r3, [r7, #4]
 8042490:	681b      	ldr	r3, [r3, #0]
 8042492:	2102      	movs	r1, #2
 8042494:	4618      	mov	r0, r3
 8042496:	f000 f949 	bl	804272c <USB_InitFSLSPClkSel>
 804249a:	e011      	b.n	80424c0 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 804249c:	687b      	ldr	r3, [r7, #4]
 804249e:	681b      	ldr	r3, [r3, #0]
 80424a0:	2101      	movs	r1, #1
 80424a2:	4618      	mov	r0, r3
 80424a4:	f000 f942 	bl	804272c <USB_InitFSLSPClkSel>
 80424a8:	e00a      	b.n	80424c0 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80424aa:	687b      	ldr	r3, [r7, #4]
 80424ac:	79db      	ldrb	r3, [r3, #7]
 80424ae:	2b01      	cmp	r3, #1
 80424b0:	d106      	bne.n	80424c0 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 80424b2:	693b      	ldr	r3, [r7, #16]
 80424b4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80424b8:	461a      	mov	r2, r3
 80424ba:	f64e 2360 	movw	r3, #60000	@ 0xea60
 80424be:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80424c0:	6878      	ldr	r0, [r7, #4]
 80424c2:	f000 fc0a 	bl	8042cda <HAL_HCD_PortEnabled_Callback>
 80424c6:	e002      	b.n	80424ce <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80424c8:	6878      	ldr	r0, [r7, #4]
 80424ca:	f000 fc14 	bl	8042cf6 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80424ce:	68fb      	ldr	r3, [r7, #12]
 80424d0:	f003 0320 	and.w	r3, r3, #32
 80424d4:	2b20      	cmp	r3, #32
 80424d6:	d103      	bne.n	80424e0 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80424d8:	68bb      	ldr	r3, [r7, #8]
 80424da:	f043 0320 	orr.w	r3, r3, #32
 80424de:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80424e0:	693b      	ldr	r3, [r7, #16]
 80424e2:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80424e6:	461a      	mov	r2, r3
 80424e8:	68bb      	ldr	r3, [r7, #8]
 80424ea:	6013      	str	r3, [r2, #0]
}
 80424ec:	bf00      	nop
 80424ee:	3718      	adds	r7, #24
 80424f0:	46bd      	mov	sp, r7
 80424f2:	bd80      	pop	{r7, pc}

080424f4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80424f4:	b480      	push	{r7}
 80424f6:	b083      	sub	sp, #12
 80424f8:	af00      	add	r7, sp, #0
 80424fa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80424fc:	687b      	ldr	r3, [r7, #4]
 80424fe:	689b      	ldr	r3, [r3, #8]
 8042500:	f043 0201 	orr.w	r2, r3, #1
 8042504:	687b      	ldr	r3, [r7, #4]
 8042506:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8042508:	2300      	movs	r3, #0
}
 804250a:	4618      	mov	r0, r3
 804250c:	370c      	adds	r7, #12
 804250e:	46bd      	mov	sp, r7
 8042510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042514:	4770      	bx	lr

08042516 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8042516:	b480      	push	{r7}
 8042518:	b083      	sub	sp, #12
 804251a:	af00      	add	r7, sp, #0
 804251c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 804251e:	687b      	ldr	r3, [r7, #4]
 8042520:	689b      	ldr	r3, [r3, #8]
 8042522:	f023 0201 	bic.w	r2, r3, #1
 8042526:	687b      	ldr	r3, [r7, #4]
 8042528:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 804252a:	2300      	movs	r3, #0
}
 804252c:	4618      	mov	r0, r3
 804252e:	370c      	adds	r7, #12
 8042530:	46bd      	mov	sp, r7
 8042532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042536:	4770      	bx	lr

08042538 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8042538:	b480      	push	{r7}
 804253a:	b085      	sub	sp, #20
 804253c:	af00      	add	r7, sp, #0
 804253e:	6078      	str	r0, [r7, #4]
 8042540:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8042542:	2300      	movs	r3, #0
 8042544:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8042546:	68fb      	ldr	r3, [r7, #12]
 8042548:	3301      	adds	r3, #1
 804254a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 804254c:	68fb      	ldr	r3, [r7, #12]
 804254e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8042552:	d901      	bls.n	8042558 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8042554:	2303      	movs	r3, #3
 8042556:	e01b      	b.n	8042590 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8042558:	687b      	ldr	r3, [r7, #4]
 804255a:	691b      	ldr	r3, [r3, #16]
 804255c:	2b00      	cmp	r3, #0
 804255e:	daf2      	bge.n	8042546 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8042560:	2300      	movs	r3, #0
 8042562:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8042564:	683b      	ldr	r3, [r7, #0]
 8042566:	019b      	lsls	r3, r3, #6
 8042568:	f043 0220 	orr.w	r2, r3, #32
 804256c:	687b      	ldr	r3, [r7, #4]
 804256e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8042570:	68fb      	ldr	r3, [r7, #12]
 8042572:	3301      	adds	r3, #1
 8042574:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8042576:	68fb      	ldr	r3, [r7, #12]
 8042578:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 804257c:	d901      	bls.n	8042582 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 804257e:	2303      	movs	r3, #3
 8042580:	e006      	b.n	8042590 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8042582:	687b      	ldr	r3, [r7, #4]
 8042584:	691b      	ldr	r3, [r3, #16]
 8042586:	f003 0320 	and.w	r3, r3, #32
 804258a:	2b20      	cmp	r3, #32
 804258c:	d0f0      	beq.n	8042570 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 804258e:	2300      	movs	r3, #0
}
 8042590:	4618      	mov	r0, r3
 8042592:	3714      	adds	r7, #20
 8042594:	46bd      	mov	sp, r7
 8042596:	f85d 7b04 	ldr.w	r7, [sp], #4
 804259a:	4770      	bx	lr

0804259c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 804259c:	b480      	push	{r7}
 804259e:	b085      	sub	sp, #20
 80425a0:	af00      	add	r7, sp, #0
 80425a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80425a4:	2300      	movs	r3, #0
 80425a6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80425a8:	68fb      	ldr	r3, [r7, #12]
 80425aa:	3301      	adds	r3, #1
 80425ac:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80425ae:	68fb      	ldr	r3, [r7, #12]
 80425b0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80425b4:	d901      	bls.n	80425ba <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80425b6:	2303      	movs	r3, #3
 80425b8:	e018      	b.n	80425ec <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80425ba:	687b      	ldr	r3, [r7, #4]
 80425bc:	691b      	ldr	r3, [r3, #16]
 80425be:	2b00      	cmp	r3, #0
 80425c0:	daf2      	bge.n	80425a8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80425c2:	2300      	movs	r3, #0
 80425c4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80425c6:	687b      	ldr	r3, [r7, #4]
 80425c8:	2210      	movs	r2, #16
 80425ca:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80425cc:	68fb      	ldr	r3, [r7, #12]
 80425ce:	3301      	adds	r3, #1
 80425d0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80425d2:	68fb      	ldr	r3, [r7, #12]
 80425d4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80425d8:	d901      	bls.n	80425de <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80425da:	2303      	movs	r3, #3
 80425dc:	e006      	b.n	80425ec <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80425de:	687b      	ldr	r3, [r7, #4]
 80425e0:	691b      	ldr	r3, [r3, #16]
 80425e2:	f003 0310 	and.w	r3, r3, #16
 80425e6:	2b10      	cmp	r3, #16
 80425e8:	d0f0      	beq.n	80425cc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80425ea:	2300      	movs	r3, #0
}
 80425ec:	4618      	mov	r0, r3
 80425ee:	3714      	adds	r7, #20
 80425f0:	46bd      	mov	sp, r7
 80425f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80425f6:	4770      	bx	lr

080425f8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80425f8:	b480      	push	{r7}
 80425fa:	b08b      	sub	sp, #44	@ 0x2c
 80425fc:	af00      	add	r7, sp, #0
 80425fe:	60f8      	str	r0, [r7, #12]
 8042600:	60b9      	str	r1, [r7, #8]
 8042602:	4613      	mov	r3, r2
 8042604:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8042606:	68fb      	ldr	r3, [r7, #12]
 8042608:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 804260a:	68bb      	ldr	r3, [r7, #8]
 804260c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 804260e:	88fb      	ldrh	r3, [r7, #6]
 8042610:	089b      	lsrs	r3, r3, #2
 8042612:	b29b      	uxth	r3, r3
 8042614:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8042616:	88fb      	ldrh	r3, [r7, #6]
 8042618:	f003 0303 	and.w	r3, r3, #3
 804261c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 804261e:	2300      	movs	r3, #0
 8042620:	623b      	str	r3, [r7, #32]
 8042622:	e014      	b.n	804264e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8042624:	69bb      	ldr	r3, [r7, #24]
 8042626:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 804262a:	681a      	ldr	r2, [r3, #0]
 804262c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 804262e:	601a      	str	r2, [r3, #0]
    pDest++;
 8042630:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8042632:	3301      	adds	r3, #1
 8042634:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8042636:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8042638:	3301      	adds	r3, #1
 804263a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 804263c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 804263e:	3301      	adds	r3, #1
 8042640:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8042642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8042644:	3301      	adds	r3, #1
 8042646:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8042648:	6a3b      	ldr	r3, [r7, #32]
 804264a:	3301      	adds	r3, #1
 804264c:	623b      	str	r3, [r7, #32]
 804264e:	6a3a      	ldr	r2, [r7, #32]
 8042650:	697b      	ldr	r3, [r7, #20]
 8042652:	429a      	cmp	r2, r3
 8042654:	d3e6      	bcc.n	8042624 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8042656:	8bfb      	ldrh	r3, [r7, #30]
 8042658:	2b00      	cmp	r3, #0
 804265a:	d01e      	beq.n	804269a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 804265c:	2300      	movs	r3, #0
 804265e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8042660:	69bb      	ldr	r3, [r7, #24]
 8042662:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8042666:	461a      	mov	r2, r3
 8042668:	f107 0310 	add.w	r3, r7, #16
 804266c:	6812      	ldr	r2, [r2, #0]
 804266e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8042670:	693a      	ldr	r2, [r7, #16]
 8042672:	6a3b      	ldr	r3, [r7, #32]
 8042674:	b2db      	uxtb	r3, r3
 8042676:	00db      	lsls	r3, r3, #3
 8042678:	fa22 f303 	lsr.w	r3, r2, r3
 804267c:	b2da      	uxtb	r2, r3
 804267e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8042680:	701a      	strb	r2, [r3, #0]
      i++;
 8042682:	6a3b      	ldr	r3, [r7, #32]
 8042684:	3301      	adds	r3, #1
 8042686:	623b      	str	r3, [r7, #32]
      pDest++;
 8042688:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 804268a:	3301      	adds	r3, #1
 804268c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 804268e:	8bfb      	ldrh	r3, [r7, #30]
 8042690:	3b01      	subs	r3, #1
 8042692:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8042694:	8bfb      	ldrh	r3, [r7, #30]
 8042696:	2b00      	cmp	r3, #0
 8042698:	d1ea      	bne.n	8042670 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 804269a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 804269c:	4618      	mov	r0, r3
 804269e:	372c      	adds	r7, #44	@ 0x2c
 80426a0:	46bd      	mov	sp, r7
 80426a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80426a6:	4770      	bx	lr

080426a8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80426a8:	b480      	push	{r7}
 80426aa:	b085      	sub	sp, #20
 80426ac:	af00      	add	r7, sp, #0
 80426ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80426b0:	687b      	ldr	r3, [r7, #4]
 80426b2:	695b      	ldr	r3, [r3, #20]
 80426b4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80426b6:	687b      	ldr	r3, [r7, #4]
 80426b8:	699b      	ldr	r3, [r3, #24]
 80426ba:	68fa      	ldr	r2, [r7, #12]
 80426bc:	4013      	ands	r3, r2
 80426be:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80426c0:	68fb      	ldr	r3, [r7, #12]
}
 80426c2:	4618      	mov	r0, r3
 80426c4:	3714      	adds	r7, #20
 80426c6:	46bd      	mov	sp, r7
 80426c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80426cc:	4770      	bx	lr

080426ce <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 80426ce:	b480      	push	{r7}
 80426d0:	b085      	sub	sp, #20
 80426d2:	af00      	add	r7, sp, #0
 80426d4:	6078      	str	r0, [r7, #4]
 80426d6:	460b      	mov	r3, r1
 80426d8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80426da:	687b      	ldr	r3, [r7, #4]
 80426dc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 80426de:	78fb      	ldrb	r3, [r7, #3]
 80426e0:	015a      	lsls	r2, r3, #5
 80426e2:	68fb      	ldr	r3, [r7, #12]
 80426e4:	4413      	add	r3, r2
 80426e6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80426ea:	689b      	ldr	r3, [r3, #8]
 80426ec:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 80426ee:	78fb      	ldrb	r3, [r7, #3]
 80426f0:	015a      	lsls	r2, r3, #5
 80426f2:	68fb      	ldr	r3, [r7, #12]
 80426f4:	4413      	add	r3, r2
 80426f6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80426fa:	68db      	ldr	r3, [r3, #12]
 80426fc:	68ba      	ldr	r2, [r7, #8]
 80426fe:	4013      	ands	r3, r2
 8042700:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8042702:	68bb      	ldr	r3, [r7, #8]
}
 8042704:	4618      	mov	r0, r3
 8042706:	3714      	adds	r7, #20
 8042708:	46bd      	mov	sp, r7
 804270a:	f85d 7b04 	ldr.w	r7, [sp], #4
 804270e:	4770      	bx	lr

08042710 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8042710:	b480      	push	{r7}
 8042712:	b083      	sub	sp, #12
 8042714:	af00      	add	r7, sp, #0
 8042716:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8042718:	687b      	ldr	r3, [r7, #4]
 804271a:	695b      	ldr	r3, [r3, #20]
 804271c:	f003 0301 	and.w	r3, r3, #1
}
 8042720:	4618      	mov	r0, r3
 8042722:	370c      	adds	r7, #12
 8042724:	46bd      	mov	sp, r7
 8042726:	f85d 7b04 	ldr.w	r7, [sp], #4
 804272a:	4770      	bx	lr

0804272c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 804272c:	b480      	push	{r7}
 804272e:	b085      	sub	sp, #20
 8042730:	af00      	add	r7, sp, #0
 8042732:	6078      	str	r0, [r7, #4]
 8042734:	460b      	mov	r3, r1
 8042736:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8042738:	687b      	ldr	r3, [r7, #4]
 804273a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 804273c:	68fb      	ldr	r3, [r7, #12]
 804273e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8042742:	681b      	ldr	r3, [r3, #0]
 8042744:	68fa      	ldr	r2, [r7, #12]
 8042746:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 804274a:	f023 0303 	bic.w	r3, r3, #3
 804274e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8042750:	68fb      	ldr	r3, [r7, #12]
 8042752:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8042756:	681a      	ldr	r2, [r3, #0]
 8042758:	78fb      	ldrb	r3, [r7, #3]
 804275a:	f003 0303 	and.w	r3, r3, #3
 804275e:	68f9      	ldr	r1, [r7, #12]
 8042760:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8042764:	4313      	orrs	r3, r2
 8042766:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8042768:	78fb      	ldrb	r3, [r7, #3]
 804276a:	2b01      	cmp	r3, #1
 804276c:	d107      	bne.n	804277e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 804276e:	68fb      	ldr	r3, [r7, #12]
 8042770:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8042774:	461a      	mov	r2, r3
 8042776:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 804277a:	6053      	str	r3, [r2, #4]
 804277c:	e00c      	b.n	8042798 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 804277e:	78fb      	ldrb	r3, [r7, #3]
 8042780:	2b02      	cmp	r3, #2
 8042782:	d107      	bne.n	8042794 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8042784:	68fb      	ldr	r3, [r7, #12]
 8042786:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 804278a:	461a      	mov	r2, r3
 804278c:	f241 7370 	movw	r3, #6000	@ 0x1770
 8042790:	6053      	str	r3, [r2, #4]
 8042792:	e001      	b.n	8042798 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8042794:	2301      	movs	r3, #1
 8042796:	e000      	b.n	804279a <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8042798:	2300      	movs	r3, #0
}
 804279a:	4618      	mov	r0, r3
 804279c:	3714      	adds	r7, #20
 804279e:	46bd      	mov	sp, r7
 80427a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80427a4:	4770      	bx	lr

080427a6 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80427a6:	b480      	push	{r7}
 80427a8:	b085      	sub	sp, #20
 80427aa:	af00      	add	r7, sp, #0
 80427ac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80427ae:	687b      	ldr	r3, [r7, #4]
 80427b0:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80427b2:	68fb      	ldr	r3, [r7, #12]
 80427b4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80427b8:	695b      	ldr	r3, [r3, #20]
 80427ba:	b29b      	uxth	r3, r3
}
 80427bc:	4618      	mov	r0, r3
 80427be:	3714      	adds	r7, #20
 80427c0:	46bd      	mov	sp, r7
 80427c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80427c6:	4770      	bx	lr

080427c8 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80427c8:	b480      	push	{r7}
 80427ca:	b089      	sub	sp, #36	@ 0x24
 80427cc:	af00      	add	r7, sp, #0
 80427ce:	6078      	str	r0, [r7, #4]
 80427d0:	460b      	mov	r3, r1
 80427d2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80427d4:	687b      	ldr	r3, [r7, #4]
 80427d6:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80427d8:	78fb      	ldrb	r3, [r7, #3]
 80427da:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80427dc:	2300      	movs	r3, #0
 80427de:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80427e0:	69bb      	ldr	r3, [r7, #24]
 80427e2:	015a      	lsls	r2, r3, #5
 80427e4:	69fb      	ldr	r3, [r7, #28]
 80427e6:	4413      	add	r3, r2
 80427e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80427ec:	681b      	ldr	r3, [r3, #0]
 80427ee:	0c9b      	lsrs	r3, r3, #18
 80427f0:	f003 0303 	and.w	r3, r3, #3
 80427f4:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80427f6:	69bb      	ldr	r3, [r7, #24]
 80427f8:	015a      	lsls	r2, r3, #5
 80427fa:	69fb      	ldr	r3, [r7, #28]
 80427fc:	4413      	add	r3, r2
 80427fe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8042802:	681b      	ldr	r3, [r3, #0]
 8042804:	0fdb      	lsrs	r3, r3, #31
 8042806:	f003 0301 	and.w	r3, r3, #1
 804280a:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 804280c:	69bb      	ldr	r3, [r7, #24]
 804280e:	015a      	lsls	r2, r3, #5
 8042810:	69fb      	ldr	r3, [r7, #28]
 8042812:	4413      	add	r3, r2
 8042814:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8042818:	685b      	ldr	r3, [r3, #4]
 804281a:	0fdb      	lsrs	r3, r3, #31
 804281c:	f003 0301 	and.w	r3, r3, #1
 8042820:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8042822:	687b      	ldr	r3, [r7, #4]
 8042824:	689b      	ldr	r3, [r3, #8]
 8042826:	f003 0320 	and.w	r3, r3, #32
 804282a:	2b20      	cmp	r3, #32
 804282c:	d10d      	bne.n	804284a <USB_HC_Halt+0x82>
 804282e:	68fb      	ldr	r3, [r7, #12]
 8042830:	2b00      	cmp	r3, #0
 8042832:	d10a      	bne.n	804284a <USB_HC_Halt+0x82>
 8042834:	693b      	ldr	r3, [r7, #16]
 8042836:	2b00      	cmp	r3, #0
 8042838:	d005      	beq.n	8042846 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 804283a:	697b      	ldr	r3, [r7, #20]
 804283c:	2b01      	cmp	r3, #1
 804283e:	d002      	beq.n	8042846 <USB_HC_Halt+0x7e>
 8042840:	697b      	ldr	r3, [r7, #20]
 8042842:	2b03      	cmp	r3, #3
 8042844:	d101      	bne.n	804284a <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8042846:	2300      	movs	r3, #0
 8042848:	e0d8      	b.n	80429fc <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 804284a:	697b      	ldr	r3, [r7, #20]
 804284c:	2b00      	cmp	r3, #0
 804284e:	d002      	beq.n	8042856 <USB_HC_Halt+0x8e>
 8042850:	697b      	ldr	r3, [r7, #20]
 8042852:	2b02      	cmp	r3, #2
 8042854:	d173      	bne.n	804293e <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8042856:	69bb      	ldr	r3, [r7, #24]
 8042858:	015a      	lsls	r2, r3, #5
 804285a:	69fb      	ldr	r3, [r7, #28]
 804285c:	4413      	add	r3, r2
 804285e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8042862:	681b      	ldr	r3, [r3, #0]
 8042864:	69ba      	ldr	r2, [r7, #24]
 8042866:	0151      	lsls	r1, r2, #5
 8042868:	69fa      	ldr	r2, [r7, #28]
 804286a:	440a      	add	r2, r1
 804286c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8042870:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8042874:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8042876:	687b      	ldr	r3, [r7, #4]
 8042878:	689b      	ldr	r3, [r3, #8]
 804287a:	f003 0320 	and.w	r3, r3, #32
 804287e:	2b00      	cmp	r3, #0
 8042880:	d14a      	bne.n	8042918 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8042882:	687b      	ldr	r3, [r7, #4]
 8042884:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8042886:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 804288a:	2b00      	cmp	r3, #0
 804288c:	d133      	bne.n	80428f6 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 804288e:	69bb      	ldr	r3, [r7, #24]
 8042890:	015a      	lsls	r2, r3, #5
 8042892:	69fb      	ldr	r3, [r7, #28]
 8042894:	4413      	add	r3, r2
 8042896:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 804289a:	681b      	ldr	r3, [r3, #0]
 804289c:	69ba      	ldr	r2, [r7, #24]
 804289e:	0151      	lsls	r1, r2, #5
 80428a0:	69fa      	ldr	r2, [r7, #28]
 80428a2:	440a      	add	r2, r1
 80428a4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80428a8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80428ac:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80428ae:	69bb      	ldr	r3, [r7, #24]
 80428b0:	015a      	lsls	r2, r3, #5
 80428b2:	69fb      	ldr	r3, [r7, #28]
 80428b4:	4413      	add	r3, r2
 80428b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80428ba:	681b      	ldr	r3, [r3, #0]
 80428bc:	69ba      	ldr	r2, [r7, #24]
 80428be:	0151      	lsls	r1, r2, #5
 80428c0:	69fa      	ldr	r2, [r7, #28]
 80428c2:	440a      	add	r2, r1
 80428c4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80428c8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80428cc:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 80428ce:	68bb      	ldr	r3, [r7, #8]
 80428d0:	3301      	adds	r3, #1
 80428d2:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 80428d4:	68bb      	ldr	r3, [r7, #8]
 80428d6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80428da:	d82e      	bhi.n	804293a <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80428dc:	69bb      	ldr	r3, [r7, #24]
 80428de:	015a      	lsls	r2, r3, #5
 80428e0:	69fb      	ldr	r3, [r7, #28]
 80428e2:	4413      	add	r3, r2
 80428e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80428e8:	681b      	ldr	r3, [r3, #0]
 80428ea:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80428ee:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80428f2:	d0ec      	beq.n	80428ce <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80428f4:	e081      	b.n	80429fa <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80428f6:	69bb      	ldr	r3, [r7, #24]
 80428f8:	015a      	lsls	r2, r3, #5
 80428fa:	69fb      	ldr	r3, [r7, #28]
 80428fc:	4413      	add	r3, r2
 80428fe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8042902:	681b      	ldr	r3, [r3, #0]
 8042904:	69ba      	ldr	r2, [r7, #24]
 8042906:	0151      	lsls	r1, r2, #5
 8042908:	69fa      	ldr	r2, [r7, #28]
 804290a:	440a      	add	r2, r1
 804290c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8042910:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8042914:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8042916:	e070      	b.n	80429fa <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8042918:	69bb      	ldr	r3, [r7, #24]
 804291a:	015a      	lsls	r2, r3, #5
 804291c:	69fb      	ldr	r3, [r7, #28]
 804291e:	4413      	add	r3, r2
 8042920:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8042924:	681b      	ldr	r3, [r3, #0]
 8042926:	69ba      	ldr	r2, [r7, #24]
 8042928:	0151      	lsls	r1, r2, #5
 804292a:	69fa      	ldr	r2, [r7, #28]
 804292c:	440a      	add	r2, r1
 804292e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8042932:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8042936:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8042938:	e05f      	b.n	80429fa <USB_HC_Halt+0x232>
            break;
 804293a:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 804293c:	e05d      	b.n	80429fa <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 804293e:	69bb      	ldr	r3, [r7, #24]
 8042940:	015a      	lsls	r2, r3, #5
 8042942:	69fb      	ldr	r3, [r7, #28]
 8042944:	4413      	add	r3, r2
 8042946:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 804294a:	681b      	ldr	r3, [r3, #0]
 804294c:	69ba      	ldr	r2, [r7, #24]
 804294e:	0151      	lsls	r1, r2, #5
 8042950:	69fa      	ldr	r2, [r7, #28]
 8042952:	440a      	add	r2, r1
 8042954:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8042958:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 804295c:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 804295e:	69fb      	ldr	r3, [r7, #28]
 8042960:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8042964:	691b      	ldr	r3, [r3, #16]
 8042966:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 804296a:	2b00      	cmp	r3, #0
 804296c:	d133      	bne.n	80429d6 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 804296e:	69bb      	ldr	r3, [r7, #24]
 8042970:	015a      	lsls	r2, r3, #5
 8042972:	69fb      	ldr	r3, [r7, #28]
 8042974:	4413      	add	r3, r2
 8042976:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 804297a:	681b      	ldr	r3, [r3, #0]
 804297c:	69ba      	ldr	r2, [r7, #24]
 804297e:	0151      	lsls	r1, r2, #5
 8042980:	69fa      	ldr	r2, [r7, #28]
 8042982:	440a      	add	r2, r1
 8042984:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8042988:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 804298c:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 804298e:	69bb      	ldr	r3, [r7, #24]
 8042990:	015a      	lsls	r2, r3, #5
 8042992:	69fb      	ldr	r3, [r7, #28]
 8042994:	4413      	add	r3, r2
 8042996:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 804299a:	681b      	ldr	r3, [r3, #0]
 804299c:	69ba      	ldr	r2, [r7, #24]
 804299e:	0151      	lsls	r1, r2, #5
 80429a0:	69fa      	ldr	r2, [r7, #28]
 80429a2:	440a      	add	r2, r1
 80429a4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80429a8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80429ac:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 80429ae:	68bb      	ldr	r3, [r7, #8]
 80429b0:	3301      	adds	r3, #1
 80429b2:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 80429b4:	68bb      	ldr	r3, [r7, #8]
 80429b6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80429ba:	d81d      	bhi.n	80429f8 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80429bc:	69bb      	ldr	r3, [r7, #24]
 80429be:	015a      	lsls	r2, r3, #5
 80429c0:	69fb      	ldr	r3, [r7, #28]
 80429c2:	4413      	add	r3, r2
 80429c4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80429c8:	681b      	ldr	r3, [r3, #0]
 80429ca:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80429ce:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80429d2:	d0ec      	beq.n	80429ae <USB_HC_Halt+0x1e6>
 80429d4:	e011      	b.n	80429fa <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80429d6:	69bb      	ldr	r3, [r7, #24]
 80429d8:	015a      	lsls	r2, r3, #5
 80429da:	69fb      	ldr	r3, [r7, #28]
 80429dc:	4413      	add	r3, r2
 80429de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80429e2:	681b      	ldr	r3, [r3, #0]
 80429e4:	69ba      	ldr	r2, [r7, #24]
 80429e6:	0151      	lsls	r1, r2, #5
 80429e8:	69fa      	ldr	r2, [r7, #28]
 80429ea:	440a      	add	r2, r1
 80429ec:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80429f0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80429f4:	6013      	str	r3, [r2, #0]
 80429f6:	e000      	b.n	80429fa <USB_HC_Halt+0x232>
          break;
 80429f8:	bf00      	nop
    }
  }

  return HAL_OK;
 80429fa:	2300      	movs	r3, #0
}
 80429fc:	4618      	mov	r0, r3
 80429fe:	3724      	adds	r7, #36	@ 0x24
 8042a00:	46bd      	mov	sp, r7
 8042a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042a06:	4770      	bx	lr

08042a08 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8042a08:	b580      	push	{r7, lr}
 8042a0a:	b088      	sub	sp, #32
 8042a0c:	af00      	add	r7, sp, #0
 8042a0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8042a10:	2300      	movs	r3, #0
 8042a12:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8042a14:	687b      	ldr	r3, [r7, #4]
 8042a16:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8042a18:	2300      	movs	r3, #0
 8042a1a:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8042a1c:	6878      	ldr	r0, [r7, #4]
 8042a1e:	f7ff fd7a 	bl	8042516 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8042a22:	2110      	movs	r1, #16
 8042a24:	6878      	ldr	r0, [r7, #4]
 8042a26:	f7ff fd87 	bl	8042538 <USB_FlushTxFifo>
 8042a2a:	4603      	mov	r3, r0
 8042a2c:	2b00      	cmp	r3, #0
 8042a2e:	d001      	beq.n	8042a34 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8042a30:	2301      	movs	r3, #1
 8042a32:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8042a34:	6878      	ldr	r0, [r7, #4]
 8042a36:	f7ff fdb1 	bl	804259c <USB_FlushRxFifo>
 8042a3a:	4603      	mov	r3, r0
 8042a3c:	2b00      	cmp	r3, #0
 8042a3e:	d001      	beq.n	8042a44 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8042a40:	2301      	movs	r3, #1
 8042a42:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8042a44:	2300      	movs	r3, #0
 8042a46:	61bb      	str	r3, [r7, #24]
 8042a48:	e01f      	b.n	8042a8a <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8042a4a:	69bb      	ldr	r3, [r7, #24]
 8042a4c:	015a      	lsls	r2, r3, #5
 8042a4e:	697b      	ldr	r3, [r7, #20]
 8042a50:	4413      	add	r3, r2
 8042a52:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8042a56:	681b      	ldr	r3, [r3, #0]
 8042a58:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8042a5a:	693b      	ldr	r3, [r7, #16]
 8042a5c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8042a60:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8042a62:	693b      	ldr	r3, [r7, #16]
 8042a64:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8042a68:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8042a6a:	693b      	ldr	r3, [r7, #16]
 8042a6c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8042a70:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8042a72:	69bb      	ldr	r3, [r7, #24]
 8042a74:	015a      	lsls	r2, r3, #5
 8042a76:	697b      	ldr	r3, [r7, #20]
 8042a78:	4413      	add	r3, r2
 8042a7a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8042a7e:	461a      	mov	r2, r3
 8042a80:	693b      	ldr	r3, [r7, #16]
 8042a82:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8042a84:	69bb      	ldr	r3, [r7, #24]
 8042a86:	3301      	adds	r3, #1
 8042a88:	61bb      	str	r3, [r7, #24]
 8042a8a:	69bb      	ldr	r3, [r7, #24]
 8042a8c:	2b0f      	cmp	r3, #15
 8042a8e:	d9dc      	bls.n	8042a4a <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8042a90:	2300      	movs	r3, #0
 8042a92:	61bb      	str	r3, [r7, #24]
 8042a94:	e034      	b.n	8042b00 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8042a96:	69bb      	ldr	r3, [r7, #24]
 8042a98:	015a      	lsls	r2, r3, #5
 8042a9a:	697b      	ldr	r3, [r7, #20]
 8042a9c:	4413      	add	r3, r2
 8042a9e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8042aa2:	681b      	ldr	r3, [r3, #0]
 8042aa4:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8042aa6:	693b      	ldr	r3, [r7, #16]
 8042aa8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8042aac:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8042aae:	693b      	ldr	r3, [r7, #16]
 8042ab0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8042ab4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8042ab6:	693b      	ldr	r3, [r7, #16]
 8042ab8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8042abc:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8042abe:	69bb      	ldr	r3, [r7, #24]
 8042ac0:	015a      	lsls	r2, r3, #5
 8042ac2:	697b      	ldr	r3, [r7, #20]
 8042ac4:	4413      	add	r3, r2
 8042ac6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8042aca:	461a      	mov	r2, r3
 8042acc:	693b      	ldr	r3, [r7, #16]
 8042ace:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8042ad0:	68fb      	ldr	r3, [r7, #12]
 8042ad2:	3301      	adds	r3, #1
 8042ad4:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8042ad6:	68fb      	ldr	r3, [r7, #12]
 8042ad8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8042adc:	d80c      	bhi.n	8042af8 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8042ade:	69bb      	ldr	r3, [r7, #24]
 8042ae0:	015a      	lsls	r2, r3, #5
 8042ae2:	697b      	ldr	r3, [r7, #20]
 8042ae4:	4413      	add	r3, r2
 8042ae6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8042aea:	681b      	ldr	r3, [r3, #0]
 8042aec:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8042af0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8042af4:	d0ec      	beq.n	8042ad0 <USB_StopHost+0xc8>
 8042af6:	e000      	b.n	8042afa <USB_StopHost+0xf2>
        break;
 8042af8:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8042afa:	69bb      	ldr	r3, [r7, #24]
 8042afc:	3301      	adds	r3, #1
 8042afe:	61bb      	str	r3, [r7, #24]
 8042b00:	69bb      	ldr	r3, [r7, #24]
 8042b02:	2b0f      	cmp	r3, #15
 8042b04:	d9c7      	bls.n	8042a96 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8042b06:	697b      	ldr	r3, [r7, #20]
 8042b08:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8042b0c:	461a      	mov	r2, r3
 8042b0e:	f04f 33ff 	mov.w	r3, #4294967295
 8042b12:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8042b14:	687b      	ldr	r3, [r7, #4]
 8042b16:	f04f 32ff 	mov.w	r2, #4294967295
 8042b1a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8042b1c:	6878      	ldr	r0, [r7, #4]
 8042b1e:	f7ff fce9 	bl	80424f4 <USB_EnableGlobalInt>

  return ret;
 8042b22:	7ffb      	ldrb	r3, [r7, #31]
}
 8042b24:	4618      	mov	r0, r3
 8042b26:	3720      	adds	r7, #32
 8042b28:	46bd      	mov	sp, r7
 8042b2a:	bd80      	pop	{r7, pc}

08042b2c <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8042b2c:	b580      	push	{r7, lr}
 8042b2e:	b082      	sub	sp, #8
 8042b30:	af00      	add	r7, sp, #0
 8042b32:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8042b34:	687b      	ldr	r3, [r7, #4]
 8042b36:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8042b3a:	1c5a      	adds	r2, r3, #1
 8042b3c:	687b      	ldr	r3, [r7, #4]
 8042b3e:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 8042b42:	6878      	ldr	r0, [r7, #4]
 8042b44:	f000 f804 	bl	8042b50 <USBH_HandleSof>
}
 8042b48:	bf00      	nop
 8042b4a:	3708      	adds	r7, #8
 8042b4c:	46bd      	mov	sp, r7
 8042b4e:	bd80      	pop	{r7, pc}

08042b50 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8042b50:	b580      	push	{r7, lr}
 8042b52:	b082      	sub	sp, #8
 8042b54:	af00      	add	r7, sp, #0
 8042b56:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8042b58:	687b      	ldr	r3, [r7, #4]
 8042b5a:	781b      	ldrb	r3, [r3, #0]
 8042b5c:	b2db      	uxtb	r3, r3
 8042b5e:	2b0b      	cmp	r3, #11
 8042b60:	d10a      	bne.n	8042b78 <USBH_HandleSof+0x28>
 8042b62:	687b      	ldr	r3, [r7, #4]
 8042b64:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8042b68:	2b00      	cmp	r3, #0
 8042b6a:	d005      	beq.n	8042b78 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8042b6c:	687b      	ldr	r3, [r7, #4]
 8042b6e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8042b72:	699b      	ldr	r3, [r3, #24]
 8042b74:	6878      	ldr	r0, [r7, #4]
 8042b76:	4798      	blx	r3
  }
}
 8042b78:	bf00      	nop
 8042b7a:	3708      	adds	r7, #8
 8042b7c:	46bd      	mov	sp, r7
 8042b7e:	bd80      	pop	{r7, pc}

08042b80 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8042b80:	b480      	push	{r7}
 8042b82:	b083      	sub	sp, #12
 8042b84:	af00      	add	r7, sp, #0
 8042b86:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8042b88:	687b      	ldr	r3, [r7, #4]
 8042b8a:	2201      	movs	r2, #1
 8042b8c:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8042b90:	bf00      	nop
}
 8042b92:	370c      	adds	r7, #12
 8042b94:	46bd      	mov	sp, r7
 8042b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042b9a:	4770      	bx	lr

08042b9c <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8042b9c:	b480      	push	{r7}
 8042b9e:	b083      	sub	sp, #12
 8042ba0:	af00      	add	r7, sp, #0
 8042ba2:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8042ba4:	687b      	ldr	r3, [r7, #4]
 8042ba6:	2200      	movs	r2, #0
 8042ba8:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 8042bac:	bf00      	nop
}
 8042bae:	370c      	adds	r7, #12
 8042bb0:	46bd      	mov	sp, r7
 8042bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042bb6:	4770      	bx	lr

08042bb8 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8042bb8:	b480      	push	{r7}
 8042bba:	b083      	sub	sp, #12
 8042bbc:	af00      	add	r7, sp, #0
 8042bbe:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8042bc0:	687b      	ldr	r3, [r7, #4]
 8042bc2:	2201      	movs	r2, #1
 8042bc4:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8042bc8:	687b      	ldr	r3, [r7, #4]
 8042bca:	2200      	movs	r2, #0
 8042bcc:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8042bd0:	687b      	ldr	r3, [r7, #4]
 8042bd2:	2200      	movs	r2, #0
 8042bd4:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8042bd8:	2300      	movs	r3, #0
}
 8042bda:	4618      	mov	r0, r3
 8042bdc:	370c      	adds	r7, #12
 8042bde:	46bd      	mov	sp, r7
 8042be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042be4:	4770      	bx	lr

08042be6 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8042be6:	b580      	push	{r7, lr}
 8042be8:	b082      	sub	sp, #8
 8042bea:	af00      	add	r7, sp, #0
 8042bec:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8042bee:	687b      	ldr	r3, [r7, #4]
 8042bf0:	2201      	movs	r2, #1
 8042bf2:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 8042bf6:	687b      	ldr	r3, [r7, #4]
 8042bf8:	2200      	movs	r2, #0
 8042bfa:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 8042bfe:	687b      	ldr	r3, [r7, #4]
 8042c00:	2200      	movs	r2, #0
 8042c02:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8042c06:	6878      	ldr	r0, [r7, #4]
 8042c08:	f000 f883 	bl	8042d12 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8042c0c:	687b      	ldr	r3, [r7, #4]
 8042c0e:	791b      	ldrb	r3, [r3, #4]
 8042c10:	4619      	mov	r1, r3
 8042c12:	6878      	ldr	r0, [r7, #4]
 8042c14:	f000 f80b 	bl	8042c2e <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8042c18:	687b      	ldr	r3, [r7, #4]
 8042c1a:	795b      	ldrb	r3, [r3, #5]
 8042c1c:	4619      	mov	r1, r3
 8042c1e:	6878      	ldr	r0, [r7, #4]
 8042c20:	f000 f805 	bl	8042c2e <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8042c24:	2300      	movs	r3, #0
}
 8042c26:	4618      	mov	r0, r3
 8042c28:	3708      	adds	r7, #8
 8042c2a:	46bd      	mov	sp, r7
 8042c2c:	bd80      	pop	{r7, pc}

08042c2e <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8042c2e:	b480      	push	{r7}
 8042c30:	b083      	sub	sp, #12
 8042c32:	af00      	add	r7, sp, #0
 8042c34:	6078      	str	r0, [r7, #4]
 8042c36:	460b      	mov	r3, r1
 8042c38:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8042c3a:	78fb      	ldrb	r3, [r7, #3]
 8042c3c:	2b0f      	cmp	r3, #15
 8042c3e:	d80d      	bhi.n	8042c5c <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8042c40:	78fb      	ldrb	r3, [r7, #3]
 8042c42:	687a      	ldr	r2, [r7, #4]
 8042c44:	33e0      	adds	r3, #224	@ 0xe0
 8042c46:	009b      	lsls	r3, r3, #2
 8042c48:	4413      	add	r3, r2
 8042c4a:	685a      	ldr	r2, [r3, #4]
 8042c4c:	78fb      	ldrb	r3, [r7, #3]
 8042c4e:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8042c52:	6879      	ldr	r1, [r7, #4]
 8042c54:	33e0      	adds	r3, #224	@ 0xe0
 8042c56:	009b      	lsls	r3, r3, #2
 8042c58:	440b      	add	r3, r1
 8042c5a:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8042c5c:	2300      	movs	r3, #0
}
 8042c5e:	4618      	mov	r0, r3
 8042c60:	370c      	adds	r7, #12
 8042c62:	46bd      	mov	sp, r7
 8042c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042c68:	4770      	bx	lr

08042c6a <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8042c6a:	b580      	push	{r7, lr}
 8042c6c:	b082      	sub	sp, #8
 8042c6e:	af00      	add	r7, sp, #0
 8042c70:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8042c72:	687b      	ldr	r3, [r7, #4]
 8042c74:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8042c78:	4618      	mov	r0, r3
 8042c7a:	f7ff ff57 	bl	8042b2c <USBH_LL_IncTimer>
}
 8042c7e:	bf00      	nop
 8042c80:	3708      	adds	r7, #8
 8042c82:	46bd      	mov	sp, r7
 8042c84:	bd80      	pop	{r7, pc}

08042c86 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8042c86:	b580      	push	{r7, lr}
 8042c88:	b082      	sub	sp, #8
 8042c8a:	af00      	add	r7, sp, #0
 8042c8c:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8042c8e:	687b      	ldr	r3, [r7, #4]
 8042c90:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8042c94:	4618      	mov	r0, r3
 8042c96:	f7ff ff8f 	bl	8042bb8 <USBH_LL_Connect>
}
 8042c9a:	bf00      	nop
 8042c9c:	3708      	adds	r7, #8
 8042c9e:	46bd      	mov	sp, r7
 8042ca0:	bd80      	pop	{r7, pc}

08042ca2 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8042ca2:	b580      	push	{r7, lr}
 8042ca4:	b082      	sub	sp, #8
 8042ca6:	af00      	add	r7, sp, #0
 8042ca8:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8042caa:	687b      	ldr	r3, [r7, #4]
 8042cac:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8042cb0:	4618      	mov	r0, r3
 8042cb2:	f7ff ff98 	bl	8042be6 <USBH_LL_Disconnect>
}
 8042cb6:	bf00      	nop
 8042cb8:	3708      	adds	r7, #8
 8042cba:	46bd      	mov	sp, r7
 8042cbc:	bd80      	pop	{r7, pc}

08042cbe <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8042cbe:	b480      	push	{r7}
 8042cc0:	b083      	sub	sp, #12
 8042cc2:	af00      	add	r7, sp, #0
 8042cc4:	6078      	str	r0, [r7, #4]
 8042cc6:	460b      	mov	r3, r1
 8042cc8:	70fb      	strb	r3, [r7, #3]
 8042cca:	4613      	mov	r3, r2
 8042ccc:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8042cce:	bf00      	nop
 8042cd0:	370c      	adds	r7, #12
 8042cd2:	46bd      	mov	sp, r7
 8042cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042cd8:	4770      	bx	lr

08042cda <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8042cda:	b580      	push	{r7, lr}
 8042cdc:	b082      	sub	sp, #8
 8042cde:	af00      	add	r7, sp, #0
 8042ce0:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8042ce2:	687b      	ldr	r3, [r7, #4]
 8042ce4:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8042ce8:	4618      	mov	r0, r3
 8042cea:	f7ff ff49 	bl	8042b80 <USBH_LL_PortEnabled>
}
 8042cee:	bf00      	nop
 8042cf0:	3708      	adds	r7, #8
 8042cf2:	46bd      	mov	sp, r7
 8042cf4:	bd80      	pop	{r7, pc}

08042cf6 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8042cf6:	b580      	push	{r7, lr}
 8042cf8:	b082      	sub	sp, #8
 8042cfa:	af00      	add	r7, sp, #0
 8042cfc:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8042cfe:	687b      	ldr	r3, [r7, #4]
 8042d00:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8042d04:	4618      	mov	r0, r3
 8042d06:	f7ff ff49 	bl	8042b9c <USBH_LL_PortDisabled>
}
 8042d0a:	bf00      	nop
 8042d0c:	3708      	adds	r7, #8
 8042d0e:	46bd      	mov	sp, r7
 8042d10:	bd80      	pop	{r7, pc}

08042d12 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8042d12:	b580      	push	{r7, lr}
 8042d14:	b084      	sub	sp, #16
 8042d16:	af00      	add	r7, sp, #0
 8042d18:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8042d1a:	2300      	movs	r3, #0
 8042d1c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8042d1e:	2300      	movs	r3, #0
 8042d20:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8042d22:	687b      	ldr	r3, [r7, #4]
 8042d24:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8042d28:	4618      	mov	r0, r3
 8042d2a:	f7fd ff4c 	bl	8040bc6 <HAL_HCD_Stop>
 8042d2e:	4603      	mov	r3, r0
 8042d30:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8042d32:	7bfb      	ldrb	r3, [r7, #15]
 8042d34:	4618      	mov	r0, r3
 8042d36:	f000 f807 	bl	8042d48 <USBH_Get_USB_Status>
 8042d3a:	4603      	mov	r3, r0
 8042d3c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8042d3e:	7bbb      	ldrb	r3, [r7, #14]
}
 8042d40:	4618      	mov	r0, r3
 8042d42:	3710      	adds	r7, #16
 8042d44:	46bd      	mov	sp, r7
 8042d46:	bd80      	pop	{r7, pc}

08042d48 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8042d48:	b480      	push	{r7}
 8042d4a:	b085      	sub	sp, #20
 8042d4c:	af00      	add	r7, sp, #0
 8042d4e:	4603      	mov	r3, r0
 8042d50:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8042d52:	2300      	movs	r3, #0
 8042d54:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8042d56:	79fb      	ldrb	r3, [r7, #7]
 8042d58:	2b03      	cmp	r3, #3
 8042d5a:	d817      	bhi.n	8042d8c <USBH_Get_USB_Status+0x44>
 8042d5c:	a201      	add	r2, pc, #4	@ (adr r2, 8042d64 <USBH_Get_USB_Status+0x1c>)
 8042d5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8042d62:	bf00      	nop
 8042d64:	08042d75 	.word	0x08042d75
 8042d68:	08042d7b 	.word	0x08042d7b
 8042d6c:	08042d81 	.word	0x08042d81
 8042d70:	08042d87 	.word	0x08042d87
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8042d74:	2300      	movs	r3, #0
 8042d76:	73fb      	strb	r3, [r7, #15]
    break;
 8042d78:	e00b      	b.n	8042d92 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8042d7a:	2302      	movs	r3, #2
 8042d7c:	73fb      	strb	r3, [r7, #15]
    break;
 8042d7e:	e008      	b.n	8042d92 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8042d80:	2301      	movs	r3, #1
 8042d82:	73fb      	strb	r3, [r7, #15]
    break;
 8042d84:	e005      	b.n	8042d92 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8042d86:	2302      	movs	r3, #2
 8042d88:	73fb      	strb	r3, [r7, #15]
    break;
 8042d8a:	e002      	b.n	8042d92 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8042d8c:	2302      	movs	r3, #2
 8042d8e:	73fb      	strb	r3, [r7, #15]
    break;
 8042d90:	bf00      	nop
  }
  return usb_status;
 8042d92:	7bfb      	ldrb	r3, [r7, #15]
}
 8042d94:	4618      	mov	r0, r3
 8042d96:	3714      	adds	r7, #20
 8042d98:	46bd      	mov	sp, r7
 8042d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042d9e:	4770      	bx	lr

08042da0 <__libc_init_array>:
 8042da0:	b570      	push	{r4, r5, r6, lr}
 8042da2:	4d0d      	ldr	r5, [pc, #52]	@ (8042dd8 <__libc_init_array+0x38>)
 8042da4:	4c0d      	ldr	r4, [pc, #52]	@ (8042ddc <__libc_init_array+0x3c>)
 8042da6:	1b64      	subs	r4, r4, r5
 8042da8:	10a4      	asrs	r4, r4, #2
 8042daa:	2600      	movs	r6, #0
 8042dac:	42a6      	cmp	r6, r4
 8042dae:	d109      	bne.n	8042dc4 <__libc_init_array+0x24>
 8042db0:	4d0b      	ldr	r5, [pc, #44]	@ (8042de0 <__libc_init_array+0x40>)
 8042db2:	4c0c      	ldr	r4, [pc, #48]	@ (8042de4 <__libc_init_array+0x44>)
 8042db4:	f000 f818 	bl	8042de8 <_init>
 8042db8:	1b64      	subs	r4, r4, r5
 8042dba:	10a4      	asrs	r4, r4, #2
 8042dbc:	2600      	movs	r6, #0
 8042dbe:	42a6      	cmp	r6, r4
 8042dc0:	d105      	bne.n	8042dce <__libc_init_array+0x2e>
 8042dc2:	bd70      	pop	{r4, r5, r6, pc}
 8042dc4:	f855 3b04 	ldr.w	r3, [r5], #4
 8042dc8:	4798      	blx	r3
 8042dca:	3601      	adds	r6, #1
 8042dcc:	e7ee      	b.n	8042dac <__libc_init_array+0xc>
 8042dce:	f855 3b04 	ldr.w	r3, [r5], #4
 8042dd2:	4798      	blx	r3
 8042dd4:	3601      	adds	r6, #1
 8042dd6:	e7f2      	b.n	8042dbe <__libc_init_array+0x1e>
 8042dd8:	08042e18 	.word	0x08042e18
 8042ddc:	08042e18 	.word	0x08042e18
 8042de0:	08042e18 	.word	0x08042e18
 8042de4:	08042e1c 	.word	0x08042e1c

08042de8 <_init>:
 8042de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8042dea:	bf00      	nop
 8042dec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8042dee:	bc08      	pop	{r3}
 8042df0:	469e      	mov	lr, r3
 8042df2:	4770      	bx	lr

08042df4 <_fini>:
 8042df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8042df6:	bf00      	nop
 8042df8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8042dfa:	bc08      	pop	{r3}
 8042dfc:	469e      	mov	lr, r3
 8042dfe:	4770      	bx	lr
