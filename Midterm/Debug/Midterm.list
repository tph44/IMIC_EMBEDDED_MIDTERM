
Midterm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002dec  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  08002f84  08002f84  00003f84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003048  08003048  00005018  2**0
                  CONTENTS
  4 .ARM          00000008  08003048  08003048  00004048  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003050  08003050  00005018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003050  08003050  00004050  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003054  08003054  00004054  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000018  20000000  08003058  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000044c  20000018  08003070  00005018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000464  08003070  00005464  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00005018  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009c60  00000000  00000000  00005048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c33  00000000  00000000  0000eca8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000868  00000000  00000000  000108e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000063f  00000000  00000000  00011148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000165ce  00000000  00000000  00011787  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009d47  00000000  00000000  00027d55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008bde2  00000000  00000000  00031a9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bd87e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000022a8  00000000  00000000  000bd8c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  000bfb6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000018 	.word	0x20000018
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08002f6c 	.word	0x08002f6c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000001c 	.word	0x2000001c
 80001d4:	08002f6c 	.word	0x08002f6c

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <Button_Init>:
*/


#define GPIOA_BASE_ADDR 0x40020000 

void Button_Init() {
 80001e8:	b480      	push	{r7}
 80001ea:	b083      	sub	sp, #12
 80001ec:	af00      	add	r7, sp, #0

    // 1. Enable GPIO_A clock
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80001ee:	2300      	movs	r3, #0
 80001f0:	603b      	str	r3, [r7, #0]
 80001f2:	4b0d      	ldr	r3, [pc, #52]	@ (8000228 <Button_Init+0x40>)
 80001f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80001f6:	4a0c      	ldr	r2, [pc, #48]	@ (8000228 <Button_Init+0x40>)
 80001f8:	f043 0301 	orr.w	r3, r3, #1
 80001fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80001fe:	4b0a      	ldr	r3, [pc, #40]	@ (8000228 <Button_Init+0x40>)
 8000200:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000202:	f003 0301 	and.w	r3, r3, #1
 8000206:	603b      	str	r3, [r7, #0]
 8000208:	683b      	ldr	r3, [r7, #0]

    // 2. Set PA0 as input
    uint32_t* GPIOA_MODER = (uint32_t*)(GPIOA_BASE_ADDR + 0x00);
 800020a:	4b08      	ldr	r3, [pc, #32]	@ (800022c <Button_Init+0x44>)
 800020c:	607b      	str	r3, [r7, #4]
    *GPIOA_MODER &= ~(0b11 << 0); 
 800020e:	687b      	ldr	r3, [r7, #4]
 8000210:	681b      	ldr	r3, [r3, #0]
 8000212:	f023 0203 	bic.w	r2, r3, #3
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	601a      	str	r2, [r3, #0]
}
 800021a:	bf00      	nop
 800021c:	370c      	adds	r7, #12
 800021e:	46bd      	mov	sp, r7
 8000220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000224:	4770      	bx	lr
 8000226:	bf00      	nop
 8000228:	40023800 	.word	0x40023800
 800022c:	40020000 	.word	0x40020000

08000230 <Led_Init>:
            -- offset addr is 0
            -- 01 is output mode
*/
#define GPIOD_BASE_ADDR 0x40020C00 // Get addr from  Data sheet <- Memory mapping

void Led_Init() {
 8000230:	b480      	push	{r7}
 8000232:	b083      	sub	sp, #12
 8000234:	af00      	add	r7, sp, #0
    // 1. Enable GPIO_D clock
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000236:	2300      	movs	r3, #0
 8000238:	603b      	str	r3, [r7, #0]
 800023a:	4b10      	ldr	r3, [pc, #64]	@ (800027c <Led_Init+0x4c>)
 800023c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800023e:	4a0f      	ldr	r2, [pc, #60]	@ (800027c <Led_Init+0x4c>)
 8000240:	f043 0308 	orr.w	r3, r3, #8
 8000244:	6313      	str	r3, [r2, #48]	@ 0x30
 8000246:	4b0d      	ldr	r3, [pc, #52]	@ (800027c <Led_Init+0x4c>)
 8000248:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800024a:	f003 0308 	and.w	r3, r3, #8
 800024e:	603b      	str	r3, [r7, #0]
 8000250:	683b      	ldr	r3, [r7, #0]

    // 2. Set PD12, PD13, PD14 and PD15 as outputs - Get PD numbers from schematic
    uint32_t* GPIOD_MODER = (uint32_t*)(GPIOD_BASE_ADDR + 0x00); 
 8000252:	4b0b      	ldr	r3, [pc, #44]	@ (8000280 <Led_Init+0x50>)
 8000254:	607b      	str	r3, [r7, #4]
    *GPIOD_MODER &= (0b11111111 << 24); // Clear
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	681b      	ldr	r3, [r3, #0]
 800025a:	f003 427f 	and.w	r2, r3, #4278190080	@ 0xff000000
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	601a      	str	r2, [r3, #0]
    *GPIOD_MODER |= (0b01010101 << 24); // Set
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	681b      	ldr	r3, [r3, #0]
 8000266:	f043 42aa 	orr.w	r2, r3, #1426063360	@ 0x55000000
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	601a      	str	r2, [r3, #0]
}
 800026e:	bf00      	nop
 8000270:	370c      	adds	r7, #12
 8000272:	46bd      	mov	sp, r7
 8000274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000278:	4770      	bx	lr
 800027a:	bf00      	nop
 800027c:	40023800 	.word	0x40023800
 8000280:	40020c00 	.word	0x40020c00

08000284 <Led_Ctrl>:
int RED_LED     = 14;
int BLUE_LED    = 15;
int ON          = 1;
int OFF         = 0;

void Led_Ctrl(int LED, int OnOff) {
 8000284:	b480      	push	{r7}
 8000286:	b085      	sub	sp, #20
 8000288:	af00      	add	r7, sp, #0
 800028a:	6078      	str	r0, [r7, #4]
 800028c:	6039      	str	r1, [r7, #0]
    uint32_t* GPIOD_ODR = (uint32_t*)(GPIOD_BASE_ADDR + 0x14); 
 800028e:	4b0f      	ldr	r3, [pc, #60]	@ (80002cc <Led_Ctrl+0x48>)
 8000290:	60fb      	str	r3, [r7, #12]

    if (OnOff == 1)
 8000292:	683b      	ldr	r3, [r7, #0]
 8000294:	2b01      	cmp	r3, #1
 8000296:	d109      	bne.n	80002ac <Led_Ctrl+0x28>
        *GPIOD_ODR |=  (0b1 << LED);
 8000298:	68fb      	ldr	r3, [r7, #12]
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	2101      	movs	r1, #1
 800029e:	687a      	ldr	r2, [r7, #4]
 80002a0:	fa01 f202 	lsl.w	r2, r1, r2
 80002a4:	431a      	orrs	r2, r3
 80002a6:	68fb      	ldr	r3, [r7, #12]
 80002a8:	601a      	str	r2, [r3, #0]
    else 
        *GPIOD_ODR &= ~(0b1 << LED);
}
 80002aa:	e009      	b.n	80002c0 <Led_Ctrl+0x3c>
        *GPIOD_ODR &= ~(0b1 << LED);
 80002ac:	68fb      	ldr	r3, [r7, #12]
 80002ae:	681b      	ldr	r3, [r3, #0]
 80002b0:	2101      	movs	r1, #1
 80002b2:	687a      	ldr	r2, [r7, #4]
 80002b4:	fa01 f202 	lsl.w	r2, r1, r2
 80002b8:	43d2      	mvns	r2, r2
 80002ba:	401a      	ands	r2, r3
 80002bc:	68fb      	ldr	r3, [r7, #12]
 80002be:	601a      	str	r2, [r3, #0]
}
 80002c0:	bf00      	nop
 80002c2:	3714      	adds	r7, #20
 80002c4:	46bd      	mov	sp, r7
 80002c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ca:	4770      	bx	lr
 80002cc:	40020c14 	.word	0x40020c14

080002d0 <Button_Status>:

// 4 - Check if the button is pressed or not
int Button_Status() {
 80002d0:	b480      	push	{r7}
 80002d2:	b083      	sub	sp, #12
 80002d4:	af00      	add	r7, sp, #0
    uint32_t* GPIOA_IDR = (uint32_t*)(GPIOA_BASE_ADDR + 0x10);
 80002d6:	4b06      	ldr	r3, [pc, #24]	@ (80002f0 <Button_Status+0x20>)
 80002d8:	607b      	str	r3, [r7, #4]
    return (*GPIOA_IDR >> 0) & 1;
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	681b      	ldr	r3, [r3, #0]
 80002de:	f003 0301 	and.w	r3, r3, #1
}
 80002e2:	4618      	mov	r0, r3
 80002e4:	370c      	adds	r7, #12
 80002e6:	46bd      	mov	sp, r7
 80002e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop
 80002f0:	40020010 	.word	0x40020010

080002f4 <Button_Interrupt_Int>:

*/
#define EXTI_BASE_ADDR 0x40013C00
#define ISER_BASE_ADDR 0xE000E100 // From ref manual - M4 

void Button_Interrupt_Int() {
 80002f4:	b480      	push	{r7}
 80002f6:	b085      	sub	sp, #20
 80002f8:	af00      	add	r7, sp, #0

  // Config EXTI to send interrupt to NVIC when detect rising of failling edge

  // select trigger for EXTI0 is rising
  uint32_t* EXTI_RTSR = (uint32_t*)(EXTI_BASE_ADDR + 0x08);
 80002fa:	4b13      	ldr	r3, [pc, #76]	@ (8000348 <Button_Interrupt_Int+0x54>)
 80002fc:	60fb      	str	r3, [r7, #12]
  *EXTI_RTSR |= (0b1 << 0);
 80002fe:	68fb      	ldr	r3, [r7, #12]
 8000300:	681b      	ldr	r3, [r3, #0]
 8000302:	f043 0201 	orr.w	r2, r3, #1
 8000306:	68fb      	ldr	r3, [r7, #12]
 8000308:	601a      	str	r2, [r3, #0]

  // select trigger for EXTI0 is falling
  uint32_t* EXTI_FTSR = (uint32_t*)(EXTI_BASE_ADDR + 0x0C);
 800030a:	4b10      	ldr	r3, [pc, #64]	@ (800034c <Button_Interrupt_Int+0x58>)
 800030c:	60bb      	str	r3, [r7, #8]
  *EXTI_FTSR |= (0b1 << 0);
 800030e:	68bb      	ldr	r3, [r7, #8]
 8000310:	681b      	ldr	r3, [r3, #0]
 8000312:	f043 0201 	orr.w	r2, r3, #1
 8000316:	68bb      	ldr	r3, [r7, #8]
 8000318:	601a      	str	r2, [r3, #0]

  // masking
  uint32_t* EXTI_IMR = (uint32_t*)(EXTI_BASE_ADDR + 0x00);
 800031a:	4b0d      	ldr	r3, [pc, #52]	@ (8000350 <Button_Interrupt_Int+0x5c>)
 800031c:	607b      	str	r3, [r7, #4]
  *EXTI_IMR |= (0b1 << 0);
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	681b      	ldr	r3, [r3, #0]
 8000322:	f043 0201 	orr.w	r2, r3, #1
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	601a      	str	r2, [r3, #0]

  // NVIC accepts interrupt from EXTI0
  /*
    From vectore table in ref manual - stm32, we know position of EXTI0 interrupt is 6
  */
  uint32_t* ISER0 = (uint32_t*)(ISER_BASE_ADDR + 0x00);
 800032a:	4b0a      	ldr	r3, [pc, #40]	@ (8000354 <Button_Interrupt_Int+0x60>)
 800032c:	603b      	str	r3, [r7, #0]
  *ISER0 |= (0b1 << 6);
 800032e:	683b      	ldr	r3, [r7, #0]
 8000330:	681b      	ldr	r3, [r3, #0]
 8000332:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8000336:	683b      	ldr	r3, [r7, #0]
 8000338:	601a      	str	r2, [r3, #0]
  
}
 800033a:	bf00      	nop
 800033c:	3714      	adds	r7, #20
 800033e:	46bd      	mov	sp, r7
 8000340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000344:	4770      	bx	lr
 8000346:	bf00      	nop
 8000348:	40013c08 	.word	0x40013c08
 800034c:	40013c0c 	.word	0x40013c0c
 8000350:	40013c00 	.word	0x40013c00
 8000354:	e000e100 	.word	0xe000e100

08000358 <EXTI0_IRQHandler>:

void EXTI0_IRQHandler() {
 8000358:	b590      	push	{r4, r7, lr}
 800035a:	b083      	sub	sp, #12
 800035c:	af00      	add	r7, sp, #0

  Led_Ctrl(RED_LED, Button_Status());
 800035e:	4b0a      	ldr	r3, [pc, #40]	@ (8000388 <EXTI0_IRQHandler+0x30>)
 8000360:	681c      	ldr	r4, [r3, #0]
 8000362:	f7ff ffb5 	bl	80002d0 <Button_Status>
 8000366:	4603      	mov	r3, r0
 8000368:	4619      	mov	r1, r3
 800036a:	4620      	mov	r0, r4
 800036c:	f7ff ff8a 	bl	8000284 <Led_Ctrl>

  // Clear interrupt flag to exit handler function
  uint32_t* EXTI_PR = (uint32_t*)(EXTI_BASE_ADDR + 0x14);
 8000370:	4b06      	ldr	r3, [pc, #24]	@ (800038c <EXTI0_IRQHandler+0x34>)
 8000372:	607b      	str	r3, [r7, #4]
  *EXTI_PR |= (0b1 << 0);
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	681b      	ldr	r3, [r3, #0]
 8000378:	f043 0201 	orr.w	r2, r3, #1
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	601a      	str	r2, [r3, #0]
}
 8000380:	bf00      	nop
 8000382:	370c      	adds	r7, #12
 8000384:	46bd      	mov	sp, r7
 8000386:	bd90      	pop	{r4, r7, pc}
 8000388:	20000000 	.word	0x20000000
 800038c:	40013c14 	.word	0x40013c14

08000390 <Uart_Init>:
// 6. Config UART
#define GPIOB_BASE_ADDR 0x40020400
#define USART1_BASE_ADDR 0x40011000

void Uart_Init()
{
 8000390:	b480      	push	{r7}
 8000392:	b087      	sub	sp, #28
 8000394:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000396:	2300      	movs	r3, #0
 8000398:	607b      	str	r3, [r7, #4]
 800039a:	4b35      	ldr	r3, [pc, #212]	@ (8000470 <Uart_Init+0xe0>)
 800039c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800039e:	4a34      	ldr	r2, [pc, #208]	@ (8000470 <Uart_Init+0xe0>)
 80003a0:	f043 0302 	orr.w	r3, r3, #2
 80003a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80003a6:	4b32      	ldr	r3, [pc, #200]	@ (8000470 <Uart_Init+0xe0>)
 80003a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003aa:	f003 0302 	and.w	r3, r3, #2
 80003ae:	607b      	str	r3, [r7, #4]
 80003b0:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_USART1_CLK_ENABLE();
 80003b2:	2300      	movs	r3, #0
 80003b4:	603b      	str	r3, [r7, #0]
 80003b6:	4b2e      	ldr	r3, [pc, #184]	@ (8000470 <Uart_Init+0xe0>)
 80003b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80003ba:	4a2d      	ldr	r2, [pc, #180]	@ (8000470 <Uart_Init+0xe0>)
 80003bc:	f043 0310 	orr.w	r3, r3, #16
 80003c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80003c2:	4b2b      	ldr	r3, [pc, #172]	@ (8000470 <Uart_Init+0xe0>)
 80003c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80003c6:	f003 0310 	and.w	r3, r3, #16
 80003ca:	603b      	str	r3, [r7, #0]
 80003cc:	683b      	ldr	r3, [r7, #0]
	uint32_t* GPIOB_MODER = (uint32_t*)(GPIOB_BASE_ADDR + 0x00);
 80003ce:	4b29      	ldr	r3, [pc, #164]	@ (8000474 <Uart_Init+0xe4>)
 80003d0:	617b      	str	r3, [r7, #20]
	uint32_t* GPIOB_AFRL  = (uint32_t*)(GPIOB_BASE_ADDR + 0x20);
 80003d2:	4b29      	ldr	r3, [pc, #164]	@ (8000478 <Uart_Init+0xe8>)
 80003d4:	613b      	str	r3, [r7, #16]
	uint32_t* USART_BRR  = (uint32_t*)(USART1_BASE_ADDR + 0x08);
 80003d6:	4b29      	ldr	r3, [pc, #164]	@ (800047c <Uart_Init+0xec>)
 80003d8:	60fb      	str	r3, [r7, #12]
	uint32_t* USART_CR1  = (uint32_t*)(USART1_BASE_ADDR + 0x0C);
 80003da:	4b29      	ldr	r3, [pc, #164]	@ (8000480 <Uart_Init+0xf0>)
 80003dc:	60bb      	str	r3, [r7, #8]


	*GPIOB_MODER &= ~(0b1111 << 12); // CLEAR
 80003de:	697b      	ldr	r3, [r7, #20]
 80003e0:	681b      	ldr	r3, [r3, #0]
 80003e2:	f423 4270 	bic.w	r2, r3, #61440	@ 0xf000
 80003e6:	697b      	ldr	r3, [r7, #20]
 80003e8:	601a      	str	r2, [r3, #0]
	*GPIOB_MODER |= (0b1010 << 12);
 80003ea:	697b      	ldr	r3, [r7, #20]
 80003ec:	681b      	ldr	r3, [r3, #0]
 80003ee:	f443 4220 	orr.w	r2, r3, #40960	@ 0xa000
 80003f2:	697b      	ldr	r3, [r7, #20]
 80003f4:	601a      	str	r2, [r3, #0]

	*GPIOB_AFRL	&= ~(0xff << 24);
 80003f6:	693b      	ldr	r3, [r7, #16]
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 80003fe:	693b      	ldr	r3, [r7, #16]
 8000400:	601a      	str	r2, [r3, #0]
	*GPIOB_AFRL	|= (0b01110111 << 24);
 8000402:	693b      	ldr	r3, [r7, #16]
 8000404:	681b      	ldr	r3, [r3, #0]
 8000406:	f043 42ee 	orr.w	r2, r3, #1996488704	@ 0x77000000
 800040a:	693b      	ldr	r3, [r7, #16]
 800040c:	601a      	str	r2, [r3, #0]

	// set baud rate ~ 9600 -> UARTDIV = 104.16667 -> mantissa = 104 & fraction = 0.16667 * 16 = 3
	*USART_BRR &= ~(0xffff << 0);
 800040e:	68fb      	ldr	r3, [r7, #12]
 8000410:	681b      	ldr	r3, [r3, #0]
 8000412:	0c1b      	lsrs	r3, r3, #16
 8000414:	041b      	lsls	r3, r3, #16
 8000416:	68fa      	ldr	r2, [r7, #12]
 8000418:	6013      	str	r3, [r2, #0]
	*USART_BRR |= (3 << 0);
 800041a:	68fb      	ldr	r3, [r7, #12]
 800041c:	681b      	ldr	r3, [r3, #0]
 800041e:	f043 0203 	orr.w	r2, r3, #3
 8000422:	68fb      	ldr	r3, [r7, #12]
 8000424:	601a      	str	r2, [r3, #0]
	*USART_BRR |= (104 << 4);
 8000426:	68fb      	ldr	r3, [r7, #12]
 8000428:	681b      	ldr	r3, [r3, #0]
 800042a:	f443 62d0 	orr.w	r2, r3, #1664	@ 0x680
 800042e:	68fb      	ldr	r3, [r7, #12]
 8000430:	601a      	str	r2, [r3, #0]

	// data frame
	*USART_CR1 |= (0b1 << 10); // Enable parity
 8000432:	68bb      	ldr	r3, [r7, #8]
 8000434:	681b      	ldr	r3, [r3, #0]
 8000436:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 800043a:	68bb      	ldr	r3, [r7, #8]
 800043c:	601a      	str	r2, [r3, #0]
	*USART_CR1 |= (0b1 << 12); // 9 bits length
 800043e:	68bb      	ldr	r3, [r7, #8]
 8000440:	681b      	ldr	r3, [r3, #0]
 8000442:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000446:	68bb      	ldr	r3, [r7, #8]
 8000448:	601a      	str	r2, [r3, #0]

	// enable UART
	*USART_CR1 |= (0b1 << 13);
 800044a:	68bb      	ldr	r3, [r7, #8]
 800044c:	681b      	ldr	r3, [r3, #0]
 800044e:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8000452:	68bb      	ldr	r3, [r7, #8]
 8000454:	601a      	str	r2, [r3, #0]

  // transmiter, receiver
	*USART_CR1 |= (0b11 << 2);
 8000456:	68bb      	ldr	r3, [r7, #8]
 8000458:	681b      	ldr	r3, [r3, #0]
 800045a:	f043 020c 	orr.w	r2, r3, #12
 800045e:	68bb      	ldr	r3, [r7, #8]
 8000460:	601a      	str	r2, [r3, #0]
}
 8000462:	bf00      	nop
 8000464:	371c      	adds	r7, #28
 8000466:	46bd      	mov	sp, r7
 8000468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800046c:	4770      	bx	lr
 800046e:	bf00      	nop
 8000470:	40023800 	.word	0x40023800
 8000474:	40020400 	.word	0x40020400
 8000478:	40020420 	.word	0x40020420
 800047c:	40011008 	.word	0x40011008
 8000480:	4001100c 	.word	0x4001100c

08000484 <uart_send_one_byte>:

void uart_send_one_byte(char data)
{
 8000484:	b480      	push	{r7}
 8000486:	b085      	sub	sp, #20
 8000488:	af00      	add	r7, sp, #0
 800048a:	4603      	mov	r3, r0
 800048c:	71fb      	strb	r3, [r7, #7]
	uint32_t* USART_SR = (uint32_t*)(USART1_BASE_ADDR + 0x00);
 800048e:	4b0e      	ldr	r3, [pc, #56]	@ (80004c8 <uart_send_one_byte+0x44>)
 8000490:	60fb      	str	r3, [r7, #12]
	uint32_t* USART_DR = (uint32_t*)(USART1_BASE_ADDR + 0x04);
 8000492:	4b0e      	ldr	r3, [pc, #56]	@ (80004cc <uart_send_one_byte+0x48>)
 8000494:	60bb      	str	r3, [r7, #8]
	// wait for TXE == 1
	while (((*USART_SR >> 7) & 1) == 0);
 8000496:	bf00      	nop
 8000498:	68fb      	ldr	r3, [r7, #12]
 800049a:	681b      	ldr	r3, [r3, #0]
 800049c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	d0f9      	beq.n	8000498 <uart_send_one_byte+0x14>

	*USART_DR = data;
 80004a4:	79fa      	ldrb	r2, [r7, #7]
 80004a6:	68bb      	ldr	r3, [r7, #8]
 80004a8:	601a      	str	r2, [r3, #0]

	while (((*USART_SR >> 6) & 1) == 0);
 80004aa:	bf00      	nop
 80004ac:	68fb      	ldr	r3, [r7, #12]
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80004b4:	2b00      	cmp	r3, #0
 80004b6:	d0f9      	beq.n	80004ac <uart_send_one_byte+0x28>
}
 80004b8:	bf00      	nop
 80004ba:	bf00      	nop
 80004bc:	3714      	adds	r7, #20
 80004be:	46bd      	mov	sp, r7
 80004c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop
 80004c8:	40011000 	.word	0x40011000
 80004cc:	40011004 	.word	0x40011004

080004d0 <uart_send_string>:

void uart_send_string(char* str)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b084      	sub	sp, #16
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]

	// Get size of string
	int size;
	size = strlen(str);
 80004d8:	6878      	ldr	r0, [r7, #4]
 80004da:	f7ff fe7d 	bl	80001d8 <strlen>
 80004de:	4603      	mov	r3, r0
 80004e0:	60bb      	str	r3, [r7, #8]

	for (int i = 0; i < size; i++)
 80004e2:	2300      	movs	r3, #0
 80004e4:	60fb      	str	r3, [r7, #12]
 80004e6:	e009      	b.n	80004fc <uart_send_string+0x2c>
		uart_send_one_byte(str[i]);
 80004e8:	68fb      	ldr	r3, [r7, #12]
 80004ea:	687a      	ldr	r2, [r7, #4]
 80004ec:	4413      	add	r3, r2
 80004ee:	781b      	ldrb	r3, [r3, #0]
 80004f0:	4618      	mov	r0, r3
 80004f2:	f7ff ffc7 	bl	8000484 <uart_send_one_byte>
	for (int i = 0; i < size; i++)
 80004f6:	68fb      	ldr	r3, [r7, #12]
 80004f8:	3301      	adds	r3, #1
 80004fa:	60fb      	str	r3, [r7, #12]
 80004fc:	68fa      	ldr	r2, [r7, #12]
 80004fe:	68bb      	ldr	r3, [r7, #8]
 8000500:	429a      	cmp	r2, r3
 8000502:	dbf1      	blt.n	80004e8 <uart_send_string+0x18>
}
 8000504:	bf00      	nop
 8000506:	bf00      	nop
 8000508:	3710      	adds	r7, #16
 800050a:	46bd      	mov	sp, r7
 800050c:	bd80      	pop	{r7, pc}
	...

08000510 <uart_receive_one_byte>:

char uart_receive_one_byte()
{
 8000510:	b480      	push	{r7}
 8000512:	b083      	sub	sp, #12
 8000514:	af00      	add	r7, sp, #0
	uint32_t* USART_SR = (uint32_t*)(USART1_BASE_ADDR + 0x00);
 8000516:	4b0a      	ldr	r3, [pc, #40]	@ (8000540 <uart_receive_one_byte+0x30>)
 8000518:	607b      	str	r3, [r7, #4]
	uint32_t* USART_DR = (uint32_t*)(USART1_BASE_ADDR + 0x04);
 800051a:	4b0a      	ldr	r3, [pc, #40]	@ (8000544 <uart_receive_one_byte+0x34>)
 800051c:	603b      	str	r3, [r7, #0]
	// wait for RxNE == 1
	while (((*USART_SR >> 5) & 1) == 0);
 800051e:	bf00      	nop
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	f003 0320 	and.w	r3, r3, #32
 8000528:	2b00      	cmp	r3, #0
 800052a:	d0f9      	beq.n	8000520 <uart_receive_one_byte+0x10>
	return *USART_DR;
 800052c:	683b      	ldr	r3, [r7, #0]
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	b2db      	uxtb	r3, r3
}
 8000532:	4618      	mov	r0, r3
 8000534:	370c      	adds	r7, #12
 8000536:	46bd      	mov	sp, r7
 8000538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop
 8000540:	40011000 	.word	0x40011000
 8000544:	40011004 	.word	0x40011004

08000548 <USART1_IRQHandler>:
}

char cmd[32];
int cmd_index;

void USART1_IRQHandler() {
 8000548:	b598      	push	{r3, r4, r7, lr}
 800054a:	af00      	add	r7, sp, #0
	// if(data == 'x')
  //   Led_Ctrl(ORANGE_LED, ON);
	// else if(data == 'o')
  //   Led_Ctrl(ORANGE_LED, OFF);

  cmd[cmd_index] = uart_receive_one_byte();
 800054c:	4b36      	ldr	r3, [pc, #216]	@ (8000628 <USART1_IRQHandler+0xe0>)
 800054e:	681c      	ldr	r4, [r3, #0]
 8000550:	f7ff ffde 	bl	8000510 <uart_receive_one_byte>
 8000554:	4603      	mov	r3, r0
 8000556:	461a      	mov	r2, r3
 8000558:	4b34      	ldr	r3, [pc, #208]	@ (800062c <USART1_IRQHandler+0xe4>)
 800055a:	551a      	strb	r2, [r3, r4]
  cmd_index++;
 800055c:	4b32      	ldr	r3, [pc, #200]	@ (8000628 <USART1_IRQHandler+0xe0>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	3301      	adds	r3, #1
 8000562:	4a31      	ldr	r2, [pc, #196]	@ (8000628 <USART1_IRQHandler+0xe0>)
 8000564:	6013      	str	r3, [r2, #0]
  if (strstr(cmd, "\n")) {
 8000566:	210a      	movs	r1, #10
 8000568:	4830      	ldr	r0, [pc, #192]	@ (800062c <USART1_IRQHandler+0xe4>)
 800056a:	f002 fcb7 	bl	8002edc <strchr>
 800056e:	4603      	mov	r3, r0
 8000570:	2b00      	cmp	r3, #0
 8000572:	d056      	beq.n	8000622 <USART1_IRQHandler+0xda>
    if (strstr(cmd, "led red on")) {
 8000574:	492e      	ldr	r1, [pc, #184]	@ (8000630 <USART1_IRQHandler+0xe8>)
 8000576:	482d      	ldr	r0, [pc, #180]	@ (800062c <USART1_IRQHandler+0xe4>)
 8000578:	f002 fcbd 	bl	8002ef6 <strstr>
 800057c:	4603      	mov	r3, r0
 800057e:	2b00      	cmp	r3, #0
 8000580:	d00b      	beq.n	800059a <USART1_IRQHandler+0x52>
      Led_Ctrl(RED_LED, ON);
 8000582:	4b2c      	ldr	r3, [pc, #176]	@ (8000634 <USART1_IRQHandler+0xec>)
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	4a2c      	ldr	r2, [pc, #176]	@ (8000638 <USART1_IRQHandler+0xf0>)
 8000588:	6812      	ldr	r2, [r2, #0]
 800058a:	4611      	mov	r1, r2
 800058c:	4618      	mov	r0, r3
 800058e:	f7ff fe79 	bl	8000284 <Led_Ctrl>
      uart_send_string("Da bat led DO\n");
 8000592:	482a      	ldr	r0, [pc, #168]	@ (800063c <USART1_IRQHandler+0xf4>)
 8000594:	f7ff ff9c 	bl	80004d0 <uart_send_string>
 8000598:	e03b      	b.n	8000612 <USART1_IRQHandler+0xca>
    } else if (strstr(cmd, "led red off")) {
 800059a:	4929      	ldr	r1, [pc, #164]	@ (8000640 <USART1_IRQHandler+0xf8>)
 800059c:	4823      	ldr	r0, [pc, #140]	@ (800062c <USART1_IRQHandler+0xe4>)
 800059e:	f002 fcaa 	bl	8002ef6 <strstr>
 80005a2:	4603      	mov	r3, r0
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d00b      	beq.n	80005c0 <USART1_IRQHandler+0x78>
      Led_Ctrl(RED_LED, OFF);
 80005a8:	4b22      	ldr	r3, [pc, #136]	@ (8000634 <USART1_IRQHandler+0xec>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	4a25      	ldr	r2, [pc, #148]	@ (8000644 <USART1_IRQHandler+0xfc>)
 80005ae:	6812      	ldr	r2, [r2, #0]
 80005b0:	4611      	mov	r1, r2
 80005b2:	4618      	mov	r0, r3
 80005b4:	f7ff fe66 	bl	8000284 <Led_Ctrl>
      uart_send_string("Da tat led DO\n");
 80005b8:	4823      	ldr	r0, [pc, #140]	@ (8000648 <USART1_IRQHandler+0x100>)
 80005ba:	f7ff ff89 	bl	80004d0 <uart_send_string>
 80005be:	e028      	b.n	8000612 <USART1_IRQHandler+0xca>
    } else if (strstr(cmd, "led blue on")) {
 80005c0:	4922      	ldr	r1, [pc, #136]	@ (800064c <USART1_IRQHandler+0x104>)
 80005c2:	481a      	ldr	r0, [pc, #104]	@ (800062c <USART1_IRQHandler+0xe4>)
 80005c4:	f002 fc97 	bl	8002ef6 <strstr>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d00b      	beq.n	80005e6 <USART1_IRQHandler+0x9e>
      Led_Ctrl(BLUE_LED, ON);
 80005ce:	4b20      	ldr	r3, [pc, #128]	@ (8000650 <USART1_IRQHandler+0x108>)
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	4a19      	ldr	r2, [pc, #100]	@ (8000638 <USART1_IRQHandler+0xf0>)
 80005d4:	6812      	ldr	r2, [r2, #0]
 80005d6:	4611      	mov	r1, r2
 80005d8:	4618      	mov	r0, r3
 80005da:	f7ff fe53 	bl	8000284 <Led_Ctrl>
      uart_send_string("Da bat led XANH\n");
 80005de:	481d      	ldr	r0, [pc, #116]	@ (8000654 <USART1_IRQHandler+0x10c>)
 80005e0:	f7ff ff76 	bl	80004d0 <uart_send_string>
 80005e4:	e015      	b.n	8000612 <USART1_IRQHandler+0xca>
    } else if (strstr(cmd, "led red off")) {
 80005e6:	4916      	ldr	r1, [pc, #88]	@ (8000640 <USART1_IRQHandler+0xf8>)
 80005e8:	4810      	ldr	r0, [pc, #64]	@ (800062c <USART1_IRQHandler+0xe4>)
 80005ea:	f002 fc84 	bl	8002ef6 <strstr>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d00b      	beq.n	800060c <USART1_IRQHandler+0xc4>
      Led_Ctrl(BLUE_LED, OFF);
 80005f4:	4b16      	ldr	r3, [pc, #88]	@ (8000650 <USART1_IRQHandler+0x108>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	4a12      	ldr	r2, [pc, #72]	@ (8000644 <USART1_IRQHandler+0xfc>)
 80005fa:	6812      	ldr	r2, [r2, #0]
 80005fc:	4611      	mov	r1, r2
 80005fe:	4618      	mov	r0, r3
 8000600:	f7ff fe40 	bl	8000284 <Led_Ctrl>
      uart_send_string("Da tat led XANH\n");
 8000604:	4814      	ldr	r0, [pc, #80]	@ (8000658 <USART1_IRQHandler+0x110>)
 8000606:	f7ff ff63 	bl	80004d0 <uart_send_string>
 800060a:	e002      	b.n	8000612 <USART1_IRQHandler+0xca>
    } else
      uart_send_string("Khong tiem thay command\n");
 800060c:	4813      	ldr	r0, [pc, #76]	@ (800065c <USART1_IRQHandler+0x114>)
 800060e:	f7ff ff5f 	bl	80004d0 <uart_send_string>

    memset(cmd, 0, 32);
 8000612:	2220      	movs	r2, #32
 8000614:	2100      	movs	r1, #0
 8000616:	4805      	ldr	r0, [pc, #20]	@ (800062c <USART1_IRQHandler+0xe4>)
 8000618:	f002 fc58 	bl	8002ecc <memset>
    cmd_index = 0;
 800061c:	4b02      	ldr	r3, [pc, #8]	@ (8000628 <USART1_IRQHandler+0xe0>)
 800061e:	2200      	movs	r2, #0
 8000620:	601a      	str	r2, [r3, #0]
  }
}
 8000622:	bf00      	nop
 8000624:	bd98      	pop	{r3, r4, r7, pc}
 8000626:	bf00      	nop
 8000628:	20000058 	.word	0x20000058
 800062c:	20000038 	.word	0x20000038
 8000630:	08002f84 	.word	0x08002f84
 8000634:	20000000 	.word	0x20000000
 8000638:	20000008 	.word	0x20000008
 800063c:	08002f90 	.word	0x08002f90
 8000640:	08002fa0 	.word	0x08002fa0
 8000644:	20000034 	.word	0x20000034
 8000648:	08002fac 	.word	0x08002fac
 800064c:	08002fbc 	.word	0x08002fbc
 8000650:	20000004 	.word	0x20000004
 8000654:	08002fc8 	.word	0x08002fc8
 8000658:	08002fdc 	.word	0x08002fdc
 800065c:	08002ff0 	.word	0x08002ff0

08000660 <DMA2_Stream2_IRQHandler>:
	*DMA_S2CR |= 1;
}

volatile char recv_completed = 0;

void DMA2_Stream2_IRQHandler() {
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0
  uart_send_string("\nDMA Interrupt\n");
 8000666:	480f      	ldr	r0, [pc, #60]	@ (80006a4 <DMA2_Stream2_IRQHandler+0x44>)
 8000668:	f7ff ff32 	bl	80004d0 <uart_send_string>
  recv_completed = 1;
 800066c:	4b0e      	ldr	r3, [pc, #56]	@ (80006a8 <DMA2_Stream2_IRQHandler+0x48>)
 800066e:	2201      	movs	r2, #1
 8000670:	701a      	strb	r2, [r3, #0]

  // Clear buffer
  memset(rx_buf, 0, sizeof(rx_buf));
 8000672:	2220      	movs	r2, #32
 8000674:	2100      	movs	r1, #0
 8000676:	480d      	ldr	r0, [pc, #52]	@ (80006ac <DMA2_Stream2_IRQHandler+0x4c>)
 8000678:	f002 fc28 	bl	8002ecc <memset>

  // Clear interrupt flag
  uint32_t* DMA_LIFCR = (uint32_t*)(DMA2_BASE_ADDR + 0x08);
 800067c:	4b0c      	ldr	r3, [pc, #48]	@ (80006b0 <DMA2_Stream2_IRQHandler+0x50>)
 800067e:	607b      	str	r3, [r7, #4]
  *DMA_LIFCR |= (1<<21);
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	601a      	str	r2, [r3, #0]

  // Re-enable DMA
  uint32_t* DMA_S2CR = (uint32_t*) (DMA2_BASE_ADDR + 0x10 + 0x18 * 2);
 800068c:	4b09      	ldr	r3, [pc, #36]	@ (80006b4 <DMA2_Stream2_IRQHandler+0x54>)
 800068e:	603b      	str	r3, [r7, #0]
  *DMA_S2CR |= 1;
 8000690:	683b      	ldr	r3, [r7, #0]
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	f043 0201 	orr.w	r2, r3, #1
 8000698:	683b      	ldr	r3, [r7, #0]
 800069a:	601a      	str	r2, [r3, #0]
}
 800069c:	bf00      	nop
 800069e:	3708      	adds	r7, #8
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	0800300c 	.word	0x0800300c
 80006a8:	2000007c 	.word	0x2000007c
 80006ac:	2000005c 	.word	0x2000005c
 80006b0:	40026408 	.word	0x40026408
 80006b4:	40026440 	.word	0x40026440

080006b8 <current_firmware_init>:
    }
  } while(read_data_buffer != 0xFFFFFFFF);
}

// bootloader
void current_firmware_init(uint32_t* firmware_addr) {
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b086      	sub	sp, #24
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
 uint32_t* reset_hander_address_pointer;
 reset_hander_address_pointer = firmware_addr;
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	617b      	str	r3, [r7, #20]

 uint32_t reset_hander_address = *reset_hander_address_pointer;
 80006c4:	697b      	ldr	r3, [r7, #20]
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	613b      	str	r3, [r7, #16]

 void (*hander)();
 hander = reset_hander_address;
 80006ca:	693b      	ldr	r3, [r7, #16]
 80006cc:	60fb      	str	r3, [r7, #12]
 hander();
 80006ce:	68fb      	ldr	r3, [r7, #12]
 80006d0:	4798      	blx	r3
}
 80006d2:	bf00      	nop
 80006d4:	3718      	adds	r7, #24
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
	...

080006dc <main>:
}


//char new_fw[10516];

int main() {
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0

  HAL_Init();
 80006e0:	f000 f8ac 	bl	800083c <HAL_Init>
  Button_Init();
 80006e4:	f7ff fd80 	bl	80001e8 <Button_Init>
  Led_Init();
 80006e8:	f7ff fda2 	bl	8000230 <Led_Init>
  Button_Interrupt_Int();
 80006ec:	f7ff fe02 	bl	80002f4 <Button_Interrupt_Int>
  Uart_Init();
 80006f0:	f7ff fe4e 	bl	8000390 <Uart_Init>
    // HAL_Delay(1000);
    // Led_Ctrl(GREEN_LED, OFF);
    // HAL_Delay(1000);
    // uart_send_string("HELLO\n");

    current_firmware_init((uint32_t*)0x08020004);
 80006f4:	4801      	ldr	r0, [pc, #4]	@ (80006fc <main+0x20>)
 80006f6:	f7ff ffdf 	bl	80006b8 <current_firmware_init>
 80006fa:	e7fb      	b.n	80006f4 <main+0x18>
 80006fc:	08020004 	.word	0x08020004

08000700 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b082      	sub	sp, #8
 8000704:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000706:	2300      	movs	r3, #0
 8000708:	607b      	str	r3, [r7, #4]
 800070a:	4b10      	ldr	r3, [pc, #64]	@ (800074c <HAL_MspInit+0x4c>)
 800070c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800070e:	4a0f      	ldr	r2, [pc, #60]	@ (800074c <HAL_MspInit+0x4c>)
 8000710:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000714:	6453      	str	r3, [r2, #68]	@ 0x44
 8000716:	4b0d      	ldr	r3, [pc, #52]	@ (800074c <HAL_MspInit+0x4c>)
 8000718:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800071a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800071e:	607b      	str	r3, [r7, #4]
 8000720:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000722:	2300      	movs	r3, #0
 8000724:	603b      	str	r3, [r7, #0]
 8000726:	4b09      	ldr	r3, [pc, #36]	@ (800074c <HAL_MspInit+0x4c>)
 8000728:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800072a:	4a08      	ldr	r2, [pc, #32]	@ (800074c <HAL_MspInit+0x4c>)
 800072c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000730:	6413      	str	r3, [r2, #64]	@ 0x40
 8000732:	4b06      	ldr	r3, [pc, #24]	@ (800074c <HAL_MspInit+0x4c>)
 8000734:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000736:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800073a:	603b      	str	r3, [r7, #0]
 800073c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800073e:	2007      	movs	r0, #7
 8000740:	f000 f994 	bl	8000a6c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000744:	bf00      	nop
 8000746:	3708      	adds	r7, #8
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}
 800074c:	40023800 	.word	0x40023800

08000750 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000750:	b480      	push	{r7}
 8000752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000754:	bf00      	nop
 8000756:	e7fd      	b.n	8000754 <NMI_Handler+0x4>

08000758 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000758:	b480      	push	{r7}
 800075a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800075c:	bf00      	nop
 800075e:	e7fd      	b.n	800075c <HardFault_Handler+0x4>

08000760 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000764:	bf00      	nop
 8000766:	e7fd      	b.n	8000764 <MemManage_Handler+0x4>

08000768 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000768:	b480      	push	{r7}
 800076a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800076c:	bf00      	nop
 800076e:	e7fd      	b.n	800076c <BusFault_Handler+0x4>

08000770 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000770:	b480      	push	{r7}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000774:	bf00      	nop
 8000776:	e7fd      	b.n	8000774 <UsageFault_Handler+0x4>

08000778 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000778:	b480      	push	{r7}
 800077a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800077c:	bf00      	nop
 800077e:	46bd      	mov	sp, r7
 8000780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000784:	4770      	bx	lr

08000786 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000786:	b480      	push	{r7}
 8000788:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800078a:	bf00      	nop
 800078c:	46bd      	mov	sp, r7
 800078e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000792:	4770      	bx	lr

08000794 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000794:	b480      	push	{r7}
 8000796:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000798:	bf00      	nop
 800079a:	46bd      	mov	sp, r7
 800079c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a0:	4770      	bx	lr

080007a2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007a2:	b580      	push	{r7, lr}
 80007a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007a6:	f000 f89b 	bl	80008e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007aa:	bf00      	nop
 80007ac:	bd80      	pop	{r7, pc}
	...

080007b0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80007b4:	4802      	ldr	r0, [pc, #8]	@ (80007c0 <OTG_FS_IRQHandler+0x10>)
 80007b6:	f000 f98c 	bl	8000ad2 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80007ba:	bf00      	nop
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	20000084 	.word	0x20000084

080007c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80007c8:	4b06      	ldr	r3, [pc, #24]	@ (80007e4 <SystemInit+0x20>)
 80007ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80007ce:	4a05      	ldr	r2, [pc, #20]	@ (80007e4 <SystemInit+0x20>)
 80007d0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80007d4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007d8:	bf00      	nop
 80007da:	46bd      	mov	sp, r7
 80007dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e0:	4770      	bx	lr
 80007e2:	bf00      	nop
 80007e4:	e000ed00 	.word	0xe000ed00

080007e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80007e8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000820 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80007ec:	f7ff ffea 	bl	80007c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80007f0:	480c      	ldr	r0, [pc, #48]	@ (8000824 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80007f2:	490d      	ldr	r1, [pc, #52]	@ (8000828 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80007f4:	4a0d      	ldr	r2, [pc, #52]	@ (800082c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80007f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007f8:	e002      	b.n	8000800 <LoopCopyDataInit>

080007fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007fe:	3304      	adds	r3, #4

08000800 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000800:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000802:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000804:	d3f9      	bcc.n	80007fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000806:	4a0a      	ldr	r2, [pc, #40]	@ (8000830 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000808:	4c0a      	ldr	r4, [pc, #40]	@ (8000834 <LoopFillZerobss+0x22>)
  movs r3, #0
 800080a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800080c:	e001      	b.n	8000812 <LoopFillZerobss>

0800080e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800080e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000810:	3204      	adds	r2, #4

08000812 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000812:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000814:	d3fb      	bcc.n	800080e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000816:	f002 fb85 	bl	8002f24 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800081a:	f7ff ff5f 	bl	80006dc <main>
  bx  lr    
 800081e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000820:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000824:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000828:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 800082c:	08003058 	.word	0x08003058
  ldr r2, =_sbss
 8000830:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8000834:	20000464 	.word	0x20000464

08000838 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000838:	e7fe      	b.n	8000838 <ADC_IRQHandler>
	...

0800083c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000840:	4b0e      	ldr	r3, [pc, #56]	@ (800087c <HAL_Init+0x40>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	4a0d      	ldr	r2, [pc, #52]	@ (800087c <HAL_Init+0x40>)
 8000846:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800084a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800084c:	4b0b      	ldr	r3, [pc, #44]	@ (800087c <HAL_Init+0x40>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	4a0a      	ldr	r2, [pc, #40]	@ (800087c <HAL_Init+0x40>)
 8000852:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000856:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000858:	4b08      	ldr	r3, [pc, #32]	@ (800087c <HAL_Init+0x40>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	4a07      	ldr	r2, [pc, #28]	@ (800087c <HAL_Init+0x40>)
 800085e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000862:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000864:	2003      	movs	r0, #3
 8000866:	f000 f901 	bl	8000a6c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800086a:	2000      	movs	r0, #0
 800086c:	f000 f808 	bl	8000880 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000870:	f7ff ff46 	bl	8000700 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000874:	2300      	movs	r3, #0
}
 8000876:	4618      	mov	r0, r3
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	40023c00 	.word	0x40023c00

08000880 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b082      	sub	sp, #8
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000888:	4b12      	ldr	r3, [pc, #72]	@ (80008d4 <HAL_InitTick+0x54>)
 800088a:	681a      	ldr	r2, [r3, #0]
 800088c:	4b12      	ldr	r3, [pc, #72]	@ (80008d8 <HAL_InitTick+0x58>)
 800088e:	781b      	ldrb	r3, [r3, #0]
 8000890:	4619      	mov	r1, r3
 8000892:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000896:	fbb3 f3f1 	udiv	r3, r3, r1
 800089a:	fbb2 f3f3 	udiv	r3, r2, r3
 800089e:	4618      	mov	r0, r3
 80008a0:	f000 f90b 	bl	8000aba <HAL_SYSTICK_Config>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008aa:	2301      	movs	r3, #1
 80008ac:	e00e      	b.n	80008cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	2b0f      	cmp	r3, #15
 80008b2:	d80a      	bhi.n	80008ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008b4:	2200      	movs	r2, #0
 80008b6:	6879      	ldr	r1, [r7, #4]
 80008b8:	f04f 30ff 	mov.w	r0, #4294967295
 80008bc:	f000 f8e1 	bl	8000a82 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008c0:	4a06      	ldr	r2, [pc, #24]	@ (80008dc <HAL_InitTick+0x5c>)
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008c6:	2300      	movs	r3, #0
 80008c8:	e000      	b.n	80008cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008ca:	2301      	movs	r3, #1
}
 80008cc:	4618      	mov	r0, r3
 80008ce:	3708      	adds	r7, #8
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	2000000c 	.word	0x2000000c
 80008d8:	20000014 	.word	0x20000014
 80008dc:	20000010 	.word	0x20000010

080008e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008e4:	4b06      	ldr	r3, [pc, #24]	@ (8000900 <HAL_IncTick+0x20>)
 80008e6:	781b      	ldrb	r3, [r3, #0]
 80008e8:	461a      	mov	r2, r3
 80008ea:	4b06      	ldr	r3, [pc, #24]	@ (8000904 <HAL_IncTick+0x24>)
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	4413      	add	r3, r2
 80008f0:	4a04      	ldr	r2, [pc, #16]	@ (8000904 <HAL_IncTick+0x24>)
 80008f2:	6013      	str	r3, [r2, #0]
}
 80008f4:	bf00      	nop
 80008f6:	46bd      	mov	sp, r7
 80008f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fc:	4770      	bx	lr
 80008fe:	bf00      	nop
 8000900:	20000014 	.word	0x20000014
 8000904:	20000080 	.word	0x20000080

08000908 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000908:	b480      	push	{r7}
 800090a:	b085      	sub	sp, #20
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	f003 0307 	and.w	r3, r3, #7
 8000916:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000918:	4b0c      	ldr	r3, [pc, #48]	@ (800094c <__NVIC_SetPriorityGrouping+0x44>)
 800091a:	68db      	ldr	r3, [r3, #12]
 800091c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800091e:	68ba      	ldr	r2, [r7, #8]
 8000920:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000924:	4013      	ands	r3, r2
 8000926:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000928:	68fb      	ldr	r3, [r7, #12]
 800092a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800092c:	68bb      	ldr	r3, [r7, #8]
 800092e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000930:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000934:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000938:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800093a:	4a04      	ldr	r2, [pc, #16]	@ (800094c <__NVIC_SetPriorityGrouping+0x44>)
 800093c:	68bb      	ldr	r3, [r7, #8]
 800093e:	60d3      	str	r3, [r2, #12]
}
 8000940:	bf00      	nop
 8000942:	3714      	adds	r7, #20
 8000944:	46bd      	mov	sp, r7
 8000946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094a:	4770      	bx	lr
 800094c:	e000ed00 	.word	0xe000ed00

08000950 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000954:	4b04      	ldr	r3, [pc, #16]	@ (8000968 <__NVIC_GetPriorityGrouping+0x18>)
 8000956:	68db      	ldr	r3, [r3, #12]
 8000958:	0a1b      	lsrs	r3, r3, #8
 800095a:	f003 0307 	and.w	r3, r3, #7
}
 800095e:	4618      	mov	r0, r3
 8000960:	46bd      	mov	sp, r7
 8000962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000966:	4770      	bx	lr
 8000968:	e000ed00 	.word	0xe000ed00

0800096c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800096c:	b480      	push	{r7}
 800096e:	b083      	sub	sp, #12
 8000970:	af00      	add	r7, sp, #0
 8000972:	4603      	mov	r3, r0
 8000974:	6039      	str	r1, [r7, #0]
 8000976:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000978:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800097c:	2b00      	cmp	r3, #0
 800097e:	db0a      	blt.n	8000996 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000980:	683b      	ldr	r3, [r7, #0]
 8000982:	b2da      	uxtb	r2, r3
 8000984:	490c      	ldr	r1, [pc, #48]	@ (80009b8 <__NVIC_SetPriority+0x4c>)
 8000986:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800098a:	0112      	lsls	r2, r2, #4
 800098c:	b2d2      	uxtb	r2, r2
 800098e:	440b      	add	r3, r1
 8000990:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000994:	e00a      	b.n	80009ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000996:	683b      	ldr	r3, [r7, #0]
 8000998:	b2da      	uxtb	r2, r3
 800099a:	4908      	ldr	r1, [pc, #32]	@ (80009bc <__NVIC_SetPriority+0x50>)
 800099c:	79fb      	ldrb	r3, [r7, #7]
 800099e:	f003 030f 	and.w	r3, r3, #15
 80009a2:	3b04      	subs	r3, #4
 80009a4:	0112      	lsls	r2, r2, #4
 80009a6:	b2d2      	uxtb	r2, r2
 80009a8:	440b      	add	r3, r1
 80009aa:	761a      	strb	r2, [r3, #24]
}
 80009ac:	bf00      	nop
 80009ae:	370c      	adds	r7, #12
 80009b0:	46bd      	mov	sp, r7
 80009b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b6:	4770      	bx	lr
 80009b8:	e000e100 	.word	0xe000e100
 80009bc:	e000ed00 	.word	0xe000ed00

080009c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009c0:	b480      	push	{r7}
 80009c2:	b089      	sub	sp, #36	@ 0x24
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	60f8      	str	r0, [r7, #12]
 80009c8:	60b9      	str	r1, [r7, #8]
 80009ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	f003 0307 	and.w	r3, r3, #7
 80009d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009d4:	69fb      	ldr	r3, [r7, #28]
 80009d6:	f1c3 0307 	rsb	r3, r3, #7
 80009da:	2b04      	cmp	r3, #4
 80009dc:	bf28      	it	cs
 80009de:	2304      	movcs	r3, #4
 80009e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009e2:	69fb      	ldr	r3, [r7, #28]
 80009e4:	3304      	adds	r3, #4
 80009e6:	2b06      	cmp	r3, #6
 80009e8:	d902      	bls.n	80009f0 <NVIC_EncodePriority+0x30>
 80009ea:	69fb      	ldr	r3, [r7, #28]
 80009ec:	3b03      	subs	r3, #3
 80009ee:	e000      	b.n	80009f2 <NVIC_EncodePriority+0x32>
 80009f0:	2300      	movs	r3, #0
 80009f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009f4:	f04f 32ff 	mov.w	r2, #4294967295
 80009f8:	69bb      	ldr	r3, [r7, #24]
 80009fa:	fa02 f303 	lsl.w	r3, r2, r3
 80009fe:	43da      	mvns	r2, r3
 8000a00:	68bb      	ldr	r3, [r7, #8]
 8000a02:	401a      	ands	r2, r3
 8000a04:	697b      	ldr	r3, [r7, #20]
 8000a06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a08:	f04f 31ff 	mov.w	r1, #4294967295
 8000a0c:	697b      	ldr	r3, [r7, #20]
 8000a0e:	fa01 f303 	lsl.w	r3, r1, r3
 8000a12:	43d9      	mvns	r1, r3
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a18:	4313      	orrs	r3, r2
         );
}
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	3724      	adds	r7, #36	@ 0x24
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a24:	4770      	bx	lr
	...

08000a28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b082      	sub	sp, #8
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	3b01      	subs	r3, #1
 8000a34:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000a38:	d301      	bcc.n	8000a3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	e00f      	b.n	8000a5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a3e:	4a0a      	ldr	r2, [pc, #40]	@ (8000a68 <SysTick_Config+0x40>)
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	3b01      	subs	r3, #1
 8000a44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a46:	210f      	movs	r1, #15
 8000a48:	f04f 30ff 	mov.w	r0, #4294967295
 8000a4c:	f7ff ff8e 	bl	800096c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a50:	4b05      	ldr	r3, [pc, #20]	@ (8000a68 <SysTick_Config+0x40>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a56:	4b04      	ldr	r3, [pc, #16]	@ (8000a68 <SysTick_Config+0x40>)
 8000a58:	2207      	movs	r2, #7
 8000a5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a5c:	2300      	movs	r3, #0
}
 8000a5e:	4618      	mov	r0, r3
 8000a60:	3708      	adds	r7, #8
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	e000e010 	.word	0xe000e010

08000a6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a74:	6878      	ldr	r0, [r7, #4]
 8000a76:	f7ff ff47 	bl	8000908 <__NVIC_SetPriorityGrouping>
}
 8000a7a:	bf00      	nop
 8000a7c:	3708      	adds	r7, #8
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}

08000a82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a82:	b580      	push	{r7, lr}
 8000a84:	b086      	sub	sp, #24
 8000a86:	af00      	add	r7, sp, #0
 8000a88:	4603      	mov	r3, r0
 8000a8a:	60b9      	str	r1, [r7, #8]
 8000a8c:	607a      	str	r2, [r7, #4]
 8000a8e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a90:	2300      	movs	r3, #0
 8000a92:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a94:	f7ff ff5c 	bl	8000950 <__NVIC_GetPriorityGrouping>
 8000a98:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a9a:	687a      	ldr	r2, [r7, #4]
 8000a9c:	68b9      	ldr	r1, [r7, #8]
 8000a9e:	6978      	ldr	r0, [r7, #20]
 8000aa0:	f7ff ff8e 	bl	80009c0 <NVIC_EncodePriority>
 8000aa4:	4602      	mov	r2, r0
 8000aa6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000aaa:	4611      	mov	r1, r2
 8000aac:	4618      	mov	r0, r3
 8000aae:	f7ff ff5d 	bl	800096c <__NVIC_SetPriority>
}
 8000ab2:	bf00      	nop
 8000ab4:	3718      	adds	r7, #24
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}

08000aba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000aba:	b580      	push	{r7, lr}
 8000abc:	b082      	sub	sp, #8
 8000abe:	af00      	add	r7, sp, #0
 8000ac0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ac2:	6878      	ldr	r0, [r7, #4]
 8000ac4:	f7ff ffb0 	bl	8000a28 <SysTick_Config>
 8000ac8:	4603      	mov	r3, r0
}
 8000aca:	4618      	mov	r0, r3
 8000acc:	3708      	adds	r7, #8
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}

08000ad2 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8000ad2:	b580      	push	{r7, lr}
 8000ad4:	b086      	sub	sp, #24
 8000ad6:	af00      	add	r7, sp, #0
 8000ad8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8000ae0:	693b      	ldr	r3, [r7, #16]
 8000ae2:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f001 fea7 	bl	800283c <USB_GetMode>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b01      	cmp	r3, #1
 8000af2:	f040 80fb 	bne.w	8000cec <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	4618      	mov	r0, r3
 8000afc:	f001 fe6a 	bl	80027d4 <USB_ReadInterrupts>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	f000 80f1 	beq.w	8000cea <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	f001 fe61 	bl	80027d4 <USB_ReadInterrupts>
 8000b12:	4603      	mov	r3, r0
 8000b14:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b18:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8000b1c:	d104      	bne.n	8000b28 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8000b26:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f001 fe51 	bl	80027d4 <USB_ReadInterrupts>
 8000b32:	4603      	mov	r3, r0
 8000b34:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000b38:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8000b3c:	d104      	bne.n	8000b48 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8000b46:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f001 fe41 	bl	80027d4 <USB_ReadInterrupts>
 8000b52:	4603      	mov	r3, r0
 8000b54:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000b58:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8000b5c:	d104      	bne.n	8000b68 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000b66:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f001 fe31 	bl	80027d4 <USB_ReadInterrupts>
 8000b72:	4603      	mov	r3, r0
 8000b74:	f003 0302 	and.w	r3, r3, #2
 8000b78:	2b02      	cmp	r3, #2
 8000b7a:	d103      	bne.n	8000b84 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	2202      	movs	r2, #2
 8000b82:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f001 fe23 	bl	80027d4 <USB_ReadInterrupts>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000b94:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000b98:	d120      	bne.n	8000bdc <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8000ba2:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	f003 0301 	and.w	r3, r3, #1
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d113      	bne.n	8000bdc <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8000bb4:	2110      	movs	r1, #16
 8000bb6:	6938      	ldr	r0, [r7, #16]
 8000bb8:	f001 fd54 	bl	8002664 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8000bbc:	6938      	ldr	r0, [r7, #16]
 8000bbe:	f001 fd83 	bl	80026c8 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	7a5b      	ldrb	r3, [r3, #9]
 8000bc6:	2b02      	cmp	r3, #2
 8000bc8:	d105      	bne.n	8000bd6 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	2101      	movs	r1, #1
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f001 fe41 	bl	8002858 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8000bd6:	6878      	ldr	r0, [r7, #4]
 8000bd8:	f002 f8f9 	bl	8002dce <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	4618      	mov	r0, r3
 8000be2:	f001 fdf7 	bl	80027d4 <USB_ReadInterrupts>
 8000be6:	4603      	mov	r3, r0
 8000be8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8000bec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000bf0:	d102      	bne.n	8000bf8 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8000bf2:	6878      	ldr	r0, [r7, #4]
 8000bf4:	f001 fca1 	bl	800253a <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f001 fde9 	bl	80027d4 <USB_ReadInterrupts>
 8000c02:	4603      	mov	r3, r0
 8000c04:	f003 0308 	and.w	r3, r3, #8
 8000c08:	2b08      	cmp	r3, #8
 8000c0a:	d106      	bne.n	8000c1a <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8000c0c:	6878      	ldr	r0, [r7, #4]
 8000c0e:	f002 f8c2 	bl	8002d96 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	2208      	movs	r2, #8
 8000c18:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f001 fdd8 	bl	80027d4 <USB_ReadInterrupts>
 8000c24:	4603      	mov	r3, r0
 8000c26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000c2a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8000c2e:	d139      	bne.n	8000ca4 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	4618      	mov	r0, r3
 8000c36:	f001 fe4c 	bl	80028d2 <USB_HC_ReadInterrupt>
 8000c3a:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	617b      	str	r3, [r7, #20]
 8000c40:	e025      	b.n	8000c8e <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8000c42:	697b      	ldr	r3, [r7, #20]
 8000c44:	f003 030f 	and.w	r3, r3, #15
 8000c48:	68ba      	ldr	r2, [r7, #8]
 8000c4a:	fa22 f303 	lsr.w	r3, r2, r3
 8000c4e:	f003 0301 	and.w	r3, r3, #1
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d018      	beq.n	8000c88 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8000c56:	697b      	ldr	r3, [r7, #20]
 8000c58:	015a      	lsls	r2, r3, #5
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	4413      	add	r3, r2
 8000c5e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000c68:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8000c6c:	d106      	bne.n	8000c7c <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8000c6e:	697b      	ldr	r3, [r7, #20]
 8000c70:	b2db      	uxtb	r3, r3
 8000c72:	4619      	mov	r1, r3
 8000c74:	6878      	ldr	r0, [r7, #4]
 8000c76:	f000 f859 	bl	8000d2c <HCD_HC_IN_IRQHandler>
 8000c7a:	e005      	b.n	8000c88 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8000c7c:	697b      	ldr	r3, [r7, #20]
 8000c7e:	b2db      	uxtb	r3, r3
 8000c80:	4619      	mov	r1, r3
 8000c82:	6878      	ldr	r0, [r7, #4]
 8000c84:	f000 febb 	bl	80019fe <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8000c88:	697b      	ldr	r3, [r7, #20]
 8000c8a:	3301      	adds	r3, #1
 8000c8c:	617b      	str	r3, [r7, #20]
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	795b      	ldrb	r3, [r3, #5]
 8000c92:	461a      	mov	r2, r3
 8000c94:	697b      	ldr	r3, [r7, #20]
 8000c96:	4293      	cmp	r3, r2
 8000c98:	d3d3      	bcc.n	8000c42 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000ca2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f001 fd93 	bl	80027d4 <USB_ReadInterrupts>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	f003 0310 	and.w	r3, r3, #16
 8000cb4:	2b10      	cmp	r3, #16
 8000cb6:	d101      	bne.n	8000cbc <HAL_HCD_IRQHandler+0x1ea>
 8000cb8:	2301      	movs	r3, #1
 8000cba:	e000      	b.n	8000cbe <HAL_HCD_IRQHandler+0x1ec>
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d014      	beq.n	8000cec <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	699a      	ldr	r2, [r3, #24]
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	f022 0210 	bic.w	r2, r2, #16
 8000cd0:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8000cd2:	6878      	ldr	r0, [r7, #4]
 8000cd4:	f001 fb52 	bl	800237c <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	699a      	ldr	r2, [r3, #24]
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	f042 0210 	orr.w	r2, r2, #16
 8000ce6:	619a      	str	r2, [r3, #24]
 8000ce8:	e000      	b.n	8000cec <HAL_HCD_IRQHandler+0x21a>
      return;
 8000cea:	bf00      	nop
    }
  }
}
 8000cec:	3718      	adds	r7, #24
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}

08000cf2 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8000cf2:	b580      	push	{r7, lr}
 8000cf4:	b082      	sub	sp, #8
 8000cf6:	af00      	add	r7, sp, #0
 8000cf8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8000d00:	2b01      	cmp	r3, #1
 8000d02:	d101      	bne.n	8000d08 <HAL_HCD_Stop+0x16>
 8000d04:	2302      	movs	r3, #2
 8000d06:	e00d      	b.n	8000d24 <HAL_HCD_Stop+0x32>
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	2201      	movs	r2, #1
 8000d0c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	4618      	mov	r0, r3
 8000d16:	f001 ff0d 	bl	8002b34 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8000d22:	2300      	movs	r3, #0
}
 8000d24:	4618      	mov	r0, r3
 8000d26:	3708      	adds	r7, #8
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}

08000d2c <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b086      	sub	sp, #24
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
 8000d34:	460b      	mov	r3, r1
 8000d36:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8000d3e:	697b      	ldr	r3, [r7, #20]
 8000d40:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	78fa      	ldrb	r2, [r7, #3]
 8000d48:	4611      	mov	r1, r2
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f001 fd55 	bl	80027fa <USB_ReadChInterrupts>
 8000d50:	4603      	mov	r3, r0
 8000d52:	f003 0304 	and.w	r3, r3, #4
 8000d56:	2b04      	cmp	r3, #4
 8000d58:	d11a      	bne.n	8000d90 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8000d5a:	78fb      	ldrb	r3, [r7, #3]
 8000d5c:	015a      	lsls	r2, r3, #5
 8000d5e:	693b      	ldr	r3, [r7, #16]
 8000d60:	4413      	add	r3, r2
 8000d62:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8000d66:	461a      	mov	r2, r3
 8000d68:	2304      	movs	r3, #4
 8000d6a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8000d6c:	78fa      	ldrb	r2, [r7, #3]
 8000d6e:	6879      	ldr	r1, [r7, #4]
 8000d70:	4613      	mov	r3, r2
 8000d72:	011b      	lsls	r3, r3, #4
 8000d74:	1a9b      	subs	r3, r3, r2
 8000d76:	009b      	lsls	r3, r3, #2
 8000d78:	440b      	add	r3, r1
 8000d7a:	334d      	adds	r3, #77	@ 0x4d
 8000d7c:	2207      	movs	r2, #7
 8000d7e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	78fa      	ldrb	r2, [r7, #3]
 8000d86:	4611      	mov	r1, r2
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f001 fdb3 	bl	80028f4 <USB_HC_Halt>
 8000d8e:	e09e      	b.n	8000ece <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	78fa      	ldrb	r2, [r7, #3]
 8000d96:	4611      	mov	r1, r2
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f001 fd2e 	bl	80027fa <USB_ReadChInterrupts>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000da4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000da8:	d11b      	bne.n	8000de2 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8000daa:	78fb      	ldrb	r3, [r7, #3]
 8000dac:	015a      	lsls	r2, r3, #5
 8000dae:	693b      	ldr	r3, [r7, #16]
 8000db0:	4413      	add	r3, r2
 8000db2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8000db6:	461a      	mov	r2, r3
 8000db8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000dbc:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8000dbe:	78fa      	ldrb	r2, [r7, #3]
 8000dc0:	6879      	ldr	r1, [r7, #4]
 8000dc2:	4613      	mov	r3, r2
 8000dc4:	011b      	lsls	r3, r3, #4
 8000dc6:	1a9b      	subs	r3, r3, r2
 8000dc8:	009b      	lsls	r3, r3, #2
 8000dca:	440b      	add	r3, r1
 8000dcc:	334d      	adds	r3, #77	@ 0x4d
 8000dce:	2208      	movs	r2, #8
 8000dd0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	78fa      	ldrb	r2, [r7, #3]
 8000dd8:	4611      	mov	r1, r2
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f001 fd8a 	bl	80028f4 <USB_HC_Halt>
 8000de0:	e075      	b.n	8000ece <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	78fa      	ldrb	r2, [r7, #3]
 8000de8:	4611      	mov	r1, r2
 8000dea:	4618      	mov	r0, r3
 8000dec:	f001 fd05 	bl	80027fa <USB_ReadChInterrupts>
 8000df0:	4603      	mov	r3, r0
 8000df2:	f003 0308 	and.w	r3, r3, #8
 8000df6:	2b08      	cmp	r3, #8
 8000df8:	d11a      	bne.n	8000e30 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8000dfa:	78fb      	ldrb	r3, [r7, #3]
 8000dfc:	015a      	lsls	r2, r3, #5
 8000dfe:	693b      	ldr	r3, [r7, #16]
 8000e00:	4413      	add	r3, r2
 8000e02:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8000e06:	461a      	mov	r2, r3
 8000e08:	2308      	movs	r3, #8
 8000e0a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8000e0c:	78fa      	ldrb	r2, [r7, #3]
 8000e0e:	6879      	ldr	r1, [r7, #4]
 8000e10:	4613      	mov	r3, r2
 8000e12:	011b      	lsls	r3, r3, #4
 8000e14:	1a9b      	subs	r3, r3, r2
 8000e16:	009b      	lsls	r3, r3, #2
 8000e18:	440b      	add	r3, r1
 8000e1a:	334d      	adds	r3, #77	@ 0x4d
 8000e1c:	2206      	movs	r2, #6
 8000e1e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	78fa      	ldrb	r2, [r7, #3]
 8000e26:	4611      	mov	r1, r2
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f001 fd63 	bl	80028f4 <USB_HC_Halt>
 8000e2e:	e04e      	b.n	8000ece <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	78fa      	ldrb	r2, [r7, #3]
 8000e36:	4611      	mov	r1, r2
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f001 fcde 	bl	80027fa <USB_ReadChInterrupts>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000e44:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000e48:	d11b      	bne.n	8000e82 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8000e4a:	78fb      	ldrb	r3, [r7, #3]
 8000e4c:	015a      	lsls	r2, r3, #5
 8000e4e:	693b      	ldr	r3, [r7, #16]
 8000e50:	4413      	add	r3, r2
 8000e52:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8000e56:	461a      	mov	r2, r3
 8000e58:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e5c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8000e5e:	78fa      	ldrb	r2, [r7, #3]
 8000e60:	6879      	ldr	r1, [r7, #4]
 8000e62:	4613      	mov	r3, r2
 8000e64:	011b      	lsls	r3, r3, #4
 8000e66:	1a9b      	subs	r3, r3, r2
 8000e68:	009b      	lsls	r3, r3, #2
 8000e6a:	440b      	add	r3, r1
 8000e6c:	334d      	adds	r3, #77	@ 0x4d
 8000e6e:	2209      	movs	r2, #9
 8000e70:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	78fa      	ldrb	r2, [r7, #3]
 8000e78:	4611      	mov	r1, r2
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f001 fd3a 	bl	80028f4 <USB_HC_Halt>
 8000e80:	e025      	b.n	8000ece <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	78fa      	ldrb	r2, [r7, #3]
 8000e88:	4611      	mov	r1, r2
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f001 fcb5 	bl	80027fa <USB_ReadChInterrupts>
 8000e90:	4603      	mov	r3, r0
 8000e92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000e96:	2b80      	cmp	r3, #128	@ 0x80
 8000e98:	d119      	bne.n	8000ece <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8000e9a:	78fb      	ldrb	r3, [r7, #3]
 8000e9c:	015a      	lsls	r2, r3, #5
 8000e9e:	693b      	ldr	r3, [r7, #16]
 8000ea0:	4413      	add	r3, r2
 8000ea2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8000ea6:	461a      	mov	r2, r3
 8000ea8:	2380      	movs	r3, #128	@ 0x80
 8000eaa:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8000eac:	78fa      	ldrb	r2, [r7, #3]
 8000eae:	6879      	ldr	r1, [r7, #4]
 8000eb0:	4613      	mov	r3, r2
 8000eb2:	011b      	lsls	r3, r3, #4
 8000eb4:	1a9b      	subs	r3, r3, r2
 8000eb6:	009b      	lsls	r3, r3, #2
 8000eb8:	440b      	add	r3, r1
 8000eba:	334d      	adds	r3, #77	@ 0x4d
 8000ebc:	2207      	movs	r2, #7
 8000ebe:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	78fa      	ldrb	r2, [r7, #3]
 8000ec6:	4611      	mov	r1, r2
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f001 fd13 	bl	80028f4 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	78fa      	ldrb	r2, [r7, #3]
 8000ed4:	4611      	mov	r1, r2
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f001 fc8f 	bl	80027fa <USB_ReadChInterrupts>
 8000edc:	4603      	mov	r3, r0
 8000ede:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000ee2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000ee6:	d112      	bne.n	8000f0e <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	78fa      	ldrb	r2, [r7, #3]
 8000eee:	4611      	mov	r1, r2
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f001 fcff 	bl	80028f4 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8000ef6:	78fb      	ldrb	r3, [r7, #3]
 8000ef8:	015a      	lsls	r2, r3, #5
 8000efa:	693b      	ldr	r3, [r7, #16]
 8000efc:	4413      	add	r3, r2
 8000efe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8000f02:	461a      	mov	r2, r3
 8000f04:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000f08:	6093      	str	r3, [r2, #8]
 8000f0a:	f000 bd75 	b.w	80019f8 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	78fa      	ldrb	r2, [r7, #3]
 8000f14:	4611      	mov	r1, r2
 8000f16:	4618      	mov	r0, r3
 8000f18:	f001 fc6f 	bl	80027fa <USB_ReadChInterrupts>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	f003 0301 	and.w	r3, r3, #1
 8000f22:	2b01      	cmp	r3, #1
 8000f24:	f040 8128 	bne.w	8001178 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8000f28:	78fb      	ldrb	r3, [r7, #3]
 8000f2a:	015a      	lsls	r2, r3, #5
 8000f2c:	693b      	ldr	r3, [r7, #16]
 8000f2e:	4413      	add	r3, r2
 8000f30:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8000f34:	461a      	mov	r2, r3
 8000f36:	2320      	movs	r3, #32
 8000f38:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8000f3a:	78fa      	ldrb	r2, [r7, #3]
 8000f3c:	6879      	ldr	r1, [r7, #4]
 8000f3e:	4613      	mov	r3, r2
 8000f40:	011b      	lsls	r3, r3, #4
 8000f42:	1a9b      	subs	r3, r3, r2
 8000f44:	009b      	lsls	r3, r3, #2
 8000f46:	440b      	add	r3, r1
 8000f48:	331b      	adds	r3, #27
 8000f4a:	781b      	ldrb	r3, [r3, #0]
 8000f4c:	2b01      	cmp	r3, #1
 8000f4e:	d119      	bne.n	8000f84 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8000f50:	78fa      	ldrb	r2, [r7, #3]
 8000f52:	6879      	ldr	r1, [r7, #4]
 8000f54:	4613      	mov	r3, r2
 8000f56:	011b      	lsls	r3, r3, #4
 8000f58:	1a9b      	subs	r3, r3, r2
 8000f5a:	009b      	lsls	r3, r3, #2
 8000f5c:	440b      	add	r3, r1
 8000f5e:	331b      	adds	r3, #27
 8000f60:	2200      	movs	r2, #0
 8000f62:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8000f64:	78fb      	ldrb	r3, [r7, #3]
 8000f66:	015a      	lsls	r2, r3, #5
 8000f68:	693b      	ldr	r3, [r7, #16]
 8000f6a:	4413      	add	r3, r2
 8000f6c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8000f70:	685b      	ldr	r3, [r3, #4]
 8000f72:	78fa      	ldrb	r2, [r7, #3]
 8000f74:	0151      	lsls	r1, r2, #5
 8000f76:	693a      	ldr	r2, [r7, #16]
 8000f78:	440a      	add	r2, r1
 8000f7a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8000f7e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000f82:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	799b      	ldrb	r3, [r3, #6]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d01b      	beq.n	8000fc4 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8000f8c:	78fa      	ldrb	r2, [r7, #3]
 8000f8e:	6879      	ldr	r1, [r7, #4]
 8000f90:	4613      	mov	r3, r2
 8000f92:	011b      	lsls	r3, r3, #4
 8000f94:	1a9b      	subs	r3, r3, r2
 8000f96:	009b      	lsls	r3, r3, #2
 8000f98:	440b      	add	r3, r1
 8000f9a:	3330      	adds	r3, #48	@ 0x30
 8000f9c:	6819      	ldr	r1, [r3, #0]
 8000f9e:	78fb      	ldrb	r3, [r7, #3]
 8000fa0:	015a      	lsls	r2, r3, #5
 8000fa2:	693b      	ldr	r3, [r7, #16]
 8000fa4:	4413      	add	r3, r2
 8000fa6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8000faa:	691b      	ldr	r3, [r3, #16]
 8000fac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000fb0:	78fa      	ldrb	r2, [r7, #3]
 8000fb2:	1ac9      	subs	r1, r1, r3
 8000fb4:	6878      	ldr	r0, [r7, #4]
 8000fb6:	4613      	mov	r3, r2
 8000fb8:	011b      	lsls	r3, r3, #4
 8000fba:	1a9b      	subs	r3, r3, r2
 8000fbc:	009b      	lsls	r3, r3, #2
 8000fbe:	4403      	add	r3, r0
 8000fc0:	3338      	adds	r3, #56	@ 0x38
 8000fc2:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8000fc4:	78fa      	ldrb	r2, [r7, #3]
 8000fc6:	6879      	ldr	r1, [r7, #4]
 8000fc8:	4613      	mov	r3, r2
 8000fca:	011b      	lsls	r3, r3, #4
 8000fcc:	1a9b      	subs	r3, r3, r2
 8000fce:	009b      	lsls	r3, r3, #2
 8000fd0:	440b      	add	r3, r1
 8000fd2:	334d      	adds	r3, #77	@ 0x4d
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8000fd8:	78fa      	ldrb	r2, [r7, #3]
 8000fda:	6879      	ldr	r1, [r7, #4]
 8000fdc:	4613      	mov	r3, r2
 8000fde:	011b      	lsls	r3, r3, #4
 8000fe0:	1a9b      	subs	r3, r3, r2
 8000fe2:	009b      	lsls	r3, r3, #2
 8000fe4:	440b      	add	r3, r1
 8000fe6:	3344      	adds	r3, #68	@ 0x44
 8000fe8:	2200      	movs	r2, #0
 8000fea:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8000fec:	78fb      	ldrb	r3, [r7, #3]
 8000fee:	015a      	lsls	r2, r3, #5
 8000ff0:	693b      	ldr	r3, [r7, #16]
 8000ff2:	4413      	add	r3, r2
 8000ff4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8000ff8:	461a      	mov	r2, r3
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8000ffe:	78fa      	ldrb	r2, [r7, #3]
 8001000:	6879      	ldr	r1, [r7, #4]
 8001002:	4613      	mov	r3, r2
 8001004:	011b      	lsls	r3, r3, #4
 8001006:	1a9b      	subs	r3, r3, r2
 8001008:	009b      	lsls	r3, r3, #2
 800100a:	440b      	add	r3, r1
 800100c:	3326      	adds	r3, #38	@ 0x26
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	2b00      	cmp	r3, #0
 8001012:	d00a      	beq.n	800102a <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8001014:	78fa      	ldrb	r2, [r7, #3]
 8001016:	6879      	ldr	r1, [r7, #4]
 8001018:	4613      	mov	r3, r2
 800101a:	011b      	lsls	r3, r3, #4
 800101c:	1a9b      	subs	r3, r3, r2
 800101e:	009b      	lsls	r3, r3, #2
 8001020:	440b      	add	r3, r1
 8001022:	3326      	adds	r3, #38	@ 0x26
 8001024:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001026:	2b02      	cmp	r3, #2
 8001028:	d110      	bne.n	800104c <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	78fa      	ldrb	r2, [r7, #3]
 8001030:	4611      	mov	r1, r2
 8001032:	4618      	mov	r0, r3
 8001034:	f001 fc5e 	bl	80028f4 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8001038:	78fb      	ldrb	r3, [r7, #3]
 800103a:	015a      	lsls	r2, r3, #5
 800103c:	693b      	ldr	r3, [r7, #16]
 800103e:	4413      	add	r3, r2
 8001040:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001044:	461a      	mov	r2, r3
 8001046:	2310      	movs	r3, #16
 8001048:	6093      	str	r3, [r2, #8]
 800104a:	e03d      	b.n	80010c8 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800104c:	78fa      	ldrb	r2, [r7, #3]
 800104e:	6879      	ldr	r1, [r7, #4]
 8001050:	4613      	mov	r3, r2
 8001052:	011b      	lsls	r3, r3, #4
 8001054:	1a9b      	subs	r3, r3, r2
 8001056:	009b      	lsls	r3, r3, #2
 8001058:	440b      	add	r3, r1
 800105a:	3326      	adds	r3, #38	@ 0x26
 800105c:	781b      	ldrb	r3, [r3, #0]
 800105e:	2b03      	cmp	r3, #3
 8001060:	d00a      	beq.n	8001078 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8001062:	78fa      	ldrb	r2, [r7, #3]
 8001064:	6879      	ldr	r1, [r7, #4]
 8001066:	4613      	mov	r3, r2
 8001068:	011b      	lsls	r3, r3, #4
 800106a:	1a9b      	subs	r3, r3, r2
 800106c:	009b      	lsls	r3, r3, #2
 800106e:	440b      	add	r3, r1
 8001070:	3326      	adds	r3, #38	@ 0x26
 8001072:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8001074:	2b01      	cmp	r3, #1
 8001076:	d127      	bne.n	80010c8 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8001078:	78fb      	ldrb	r3, [r7, #3]
 800107a:	015a      	lsls	r2, r3, #5
 800107c:	693b      	ldr	r3, [r7, #16]
 800107e:	4413      	add	r3, r2
 8001080:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	78fa      	ldrb	r2, [r7, #3]
 8001088:	0151      	lsls	r1, r2, #5
 800108a:	693a      	ldr	r2, [r7, #16]
 800108c:	440a      	add	r2, r1
 800108e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8001092:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001096:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8001098:	78fa      	ldrb	r2, [r7, #3]
 800109a:	6879      	ldr	r1, [r7, #4]
 800109c:	4613      	mov	r3, r2
 800109e:	011b      	lsls	r3, r3, #4
 80010a0:	1a9b      	subs	r3, r3, r2
 80010a2:	009b      	lsls	r3, r3, #2
 80010a4:	440b      	add	r3, r1
 80010a6:	334c      	adds	r3, #76	@ 0x4c
 80010a8:	2201      	movs	r2, #1
 80010aa:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80010ac:	78fa      	ldrb	r2, [r7, #3]
 80010ae:	6879      	ldr	r1, [r7, #4]
 80010b0:	4613      	mov	r3, r2
 80010b2:	011b      	lsls	r3, r3, #4
 80010b4:	1a9b      	subs	r3, r3, r2
 80010b6:	009b      	lsls	r3, r3, #2
 80010b8:	440b      	add	r3, r1
 80010ba:	334c      	adds	r3, #76	@ 0x4c
 80010bc:	781a      	ldrb	r2, [r3, #0]
 80010be:	78fb      	ldrb	r3, [r7, #3]
 80010c0:	4619      	mov	r1, r3
 80010c2:	6878      	ldr	r0, [r7, #4]
 80010c4:	f001 fe91 	bl	8002dea <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	799b      	ldrb	r3, [r3, #6]
 80010cc:	2b01      	cmp	r3, #1
 80010ce:	d13b      	bne.n	8001148 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 80010d0:	78fa      	ldrb	r2, [r7, #3]
 80010d2:	6879      	ldr	r1, [r7, #4]
 80010d4:	4613      	mov	r3, r2
 80010d6:	011b      	lsls	r3, r3, #4
 80010d8:	1a9b      	subs	r3, r3, r2
 80010da:	009b      	lsls	r3, r3, #2
 80010dc:	440b      	add	r3, r1
 80010de:	3338      	adds	r3, #56	@ 0x38
 80010e0:	6819      	ldr	r1, [r3, #0]
 80010e2:	78fa      	ldrb	r2, [r7, #3]
 80010e4:	6878      	ldr	r0, [r7, #4]
 80010e6:	4613      	mov	r3, r2
 80010e8:	011b      	lsls	r3, r3, #4
 80010ea:	1a9b      	subs	r3, r3, r2
 80010ec:	009b      	lsls	r3, r3, #2
 80010ee:	4403      	add	r3, r0
 80010f0:	3328      	adds	r3, #40	@ 0x28
 80010f2:	881b      	ldrh	r3, [r3, #0]
 80010f4:	440b      	add	r3, r1
 80010f6:	1e59      	subs	r1, r3, #1
 80010f8:	78fa      	ldrb	r2, [r7, #3]
 80010fa:	6878      	ldr	r0, [r7, #4]
 80010fc:	4613      	mov	r3, r2
 80010fe:	011b      	lsls	r3, r3, #4
 8001100:	1a9b      	subs	r3, r3, r2
 8001102:	009b      	lsls	r3, r3, #2
 8001104:	4403      	add	r3, r0
 8001106:	3328      	adds	r3, #40	@ 0x28
 8001108:	881b      	ldrh	r3, [r3, #0]
 800110a:	fbb1 f3f3 	udiv	r3, r1, r3
 800110e:	f003 0301 	and.w	r3, r3, #1
 8001112:	2b00      	cmp	r3, #0
 8001114:	f000 8470 	beq.w	80019f8 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8001118:	78fa      	ldrb	r2, [r7, #3]
 800111a:	6879      	ldr	r1, [r7, #4]
 800111c:	4613      	mov	r3, r2
 800111e:	011b      	lsls	r3, r3, #4
 8001120:	1a9b      	subs	r3, r3, r2
 8001122:	009b      	lsls	r3, r3, #2
 8001124:	440b      	add	r3, r1
 8001126:	333c      	adds	r3, #60	@ 0x3c
 8001128:	781b      	ldrb	r3, [r3, #0]
 800112a:	78fa      	ldrb	r2, [r7, #3]
 800112c:	f083 0301 	eor.w	r3, r3, #1
 8001130:	b2d8      	uxtb	r0, r3
 8001132:	6879      	ldr	r1, [r7, #4]
 8001134:	4613      	mov	r3, r2
 8001136:	011b      	lsls	r3, r3, #4
 8001138:	1a9b      	subs	r3, r3, r2
 800113a:	009b      	lsls	r3, r3, #2
 800113c:	440b      	add	r3, r1
 800113e:	333c      	adds	r3, #60	@ 0x3c
 8001140:	4602      	mov	r2, r0
 8001142:	701a      	strb	r2, [r3, #0]
 8001144:	f000 bc58 	b.w	80019f8 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8001148:	78fa      	ldrb	r2, [r7, #3]
 800114a:	6879      	ldr	r1, [r7, #4]
 800114c:	4613      	mov	r3, r2
 800114e:	011b      	lsls	r3, r3, #4
 8001150:	1a9b      	subs	r3, r3, r2
 8001152:	009b      	lsls	r3, r3, #2
 8001154:	440b      	add	r3, r1
 8001156:	333c      	adds	r3, #60	@ 0x3c
 8001158:	781b      	ldrb	r3, [r3, #0]
 800115a:	78fa      	ldrb	r2, [r7, #3]
 800115c:	f083 0301 	eor.w	r3, r3, #1
 8001160:	b2d8      	uxtb	r0, r3
 8001162:	6879      	ldr	r1, [r7, #4]
 8001164:	4613      	mov	r3, r2
 8001166:	011b      	lsls	r3, r3, #4
 8001168:	1a9b      	subs	r3, r3, r2
 800116a:	009b      	lsls	r3, r3, #2
 800116c:	440b      	add	r3, r1
 800116e:	333c      	adds	r3, #60	@ 0x3c
 8001170:	4602      	mov	r2, r0
 8001172:	701a      	strb	r2, [r3, #0]
 8001174:	f000 bc40 	b.w	80019f8 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	78fa      	ldrb	r2, [r7, #3]
 800117e:	4611      	mov	r1, r2
 8001180:	4618      	mov	r0, r3
 8001182:	f001 fb3a 	bl	80027fa <USB_ReadChInterrupts>
 8001186:	4603      	mov	r3, r0
 8001188:	f003 0320 	and.w	r3, r3, #32
 800118c:	2b20      	cmp	r3, #32
 800118e:	d131      	bne.n	80011f4 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8001190:	78fb      	ldrb	r3, [r7, #3]
 8001192:	015a      	lsls	r2, r3, #5
 8001194:	693b      	ldr	r3, [r7, #16]
 8001196:	4413      	add	r3, r2
 8001198:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800119c:	461a      	mov	r2, r3
 800119e:	2320      	movs	r3, #32
 80011a0:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 80011a2:	78fa      	ldrb	r2, [r7, #3]
 80011a4:	6879      	ldr	r1, [r7, #4]
 80011a6:	4613      	mov	r3, r2
 80011a8:	011b      	lsls	r3, r3, #4
 80011aa:	1a9b      	subs	r3, r3, r2
 80011ac:	009b      	lsls	r3, r3, #2
 80011ae:	440b      	add	r3, r1
 80011b0:	331a      	adds	r3, #26
 80011b2:	781b      	ldrb	r3, [r3, #0]
 80011b4:	2b01      	cmp	r3, #1
 80011b6:	f040 841f 	bne.w	80019f8 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 80011ba:	78fa      	ldrb	r2, [r7, #3]
 80011bc:	6879      	ldr	r1, [r7, #4]
 80011be:	4613      	mov	r3, r2
 80011c0:	011b      	lsls	r3, r3, #4
 80011c2:	1a9b      	subs	r3, r3, r2
 80011c4:	009b      	lsls	r3, r3, #2
 80011c6:	440b      	add	r3, r1
 80011c8:	331b      	adds	r3, #27
 80011ca:	2201      	movs	r2, #1
 80011cc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80011ce:	78fa      	ldrb	r2, [r7, #3]
 80011d0:	6879      	ldr	r1, [r7, #4]
 80011d2:	4613      	mov	r3, r2
 80011d4:	011b      	lsls	r3, r3, #4
 80011d6:	1a9b      	subs	r3, r3, r2
 80011d8:	009b      	lsls	r3, r3, #2
 80011da:	440b      	add	r3, r1
 80011dc:	334d      	adds	r3, #77	@ 0x4d
 80011de:	2203      	movs	r2, #3
 80011e0:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	78fa      	ldrb	r2, [r7, #3]
 80011e8:	4611      	mov	r1, r2
 80011ea:	4618      	mov	r0, r3
 80011ec:	f001 fb82 	bl	80028f4 <USB_HC_Halt>
 80011f0:	f000 bc02 	b.w	80019f8 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	78fa      	ldrb	r2, [r7, #3]
 80011fa:	4611      	mov	r1, r2
 80011fc:	4618      	mov	r0, r3
 80011fe:	f001 fafc 	bl	80027fa <USB_ReadChInterrupts>
 8001202:	4603      	mov	r3, r0
 8001204:	f003 0302 	and.w	r3, r3, #2
 8001208:	2b02      	cmp	r3, #2
 800120a:	f040 8305 	bne.w	8001818 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 800120e:	78fb      	ldrb	r3, [r7, #3]
 8001210:	015a      	lsls	r2, r3, #5
 8001212:	693b      	ldr	r3, [r7, #16]
 8001214:	4413      	add	r3, r2
 8001216:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800121a:	461a      	mov	r2, r3
 800121c:	2302      	movs	r3, #2
 800121e:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8001220:	78fa      	ldrb	r2, [r7, #3]
 8001222:	6879      	ldr	r1, [r7, #4]
 8001224:	4613      	mov	r3, r2
 8001226:	011b      	lsls	r3, r3, #4
 8001228:	1a9b      	subs	r3, r3, r2
 800122a:	009b      	lsls	r3, r3, #2
 800122c:	440b      	add	r3, r1
 800122e:	334d      	adds	r3, #77	@ 0x4d
 8001230:	781b      	ldrb	r3, [r3, #0]
 8001232:	2b01      	cmp	r3, #1
 8001234:	d114      	bne.n	8001260 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8001236:	78fa      	ldrb	r2, [r7, #3]
 8001238:	6879      	ldr	r1, [r7, #4]
 800123a:	4613      	mov	r3, r2
 800123c:	011b      	lsls	r3, r3, #4
 800123e:	1a9b      	subs	r3, r3, r2
 8001240:	009b      	lsls	r3, r3, #2
 8001242:	440b      	add	r3, r1
 8001244:	334d      	adds	r3, #77	@ 0x4d
 8001246:	2202      	movs	r2, #2
 8001248:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800124a:	78fa      	ldrb	r2, [r7, #3]
 800124c:	6879      	ldr	r1, [r7, #4]
 800124e:	4613      	mov	r3, r2
 8001250:	011b      	lsls	r3, r3, #4
 8001252:	1a9b      	subs	r3, r3, r2
 8001254:	009b      	lsls	r3, r3, #2
 8001256:	440b      	add	r3, r1
 8001258:	334c      	adds	r3, #76	@ 0x4c
 800125a:	2201      	movs	r2, #1
 800125c:	701a      	strb	r2, [r3, #0]
 800125e:	e2cc      	b.n	80017fa <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8001260:	78fa      	ldrb	r2, [r7, #3]
 8001262:	6879      	ldr	r1, [r7, #4]
 8001264:	4613      	mov	r3, r2
 8001266:	011b      	lsls	r3, r3, #4
 8001268:	1a9b      	subs	r3, r3, r2
 800126a:	009b      	lsls	r3, r3, #2
 800126c:	440b      	add	r3, r1
 800126e:	334d      	adds	r3, #77	@ 0x4d
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	2b06      	cmp	r3, #6
 8001274:	d114      	bne.n	80012a0 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8001276:	78fa      	ldrb	r2, [r7, #3]
 8001278:	6879      	ldr	r1, [r7, #4]
 800127a:	4613      	mov	r3, r2
 800127c:	011b      	lsls	r3, r3, #4
 800127e:	1a9b      	subs	r3, r3, r2
 8001280:	009b      	lsls	r3, r3, #2
 8001282:	440b      	add	r3, r1
 8001284:	334d      	adds	r3, #77	@ 0x4d
 8001286:	2202      	movs	r2, #2
 8001288:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 800128a:	78fa      	ldrb	r2, [r7, #3]
 800128c:	6879      	ldr	r1, [r7, #4]
 800128e:	4613      	mov	r3, r2
 8001290:	011b      	lsls	r3, r3, #4
 8001292:	1a9b      	subs	r3, r3, r2
 8001294:	009b      	lsls	r3, r3, #2
 8001296:	440b      	add	r3, r1
 8001298:	334c      	adds	r3, #76	@ 0x4c
 800129a:	2205      	movs	r2, #5
 800129c:	701a      	strb	r2, [r3, #0]
 800129e:	e2ac      	b.n	80017fa <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80012a0:	78fa      	ldrb	r2, [r7, #3]
 80012a2:	6879      	ldr	r1, [r7, #4]
 80012a4:	4613      	mov	r3, r2
 80012a6:	011b      	lsls	r3, r3, #4
 80012a8:	1a9b      	subs	r3, r3, r2
 80012aa:	009b      	lsls	r3, r3, #2
 80012ac:	440b      	add	r3, r1
 80012ae:	334d      	adds	r3, #77	@ 0x4d
 80012b0:	781b      	ldrb	r3, [r3, #0]
 80012b2:	2b07      	cmp	r3, #7
 80012b4:	d00b      	beq.n	80012ce <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80012b6:	78fa      	ldrb	r2, [r7, #3]
 80012b8:	6879      	ldr	r1, [r7, #4]
 80012ba:	4613      	mov	r3, r2
 80012bc:	011b      	lsls	r3, r3, #4
 80012be:	1a9b      	subs	r3, r3, r2
 80012c0:	009b      	lsls	r3, r3, #2
 80012c2:	440b      	add	r3, r1
 80012c4:	334d      	adds	r3, #77	@ 0x4d
 80012c6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80012c8:	2b09      	cmp	r3, #9
 80012ca:	f040 80a6 	bne.w	800141a <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80012ce:	78fa      	ldrb	r2, [r7, #3]
 80012d0:	6879      	ldr	r1, [r7, #4]
 80012d2:	4613      	mov	r3, r2
 80012d4:	011b      	lsls	r3, r3, #4
 80012d6:	1a9b      	subs	r3, r3, r2
 80012d8:	009b      	lsls	r3, r3, #2
 80012da:	440b      	add	r3, r1
 80012dc:	334d      	adds	r3, #77	@ 0x4d
 80012de:	2202      	movs	r2, #2
 80012e0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80012e2:	78fa      	ldrb	r2, [r7, #3]
 80012e4:	6879      	ldr	r1, [r7, #4]
 80012e6:	4613      	mov	r3, r2
 80012e8:	011b      	lsls	r3, r3, #4
 80012ea:	1a9b      	subs	r3, r3, r2
 80012ec:	009b      	lsls	r3, r3, #2
 80012ee:	440b      	add	r3, r1
 80012f0:	3344      	adds	r3, #68	@ 0x44
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	1c59      	adds	r1, r3, #1
 80012f6:	6878      	ldr	r0, [r7, #4]
 80012f8:	4613      	mov	r3, r2
 80012fa:	011b      	lsls	r3, r3, #4
 80012fc:	1a9b      	subs	r3, r3, r2
 80012fe:	009b      	lsls	r3, r3, #2
 8001300:	4403      	add	r3, r0
 8001302:	3344      	adds	r3, #68	@ 0x44
 8001304:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8001306:	78fa      	ldrb	r2, [r7, #3]
 8001308:	6879      	ldr	r1, [r7, #4]
 800130a:	4613      	mov	r3, r2
 800130c:	011b      	lsls	r3, r3, #4
 800130e:	1a9b      	subs	r3, r3, r2
 8001310:	009b      	lsls	r3, r3, #2
 8001312:	440b      	add	r3, r1
 8001314:	3344      	adds	r3, #68	@ 0x44
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	2b02      	cmp	r3, #2
 800131a:	d943      	bls.n	80013a4 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800131c:	78fa      	ldrb	r2, [r7, #3]
 800131e:	6879      	ldr	r1, [r7, #4]
 8001320:	4613      	mov	r3, r2
 8001322:	011b      	lsls	r3, r3, #4
 8001324:	1a9b      	subs	r3, r3, r2
 8001326:	009b      	lsls	r3, r3, #2
 8001328:	440b      	add	r3, r1
 800132a:	3344      	adds	r3, #68	@ 0x44
 800132c:	2200      	movs	r2, #0
 800132e:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8001330:	78fa      	ldrb	r2, [r7, #3]
 8001332:	6879      	ldr	r1, [r7, #4]
 8001334:	4613      	mov	r3, r2
 8001336:	011b      	lsls	r3, r3, #4
 8001338:	1a9b      	subs	r3, r3, r2
 800133a:	009b      	lsls	r3, r3, #2
 800133c:	440b      	add	r3, r1
 800133e:	331a      	adds	r3, #26
 8001340:	781b      	ldrb	r3, [r3, #0]
 8001342:	2b01      	cmp	r3, #1
 8001344:	d123      	bne.n	800138e <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8001346:	78fa      	ldrb	r2, [r7, #3]
 8001348:	6879      	ldr	r1, [r7, #4]
 800134a:	4613      	mov	r3, r2
 800134c:	011b      	lsls	r3, r3, #4
 800134e:	1a9b      	subs	r3, r3, r2
 8001350:	009b      	lsls	r3, r3, #2
 8001352:	440b      	add	r3, r1
 8001354:	331b      	adds	r3, #27
 8001356:	2200      	movs	r2, #0
 8001358:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 800135a:	78fa      	ldrb	r2, [r7, #3]
 800135c:	6879      	ldr	r1, [r7, #4]
 800135e:	4613      	mov	r3, r2
 8001360:	011b      	lsls	r3, r3, #4
 8001362:	1a9b      	subs	r3, r3, r2
 8001364:	009b      	lsls	r3, r3, #2
 8001366:	440b      	add	r3, r1
 8001368:	331c      	adds	r3, #28
 800136a:	2200      	movs	r2, #0
 800136c:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800136e:	78fb      	ldrb	r3, [r7, #3]
 8001370:	015a      	lsls	r2, r3, #5
 8001372:	693b      	ldr	r3, [r7, #16]
 8001374:	4413      	add	r3, r2
 8001376:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	78fa      	ldrb	r2, [r7, #3]
 800137e:	0151      	lsls	r1, r2, #5
 8001380:	693a      	ldr	r2, [r7, #16]
 8001382:	440a      	add	r2, r1
 8001384:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8001388:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800138c:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 800138e:	78fa      	ldrb	r2, [r7, #3]
 8001390:	6879      	ldr	r1, [r7, #4]
 8001392:	4613      	mov	r3, r2
 8001394:	011b      	lsls	r3, r3, #4
 8001396:	1a9b      	subs	r3, r3, r2
 8001398:	009b      	lsls	r3, r3, #2
 800139a:	440b      	add	r3, r1
 800139c:	334c      	adds	r3, #76	@ 0x4c
 800139e:	2204      	movs	r2, #4
 80013a0:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80013a2:	e229      	b.n	80017f8 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80013a4:	78fa      	ldrb	r2, [r7, #3]
 80013a6:	6879      	ldr	r1, [r7, #4]
 80013a8:	4613      	mov	r3, r2
 80013aa:	011b      	lsls	r3, r3, #4
 80013ac:	1a9b      	subs	r3, r3, r2
 80013ae:	009b      	lsls	r3, r3, #2
 80013b0:	440b      	add	r3, r1
 80013b2:	334c      	adds	r3, #76	@ 0x4c
 80013b4:	2202      	movs	r2, #2
 80013b6:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80013b8:	78fa      	ldrb	r2, [r7, #3]
 80013ba:	6879      	ldr	r1, [r7, #4]
 80013bc:	4613      	mov	r3, r2
 80013be:	011b      	lsls	r3, r3, #4
 80013c0:	1a9b      	subs	r3, r3, r2
 80013c2:	009b      	lsls	r3, r3, #2
 80013c4:	440b      	add	r3, r1
 80013c6:	3326      	adds	r3, #38	@ 0x26
 80013c8:	781b      	ldrb	r3, [r3, #0]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d00b      	beq.n	80013e6 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80013ce:	78fa      	ldrb	r2, [r7, #3]
 80013d0:	6879      	ldr	r1, [r7, #4]
 80013d2:	4613      	mov	r3, r2
 80013d4:	011b      	lsls	r3, r3, #4
 80013d6:	1a9b      	subs	r3, r3, r2
 80013d8:	009b      	lsls	r3, r3, #2
 80013da:	440b      	add	r3, r1
 80013dc:	3326      	adds	r3, #38	@ 0x26
 80013de:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80013e0:	2b02      	cmp	r3, #2
 80013e2:	f040 8209 	bne.w	80017f8 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80013e6:	78fb      	ldrb	r3, [r7, #3]
 80013e8:	015a      	lsls	r2, r3, #5
 80013ea:	693b      	ldr	r3, [r7, #16]
 80013ec:	4413      	add	r3, r2
 80013ee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80013fc:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001404:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8001406:	78fb      	ldrb	r3, [r7, #3]
 8001408:	015a      	lsls	r2, r3, #5
 800140a:	693b      	ldr	r3, [r7, #16]
 800140c:	4413      	add	r3, r2
 800140e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001412:	461a      	mov	r2, r3
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8001418:	e1ee      	b.n	80017f8 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 800141a:	78fa      	ldrb	r2, [r7, #3]
 800141c:	6879      	ldr	r1, [r7, #4]
 800141e:	4613      	mov	r3, r2
 8001420:	011b      	lsls	r3, r3, #4
 8001422:	1a9b      	subs	r3, r3, r2
 8001424:	009b      	lsls	r3, r3, #2
 8001426:	440b      	add	r3, r1
 8001428:	334d      	adds	r3, #77	@ 0x4d
 800142a:	781b      	ldrb	r3, [r3, #0]
 800142c:	2b05      	cmp	r3, #5
 800142e:	f040 80c8 	bne.w	80015c2 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8001432:	78fa      	ldrb	r2, [r7, #3]
 8001434:	6879      	ldr	r1, [r7, #4]
 8001436:	4613      	mov	r3, r2
 8001438:	011b      	lsls	r3, r3, #4
 800143a:	1a9b      	subs	r3, r3, r2
 800143c:	009b      	lsls	r3, r3, #2
 800143e:	440b      	add	r3, r1
 8001440:	334d      	adds	r3, #77	@ 0x4d
 8001442:	2202      	movs	r2, #2
 8001444:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8001446:	78fa      	ldrb	r2, [r7, #3]
 8001448:	6879      	ldr	r1, [r7, #4]
 800144a:	4613      	mov	r3, r2
 800144c:	011b      	lsls	r3, r3, #4
 800144e:	1a9b      	subs	r3, r3, r2
 8001450:	009b      	lsls	r3, r3, #2
 8001452:	440b      	add	r3, r1
 8001454:	331b      	adds	r3, #27
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	2b01      	cmp	r3, #1
 800145a:	f040 81ce 	bne.w	80017fa <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 800145e:	78fa      	ldrb	r2, [r7, #3]
 8001460:	6879      	ldr	r1, [r7, #4]
 8001462:	4613      	mov	r3, r2
 8001464:	011b      	lsls	r3, r3, #4
 8001466:	1a9b      	subs	r3, r3, r2
 8001468:	009b      	lsls	r3, r3, #2
 800146a:	440b      	add	r3, r1
 800146c:	3326      	adds	r3, #38	@ 0x26
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	2b03      	cmp	r3, #3
 8001472:	d16b      	bne.n	800154c <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8001474:	78fa      	ldrb	r2, [r7, #3]
 8001476:	6879      	ldr	r1, [r7, #4]
 8001478:	4613      	mov	r3, r2
 800147a:	011b      	lsls	r3, r3, #4
 800147c:	1a9b      	subs	r3, r3, r2
 800147e:	009b      	lsls	r3, r3, #2
 8001480:	440b      	add	r3, r1
 8001482:	3348      	adds	r3, #72	@ 0x48
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	1c59      	adds	r1, r3, #1
 8001488:	6878      	ldr	r0, [r7, #4]
 800148a:	4613      	mov	r3, r2
 800148c:	011b      	lsls	r3, r3, #4
 800148e:	1a9b      	subs	r3, r3, r2
 8001490:	009b      	lsls	r3, r3, #2
 8001492:	4403      	add	r3, r0
 8001494:	3348      	adds	r3, #72	@ 0x48
 8001496:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8001498:	78fa      	ldrb	r2, [r7, #3]
 800149a:	6879      	ldr	r1, [r7, #4]
 800149c:	4613      	mov	r3, r2
 800149e:	011b      	lsls	r3, r3, #4
 80014a0:	1a9b      	subs	r3, r3, r2
 80014a2:	009b      	lsls	r3, r3, #2
 80014a4:	440b      	add	r3, r1
 80014a6:	3348      	adds	r3, #72	@ 0x48
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	2b02      	cmp	r3, #2
 80014ac:	d943      	bls.n	8001536 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 80014ae:	78fa      	ldrb	r2, [r7, #3]
 80014b0:	6879      	ldr	r1, [r7, #4]
 80014b2:	4613      	mov	r3, r2
 80014b4:	011b      	lsls	r3, r3, #4
 80014b6:	1a9b      	subs	r3, r3, r2
 80014b8:	009b      	lsls	r3, r3, #2
 80014ba:	440b      	add	r3, r1
 80014bc:	3348      	adds	r3, #72	@ 0x48
 80014be:	2200      	movs	r2, #0
 80014c0:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 80014c2:	78fa      	ldrb	r2, [r7, #3]
 80014c4:	6879      	ldr	r1, [r7, #4]
 80014c6:	4613      	mov	r3, r2
 80014c8:	011b      	lsls	r3, r3, #4
 80014ca:	1a9b      	subs	r3, r3, r2
 80014cc:	009b      	lsls	r3, r3, #2
 80014ce:	440b      	add	r3, r1
 80014d0:	331b      	adds	r3, #27
 80014d2:	2200      	movs	r2, #0
 80014d4:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 80014d6:	78fa      	ldrb	r2, [r7, #3]
 80014d8:	6879      	ldr	r1, [r7, #4]
 80014da:	4613      	mov	r3, r2
 80014dc:	011b      	lsls	r3, r3, #4
 80014de:	1a9b      	subs	r3, r3, r2
 80014e0:	009b      	lsls	r3, r3, #2
 80014e2:	440b      	add	r3, r1
 80014e4:	3344      	adds	r3, #68	@ 0x44
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	2b02      	cmp	r3, #2
 80014ea:	d809      	bhi.n	8001500 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 80014ec:	78fa      	ldrb	r2, [r7, #3]
 80014ee:	6879      	ldr	r1, [r7, #4]
 80014f0:	4613      	mov	r3, r2
 80014f2:	011b      	lsls	r3, r3, #4
 80014f4:	1a9b      	subs	r3, r3, r2
 80014f6:	009b      	lsls	r3, r3, #2
 80014f8:	440b      	add	r3, r1
 80014fa:	331c      	adds	r3, #28
 80014fc:	2201      	movs	r2, #1
 80014fe:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8001500:	78fb      	ldrb	r3, [r7, #3]
 8001502:	015a      	lsls	r2, r3, #5
 8001504:	693b      	ldr	r3, [r7, #16]
 8001506:	4413      	add	r3, r2
 8001508:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	78fa      	ldrb	r2, [r7, #3]
 8001510:	0151      	lsls	r1, r2, #5
 8001512:	693a      	ldr	r2, [r7, #16]
 8001514:	440a      	add	r2, r1
 8001516:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800151a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800151e:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8001520:	78fa      	ldrb	r2, [r7, #3]
 8001522:	6879      	ldr	r1, [r7, #4]
 8001524:	4613      	mov	r3, r2
 8001526:	011b      	lsls	r3, r3, #4
 8001528:	1a9b      	subs	r3, r3, r2
 800152a:	009b      	lsls	r3, r3, #2
 800152c:	440b      	add	r3, r1
 800152e:	334c      	adds	r3, #76	@ 0x4c
 8001530:	2204      	movs	r2, #4
 8001532:	701a      	strb	r2, [r3, #0]
 8001534:	e014      	b.n	8001560 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8001536:	78fa      	ldrb	r2, [r7, #3]
 8001538:	6879      	ldr	r1, [r7, #4]
 800153a:	4613      	mov	r3, r2
 800153c:	011b      	lsls	r3, r3, #4
 800153e:	1a9b      	subs	r3, r3, r2
 8001540:	009b      	lsls	r3, r3, #2
 8001542:	440b      	add	r3, r1
 8001544:	334c      	adds	r3, #76	@ 0x4c
 8001546:	2202      	movs	r2, #2
 8001548:	701a      	strb	r2, [r3, #0]
 800154a:	e009      	b.n	8001560 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800154c:	78fa      	ldrb	r2, [r7, #3]
 800154e:	6879      	ldr	r1, [r7, #4]
 8001550:	4613      	mov	r3, r2
 8001552:	011b      	lsls	r3, r3, #4
 8001554:	1a9b      	subs	r3, r3, r2
 8001556:	009b      	lsls	r3, r3, #2
 8001558:	440b      	add	r3, r1
 800155a:	334c      	adds	r3, #76	@ 0x4c
 800155c:	2202      	movs	r2, #2
 800155e:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001560:	78fa      	ldrb	r2, [r7, #3]
 8001562:	6879      	ldr	r1, [r7, #4]
 8001564:	4613      	mov	r3, r2
 8001566:	011b      	lsls	r3, r3, #4
 8001568:	1a9b      	subs	r3, r3, r2
 800156a:	009b      	lsls	r3, r3, #2
 800156c:	440b      	add	r3, r1
 800156e:	3326      	adds	r3, #38	@ 0x26
 8001570:	781b      	ldrb	r3, [r3, #0]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d00b      	beq.n	800158e <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8001576:	78fa      	ldrb	r2, [r7, #3]
 8001578:	6879      	ldr	r1, [r7, #4]
 800157a:	4613      	mov	r3, r2
 800157c:	011b      	lsls	r3, r3, #4
 800157e:	1a9b      	subs	r3, r3, r2
 8001580:	009b      	lsls	r3, r3, #2
 8001582:	440b      	add	r3, r1
 8001584:	3326      	adds	r3, #38	@ 0x26
 8001586:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001588:	2b02      	cmp	r3, #2
 800158a:	f040 8136 	bne.w	80017fa <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 800158e:	78fb      	ldrb	r3, [r7, #3]
 8001590:	015a      	lsls	r2, r3, #5
 8001592:	693b      	ldr	r3, [r7, #16]
 8001594:	4413      	add	r3, r2
 8001596:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80015a4:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80015ac:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80015ae:	78fb      	ldrb	r3, [r7, #3]
 80015b0:	015a      	lsls	r2, r3, #5
 80015b2:	693b      	ldr	r3, [r7, #16]
 80015b4:	4413      	add	r3, r2
 80015b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80015ba:	461a      	mov	r2, r3
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	6013      	str	r3, [r2, #0]
 80015c0:	e11b      	b.n	80017fa <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80015c2:	78fa      	ldrb	r2, [r7, #3]
 80015c4:	6879      	ldr	r1, [r7, #4]
 80015c6:	4613      	mov	r3, r2
 80015c8:	011b      	lsls	r3, r3, #4
 80015ca:	1a9b      	subs	r3, r3, r2
 80015cc:	009b      	lsls	r3, r3, #2
 80015ce:	440b      	add	r3, r1
 80015d0:	334d      	adds	r3, #77	@ 0x4d
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	2b03      	cmp	r3, #3
 80015d6:	f040 8081 	bne.w	80016dc <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80015da:	78fa      	ldrb	r2, [r7, #3]
 80015dc:	6879      	ldr	r1, [r7, #4]
 80015de:	4613      	mov	r3, r2
 80015e0:	011b      	lsls	r3, r3, #4
 80015e2:	1a9b      	subs	r3, r3, r2
 80015e4:	009b      	lsls	r3, r3, #2
 80015e6:	440b      	add	r3, r1
 80015e8:	334d      	adds	r3, #77	@ 0x4d
 80015ea:	2202      	movs	r2, #2
 80015ec:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80015ee:	78fa      	ldrb	r2, [r7, #3]
 80015f0:	6879      	ldr	r1, [r7, #4]
 80015f2:	4613      	mov	r3, r2
 80015f4:	011b      	lsls	r3, r3, #4
 80015f6:	1a9b      	subs	r3, r3, r2
 80015f8:	009b      	lsls	r3, r3, #2
 80015fa:	440b      	add	r3, r1
 80015fc:	331b      	adds	r3, #27
 80015fe:	781b      	ldrb	r3, [r3, #0]
 8001600:	2b01      	cmp	r3, #1
 8001602:	f040 80fa 	bne.w	80017fa <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8001606:	78fa      	ldrb	r2, [r7, #3]
 8001608:	6879      	ldr	r1, [r7, #4]
 800160a:	4613      	mov	r3, r2
 800160c:	011b      	lsls	r3, r3, #4
 800160e:	1a9b      	subs	r3, r3, r2
 8001610:	009b      	lsls	r3, r3, #2
 8001612:	440b      	add	r3, r1
 8001614:	334c      	adds	r3, #76	@ 0x4c
 8001616:	2202      	movs	r2, #2
 8001618:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800161a:	78fb      	ldrb	r3, [r7, #3]
 800161c:	015a      	lsls	r2, r3, #5
 800161e:	693b      	ldr	r3, [r7, #16]
 8001620:	4413      	add	r3, r2
 8001622:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	78fa      	ldrb	r2, [r7, #3]
 800162a:	0151      	lsls	r1, r2, #5
 800162c:	693a      	ldr	r2, [r7, #16]
 800162e:	440a      	add	r2, r1
 8001630:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8001634:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001638:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 800163a:	78fb      	ldrb	r3, [r7, #3]
 800163c:	015a      	lsls	r2, r3, #5
 800163e:	693b      	ldr	r3, [r7, #16]
 8001640:	4413      	add	r3, r2
 8001642:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001646:	68db      	ldr	r3, [r3, #12]
 8001648:	78fa      	ldrb	r2, [r7, #3]
 800164a:	0151      	lsls	r1, r2, #5
 800164c:	693a      	ldr	r2, [r7, #16]
 800164e:	440a      	add	r2, r1
 8001650:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8001654:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001658:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 800165a:	78fb      	ldrb	r3, [r7, #3]
 800165c:	015a      	lsls	r2, r3, #5
 800165e:	693b      	ldr	r3, [r7, #16]
 8001660:	4413      	add	r3, r2
 8001662:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001666:	68db      	ldr	r3, [r3, #12]
 8001668:	78fa      	ldrb	r2, [r7, #3]
 800166a:	0151      	lsls	r1, r2, #5
 800166c:	693a      	ldr	r2, [r7, #16]
 800166e:	440a      	add	r2, r1
 8001670:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8001674:	f023 0320 	bic.w	r3, r3, #32
 8001678:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800167a:	78fa      	ldrb	r2, [r7, #3]
 800167c:	6879      	ldr	r1, [r7, #4]
 800167e:	4613      	mov	r3, r2
 8001680:	011b      	lsls	r3, r3, #4
 8001682:	1a9b      	subs	r3, r3, r2
 8001684:	009b      	lsls	r3, r3, #2
 8001686:	440b      	add	r3, r1
 8001688:	3326      	adds	r3, #38	@ 0x26
 800168a:	781b      	ldrb	r3, [r3, #0]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d00b      	beq.n	80016a8 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8001690:	78fa      	ldrb	r2, [r7, #3]
 8001692:	6879      	ldr	r1, [r7, #4]
 8001694:	4613      	mov	r3, r2
 8001696:	011b      	lsls	r3, r3, #4
 8001698:	1a9b      	subs	r3, r3, r2
 800169a:	009b      	lsls	r3, r3, #2
 800169c:	440b      	add	r3, r1
 800169e:	3326      	adds	r3, #38	@ 0x26
 80016a0:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80016a2:	2b02      	cmp	r3, #2
 80016a4:	f040 80a9 	bne.w	80017fa <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80016a8:	78fb      	ldrb	r3, [r7, #3]
 80016aa:	015a      	lsls	r2, r3, #5
 80016ac:	693b      	ldr	r3, [r7, #16]
 80016ae:	4413      	add	r3, r2
 80016b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80016be:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80016c6:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80016c8:	78fb      	ldrb	r3, [r7, #3]
 80016ca:	015a      	lsls	r2, r3, #5
 80016cc:	693b      	ldr	r3, [r7, #16]
 80016ce:	4413      	add	r3, r2
 80016d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80016d4:	461a      	mov	r2, r3
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	6013      	str	r3, [r2, #0]
 80016da:	e08e      	b.n	80017fa <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80016dc:	78fa      	ldrb	r2, [r7, #3]
 80016de:	6879      	ldr	r1, [r7, #4]
 80016e0:	4613      	mov	r3, r2
 80016e2:	011b      	lsls	r3, r3, #4
 80016e4:	1a9b      	subs	r3, r3, r2
 80016e6:	009b      	lsls	r3, r3, #2
 80016e8:	440b      	add	r3, r1
 80016ea:	334d      	adds	r3, #77	@ 0x4d
 80016ec:	781b      	ldrb	r3, [r3, #0]
 80016ee:	2b04      	cmp	r3, #4
 80016f0:	d143      	bne.n	800177a <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80016f2:	78fa      	ldrb	r2, [r7, #3]
 80016f4:	6879      	ldr	r1, [r7, #4]
 80016f6:	4613      	mov	r3, r2
 80016f8:	011b      	lsls	r3, r3, #4
 80016fa:	1a9b      	subs	r3, r3, r2
 80016fc:	009b      	lsls	r3, r3, #2
 80016fe:	440b      	add	r3, r1
 8001700:	334d      	adds	r3, #77	@ 0x4d
 8001702:	2202      	movs	r2, #2
 8001704:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8001706:	78fa      	ldrb	r2, [r7, #3]
 8001708:	6879      	ldr	r1, [r7, #4]
 800170a:	4613      	mov	r3, r2
 800170c:	011b      	lsls	r3, r3, #4
 800170e:	1a9b      	subs	r3, r3, r2
 8001710:	009b      	lsls	r3, r3, #2
 8001712:	440b      	add	r3, r1
 8001714:	334c      	adds	r3, #76	@ 0x4c
 8001716:	2202      	movs	r2, #2
 8001718:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800171a:	78fa      	ldrb	r2, [r7, #3]
 800171c:	6879      	ldr	r1, [r7, #4]
 800171e:	4613      	mov	r3, r2
 8001720:	011b      	lsls	r3, r3, #4
 8001722:	1a9b      	subs	r3, r3, r2
 8001724:	009b      	lsls	r3, r3, #2
 8001726:	440b      	add	r3, r1
 8001728:	3326      	adds	r3, #38	@ 0x26
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d00a      	beq.n	8001746 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8001730:	78fa      	ldrb	r2, [r7, #3]
 8001732:	6879      	ldr	r1, [r7, #4]
 8001734:	4613      	mov	r3, r2
 8001736:	011b      	lsls	r3, r3, #4
 8001738:	1a9b      	subs	r3, r3, r2
 800173a:	009b      	lsls	r3, r3, #2
 800173c:	440b      	add	r3, r1
 800173e:	3326      	adds	r3, #38	@ 0x26
 8001740:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001742:	2b02      	cmp	r3, #2
 8001744:	d159      	bne.n	80017fa <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8001746:	78fb      	ldrb	r3, [r7, #3]
 8001748:	015a      	lsls	r2, r3, #5
 800174a:	693b      	ldr	r3, [r7, #16]
 800174c:	4413      	add	r3, r2
 800174e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800175c:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001764:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8001766:	78fb      	ldrb	r3, [r7, #3]
 8001768:	015a      	lsls	r2, r3, #5
 800176a:	693b      	ldr	r3, [r7, #16]
 800176c:	4413      	add	r3, r2
 800176e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001772:	461a      	mov	r2, r3
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	6013      	str	r3, [r2, #0]
 8001778:	e03f      	b.n	80017fa <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 800177a:	78fa      	ldrb	r2, [r7, #3]
 800177c:	6879      	ldr	r1, [r7, #4]
 800177e:	4613      	mov	r3, r2
 8001780:	011b      	lsls	r3, r3, #4
 8001782:	1a9b      	subs	r3, r3, r2
 8001784:	009b      	lsls	r3, r3, #2
 8001786:	440b      	add	r3, r1
 8001788:	334d      	adds	r3, #77	@ 0x4d
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	2b08      	cmp	r3, #8
 800178e:	d126      	bne.n	80017de <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8001790:	78fa      	ldrb	r2, [r7, #3]
 8001792:	6879      	ldr	r1, [r7, #4]
 8001794:	4613      	mov	r3, r2
 8001796:	011b      	lsls	r3, r3, #4
 8001798:	1a9b      	subs	r3, r3, r2
 800179a:	009b      	lsls	r3, r3, #2
 800179c:	440b      	add	r3, r1
 800179e:	334d      	adds	r3, #77	@ 0x4d
 80017a0:	2202      	movs	r2, #2
 80017a2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80017a4:	78fa      	ldrb	r2, [r7, #3]
 80017a6:	6879      	ldr	r1, [r7, #4]
 80017a8:	4613      	mov	r3, r2
 80017aa:	011b      	lsls	r3, r3, #4
 80017ac:	1a9b      	subs	r3, r3, r2
 80017ae:	009b      	lsls	r3, r3, #2
 80017b0:	440b      	add	r3, r1
 80017b2:	3344      	adds	r3, #68	@ 0x44
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	1c59      	adds	r1, r3, #1
 80017b8:	6878      	ldr	r0, [r7, #4]
 80017ba:	4613      	mov	r3, r2
 80017bc:	011b      	lsls	r3, r3, #4
 80017be:	1a9b      	subs	r3, r3, r2
 80017c0:	009b      	lsls	r3, r3, #2
 80017c2:	4403      	add	r3, r0
 80017c4:	3344      	adds	r3, #68	@ 0x44
 80017c6:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 80017c8:	78fa      	ldrb	r2, [r7, #3]
 80017ca:	6879      	ldr	r1, [r7, #4]
 80017cc:	4613      	mov	r3, r2
 80017ce:	011b      	lsls	r3, r3, #4
 80017d0:	1a9b      	subs	r3, r3, r2
 80017d2:	009b      	lsls	r3, r3, #2
 80017d4:	440b      	add	r3, r1
 80017d6:	334c      	adds	r3, #76	@ 0x4c
 80017d8:	2204      	movs	r2, #4
 80017da:	701a      	strb	r2, [r3, #0]
 80017dc:	e00d      	b.n	80017fa <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 80017de:	78fa      	ldrb	r2, [r7, #3]
 80017e0:	6879      	ldr	r1, [r7, #4]
 80017e2:	4613      	mov	r3, r2
 80017e4:	011b      	lsls	r3, r3, #4
 80017e6:	1a9b      	subs	r3, r3, r2
 80017e8:	009b      	lsls	r3, r3, #2
 80017ea:	440b      	add	r3, r1
 80017ec:	334d      	adds	r3, #77	@ 0x4d
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	2b02      	cmp	r3, #2
 80017f2:	f000 8100 	beq.w	80019f6 <HCD_HC_IN_IRQHandler+0xcca>
 80017f6:	e000      	b.n	80017fa <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80017f8:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80017fa:	78fa      	ldrb	r2, [r7, #3]
 80017fc:	6879      	ldr	r1, [r7, #4]
 80017fe:	4613      	mov	r3, r2
 8001800:	011b      	lsls	r3, r3, #4
 8001802:	1a9b      	subs	r3, r3, r2
 8001804:	009b      	lsls	r3, r3, #2
 8001806:	440b      	add	r3, r1
 8001808:	334c      	adds	r3, #76	@ 0x4c
 800180a:	781a      	ldrb	r2, [r3, #0]
 800180c:	78fb      	ldrb	r3, [r7, #3]
 800180e:	4619      	mov	r1, r3
 8001810:	6878      	ldr	r0, [r7, #4]
 8001812:	f001 faea 	bl	8002dea <HAL_HCD_HC_NotifyURBChange_Callback>
 8001816:	e0ef      	b.n	80019f8 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	78fa      	ldrb	r2, [r7, #3]
 800181e:	4611      	mov	r1, r2
 8001820:	4618      	mov	r0, r3
 8001822:	f000 ffea 	bl	80027fa <USB_ReadChInterrupts>
 8001826:	4603      	mov	r3, r0
 8001828:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800182c:	2b40      	cmp	r3, #64	@ 0x40
 800182e:	d12f      	bne.n	8001890 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8001830:	78fb      	ldrb	r3, [r7, #3]
 8001832:	015a      	lsls	r2, r3, #5
 8001834:	693b      	ldr	r3, [r7, #16]
 8001836:	4413      	add	r3, r2
 8001838:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800183c:	461a      	mov	r2, r3
 800183e:	2340      	movs	r3, #64	@ 0x40
 8001840:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8001842:	78fa      	ldrb	r2, [r7, #3]
 8001844:	6879      	ldr	r1, [r7, #4]
 8001846:	4613      	mov	r3, r2
 8001848:	011b      	lsls	r3, r3, #4
 800184a:	1a9b      	subs	r3, r3, r2
 800184c:	009b      	lsls	r3, r3, #2
 800184e:	440b      	add	r3, r1
 8001850:	334d      	adds	r3, #77	@ 0x4d
 8001852:	2205      	movs	r2, #5
 8001854:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8001856:	78fa      	ldrb	r2, [r7, #3]
 8001858:	6879      	ldr	r1, [r7, #4]
 800185a:	4613      	mov	r3, r2
 800185c:	011b      	lsls	r3, r3, #4
 800185e:	1a9b      	subs	r3, r3, r2
 8001860:	009b      	lsls	r3, r3, #2
 8001862:	440b      	add	r3, r1
 8001864:	331a      	adds	r3, #26
 8001866:	781b      	ldrb	r3, [r3, #0]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d109      	bne.n	8001880 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800186c:	78fa      	ldrb	r2, [r7, #3]
 800186e:	6879      	ldr	r1, [r7, #4]
 8001870:	4613      	mov	r3, r2
 8001872:	011b      	lsls	r3, r3, #4
 8001874:	1a9b      	subs	r3, r3, r2
 8001876:	009b      	lsls	r3, r3, #2
 8001878:	440b      	add	r3, r1
 800187a:	3344      	adds	r3, #68	@ 0x44
 800187c:	2200      	movs	r2, #0
 800187e:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	78fa      	ldrb	r2, [r7, #3]
 8001886:	4611      	mov	r1, r2
 8001888:	4618      	mov	r0, r3
 800188a:	f001 f833 	bl	80028f4 <USB_HC_Halt>
 800188e:	e0b3      	b.n	80019f8 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	78fa      	ldrb	r2, [r7, #3]
 8001896:	4611      	mov	r1, r2
 8001898:	4618      	mov	r0, r3
 800189a:	f000 ffae 	bl	80027fa <USB_ReadChInterrupts>
 800189e:	4603      	mov	r3, r0
 80018a0:	f003 0310 	and.w	r3, r3, #16
 80018a4:	2b10      	cmp	r3, #16
 80018a6:	f040 80a7 	bne.w	80019f8 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80018aa:	78fa      	ldrb	r2, [r7, #3]
 80018ac:	6879      	ldr	r1, [r7, #4]
 80018ae:	4613      	mov	r3, r2
 80018b0:	011b      	lsls	r3, r3, #4
 80018b2:	1a9b      	subs	r3, r3, r2
 80018b4:	009b      	lsls	r3, r3, #2
 80018b6:	440b      	add	r3, r1
 80018b8:	3326      	adds	r3, #38	@ 0x26
 80018ba:	781b      	ldrb	r3, [r3, #0]
 80018bc:	2b03      	cmp	r3, #3
 80018be:	d11b      	bne.n	80018f8 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80018c0:	78fa      	ldrb	r2, [r7, #3]
 80018c2:	6879      	ldr	r1, [r7, #4]
 80018c4:	4613      	mov	r3, r2
 80018c6:	011b      	lsls	r3, r3, #4
 80018c8:	1a9b      	subs	r3, r3, r2
 80018ca:	009b      	lsls	r3, r3, #2
 80018cc:	440b      	add	r3, r1
 80018ce:	3344      	adds	r3, #68	@ 0x44
 80018d0:	2200      	movs	r2, #0
 80018d2:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 80018d4:	78fa      	ldrb	r2, [r7, #3]
 80018d6:	6879      	ldr	r1, [r7, #4]
 80018d8:	4613      	mov	r3, r2
 80018da:	011b      	lsls	r3, r3, #4
 80018dc:	1a9b      	subs	r3, r3, r2
 80018de:	009b      	lsls	r3, r3, #2
 80018e0:	440b      	add	r3, r1
 80018e2:	334d      	adds	r3, #77	@ 0x4d
 80018e4:	2204      	movs	r2, #4
 80018e6:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	78fa      	ldrb	r2, [r7, #3]
 80018ee:	4611      	mov	r1, r2
 80018f0:	4618      	mov	r0, r3
 80018f2:	f000 ffff 	bl	80028f4 <USB_HC_Halt>
 80018f6:	e03f      	b.n	8001978 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80018f8:	78fa      	ldrb	r2, [r7, #3]
 80018fa:	6879      	ldr	r1, [r7, #4]
 80018fc:	4613      	mov	r3, r2
 80018fe:	011b      	lsls	r3, r3, #4
 8001900:	1a9b      	subs	r3, r3, r2
 8001902:	009b      	lsls	r3, r3, #2
 8001904:	440b      	add	r3, r1
 8001906:	3326      	adds	r3, #38	@ 0x26
 8001908:	781b      	ldrb	r3, [r3, #0]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d00a      	beq.n	8001924 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800190e:	78fa      	ldrb	r2, [r7, #3]
 8001910:	6879      	ldr	r1, [r7, #4]
 8001912:	4613      	mov	r3, r2
 8001914:	011b      	lsls	r3, r3, #4
 8001916:	1a9b      	subs	r3, r3, r2
 8001918:	009b      	lsls	r3, r3, #2
 800191a:	440b      	add	r3, r1
 800191c:	3326      	adds	r3, #38	@ 0x26
 800191e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001920:	2b02      	cmp	r3, #2
 8001922:	d129      	bne.n	8001978 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8001924:	78fa      	ldrb	r2, [r7, #3]
 8001926:	6879      	ldr	r1, [r7, #4]
 8001928:	4613      	mov	r3, r2
 800192a:	011b      	lsls	r3, r3, #4
 800192c:	1a9b      	subs	r3, r3, r2
 800192e:	009b      	lsls	r3, r3, #2
 8001930:	440b      	add	r3, r1
 8001932:	3344      	adds	r3, #68	@ 0x44
 8001934:	2200      	movs	r2, #0
 8001936:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	799b      	ldrb	r3, [r3, #6]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d00a      	beq.n	8001956 <HCD_HC_IN_IRQHandler+0xc2a>
 8001940:	78fa      	ldrb	r2, [r7, #3]
 8001942:	6879      	ldr	r1, [r7, #4]
 8001944:	4613      	mov	r3, r2
 8001946:	011b      	lsls	r3, r3, #4
 8001948:	1a9b      	subs	r3, r3, r2
 800194a:	009b      	lsls	r3, r3, #2
 800194c:	440b      	add	r3, r1
 800194e:	331b      	adds	r3, #27
 8001950:	781b      	ldrb	r3, [r3, #0]
 8001952:	2b01      	cmp	r3, #1
 8001954:	d110      	bne.n	8001978 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8001956:	78fa      	ldrb	r2, [r7, #3]
 8001958:	6879      	ldr	r1, [r7, #4]
 800195a:	4613      	mov	r3, r2
 800195c:	011b      	lsls	r3, r3, #4
 800195e:	1a9b      	subs	r3, r3, r2
 8001960:	009b      	lsls	r3, r3, #2
 8001962:	440b      	add	r3, r1
 8001964:	334d      	adds	r3, #77	@ 0x4d
 8001966:	2204      	movs	r2, #4
 8001968:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	78fa      	ldrb	r2, [r7, #3]
 8001970:	4611      	mov	r1, r2
 8001972:	4618      	mov	r0, r3
 8001974:	f000 ffbe 	bl	80028f4 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8001978:	78fa      	ldrb	r2, [r7, #3]
 800197a:	6879      	ldr	r1, [r7, #4]
 800197c:	4613      	mov	r3, r2
 800197e:	011b      	lsls	r3, r3, #4
 8001980:	1a9b      	subs	r3, r3, r2
 8001982:	009b      	lsls	r3, r3, #2
 8001984:	440b      	add	r3, r1
 8001986:	331b      	adds	r3, #27
 8001988:	781b      	ldrb	r3, [r3, #0]
 800198a:	2b01      	cmp	r3, #1
 800198c:	d129      	bne.n	80019e2 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800198e:	78fa      	ldrb	r2, [r7, #3]
 8001990:	6879      	ldr	r1, [r7, #4]
 8001992:	4613      	mov	r3, r2
 8001994:	011b      	lsls	r3, r3, #4
 8001996:	1a9b      	subs	r3, r3, r2
 8001998:	009b      	lsls	r3, r3, #2
 800199a:	440b      	add	r3, r1
 800199c:	331b      	adds	r3, #27
 800199e:	2200      	movs	r2, #0
 80019a0:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80019a2:	78fb      	ldrb	r3, [r7, #3]
 80019a4:	015a      	lsls	r2, r3, #5
 80019a6:	693b      	ldr	r3, [r7, #16]
 80019a8:	4413      	add	r3, r2
 80019aa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	78fa      	ldrb	r2, [r7, #3]
 80019b2:	0151      	lsls	r1, r2, #5
 80019b4:	693a      	ldr	r2, [r7, #16]
 80019b6:	440a      	add	r2, r1
 80019b8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80019bc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80019c0:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 80019c2:	78fb      	ldrb	r3, [r7, #3]
 80019c4:	015a      	lsls	r2, r3, #5
 80019c6:	693b      	ldr	r3, [r7, #16]
 80019c8:	4413      	add	r3, r2
 80019ca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80019ce:	68db      	ldr	r3, [r3, #12]
 80019d0:	78fa      	ldrb	r2, [r7, #3]
 80019d2:	0151      	lsls	r1, r2, #5
 80019d4:	693a      	ldr	r2, [r7, #16]
 80019d6:	440a      	add	r2, r1
 80019d8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80019dc:	f043 0320 	orr.w	r3, r3, #32
 80019e0:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80019e2:	78fb      	ldrb	r3, [r7, #3]
 80019e4:	015a      	lsls	r2, r3, #5
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	4413      	add	r3, r2
 80019ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80019ee:	461a      	mov	r2, r3
 80019f0:	2310      	movs	r3, #16
 80019f2:	6093      	str	r3, [r2, #8]
 80019f4:	e000      	b.n	80019f8 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 80019f6:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 80019f8:	3718      	adds	r7, #24
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}

080019fe <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80019fe:	b580      	push	{r7, lr}
 8001a00:	b086      	sub	sp, #24
 8001a02:	af00      	add	r7, sp, #0
 8001a04:	6078      	str	r0, [r7, #4]
 8001a06:	460b      	mov	r3, r1
 8001a08:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001a10:	697b      	ldr	r3, [r7, #20]
 8001a12:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	78fa      	ldrb	r2, [r7, #3]
 8001a1a:	4611      	mov	r1, r2
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f000 feec 	bl	80027fa <USB_ReadChInterrupts>
 8001a22:	4603      	mov	r3, r0
 8001a24:	f003 0304 	and.w	r3, r3, #4
 8001a28:	2b04      	cmp	r3, #4
 8001a2a:	d11b      	bne.n	8001a64 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8001a2c:	78fb      	ldrb	r3, [r7, #3]
 8001a2e:	015a      	lsls	r2, r3, #5
 8001a30:	693b      	ldr	r3, [r7, #16]
 8001a32:	4413      	add	r3, r2
 8001a34:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001a38:	461a      	mov	r2, r3
 8001a3a:	2304      	movs	r3, #4
 8001a3c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8001a3e:	78fa      	ldrb	r2, [r7, #3]
 8001a40:	6879      	ldr	r1, [r7, #4]
 8001a42:	4613      	mov	r3, r2
 8001a44:	011b      	lsls	r3, r3, #4
 8001a46:	1a9b      	subs	r3, r3, r2
 8001a48:	009b      	lsls	r3, r3, #2
 8001a4a:	440b      	add	r3, r1
 8001a4c:	334d      	adds	r3, #77	@ 0x4d
 8001a4e:	2207      	movs	r2, #7
 8001a50:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	78fa      	ldrb	r2, [r7, #3]
 8001a58:	4611      	mov	r1, r2
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f000 ff4a 	bl	80028f4 <USB_HC_Halt>
 8001a60:	f000 bc89 	b.w	8002376 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	78fa      	ldrb	r2, [r7, #3]
 8001a6a:	4611      	mov	r1, r2
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f000 fec4 	bl	80027fa <USB_ReadChInterrupts>
 8001a72:	4603      	mov	r3, r0
 8001a74:	f003 0320 	and.w	r3, r3, #32
 8001a78:	2b20      	cmp	r3, #32
 8001a7a:	f040 8082 	bne.w	8001b82 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8001a7e:	78fb      	ldrb	r3, [r7, #3]
 8001a80:	015a      	lsls	r2, r3, #5
 8001a82:	693b      	ldr	r3, [r7, #16]
 8001a84:	4413      	add	r3, r2
 8001a86:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001a8a:	461a      	mov	r2, r3
 8001a8c:	2320      	movs	r3, #32
 8001a8e:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8001a90:	78fa      	ldrb	r2, [r7, #3]
 8001a92:	6879      	ldr	r1, [r7, #4]
 8001a94:	4613      	mov	r3, r2
 8001a96:	011b      	lsls	r3, r3, #4
 8001a98:	1a9b      	subs	r3, r3, r2
 8001a9a:	009b      	lsls	r3, r3, #2
 8001a9c:	440b      	add	r3, r1
 8001a9e:	3319      	adds	r3, #25
 8001aa0:	781b      	ldrb	r3, [r3, #0]
 8001aa2:	2b01      	cmp	r3, #1
 8001aa4:	d124      	bne.n	8001af0 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8001aa6:	78fa      	ldrb	r2, [r7, #3]
 8001aa8:	6879      	ldr	r1, [r7, #4]
 8001aaa:	4613      	mov	r3, r2
 8001aac:	011b      	lsls	r3, r3, #4
 8001aae:	1a9b      	subs	r3, r3, r2
 8001ab0:	009b      	lsls	r3, r3, #2
 8001ab2:	440b      	add	r3, r1
 8001ab4:	3319      	adds	r3, #25
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8001aba:	78fa      	ldrb	r2, [r7, #3]
 8001abc:	6879      	ldr	r1, [r7, #4]
 8001abe:	4613      	mov	r3, r2
 8001ac0:	011b      	lsls	r3, r3, #4
 8001ac2:	1a9b      	subs	r3, r3, r2
 8001ac4:	009b      	lsls	r3, r3, #2
 8001ac6:	440b      	add	r3, r1
 8001ac8:	334c      	adds	r3, #76	@ 0x4c
 8001aca:	2202      	movs	r2, #2
 8001acc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8001ace:	78fa      	ldrb	r2, [r7, #3]
 8001ad0:	6879      	ldr	r1, [r7, #4]
 8001ad2:	4613      	mov	r3, r2
 8001ad4:	011b      	lsls	r3, r3, #4
 8001ad6:	1a9b      	subs	r3, r3, r2
 8001ad8:	009b      	lsls	r3, r3, #2
 8001ada:	440b      	add	r3, r1
 8001adc:	334d      	adds	r3, #77	@ 0x4d
 8001ade:	2203      	movs	r2, #3
 8001ae0:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	78fa      	ldrb	r2, [r7, #3]
 8001ae8:	4611      	mov	r1, r2
 8001aea:	4618      	mov	r0, r3
 8001aec:	f000 ff02 	bl	80028f4 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8001af0:	78fa      	ldrb	r2, [r7, #3]
 8001af2:	6879      	ldr	r1, [r7, #4]
 8001af4:	4613      	mov	r3, r2
 8001af6:	011b      	lsls	r3, r3, #4
 8001af8:	1a9b      	subs	r3, r3, r2
 8001afa:	009b      	lsls	r3, r3, #2
 8001afc:	440b      	add	r3, r1
 8001afe:	331a      	adds	r3, #26
 8001b00:	781b      	ldrb	r3, [r3, #0]
 8001b02:	2b01      	cmp	r3, #1
 8001b04:	f040 8437 	bne.w	8002376 <HCD_HC_OUT_IRQHandler+0x978>
 8001b08:	78fa      	ldrb	r2, [r7, #3]
 8001b0a:	6879      	ldr	r1, [r7, #4]
 8001b0c:	4613      	mov	r3, r2
 8001b0e:	011b      	lsls	r3, r3, #4
 8001b10:	1a9b      	subs	r3, r3, r2
 8001b12:	009b      	lsls	r3, r3, #2
 8001b14:	440b      	add	r3, r1
 8001b16:	331b      	adds	r3, #27
 8001b18:	781b      	ldrb	r3, [r3, #0]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	f040 842b 	bne.w	8002376 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8001b20:	78fa      	ldrb	r2, [r7, #3]
 8001b22:	6879      	ldr	r1, [r7, #4]
 8001b24:	4613      	mov	r3, r2
 8001b26:	011b      	lsls	r3, r3, #4
 8001b28:	1a9b      	subs	r3, r3, r2
 8001b2a:	009b      	lsls	r3, r3, #2
 8001b2c:	440b      	add	r3, r1
 8001b2e:	3326      	adds	r3, #38	@ 0x26
 8001b30:	781b      	ldrb	r3, [r3, #0]
 8001b32:	2b01      	cmp	r3, #1
 8001b34:	d009      	beq.n	8001b4a <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8001b36:	78fa      	ldrb	r2, [r7, #3]
 8001b38:	6879      	ldr	r1, [r7, #4]
 8001b3a:	4613      	mov	r3, r2
 8001b3c:	011b      	lsls	r3, r3, #4
 8001b3e:	1a9b      	subs	r3, r3, r2
 8001b40:	009b      	lsls	r3, r3, #2
 8001b42:	440b      	add	r3, r1
 8001b44:	331b      	adds	r3, #27
 8001b46:	2201      	movs	r2, #1
 8001b48:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8001b4a:	78fa      	ldrb	r2, [r7, #3]
 8001b4c:	6879      	ldr	r1, [r7, #4]
 8001b4e:	4613      	mov	r3, r2
 8001b50:	011b      	lsls	r3, r3, #4
 8001b52:	1a9b      	subs	r3, r3, r2
 8001b54:	009b      	lsls	r3, r3, #2
 8001b56:	440b      	add	r3, r1
 8001b58:	334d      	adds	r3, #77	@ 0x4d
 8001b5a:	2203      	movs	r2, #3
 8001b5c:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	78fa      	ldrb	r2, [r7, #3]
 8001b64:	4611      	mov	r1, r2
 8001b66:	4618      	mov	r0, r3
 8001b68:	f000 fec4 	bl	80028f4 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8001b6c:	78fa      	ldrb	r2, [r7, #3]
 8001b6e:	6879      	ldr	r1, [r7, #4]
 8001b70:	4613      	mov	r3, r2
 8001b72:	011b      	lsls	r3, r3, #4
 8001b74:	1a9b      	subs	r3, r3, r2
 8001b76:	009b      	lsls	r3, r3, #2
 8001b78:	440b      	add	r3, r1
 8001b7a:	3344      	adds	r3, #68	@ 0x44
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	601a      	str	r2, [r3, #0]
 8001b80:	e3f9      	b.n	8002376 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	78fa      	ldrb	r2, [r7, #3]
 8001b88:	4611      	mov	r1, r2
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f000 fe35 	bl	80027fa <USB_ReadChInterrupts>
 8001b90:	4603      	mov	r3, r0
 8001b92:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001b96:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001b9a:	d111      	bne.n	8001bc0 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8001b9c:	78fb      	ldrb	r3, [r7, #3]
 8001b9e:	015a      	lsls	r2, r3, #5
 8001ba0:	693b      	ldr	r3, [r7, #16]
 8001ba2:	4413      	add	r3, r2
 8001ba4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001ba8:	461a      	mov	r2, r3
 8001baa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001bae:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	78fa      	ldrb	r2, [r7, #3]
 8001bb6:	4611      	mov	r1, r2
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f000 fe9b 	bl	80028f4 <USB_HC_Halt>
 8001bbe:	e3da      	b.n	8002376 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	78fa      	ldrb	r2, [r7, #3]
 8001bc6:	4611      	mov	r1, r2
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f000 fe16 	bl	80027fa <USB_ReadChInterrupts>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	f003 0301 	and.w	r3, r3, #1
 8001bd4:	2b01      	cmp	r3, #1
 8001bd6:	d168      	bne.n	8001caa <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8001bd8:	78fa      	ldrb	r2, [r7, #3]
 8001bda:	6879      	ldr	r1, [r7, #4]
 8001bdc:	4613      	mov	r3, r2
 8001bde:	011b      	lsls	r3, r3, #4
 8001be0:	1a9b      	subs	r3, r3, r2
 8001be2:	009b      	lsls	r3, r3, #2
 8001be4:	440b      	add	r3, r1
 8001be6:	3344      	adds	r3, #68	@ 0x44
 8001be8:	2200      	movs	r2, #0
 8001bea:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	78fa      	ldrb	r2, [r7, #3]
 8001bf2:	4611      	mov	r1, r2
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f000 fe00 	bl	80027fa <USB_ReadChInterrupts>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c00:	2b40      	cmp	r3, #64	@ 0x40
 8001c02:	d112      	bne.n	8001c2a <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8001c04:	78fa      	ldrb	r2, [r7, #3]
 8001c06:	6879      	ldr	r1, [r7, #4]
 8001c08:	4613      	mov	r3, r2
 8001c0a:	011b      	lsls	r3, r3, #4
 8001c0c:	1a9b      	subs	r3, r3, r2
 8001c0e:	009b      	lsls	r3, r3, #2
 8001c10:	440b      	add	r3, r1
 8001c12:	3319      	adds	r3, #25
 8001c14:	2201      	movs	r2, #1
 8001c16:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8001c18:	78fb      	ldrb	r3, [r7, #3]
 8001c1a:	015a      	lsls	r2, r3, #5
 8001c1c:	693b      	ldr	r3, [r7, #16]
 8001c1e:	4413      	add	r3, r2
 8001c20:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001c24:	461a      	mov	r2, r3
 8001c26:	2340      	movs	r3, #64	@ 0x40
 8001c28:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8001c2a:	78fa      	ldrb	r2, [r7, #3]
 8001c2c:	6879      	ldr	r1, [r7, #4]
 8001c2e:	4613      	mov	r3, r2
 8001c30:	011b      	lsls	r3, r3, #4
 8001c32:	1a9b      	subs	r3, r3, r2
 8001c34:	009b      	lsls	r3, r3, #2
 8001c36:	440b      	add	r3, r1
 8001c38:	331b      	adds	r3, #27
 8001c3a:	781b      	ldrb	r3, [r3, #0]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d019      	beq.n	8001c74 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8001c40:	78fa      	ldrb	r2, [r7, #3]
 8001c42:	6879      	ldr	r1, [r7, #4]
 8001c44:	4613      	mov	r3, r2
 8001c46:	011b      	lsls	r3, r3, #4
 8001c48:	1a9b      	subs	r3, r3, r2
 8001c4a:	009b      	lsls	r3, r3, #2
 8001c4c:	440b      	add	r3, r1
 8001c4e:	331b      	adds	r3, #27
 8001c50:	2200      	movs	r2, #0
 8001c52:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8001c54:	78fb      	ldrb	r3, [r7, #3]
 8001c56:	015a      	lsls	r2, r3, #5
 8001c58:	693b      	ldr	r3, [r7, #16]
 8001c5a:	4413      	add	r3, r2
 8001c5c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	78fa      	ldrb	r2, [r7, #3]
 8001c64:	0151      	lsls	r1, r2, #5
 8001c66:	693a      	ldr	r2, [r7, #16]
 8001c68:	440a      	add	r2, r1
 8001c6a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8001c6e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c72:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8001c74:	78fb      	ldrb	r3, [r7, #3]
 8001c76:	015a      	lsls	r2, r3, #5
 8001c78:	693b      	ldr	r3, [r7, #16]
 8001c7a:	4413      	add	r3, r2
 8001c7c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001c80:	461a      	mov	r2, r3
 8001c82:	2301      	movs	r3, #1
 8001c84:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8001c86:	78fa      	ldrb	r2, [r7, #3]
 8001c88:	6879      	ldr	r1, [r7, #4]
 8001c8a:	4613      	mov	r3, r2
 8001c8c:	011b      	lsls	r3, r3, #4
 8001c8e:	1a9b      	subs	r3, r3, r2
 8001c90:	009b      	lsls	r3, r3, #2
 8001c92:	440b      	add	r3, r1
 8001c94:	334d      	adds	r3, #77	@ 0x4d
 8001c96:	2201      	movs	r2, #1
 8001c98:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	78fa      	ldrb	r2, [r7, #3]
 8001ca0:	4611      	mov	r1, r2
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f000 fe26 	bl	80028f4 <USB_HC_Halt>
 8001ca8:	e365      	b.n	8002376 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	78fa      	ldrb	r2, [r7, #3]
 8001cb0:	4611      	mov	r1, r2
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f000 fda1 	bl	80027fa <USB_ReadChInterrupts>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001cbe:	2b40      	cmp	r3, #64	@ 0x40
 8001cc0:	d139      	bne.n	8001d36 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8001cc2:	78fa      	ldrb	r2, [r7, #3]
 8001cc4:	6879      	ldr	r1, [r7, #4]
 8001cc6:	4613      	mov	r3, r2
 8001cc8:	011b      	lsls	r3, r3, #4
 8001cca:	1a9b      	subs	r3, r3, r2
 8001ccc:	009b      	lsls	r3, r3, #2
 8001cce:	440b      	add	r3, r1
 8001cd0:	334d      	adds	r3, #77	@ 0x4d
 8001cd2:	2205      	movs	r2, #5
 8001cd4:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8001cd6:	78fa      	ldrb	r2, [r7, #3]
 8001cd8:	6879      	ldr	r1, [r7, #4]
 8001cda:	4613      	mov	r3, r2
 8001cdc:	011b      	lsls	r3, r3, #4
 8001cde:	1a9b      	subs	r3, r3, r2
 8001ce0:	009b      	lsls	r3, r3, #2
 8001ce2:	440b      	add	r3, r1
 8001ce4:	331a      	adds	r3, #26
 8001ce6:	781b      	ldrb	r3, [r3, #0]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d109      	bne.n	8001d00 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8001cec:	78fa      	ldrb	r2, [r7, #3]
 8001cee:	6879      	ldr	r1, [r7, #4]
 8001cf0:	4613      	mov	r3, r2
 8001cf2:	011b      	lsls	r3, r3, #4
 8001cf4:	1a9b      	subs	r3, r3, r2
 8001cf6:	009b      	lsls	r3, r3, #2
 8001cf8:	440b      	add	r3, r1
 8001cfa:	3319      	adds	r3, #25
 8001cfc:	2201      	movs	r2, #1
 8001cfe:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8001d00:	78fa      	ldrb	r2, [r7, #3]
 8001d02:	6879      	ldr	r1, [r7, #4]
 8001d04:	4613      	mov	r3, r2
 8001d06:	011b      	lsls	r3, r3, #4
 8001d08:	1a9b      	subs	r3, r3, r2
 8001d0a:	009b      	lsls	r3, r3, #2
 8001d0c:	440b      	add	r3, r1
 8001d0e:	3344      	adds	r3, #68	@ 0x44
 8001d10:	2200      	movs	r2, #0
 8001d12:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	78fa      	ldrb	r2, [r7, #3]
 8001d1a:	4611      	mov	r1, r2
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f000 fde9 	bl	80028f4 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8001d22:	78fb      	ldrb	r3, [r7, #3]
 8001d24:	015a      	lsls	r2, r3, #5
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	4413      	add	r3, r2
 8001d2a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001d2e:	461a      	mov	r2, r3
 8001d30:	2340      	movs	r3, #64	@ 0x40
 8001d32:	6093      	str	r3, [r2, #8]
 8001d34:	e31f      	b.n	8002376 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	78fa      	ldrb	r2, [r7, #3]
 8001d3c:	4611      	mov	r1, r2
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f000 fd5b 	bl	80027fa <USB_ReadChInterrupts>
 8001d44:	4603      	mov	r3, r0
 8001d46:	f003 0308 	and.w	r3, r3, #8
 8001d4a:	2b08      	cmp	r3, #8
 8001d4c:	d11a      	bne.n	8001d84 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8001d4e:	78fb      	ldrb	r3, [r7, #3]
 8001d50:	015a      	lsls	r2, r3, #5
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	4413      	add	r3, r2
 8001d56:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001d5a:	461a      	mov	r2, r3
 8001d5c:	2308      	movs	r3, #8
 8001d5e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8001d60:	78fa      	ldrb	r2, [r7, #3]
 8001d62:	6879      	ldr	r1, [r7, #4]
 8001d64:	4613      	mov	r3, r2
 8001d66:	011b      	lsls	r3, r3, #4
 8001d68:	1a9b      	subs	r3, r3, r2
 8001d6a:	009b      	lsls	r3, r3, #2
 8001d6c:	440b      	add	r3, r1
 8001d6e:	334d      	adds	r3, #77	@ 0x4d
 8001d70:	2206      	movs	r2, #6
 8001d72:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	78fa      	ldrb	r2, [r7, #3]
 8001d7a:	4611      	mov	r1, r2
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f000 fdb9 	bl	80028f4 <USB_HC_Halt>
 8001d82:	e2f8      	b.n	8002376 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	78fa      	ldrb	r2, [r7, #3]
 8001d8a:	4611      	mov	r1, r2
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f000 fd34 	bl	80027fa <USB_ReadChInterrupts>
 8001d92:	4603      	mov	r3, r0
 8001d94:	f003 0310 	and.w	r3, r3, #16
 8001d98:	2b10      	cmp	r3, #16
 8001d9a:	d144      	bne.n	8001e26 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8001d9c:	78fa      	ldrb	r2, [r7, #3]
 8001d9e:	6879      	ldr	r1, [r7, #4]
 8001da0:	4613      	mov	r3, r2
 8001da2:	011b      	lsls	r3, r3, #4
 8001da4:	1a9b      	subs	r3, r3, r2
 8001da6:	009b      	lsls	r3, r3, #2
 8001da8:	440b      	add	r3, r1
 8001daa:	3344      	adds	r3, #68	@ 0x44
 8001dac:	2200      	movs	r2, #0
 8001dae:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8001db0:	78fa      	ldrb	r2, [r7, #3]
 8001db2:	6879      	ldr	r1, [r7, #4]
 8001db4:	4613      	mov	r3, r2
 8001db6:	011b      	lsls	r3, r3, #4
 8001db8:	1a9b      	subs	r3, r3, r2
 8001dba:	009b      	lsls	r3, r3, #2
 8001dbc:	440b      	add	r3, r1
 8001dbe:	334d      	adds	r3, #77	@ 0x4d
 8001dc0:	2204      	movs	r2, #4
 8001dc2:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8001dc4:	78fa      	ldrb	r2, [r7, #3]
 8001dc6:	6879      	ldr	r1, [r7, #4]
 8001dc8:	4613      	mov	r3, r2
 8001dca:	011b      	lsls	r3, r3, #4
 8001dcc:	1a9b      	subs	r3, r3, r2
 8001dce:	009b      	lsls	r3, r3, #2
 8001dd0:	440b      	add	r3, r1
 8001dd2:	3319      	adds	r3, #25
 8001dd4:	781b      	ldrb	r3, [r3, #0]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d114      	bne.n	8001e04 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8001dda:	78fa      	ldrb	r2, [r7, #3]
 8001ddc:	6879      	ldr	r1, [r7, #4]
 8001dde:	4613      	mov	r3, r2
 8001de0:	011b      	lsls	r3, r3, #4
 8001de2:	1a9b      	subs	r3, r3, r2
 8001de4:	009b      	lsls	r3, r3, #2
 8001de6:	440b      	add	r3, r1
 8001de8:	3318      	adds	r3, #24
 8001dea:	781b      	ldrb	r3, [r3, #0]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d109      	bne.n	8001e04 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8001df0:	78fa      	ldrb	r2, [r7, #3]
 8001df2:	6879      	ldr	r1, [r7, #4]
 8001df4:	4613      	mov	r3, r2
 8001df6:	011b      	lsls	r3, r3, #4
 8001df8:	1a9b      	subs	r3, r3, r2
 8001dfa:	009b      	lsls	r3, r3, #2
 8001dfc:	440b      	add	r3, r1
 8001dfe:	3319      	adds	r3, #25
 8001e00:	2201      	movs	r2, #1
 8001e02:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	78fa      	ldrb	r2, [r7, #3]
 8001e0a:	4611      	mov	r1, r2
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f000 fd71 	bl	80028f4 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8001e12:	78fb      	ldrb	r3, [r7, #3]
 8001e14:	015a      	lsls	r2, r3, #5
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	4413      	add	r3, r2
 8001e1a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001e1e:	461a      	mov	r2, r3
 8001e20:	2310      	movs	r3, #16
 8001e22:	6093      	str	r3, [r2, #8]
 8001e24:	e2a7      	b.n	8002376 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	78fa      	ldrb	r2, [r7, #3]
 8001e2c:	4611      	mov	r1, r2
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f000 fce3 	bl	80027fa <USB_ReadChInterrupts>
 8001e34:	4603      	mov	r3, r0
 8001e36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e3a:	2b80      	cmp	r3, #128	@ 0x80
 8001e3c:	f040 8083 	bne.w	8001f46 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	799b      	ldrb	r3, [r3, #6]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d111      	bne.n	8001e6c <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8001e48:	78fa      	ldrb	r2, [r7, #3]
 8001e4a:	6879      	ldr	r1, [r7, #4]
 8001e4c:	4613      	mov	r3, r2
 8001e4e:	011b      	lsls	r3, r3, #4
 8001e50:	1a9b      	subs	r3, r3, r2
 8001e52:	009b      	lsls	r3, r3, #2
 8001e54:	440b      	add	r3, r1
 8001e56:	334d      	adds	r3, #77	@ 0x4d
 8001e58:	2207      	movs	r2, #7
 8001e5a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	78fa      	ldrb	r2, [r7, #3]
 8001e62:	4611      	mov	r1, r2
 8001e64:	4618      	mov	r0, r3
 8001e66:	f000 fd45 	bl	80028f4 <USB_HC_Halt>
 8001e6a:	e062      	b.n	8001f32 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8001e6c:	78fa      	ldrb	r2, [r7, #3]
 8001e6e:	6879      	ldr	r1, [r7, #4]
 8001e70:	4613      	mov	r3, r2
 8001e72:	011b      	lsls	r3, r3, #4
 8001e74:	1a9b      	subs	r3, r3, r2
 8001e76:	009b      	lsls	r3, r3, #2
 8001e78:	440b      	add	r3, r1
 8001e7a:	3344      	adds	r3, #68	@ 0x44
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	1c59      	adds	r1, r3, #1
 8001e80:	6878      	ldr	r0, [r7, #4]
 8001e82:	4613      	mov	r3, r2
 8001e84:	011b      	lsls	r3, r3, #4
 8001e86:	1a9b      	subs	r3, r3, r2
 8001e88:	009b      	lsls	r3, r3, #2
 8001e8a:	4403      	add	r3, r0
 8001e8c:	3344      	adds	r3, #68	@ 0x44
 8001e8e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8001e90:	78fa      	ldrb	r2, [r7, #3]
 8001e92:	6879      	ldr	r1, [r7, #4]
 8001e94:	4613      	mov	r3, r2
 8001e96:	011b      	lsls	r3, r3, #4
 8001e98:	1a9b      	subs	r3, r3, r2
 8001e9a:	009b      	lsls	r3, r3, #2
 8001e9c:	440b      	add	r3, r1
 8001e9e:	3344      	adds	r3, #68	@ 0x44
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	2b02      	cmp	r3, #2
 8001ea4:	d922      	bls.n	8001eec <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8001ea6:	78fa      	ldrb	r2, [r7, #3]
 8001ea8:	6879      	ldr	r1, [r7, #4]
 8001eaa:	4613      	mov	r3, r2
 8001eac:	011b      	lsls	r3, r3, #4
 8001eae:	1a9b      	subs	r3, r3, r2
 8001eb0:	009b      	lsls	r3, r3, #2
 8001eb2:	440b      	add	r3, r1
 8001eb4:	3344      	adds	r3, #68	@ 0x44
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8001eba:	78fa      	ldrb	r2, [r7, #3]
 8001ebc:	6879      	ldr	r1, [r7, #4]
 8001ebe:	4613      	mov	r3, r2
 8001ec0:	011b      	lsls	r3, r3, #4
 8001ec2:	1a9b      	subs	r3, r3, r2
 8001ec4:	009b      	lsls	r3, r3, #2
 8001ec6:	440b      	add	r3, r1
 8001ec8:	334c      	adds	r3, #76	@ 0x4c
 8001eca:	2204      	movs	r2, #4
 8001ecc:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8001ece:	78fa      	ldrb	r2, [r7, #3]
 8001ed0:	6879      	ldr	r1, [r7, #4]
 8001ed2:	4613      	mov	r3, r2
 8001ed4:	011b      	lsls	r3, r3, #4
 8001ed6:	1a9b      	subs	r3, r3, r2
 8001ed8:	009b      	lsls	r3, r3, #2
 8001eda:	440b      	add	r3, r1
 8001edc:	334c      	adds	r3, #76	@ 0x4c
 8001ede:	781a      	ldrb	r2, [r3, #0]
 8001ee0:	78fb      	ldrb	r3, [r7, #3]
 8001ee2:	4619      	mov	r1, r3
 8001ee4:	6878      	ldr	r0, [r7, #4]
 8001ee6:	f000 ff80 	bl	8002dea <HAL_HCD_HC_NotifyURBChange_Callback>
 8001eea:	e022      	b.n	8001f32 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8001eec:	78fa      	ldrb	r2, [r7, #3]
 8001eee:	6879      	ldr	r1, [r7, #4]
 8001ef0:	4613      	mov	r3, r2
 8001ef2:	011b      	lsls	r3, r3, #4
 8001ef4:	1a9b      	subs	r3, r3, r2
 8001ef6:	009b      	lsls	r3, r3, #2
 8001ef8:	440b      	add	r3, r1
 8001efa:	334c      	adds	r3, #76	@ 0x4c
 8001efc:	2202      	movs	r2, #2
 8001efe:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8001f00:	78fb      	ldrb	r3, [r7, #3]
 8001f02:	015a      	lsls	r2, r3, #5
 8001f04:	693b      	ldr	r3, [r7, #16]
 8001f06:	4413      	add	r3, r2
 8001f08:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8001f16:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001f1e:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8001f20:	78fb      	ldrb	r3, [r7, #3]
 8001f22:	015a      	lsls	r2, r3, #5
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	4413      	add	r3, r2
 8001f28:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001f2c:	461a      	mov	r2, r3
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8001f32:	78fb      	ldrb	r3, [r7, #3]
 8001f34:	015a      	lsls	r2, r3, #5
 8001f36:	693b      	ldr	r3, [r7, #16]
 8001f38:	4413      	add	r3, r2
 8001f3a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001f3e:	461a      	mov	r2, r3
 8001f40:	2380      	movs	r3, #128	@ 0x80
 8001f42:	6093      	str	r3, [r2, #8]
 8001f44:	e217      	b.n	8002376 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	78fa      	ldrb	r2, [r7, #3]
 8001f4c:	4611      	mov	r1, r2
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f000 fc53 	bl	80027fa <USB_ReadChInterrupts>
 8001f54:	4603      	mov	r3, r0
 8001f56:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f5a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f5e:	d11b      	bne.n	8001f98 <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8001f60:	78fa      	ldrb	r2, [r7, #3]
 8001f62:	6879      	ldr	r1, [r7, #4]
 8001f64:	4613      	mov	r3, r2
 8001f66:	011b      	lsls	r3, r3, #4
 8001f68:	1a9b      	subs	r3, r3, r2
 8001f6a:	009b      	lsls	r3, r3, #2
 8001f6c:	440b      	add	r3, r1
 8001f6e:	334d      	adds	r3, #77	@ 0x4d
 8001f70:	2209      	movs	r2, #9
 8001f72:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	78fa      	ldrb	r2, [r7, #3]
 8001f7a:	4611      	mov	r1, r2
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f000 fcb9 	bl	80028f4 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8001f82:	78fb      	ldrb	r3, [r7, #3]
 8001f84:	015a      	lsls	r2, r3, #5
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	4413      	add	r3, r2
 8001f8a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001f8e:	461a      	mov	r2, r3
 8001f90:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001f94:	6093      	str	r3, [r2, #8]
 8001f96:	e1ee      	b.n	8002376 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	78fa      	ldrb	r2, [r7, #3]
 8001f9e:	4611      	mov	r1, r2
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f000 fc2a 	bl	80027fa <USB_ReadChInterrupts>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	f003 0302 	and.w	r3, r3, #2
 8001fac:	2b02      	cmp	r3, #2
 8001fae:	f040 81df 	bne.w	8002370 <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8001fb2:	78fb      	ldrb	r3, [r7, #3]
 8001fb4:	015a      	lsls	r2, r3, #5
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	4413      	add	r3, r2
 8001fba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001fbe:	461a      	mov	r2, r3
 8001fc0:	2302      	movs	r3, #2
 8001fc2:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8001fc4:	78fa      	ldrb	r2, [r7, #3]
 8001fc6:	6879      	ldr	r1, [r7, #4]
 8001fc8:	4613      	mov	r3, r2
 8001fca:	011b      	lsls	r3, r3, #4
 8001fcc:	1a9b      	subs	r3, r3, r2
 8001fce:	009b      	lsls	r3, r3, #2
 8001fd0:	440b      	add	r3, r1
 8001fd2:	334d      	adds	r3, #77	@ 0x4d
 8001fd4:	781b      	ldrb	r3, [r3, #0]
 8001fd6:	2b01      	cmp	r3, #1
 8001fd8:	f040 8093 	bne.w	8002102 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8001fdc:	78fa      	ldrb	r2, [r7, #3]
 8001fde:	6879      	ldr	r1, [r7, #4]
 8001fe0:	4613      	mov	r3, r2
 8001fe2:	011b      	lsls	r3, r3, #4
 8001fe4:	1a9b      	subs	r3, r3, r2
 8001fe6:	009b      	lsls	r3, r3, #2
 8001fe8:	440b      	add	r3, r1
 8001fea:	334d      	adds	r3, #77	@ 0x4d
 8001fec:	2202      	movs	r2, #2
 8001fee:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8001ff0:	78fa      	ldrb	r2, [r7, #3]
 8001ff2:	6879      	ldr	r1, [r7, #4]
 8001ff4:	4613      	mov	r3, r2
 8001ff6:	011b      	lsls	r3, r3, #4
 8001ff8:	1a9b      	subs	r3, r3, r2
 8001ffa:	009b      	lsls	r3, r3, #2
 8001ffc:	440b      	add	r3, r1
 8001ffe:	334c      	adds	r3, #76	@ 0x4c
 8002000:	2201      	movs	r2, #1
 8002002:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8002004:	78fa      	ldrb	r2, [r7, #3]
 8002006:	6879      	ldr	r1, [r7, #4]
 8002008:	4613      	mov	r3, r2
 800200a:	011b      	lsls	r3, r3, #4
 800200c:	1a9b      	subs	r3, r3, r2
 800200e:	009b      	lsls	r3, r3, #2
 8002010:	440b      	add	r3, r1
 8002012:	3326      	adds	r3, #38	@ 0x26
 8002014:	781b      	ldrb	r3, [r3, #0]
 8002016:	2b02      	cmp	r3, #2
 8002018:	d00b      	beq.n	8002032 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 800201a:	78fa      	ldrb	r2, [r7, #3]
 800201c:	6879      	ldr	r1, [r7, #4]
 800201e:	4613      	mov	r3, r2
 8002020:	011b      	lsls	r3, r3, #4
 8002022:	1a9b      	subs	r3, r3, r2
 8002024:	009b      	lsls	r3, r3, #2
 8002026:	440b      	add	r3, r1
 8002028:	3326      	adds	r3, #38	@ 0x26
 800202a:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 800202c:	2b03      	cmp	r3, #3
 800202e:	f040 8190 	bne.w	8002352 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	799b      	ldrb	r3, [r3, #6]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d115      	bne.n	8002066 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 800203a:	78fa      	ldrb	r2, [r7, #3]
 800203c:	6879      	ldr	r1, [r7, #4]
 800203e:	4613      	mov	r3, r2
 8002040:	011b      	lsls	r3, r3, #4
 8002042:	1a9b      	subs	r3, r3, r2
 8002044:	009b      	lsls	r3, r3, #2
 8002046:	440b      	add	r3, r1
 8002048:	333d      	adds	r3, #61	@ 0x3d
 800204a:	781b      	ldrb	r3, [r3, #0]
 800204c:	78fa      	ldrb	r2, [r7, #3]
 800204e:	f083 0301 	eor.w	r3, r3, #1
 8002052:	b2d8      	uxtb	r0, r3
 8002054:	6879      	ldr	r1, [r7, #4]
 8002056:	4613      	mov	r3, r2
 8002058:	011b      	lsls	r3, r3, #4
 800205a:	1a9b      	subs	r3, r3, r2
 800205c:	009b      	lsls	r3, r3, #2
 800205e:	440b      	add	r3, r1
 8002060:	333d      	adds	r3, #61	@ 0x3d
 8002062:	4602      	mov	r2, r0
 8002064:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	799b      	ldrb	r3, [r3, #6]
 800206a:	2b01      	cmp	r3, #1
 800206c:	f040 8171 	bne.w	8002352 <HCD_HC_OUT_IRQHandler+0x954>
 8002070:	78fa      	ldrb	r2, [r7, #3]
 8002072:	6879      	ldr	r1, [r7, #4]
 8002074:	4613      	mov	r3, r2
 8002076:	011b      	lsls	r3, r3, #4
 8002078:	1a9b      	subs	r3, r3, r2
 800207a:	009b      	lsls	r3, r3, #2
 800207c:	440b      	add	r3, r1
 800207e:	3334      	adds	r3, #52	@ 0x34
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	2b00      	cmp	r3, #0
 8002084:	f000 8165 	beq.w	8002352 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8002088:	78fa      	ldrb	r2, [r7, #3]
 800208a:	6879      	ldr	r1, [r7, #4]
 800208c:	4613      	mov	r3, r2
 800208e:	011b      	lsls	r3, r3, #4
 8002090:	1a9b      	subs	r3, r3, r2
 8002092:	009b      	lsls	r3, r3, #2
 8002094:	440b      	add	r3, r1
 8002096:	3334      	adds	r3, #52	@ 0x34
 8002098:	6819      	ldr	r1, [r3, #0]
 800209a:	78fa      	ldrb	r2, [r7, #3]
 800209c:	6878      	ldr	r0, [r7, #4]
 800209e:	4613      	mov	r3, r2
 80020a0:	011b      	lsls	r3, r3, #4
 80020a2:	1a9b      	subs	r3, r3, r2
 80020a4:	009b      	lsls	r3, r3, #2
 80020a6:	4403      	add	r3, r0
 80020a8:	3328      	adds	r3, #40	@ 0x28
 80020aa:	881b      	ldrh	r3, [r3, #0]
 80020ac:	440b      	add	r3, r1
 80020ae:	1e59      	subs	r1, r3, #1
 80020b0:	78fa      	ldrb	r2, [r7, #3]
 80020b2:	6878      	ldr	r0, [r7, #4]
 80020b4:	4613      	mov	r3, r2
 80020b6:	011b      	lsls	r3, r3, #4
 80020b8:	1a9b      	subs	r3, r3, r2
 80020ba:	009b      	lsls	r3, r3, #2
 80020bc:	4403      	add	r3, r0
 80020be:	3328      	adds	r3, #40	@ 0x28
 80020c0:	881b      	ldrh	r3, [r3, #0]
 80020c2:	fbb1 f3f3 	udiv	r3, r1, r3
 80020c6:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 80020c8:	68bb      	ldr	r3, [r7, #8]
 80020ca:	f003 0301 	and.w	r3, r3, #1
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	f000 813f 	beq.w	8002352 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 80020d4:	78fa      	ldrb	r2, [r7, #3]
 80020d6:	6879      	ldr	r1, [r7, #4]
 80020d8:	4613      	mov	r3, r2
 80020da:	011b      	lsls	r3, r3, #4
 80020dc:	1a9b      	subs	r3, r3, r2
 80020de:	009b      	lsls	r3, r3, #2
 80020e0:	440b      	add	r3, r1
 80020e2:	333d      	adds	r3, #61	@ 0x3d
 80020e4:	781b      	ldrb	r3, [r3, #0]
 80020e6:	78fa      	ldrb	r2, [r7, #3]
 80020e8:	f083 0301 	eor.w	r3, r3, #1
 80020ec:	b2d8      	uxtb	r0, r3
 80020ee:	6879      	ldr	r1, [r7, #4]
 80020f0:	4613      	mov	r3, r2
 80020f2:	011b      	lsls	r3, r3, #4
 80020f4:	1a9b      	subs	r3, r3, r2
 80020f6:	009b      	lsls	r3, r3, #2
 80020f8:	440b      	add	r3, r1
 80020fa:	333d      	adds	r3, #61	@ 0x3d
 80020fc:	4602      	mov	r2, r0
 80020fe:	701a      	strb	r2, [r3, #0]
 8002100:	e127      	b.n	8002352 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8002102:	78fa      	ldrb	r2, [r7, #3]
 8002104:	6879      	ldr	r1, [r7, #4]
 8002106:	4613      	mov	r3, r2
 8002108:	011b      	lsls	r3, r3, #4
 800210a:	1a9b      	subs	r3, r3, r2
 800210c:	009b      	lsls	r3, r3, #2
 800210e:	440b      	add	r3, r1
 8002110:	334d      	adds	r3, #77	@ 0x4d
 8002112:	781b      	ldrb	r3, [r3, #0]
 8002114:	2b03      	cmp	r3, #3
 8002116:	d120      	bne.n	800215a <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002118:	78fa      	ldrb	r2, [r7, #3]
 800211a:	6879      	ldr	r1, [r7, #4]
 800211c:	4613      	mov	r3, r2
 800211e:	011b      	lsls	r3, r3, #4
 8002120:	1a9b      	subs	r3, r3, r2
 8002122:	009b      	lsls	r3, r3, #2
 8002124:	440b      	add	r3, r1
 8002126:	334d      	adds	r3, #77	@ 0x4d
 8002128:	2202      	movs	r2, #2
 800212a:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800212c:	78fa      	ldrb	r2, [r7, #3]
 800212e:	6879      	ldr	r1, [r7, #4]
 8002130:	4613      	mov	r3, r2
 8002132:	011b      	lsls	r3, r3, #4
 8002134:	1a9b      	subs	r3, r3, r2
 8002136:	009b      	lsls	r3, r3, #2
 8002138:	440b      	add	r3, r1
 800213a:	331b      	adds	r3, #27
 800213c:	781b      	ldrb	r3, [r3, #0]
 800213e:	2b01      	cmp	r3, #1
 8002140:	f040 8107 	bne.w	8002352 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002144:	78fa      	ldrb	r2, [r7, #3]
 8002146:	6879      	ldr	r1, [r7, #4]
 8002148:	4613      	mov	r3, r2
 800214a:	011b      	lsls	r3, r3, #4
 800214c:	1a9b      	subs	r3, r3, r2
 800214e:	009b      	lsls	r3, r3, #2
 8002150:	440b      	add	r3, r1
 8002152:	334c      	adds	r3, #76	@ 0x4c
 8002154:	2202      	movs	r2, #2
 8002156:	701a      	strb	r2, [r3, #0]
 8002158:	e0fb      	b.n	8002352 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 800215a:	78fa      	ldrb	r2, [r7, #3]
 800215c:	6879      	ldr	r1, [r7, #4]
 800215e:	4613      	mov	r3, r2
 8002160:	011b      	lsls	r3, r3, #4
 8002162:	1a9b      	subs	r3, r3, r2
 8002164:	009b      	lsls	r3, r3, #2
 8002166:	440b      	add	r3, r1
 8002168:	334d      	adds	r3, #77	@ 0x4d
 800216a:	781b      	ldrb	r3, [r3, #0]
 800216c:	2b04      	cmp	r3, #4
 800216e:	d13a      	bne.n	80021e6 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002170:	78fa      	ldrb	r2, [r7, #3]
 8002172:	6879      	ldr	r1, [r7, #4]
 8002174:	4613      	mov	r3, r2
 8002176:	011b      	lsls	r3, r3, #4
 8002178:	1a9b      	subs	r3, r3, r2
 800217a:	009b      	lsls	r3, r3, #2
 800217c:	440b      	add	r3, r1
 800217e:	334d      	adds	r3, #77	@ 0x4d
 8002180:	2202      	movs	r2, #2
 8002182:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002184:	78fa      	ldrb	r2, [r7, #3]
 8002186:	6879      	ldr	r1, [r7, #4]
 8002188:	4613      	mov	r3, r2
 800218a:	011b      	lsls	r3, r3, #4
 800218c:	1a9b      	subs	r3, r3, r2
 800218e:	009b      	lsls	r3, r3, #2
 8002190:	440b      	add	r3, r1
 8002192:	334c      	adds	r3, #76	@ 0x4c
 8002194:	2202      	movs	r2, #2
 8002196:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002198:	78fa      	ldrb	r2, [r7, #3]
 800219a:	6879      	ldr	r1, [r7, #4]
 800219c:	4613      	mov	r3, r2
 800219e:	011b      	lsls	r3, r3, #4
 80021a0:	1a9b      	subs	r3, r3, r2
 80021a2:	009b      	lsls	r3, r3, #2
 80021a4:	440b      	add	r3, r1
 80021a6:	331b      	adds	r3, #27
 80021a8:	781b      	ldrb	r3, [r3, #0]
 80021aa:	2b01      	cmp	r3, #1
 80021ac:	f040 80d1 	bne.w	8002352 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 80021b0:	78fa      	ldrb	r2, [r7, #3]
 80021b2:	6879      	ldr	r1, [r7, #4]
 80021b4:	4613      	mov	r3, r2
 80021b6:	011b      	lsls	r3, r3, #4
 80021b8:	1a9b      	subs	r3, r3, r2
 80021ba:	009b      	lsls	r3, r3, #2
 80021bc:	440b      	add	r3, r1
 80021be:	331b      	adds	r3, #27
 80021c0:	2200      	movs	r2, #0
 80021c2:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80021c4:	78fb      	ldrb	r3, [r7, #3]
 80021c6:	015a      	lsls	r2, r3, #5
 80021c8:	693b      	ldr	r3, [r7, #16]
 80021ca:	4413      	add	r3, r2
 80021cc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	78fa      	ldrb	r2, [r7, #3]
 80021d4:	0151      	lsls	r1, r2, #5
 80021d6:	693a      	ldr	r2, [r7, #16]
 80021d8:	440a      	add	r2, r1
 80021da:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80021de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80021e2:	6053      	str	r3, [r2, #4]
 80021e4:	e0b5      	b.n	8002352 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80021e6:	78fa      	ldrb	r2, [r7, #3]
 80021e8:	6879      	ldr	r1, [r7, #4]
 80021ea:	4613      	mov	r3, r2
 80021ec:	011b      	lsls	r3, r3, #4
 80021ee:	1a9b      	subs	r3, r3, r2
 80021f0:	009b      	lsls	r3, r3, #2
 80021f2:	440b      	add	r3, r1
 80021f4:	334d      	adds	r3, #77	@ 0x4d
 80021f6:	781b      	ldrb	r3, [r3, #0]
 80021f8:	2b05      	cmp	r3, #5
 80021fa:	d114      	bne.n	8002226 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80021fc:	78fa      	ldrb	r2, [r7, #3]
 80021fe:	6879      	ldr	r1, [r7, #4]
 8002200:	4613      	mov	r3, r2
 8002202:	011b      	lsls	r3, r3, #4
 8002204:	1a9b      	subs	r3, r3, r2
 8002206:	009b      	lsls	r3, r3, #2
 8002208:	440b      	add	r3, r1
 800220a:	334d      	adds	r3, #77	@ 0x4d
 800220c:	2202      	movs	r2, #2
 800220e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8002210:	78fa      	ldrb	r2, [r7, #3]
 8002212:	6879      	ldr	r1, [r7, #4]
 8002214:	4613      	mov	r3, r2
 8002216:	011b      	lsls	r3, r3, #4
 8002218:	1a9b      	subs	r3, r3, r2
 800221a:	009b      	lsls	r3, r3, #2
 800221c:	440b      	add	r3, r1
 800221e:	334c      	adds	r3, #76	@ 0x4c
 8002220:	2202      	movs	r2, #2
 8002222:	701a      	strb	r2, [r3, #0]
 8002224:	e095      	b.n	8002352 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8002226:	78fa      	ldrb	r2, [r7, #3]
 8002228:	6879      	ldr	r1, [r7, #4]
 800222a:	4613      	mov	r3, r2
 800222c:	011b      	lsls	r3, r3, #4
 800222e:	1a9b      	subs	r3, r3, r2
 8002230:	009b      	lsls	r3, r3, #2
 8002232:	440b      	add	r3, r1
 8002234:	334d      	adds	r3, #77	@ 0x4d
 8002236:	781b      	ldrb	r3, [r3, #0]
 8002238:	2b06      	cmp	r3, #6
 800223a:	d114      	bne.n	8002266 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800223c:	78fa      	ldrb	r2, [r7, #3]
 800223e:	6879      	ldr	r1, [r7, #4]
 8002240:	4613      	mov	r3, r2
 8002242:	011b      	lsls	r3, r3, #4
 8002244:	1a9b      	subs	r3, r3, r2
 8002246:	009b      	lsls	r3, r3, #2
 8002248:	440b      	add	r3, r1
 800224a:	334d      	adds	r3, #77	@ 0x4d
 800224c:	2202      	movs	r2, #2
 800224e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8002250:	78fa      	ldrb	r2, [r7, #3]
 8002252:	6879      	ldr	r1, [r7, #4]
 8002254:	4613      	mov	r3, r2
 8002256:	011b      	lsls	r3, r3, #4
 8002258:	1a9b      	subs	r3, r3, r2
 800225a:	009b      	lsls	r3, r3, #2
 800225c:	440b      	add	r3, r1
 800225e:	334c      	adds	r3, #76	@ 0x4c
 8002260:	2205      	movs	r2, #5
 8002262:	701a      	strb	r2, [r3, #0]
 8002264:	e075      	b.n	8002352 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002266:	78fa      	ldrb	r2, [r7, #3]
 8002268:	6879      	ldr	r1, [r7, #4]
 800226a:	4613      	mov	r3, r2
 800226c:	011b      	lsls	r3, r3, #4
 800226e:	1a9b      	subs	r3, r3, r2
 8002270:	009b      	lsls	r3, r3, #2
 8002272:	440b      	add	r3, r1
 8002274:	334d      	adds	r3, #77	@ 0x4d
 8002276:	781b      	ldrb	r3, [r3, #0]
 8002278:	2b07      	cmp	r3, #7
 800227a:	d00a      	beq.n	8002292 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 800227c:	78fa      	ldrb	r2, [r7, #3]
 800227e:	6879      	ldr	r1, [r7, #4]
 8002280:	4613      	mov	r3, r2
 8002282:	011b      	lsls	r3, r3, #4
 8002284:	1a9b      	subs	r3, r3, r2
 8002286:	009b      	lsls	r3, r3, #2
 8002288:	440b      	add	r3, r1
 800228a:	334d      	adds	r3, #77	@ 0x4d
 800228c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800228e:	2b09      	cmp	r3, #9
 8002290:	d170      	bne.n	8002374 <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002292:	78fa      	ldrb	r2, [r7, #3]
 8002294:	6879      	ldr	r1, [r7, #4]
 8002296:	4613      	mov	r3, r2
 8002298:	011b      	lsls	r3, r3, #4
 800229a:	1a9b      	subs	r3, r3, r2
 800229c:	009b      	lsls	r3, r3, #2
 800229e:	440b      	add	r3, r1
 80022a0:	334d      	adds	r3, #77	@ 0x4d
 80022a2:	2202      	movs	r2, #2
 80022a4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80022a6:	78fa      	ldrb	r2, [r7, #3]
 80022a8:	6879      	ldr	r1, [r7, #4]
 80022aa:	4613      	mov	r3, r2
 80022ac:	011b      	lsls	r3, r3, #4
 80022ae:	1a9b      	subs	r3, r3, r2
 80022b0:	009b      	lsls	r3, r3, #2
 80022b2:	440b      	add	r3, r1
 80022b4:	3344      	adds	r3, #68	@ 0x44
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	1c59      	adds	r1, r3, #1
 80022ba:	6878      	ldr	r0, [r7, #4]
 80022bc:	4613      	mov	r3, r2
 80022be:	011b      	lsls	r3, r3, #4
 80022c0:	1a9b      	subs	r3, r3, r2
 80022c2:	009b      	lsls	r3, r3, #2
 80022c4:	4403      	add	r3, r0
 80022c6:	3344      	adds	r3, #68	@ 0x44
 80022c8:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80022ca:	78fa      	ldrb	r2, [r7, #3]
 80022cc:	6879      	ldr	r1, [r7, #4]
 80022ce:	4613      	mov	r3, r2
 80022d0:	011b      	lsls	r3, r3, #4
 80022d2:	1a9b      	subs	r3, r3, r2
 80022d4:	009b      	lsls	r3, r3, #2
 80022d6:	440b      	add	r3, r1
 80022d8:	3344      	adds	r3, #68	@ 0x44
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	2b02      	cmp	r3, #2
 80022de:	d914      	bls.n	800230a <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80022e0:	78fa      	ldrb	r2, [r7, #3]
 80022e2:	6879      	ldr	r1, [r7, #4]
 80022e4:	4613      	mov	r3, r2
 80022e6:	011b      	lsls	r3, r3, #4
 80022e8:	1a9b      	subs	r3, r3, r2
 80022ea:	009b      	lsls	r3, r3, #2
 80022ec:	440b      	add	r3, r1
 80022ee:	3344      	adds	r3, #68	@ 0x44
 80022f0:	2200      	movs	r2, #0
 80022f2:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80022f4:	78fa      	ldrb	r2, [r7, #3]
 80022f6:	6879      	ldr	r1, [r7, #4]
 80022f8:	4613      	mov	r3, r2
 80022fa:	011b      	lsls	r3, r3, #4
 80022fc:	1a9b      	subs	r3, r3, r2
 80022fe:	009b      	lsls	r3, r3, #2
 8002300:	440b      	add	r3, r1
 8002302:	334c      	adds	r3, #76	@ 0x4c
 8002304:	2204      	movs	r2, #4
 8002306:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002308:	e022      	b.n	8002350 <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800230a:	78fa      	ldrb	r2, [r7, #3]
 800230c:	6879      	ldr	r1, [r7, #4]
 800230e:	4613      	mov	r3, r2
 8002310:	011b      	lsls	r3, r3, #4
 8002312:	1a9b      	subs	r3, r3, r2
 8002314:	009b      	lsls	r3, r3, #2
 8002316:	440b      	add	r3, r1
 8002318:	334c      	adds	r3, #76	@ 0x4c
 800231a:	2202      	movs	r2, #2
 800231c:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800231e:	78fb      	ldrb	r3, [r7, #3]
 8002320:	015a      	lsls	r2, r3, #5
 8002322:	693b      	ldr	r3, [r7, #16]
 8002324:	4413      	add	r3, r2
 8002326:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002334:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800233c:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800233e:	78fb      	ldrb	r3, [r7, #3]
 8002340:	015a      	lsls	r2, r3, #5
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	4413      	add	r3, r2
 8002346:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800234a:	461a      	mov	r2, r3
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002350:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002352:	78fa      	ldrb	r2, [r7, #3]
 8002354:	6879      	ldr	r1, [r7, #4]
 8002356:	4613      	mov	r3, r2
 8002358:	011b      	lsls	r3, r3, #4
 800235a:	1a9b      	subs	r3, r3, r2
 800235c:	009b      	lsls	r3, r3, #2
 800235e:	440b      	add	r3, r1
 8002360:	334c      	adds	r3, #76	@ 0x4c
 8002362:	781a      	ldrb	r2, [r3, #0]
 8002364:	78fb      	ldrb	r3, [r7, #3]
 8002366:	4619      	mov	r1, r3
 8002368:	6878      	ldr	r0, [r7, #4]
 800236a:	f000 fd3e 	bl	8002dea <HAL_HCD_HC_NotifyURBChange_Callback>
 800236e:	e002      	b.n	8002376 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8002370:	bf00      	nop
 8002372:	e000      	b.n	8002376 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 8002374:	bf00      	nop
  }
}
 8002376:	3718      	adds	r7, #24
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}

0800237c <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b08a      	sub	sp, #40	@ 0x28
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800238a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800238c:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	6a1b      	ldr	r3, [r3, #32]
 8002394:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002396:	69fb      	ldr	r3, [r7, #28]
 8002398:	f003 030f 	and.w	r3, r3, #15
 800239c:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800239e:	69fb      	ldr	r3, [r7, #28]
 80023a0:	0c5b      	lsrs	r3, r3, #17
 80023a2:	f003 030f 	and.w	r3, r3, #15
 80023a6:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80023a8:	69fb      	ldr	r3, [r7, #28]
 80023aa:	091b      	lsrs	r3, r3, #4
 80023ac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80023b0:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80023b2:	697b      	ldr	r3, [r7, #20]
 80023b4:	2b02      	cmp	r3, #2
 80023b6:	d004      	beq.n	80023c2 <HCD_RXQLVL_IRQHandler+0x46>
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	2b05      	cmp	r3, #5
 80023bc:	f000 80b6 	beq.w	800252c <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80023c0:	e0b7      	b.n	8002532 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	f000 80b3 	beq.w	8002530 <HCD_RXQLVL_IRQHandler+0x1b4>
 80023ca:	6879      	ldr	r1, [r7, #4]
 80023cc:	69ba      	ldr	r2, [r7, #24]
 80023ce:	4613      	mov	r3, r2
 80023d0:	011b      	lsls	r3, r3, #4
 80023d2:	1a9b      	subs	r3, r3, r2
 80023d4:	009b      	lsls	r3, r3, #2
 80023d6:	440b      	add	r3, r1
 80023d8:	332c      	adds	r3, #44	@ 0x2c
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	f000 80a7 	beq.w	8002530 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 80023e2:	6879      	ldr	r1, [r7, #4]
 80023e4:	69ba      	ldr	r2, [r7, #24]
 80023e6:	4613      	mov	r3, r2
 80023e8:	011b      	lsls	r3, r3, #4
 80023ea:	1a9b      	subs	r3, r3, r2
 80023ec:	009b      	lsls	r3, r3, #2
 80023ee:	440b      	add	r3, r1
 80023f0:	3338      	adds	r3, #56	@ 0x38
 80023f2:	681a      	ldr	r2, [r3, #0]
 80023f4:	693b      	ldr	r3, [r7, #16]
 80023f6:	18d1      	adds	r1, r2, r3
 80023f8:	6878      	ldr	r0, [r7, #4]
 80023fa:	69ba      	ldr	r2, [r7, #24]
 80023fc:	4613      	mov	r3, r2
 80023fe:	011b      	lsls	r3, r3, #4
 8002400:	1a9b      	subs	r3, r3, r2
 8002402:	009b      	lsls	r3, r3, #2
 8002404:	4403      	add	r3, r0
 8002406:	3334      	adds	r3, #52	@ 0x34
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4299      	cmp	r1, r3
 800240c:	f200 8083 	bhi.w	8002516 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6818      	ldr	r0, [r3, #0]
 8002414:	6879      	ldr	r1, [r7, #4]
 8002416:	69ba      	ldr	r2, [r7, #24]
 8002418:	4613      	mov	r3, r2
 800241a:	011b      	lsls	r3, r3, #4
 800241c:	1a9b      	subs	r3, r3, r2
 800241e:	009b      	lsls	r3, r3, #2
 8002420:	440b      	add	r3, r1
 8002422:	332c      	adds	r3, #44	@ 0x2c
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	693a      	ldr	r2, [r7, #16]
 8002428:	b292      	uxth	r2, r2
 800242a:	4619      	mov	r1, r3
 800242c:	f000 f97a 	bl	8002724 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8002430:	6879      	ldr	r1, [r7, #4]
 8002432:	69ba      	ldr	r2, [r7, #24]
 8002434:	4613      	mov	r3, r2
 8002436:	011b      	lsls	r3, r3, #4
 8002438:	1a9b      	subs	r3, r3, r2
 800243a:	009b      	lsls	r3, r3, #2
 800243c:	440b      	add	r3, r1
 800243e:	332c      	adds	r3, #44	@ 0x2c
 8002440:	681a      	ldr	r2, [r3, #0]
 8002442:	693b      	ldr	r3, [r7, #16]
 8002444:	18d1      	adds	r1, r2, r3
 8002446:	6878      	ldr	r0, [r7, #4]
 8002448:	69ba      	ldr	r2, [r7, #24]
 800244a:	4613      	mov	r3, r2
 800244c:	011b      	lsls	r3, r3, #4
 800244e:	1a9b      	subs	r3, r3, r2
 8002450:	009b      	lsls	r3, r3, #2
 8002452:	4403      	add	r3, r0
 8002454:	332c      	adds	r3, #44	@ 0x2c
 8002456:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8002458:	6879      	ldr	r1, [r7, #4]
 800245a:	69ba      	ldr	r2, [r7, #24]
 800245c:	4613      	mov	r3, r2
 800245e:	011b      	lsls	r3, r3, #4
 8002460:	1a9b      	subs	r3, r3, r2
 8002462:	009b      	lsls	r3, r3, #2
 8002464:	440b      	add	r3, r1
 8002466:	3338      	adds	r3, #56	@ 0x38
 8002468:	681a      	ldr	r2, [r3, #0]
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	18d1      	adds	r1, r2, r3
 800246e:	6878      	ldr	r0, [r7, #4]
 8002470:	69ba      	ldr	r2, [r7, #24]
 8002472:	4613      	mov	r3, r2
 8002474:	011b      	lsls	r3, r3, #4
 8002476:	1a9b      	subs	r3, r3, r2
 8002478:	009b      	lsls	r3, r3, #2
 800247a:	4403      	add	r3, r0
 800247c:	3338      	adds	r3, #56	@ 0x38
 800247e:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002480:	69bb      	ldr	r3, [r7, #24]
 8002482:	015a      	lsls	r2, r3, #5
 8002484:	6a3b      	ldr	r3, [r7, #32]
 8002486:	4413      	add	r3, r2
 8002488:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800248c:	691b      	ldr	r3, [r3, #16]
 800248e:	0cdb      	lsrs	r3, r3, #19
 8002490:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002494:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002496:	6879      	ldr	r1, [r7, #4]
 8002498:	69ba      	ldr	r2, [r7, #24]
 800249a:	4613      	mov	r3, r2
 800249c:	011b      	lsls	r3, r3, #4
 800249e:	1a9b      	subs	r3, r3, r2
 80024a0:	009b      	lsls	r3, r3, #2
 80024a2:	440b      	add	r3, r1
 80024a4:	3328      	adds	r3, #40	@ 0x28
 80024a6:	881b      	ldrh	r3, [r3, #0]
 80024a8:	461a      	mov	r2, r3
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d13f      	bne.n	8002530 <HCD_RXQLVL_IRQHandler+0x1b4>
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d03c      	beq.n	8002530 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 80024b6:	69bb      	ldr	r3, [r7, #24]
 80024b8:	015a      	lsls	r2, r3, #5
 80024ba:	6a3b      	ldr	r3, [r7, #32]
 80024bc:	4413      	add	r3, r2
 80024be:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80024c6:	68bb      	ldr	r3, [r7, #8]
 80024c8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80024cc:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80024ce:	68bb      	ldr	r3, [r7, #8]
 80024d0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80024d4:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 80024d6:	69bb      	ldr	r3, [r7, #24]
 80024d8:	015a      	lsls	r2, r3, #5
 80024da:	6a3b      	ldr	r3, [r7, #32]
 80024dc:	4413      	add	r3, r2
 80024de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80024e2:	461a      	mov	r2, r3
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 80024e8:	6879      	ldr	r1, [r7, #4]
 80024ea:	69ba      	ldr	r2, [r7, #24]
 80024ec:	4613      	mov	r3, r2
 80024ee:	011b      	lsls	r3, r3, #4
 80024f0:	1a9b      	subs	r3, r3, r2
 80024f2:	009b      	lsls	r3, r3, #2
 80024f4:	440b      	add	r3, r1
 80024f6:	333c      	adds	r3, #60	@ 0x3c
 80024f8:	781b      	ldrb	r3, [r3, #0]
 80024fa:	f083 0301 	eor.w	r3, r3, #1
 80024fe:	b2d8      	uxtb	r0, r3
 8002500:	6879      	ldr	r1, [r7, #4]
 8002502:	69ba      	ldr	r2, [r7, #24]
 8002504:	4613      	mov	r3, r2
 8002506:	011b      	lsls	r3, r3, #4
 8002508:	1a9b      	subs	r3, r3, r2
 800250a:	009b      	lsls	r3, r3, #2
 800250c:	440b      	add	r3, r1
 800250e:	333c      	adds	r3, #60	@ 0x3c
 8002510:	4602      	mov	r2, r0
 8002512:	701a      	strb	r2, [r3, #0]
      break;
 8002514:	e00c      	b.n	8002530 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8002516:	6879      	ldr	r1, [r7, #4]
 8002518:	69ba      	ldr	r2, [r7, #24]
 800251a:	4613      	mov	r3, r2
 800251c:	011b      	lsls	r3, r3, #4
 800251e:	1a9b      	subs	r3, r3, r2
 8002520:	009b      	lsls	r3, r3, #2
 8002522:	440b      	add	r3, r1
 8002524:	334c      	adds	r3, #76	@ 0x4c
 8002526:	2204      	movs	r2, #4
 8002528:	701a      	strb	r2, [r3, #0]
      break;
 800252a:	e001      	b.n	8002530 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 800252c:	bf00      	nop
 800252e:	e000      	b.n	8002532 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8002530:	bf00      	nop
  }
}
 8002532:	bf00      	nop
 8002534:	3728      	adds	r7, #40	@ 0x28
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}

0800253a <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800253a:	b580      	push	{r7, lr}
 800253c:	b086      	sub	sp, #24
 800253e:	af00      	add	r7, sp, #0
 8002540:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800254c:	693b      	ldr	r3, [r7, #16]
 800254e:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8002566:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	f003 0302 	and.w	r3, r3, #2
 800256e:	2b02      	cmp	r3, #2
 8002570:	d10b      	bne.n	800258a <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	f003 0301 	and.w	r3, r3, #1
 8002578:	2b01      	cmp	r3, #1
 800257a:	d102      	bne.n	8002582 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800257c:	6878      	ldr	r0, [r7, #4]
 800257e:	f000 fc18 	bl	8002db2 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8002582:	68bb      	ldr	r3, [r7, #8]
 8002584:	f043 0302 	orr.w	r3, r3, #2
 8002588:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	f003 0308 	and.w	r3, r3, #8
 8002590:	2b08      	cmp	r3, #8
 8002592:	d132      	bne.n	80025fa <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	f043 0308 	orr.w	r3, r3, #8
 800259a:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	f003 0304 	and.w	r3, r3, #4
 80025a2:	2b04      	cmp	r3, #4
 80025a4:	d126      	bne.n	80025f4 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	7a5b      	ldrb	r3, [r3, #9]
 80025aa:	2b02      	cmp	r3, #2
 80025ac:	d113      	bne.n	80025d6 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 80025b4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80025b8:	d106      	bne.n	80025c8 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	2102      	movs	r1, #2
 80025c0:	4618      	mov	r0, r3
 80025c2:	f000 f949 	bl	8002858 <USB_InitFSLSPClkSel>
 80025c6:	e011      	b.n	80025ec <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	2101      	movs	r1, #1
 80025ce:	4618      	mov	r0, r3
 80025d0:	f000 f942 	bl	8002858 <USB_InitFSLSPClkSel>
 80025d4:	e00a      	b.n	80025ec <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	79db      	ldrb	r3, [r3, #7]
 80025da:	2b01      	cmp	r3, #1
 80025dc:	d106      	bne.n	80025ec <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 80025de:	693b      	ldr	r3, [r7, #16]
 80025e0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80025e4:	461a      	mov	r2, r3
 80025e6:	f64e 2360 	movw	r3, #60000	@ 0xea60
 80025ea:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80025ec:	6878      	ldr	r0, [r7, #4]
 80025ee:	f000 fc0a 	bl	8002e06 <HAL_HCD_PortEnabled_Callback>
 80025f2:	e002      	b.n	80025fa <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80025f4:	6878      	ldr	r0, [r7, #4]
 80025f6:	f000 fc14 	bl	8002e22 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	f003 0320 	and.w	r3, r3, #32
 8002600:	2b20      	cmp	r3, #32
 8002602:	d103      	bne.n	800260c <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	f043 0320 	orr.w	r3, r3, #32
 800260a:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800260c:	693b      	ldr	r3, [r7, #16]
 800260e:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8002612:	461a      	mov	r2, r3
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	6013      	str	r3, [r2, #0]
}
 8002618:	bf00      	nop
 800261a:	3718      	adds	r7, #24
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}

08002620 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002620:	b480      	push	{r7}
 8002622:	b083      	sub	sp, #12
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	f043 0201 	orr.w	r2, r3, #1
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002634:	2300      	movs	r3, #0
}
 8002636:	4618      	mov	r0, r3
 8002638:	370c      	adds	r7, #12
 800263a:	46bd      	mov	sp, r7
 800263c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002640:	4770      	bx	lr

08002642 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002642:	b480      	push	{r7}
 8002644:	b083      	sub	sp, #12
 8002646:	af00      	add	r7, sp, #0
 8002648:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	689b      	ldr	r3, [r3, #8]
 800264e:	f023 0201 	bic.w	r2, r3, #1
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002656:	2300      	movs	r3, #0
}
 8002658:	4618      	mov	r0, r3
 800265a:	370c      	adds	r7, #12
 800265c:	46bd      	mov	sp, r7
 800265e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002662:	4770      	bx	lr

08002664 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8002664:	b480      	push	{r7}
 8002666:	b085      	sub	sp, #20
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
 800266c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800266e:	2300      	movs	r3, #0
 8002670:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	3301      	adds	r3, #1
 8002676:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800267e:	d901      	bls.n	8002684 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8002680:	2303      	movs	r3, #3
 8002682:	e01b      	b.n	80026bc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	691b      	ldr	r3, [r3, #16]
 8002688:	2b00      	cmp	r3, #0
 800268a:	daf2      	bge.n	8002672 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800268c:	2300      	movs	r3, #0
 800268e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	019b      	lsls	r3, r3, #6
 8002694:	f043 0220 	orr.w	r2, r3, #32
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	3301      	adds	r3, #1
 80026a0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80026a8:	d901      	bls.n	80026ae <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80026aa:	2303      	movs	r3, #3
 80026ac:	e006      	b.n	80026bc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	691b      	ldr	r3, [r3, #16]
 80026b2:	f003 0320 	and.w	r3, r3, #32
 80026b6:	2b20      	cmp	r3, #32
 80026b8:	d0f0      	beq.n	800269c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80026ba:	2300      	movs	r3, #0
}
 80026bc:	4618      	mov	r0, r3
 80026be:	3714      	adds	r7, #20
 80026c0:	46bd      	mov	sp, r7
 80026c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c6:	4770      	bx	lr

080026c8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b085      	sub	sp, #20
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80026d0:	2300      	movs	r3, #0
 80026d2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	3301      	adds	r3, #1
 80026d8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80026e0:	d901      	bls.n	80026e6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80026e2:	2303      	movs	r3, #3
 80026e4:	e018      	b.n	8002718 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	691b      	ldr	r3, [r3, #16]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	daf2      	bge.n	80026d4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80026ee:	2300      	movs	r3, #0
 80026f0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2210      	movs	r2, #16
 80026f6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	3301      	adds	r3, #1
 80026fc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8002704:	d901      	bls.n	800270a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8002706:	2303      	movs	r3, #3
 8002708:	e006      	b.n	8002718 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	691b      	ldr	r3, [r3, #16]
 800270e:	f003 0310 	and.w	r3, r3, #16
 8002712:	2b10      	cmp	r3, #16
 8002714:	d0f0      	beq.n	80026f8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8002716:	2300      	movs	r3, #0
}
 8002718:	4618      	mov	r0, r3
 800271a:	3714      	adds	r7, #20
 800271c:	46bd      	mov	sp, r7
 800271e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002722:	4770      	bx	lr

08002724 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8002724:	b480      	push	{r7}
 8002726:	b08b      	sub	sp, #44	@ 0x2c
 8002728:	af00      	add	r7, sp, #0
 800272a:	60f8      	str	r0, [r7, #12]
 800272c:	60b9      	str	r1, [r7, #8]
 800272e:	4613      	mov	r3, r2
 8002730:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8002736:	68bb      	ldr	r3, [r7, #8]
 8002738:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800273a:	88fb      	ldrh	r3, [r7, #6]
 800273c:	089b      	lsrs	r3, r3, #2
 800273e:	b29b      	uxth	r3, r3
 8002740:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8002742:	88fb      	ldrh	r3, [r7, #6]
 8002744:	f003 0303 	and.w	r3, r3, #3
 8002748:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800274a:	2300      	movs	r3, #0
 800274c:	623b      	str	r3, [r7, #32]
 800274e:	e014      	b.n	800277a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8002750:	69bb      	ldr	r3, [r7, #24]
 8002752:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002756:	681a      	ldr	r2, [r3, #0]
 8002758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800275a:	601a      	str	r2, [r3, #0]
    pDest++;
 800275c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800275e:	3301      	adds	r3, #1
 8002760:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8002762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002764:	3301      	adds	r3, #1
 8002766:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8002768:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800276a:	3301      	adds	r3, #1
 800276c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800276e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002770:	3301      	adds	r3, #1
 8002772:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8002774:	6a3b      	ldr	r3, [r7, #32]
 8002776:	3301      	adds	r3, #1
 8002778:	623b      	str	r3, [r7, #32]
 800277a:	6a3a      	ldr	r2, [r7, #32]
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	429a      	cmp	r2, r3
 8002780:	d3e6      	bcc.n	8002750 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8002782:	8bfb      	ldrh	r3, [r7, #30]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d01e      	beq.n	80027c6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8002788:	2300      	movs	r3, #0
 800278a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800278c:	69bb      	ldr	r3, [r7, #24]
 800278e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002792:	461a      	mov	r2, r3
 8002794:	f107 0310 	add.w	r3, r7, #16
 8002798:	6812      	ldr	r2, [r2, #0]
 800279a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800279c:	693a      	ldr	r2, [r7, #16]
 800279e:	6a3b      	ldr	r3, [r7, #32]
 80027a0:	b2db      	uxtb	r3, r3
 80027a2:	00db      	lsls	r3, r3, #3
 80027a4:	fa22 f303 	lsr.w	r3, r2, r3
 80027a8:	b2da      	uxtb	r2, r3
 80027aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027ac:	701a      	strb	r2, [r3, #0]
      i++;
 80027ae:	6a3b      	ldr	r3, [r7, #32]
 80027b0:	3301      	adds	r3, #1
 80027b2:	623b      	str	r3, [r7, #32]
      pDest++;
 80027b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027b6:	3301      	adds	r3, #1
 80027b8:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80027ba:	8bfb      	ldrh	r3, [r7, #30]
 80027bc:	3b01      	subs	r3, #1
 80027be:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80027c0:	8bfb      	ldrh	r3, [r7, #30]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d1ea      	bne.n	800279c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80027c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	372c      	adds	r7, #44	@ 0x2c
 80027cc:	46bd      	mov	sp, r7
 80027ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d2:	4770      	bx	lr

080027d4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b085      	sub	sp, #20
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	695b      	ldr	r3, [r3, #20]
 80027e0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	699b      	ldr	r3, [r3, #24]
 80027e6:	68fa      	ldr	r2, [r7, #12]
 80027e8:	4013      	ands	r3, r2
 80027ea:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80027ec:	68fb      	ldr	r3, [r7, #12]
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	3714      	adds	r7, #20
 80027f2:	46bd      	mov	sp, r7
 80027f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f8:	4770      	bx	lr

080027fa <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 80027fa:	b480      	push	{r7}
 80027fc:	b085      	sub	sp, #20
 80027fe:	af00      	add	r7, sp, #0
 8002800:	6078      	str	r0, [r7, #4]
 8002802:	460b      	mov	r3, r1
 8002804:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 800280a:	78fb      	ldrb	r3, [r7, #3]
 800280c:	015a      	lsls	r2, r3, #5
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	4413      	add	r3, r2
 8002812:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002816:	689b      	ldr	r3, [r3, #8]
 8002818:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 800281a:	78fb      	ldrb	r3, [r7, #3]
 800281c:	015a      	lsls	r2, r3, #5
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	4413      	add	r3, r2
 8002822:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002826:	68db      	ldr	r3, [r3, #12]
 8002828:	68ba      	ldr	r2, [r7, #8]
 800282a:	4013      	ands	r3, r2
 800282c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800282e:	68bb      	ldr	r3, [r7, #8]
}
 8002830:	4618      	mov	r0, r3
 8002832:	3714      	adds	r7, #20
 8002834:	46bd      	mov	sp, r7
 8002836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283a:	4770      	bx	lr

0800283c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800283c:	b480      	push	{r7}
 800283e:	b083      	sub	sp, #12
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	695b      	ldr	r3, [r3, #20]
 8002848:	f003 0301 	and.w	r3, r3, #1
}
 800284c:	4618      	mov	r0, r3
 800284e:	370c      	adds	r7, #12
 8002850:	46bd      	mov	sp, r7
 8002852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002856:	4770      	bx	lr

08002858 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8002858:	b480      	push	{r7}
 800285a:	b085      	sub	sp, #20
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
 8002860:	460b      	mov	r3, r1
 8002862:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	68fa      	ldr	r2, [r7, #12]
 8002872:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002876:	f023 0303 	bic.w	r3, r3, #3
 800287a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002882:	681a      	ldr	r2, [r3, #0]
 8002884:	78fb      	ldrb	r3, [r7, #3]
 8002886:	f003 0303 	and.w	r3, r3, #3
 800288a:	68f9      	ldr	r1, [r7, #12]
 800288c:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8002890:	4313      	orrs	r3, r2
 8002892:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8002894:	78fb      	ldrb	r3, [r7, #3]
 8002896:	2b01      	cmp	r3, #1
 8002898:	d107      	bne.n	80028aa <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80028a0:	461a      	mov	r2, r3
 80028a2:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80028a6:	6053      	str	r3, [r2, #4]
 80028a8:	e00c      	b.n	80028c4 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 80028aa:	78fb      	ldrb	r3, [r7, #3]
 80028ac:	2b02      	cmp	r3, #2
 80028ae:	d107      	bne.n	80028c0 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80028b6:	461a      	mov	r2, r3
 80028b8:	f241 7370 	movw	r3, #6000	@ 0x1770
 80028bc:	6053      	str	r3, [r2, #4]
 80028be:	e001      	b.n	80028c4 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 80028c0:	2301      	movs	r3, #1
 80028c2:	e000      	b.n	80028c6 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 80028c4:	2300      	movs	r3, #0
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	3714      	adds	r7, #20
 80028ca:	46bd      	mov	sp, r7
 80028cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d0:	4770      	bx	lr

080028d2 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80028d2:	b480      	push	{r7}
 80028d4:	b085      	sub	sp, #20
 80028d6:	af00      	add	r7, sp, #0
 80028d8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80028e4:	695b      	ldr	r3, [r3, #20]
 80028e6:	b29b      	uxth	r3, r3
}
 80028e8:	4618      	mov	r0, r3
 80028ea:	3714      	adds	r7, #20
 80028ec:	46bd      	mov	sp, r7
 80028ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f2:	4770      	bx	lr

080028f4 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b089      	sub	sp, #36	@ 0x24
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
 80028fc:	460b      	mov	r3, r1
 80028fe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8002904:	78fb      	ldrb	r3, [r7, #3]
 8002906:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8002908:	2300      	movs	r3, #0
 800290a:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800290c:	69bb      	ldr	r3, [r7, #24]
 800290e:	015a      	lsls	r2, r3, #5
 8002910:	69fb      	ldr	r3, [r7, #28]
 8002912:	4413      	add	r3, r2
 8002914:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	0c9b      	lsrs	r3, r3, #18
 800291c:	f003 0303 	and.w	r3, r3, #3
 8002920:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8002922:	69bb      	ldr	r3, [r7, #24]
 8002924:	015a      	lsls	r2, r3, #5
 8002926:	69fb      	ldr	r3, [r7, #28]
 8002928:	4413      	add	r3, r2
 800292a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	0fdb      	lsrs	r3, r3, #31
 8002932:	f003 0301 	and.w	r3, r3, #1
 8002936:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8002938:	69bb      	ldr	r3, [r7, #24]
 800293a:	015a      	lsls	r2, r3, #5
 800293c:	69fb      	ldr	r3, [r7, #28]
 800293e:	4413      	add	r3, r2
 8002940:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	0fdb      	lsrs	r3, r3, #31
 8002948:	f003 0301 	and.w	r3, r3, #1
 800294c:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	689b      	ldr	r3, [r3, #8]
 8002952:	f003 0320 	and.w	r3, r3, #32
 8002956:	2b20      	cmp	r3, #32
 8002958:	d10d      	bne.n	8002976 <USB_HC_Halt+0x82>
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d10a      	bne.n	8002976 <USB_HC_Halt+0x82>
 8002960:	693b      	ldr	r3, [r7, #16]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d005      	beq.n	8002972 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	2b01      	cmp	r3, #1
 800296a:	d002      	beq.n	8002972 <USB_HC_Halt+0x7e>
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	2b03      	cmp	r3, #3
 8002970:	d101      	bne.n	8002976 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8002972:	2300      	movs	r3, #0
 8002974:	e0d8      	b.n	8002b28 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d002      	beq.n	8002982 <USB_HC_Halt+0x8e>
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	2b02      	cmp	r3, #2
 8002980:	d173      	bne.n	8002a6a <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8002982:	69bb      	ldr	r3, [r7, #24]
 8002984:	015a      	lsls	r2, r3, #5
 8002986:	69fb      	ldr	r3, [r7, #28]
 8002988:	4413      	add	r3, r2
 800298a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	69ba      	ldr	r2, [r7, #24]
 8002992:	0151      	lsls	r1, r2, #5
 8002994:	69fa      	ldr	r2, [r7, #28]
 8002996:	440a      	add	r2, r1
 8002998:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800299c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80029a0:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	689b      	ldr	r3, [r3, #8]
 80029a6:	f003 0320 	and.w	r3, r3, #32
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d14a      	bne.n	8002a44 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029b2:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d133      	bne.n	8002a22 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80029ba:	69bb      	ldr	r3, [r7, #24]
 80029bc:	015a      	lsls	r2, r3, #5
 80029be:	69fb      	ldr	r3, [r7, #28]
 80029c0:	4413      	add	r3, r2
 80029c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	69ba      	ldr	r2, [r7, #24]
 80029ca:	0151      	lsls	r1, r2, #5
 80029cc:	69fa      	ldr	r2, [r7, #28]
 80029ce:	440a      	add	r2, r1
 80029d0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80029d4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80029d8:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80029da:	69bb      	ldr	r3, [r7, #24]
 80029dc:	015a      	lsls	r2, r3, #5
 80029de:	69fb      	ldr	r3, [r7, #28]
 80029e0:	4413      	add	r3, r2
 80029e2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	69ba      	ldr	r2, [r7, #24]
 80029ea:	0151      	lsls	r1, r2, #5
 80029ec:	69fa      	ldr	r2, [r7, #28]
 80029ee:	440a      	add	r2, r1
 80029f0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80029f4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80029f8:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	3301      	adds	r3, #1
 80029fe:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8002a00:	68bb      	ldr	r3, [r7, #8]
 8002a02:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002a06:	d82e      	bhi.n	8002a66 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8002a08:	69bb      	ldr	r3, [r7, #24]
 8002a0a:	015a      	lsls	r2, r3, #5
 8002a0c:	69fb      	ldr	r3, [r7, #28]
 8002a0e:	4413      	add	r3, r2
 8002a10:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002a1a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002a1e:	d0ec      	beq.n	80029fa <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8002a20:	e081      	b.n	8002b26 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8002a22:	69bb      	ldr	r3, [r7, #24]
 8002a24:	015a      	lsls	r2, r3, #5
 8002a26:	69fb      	ldr	r3, [r7, #28]
 8002a28:	4413      	add	r3, r2
 8002a2a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	69ba      	ldr	r2, [r7, #24]
 8002a32:	0151      	lsls	r1, r2, #5
 8002a34:	69fa      	ldr	r2, [r7, #28]
 8002a36:	440a      	add	r2, r1
 8002a38:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002a3c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002a40:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8002a42:	e070      	b.n	8002b26 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8002a44:	69bb      	ldr	r3, [r7, #24]
 8002a46:	015a      	lsls	r2, r3, #5
 8002a48:	69fb      	ldr	r3, [r7, #28]
 8002a4a:	4413      	add	r3, r2
 8002a4c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	69ba      	ldr	r2, [r7, #24]
 8002a54:	0151      	lsls	r1, r2, #5
 8002a56:	69fa      	ldr	r2, [r7, #28]
 8002a58:	440a      	add	r2, r1
 8002a5a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002a5e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002a62:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8002a64:	e05f      	b.n	8002b26 <USB_HC_Halt+0x232>
            break;
 8002a66:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8002a68:	e05d      	b.n	8002b26 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8002a6a:	69bb      	ldr	r3, [r7, #24]
 8002a6c:	015a      	lsls	r2, r3, #5
 8002a6e:	69fb      	ldr	r3, [r7, #28]
 8002a70:	4413      	add	r3, r2
 8002a72:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	69ba      	ldr	r2, [r7, #24]
 8002a7a:	0151      	lsls	r1, r2, #5
 8002a7c:	69fa      	ldr	r2, [r7, #28]
 8002a7e:	440a      	add	r2, r1
 8002a80:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002a84:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002a88:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8002a8a:	69fb      	ldr	r3, [r7, #28]
 8002a8c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002a90:	691b      	ldr	r3, [r3, #16]
 8002a92:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d133      	bne.n	8002b02 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8002a9a:	69bb      	ldr	r3, [r7, #24]
 8002a9c:	015a      	lsls	r2, r3, #5
 8002a9e:	69fb      	ldr	r3, [r7, #28]
 8002aa0:	4413      	add	r3, r2
 8002aa2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	69ba      	ldr	r2, [r7, #24]
 8002aaa:	0151      	lsls	r1, r2, #5
 8002aac:	69fa      	ldr	r2, [r7, #28]
 8002aae:	440a      	add	r2, r1
 8002ab0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002ab4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002ab8:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8002aba:	69bb      	ldr	r3, [r7, #24]
 8002abc:	015a      	lsls	r2, r3, #5
 8002abe:	69fb      	ldr	r3, [r7, #28]
 8002ac0:	4413      	add	r3, r2
 8002ac2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	69ba      	ldr	r2, [r7, #24]
 8002aca:	0151      	lsls	r1, r2, #5
 8002acc:	69fa      	ldr	r2, [r7, #28]
 8002ace:	440a      	add	r2, r1
 8002ad0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002ad4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002ad8:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	3301      	adds	r3, #1
 8002ade:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8002ae0:	68bb      	ldr	r3, [r7, #8]
 8002ae2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002ae6:	d81d      	bhi.n	8002b24 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8002ae8:	69bb      	ldr	r3, [r7, #24]
 8002aea:	015a      	lsls	r2, r3, #5
 8002aec:	69fb      	ldr	r3, [r7, #28]
 8002aee:	4413      	add	r3, r2
 8002af0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002afa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002afe:	d0ec      	beq.n	8002ada <USB_HC_Halt+0x1e6>
 8002b00:	e011      	b.n	8002b26 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8002b02:	69bb      	ldr	r3, [r7, #24]
 8002b04:	015a      	lsls	r2, r3, #5
 8002b06:	69fb      	ldr	r3, [r7, #28]
 8002b08:	4413      	add	r3, r2
 8002b0a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	69ba      	ldr	r2, [r7, #24]
 8002b12:	0151      	lsls	r1, r2, #5
 8002b14:	69fa      	ldr	r2, [r7, #28]
 8002b16:	440a      	add	r2, r1
 8002b18:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002b1c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002b20:	6013      	str	r3, [r2, #0]
 8002b22:	e000      	b.n	8002b26 <USB_HC_Halt+0x232>
          break;
 8002b24:	bf00      	nop
    }
  }

  return HAL_OK;
 8002b26:	2300      	movs	r3, #0
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	3724      	adds	r7, #36	@ 0x24
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b32:	4770      	bx	lr

08002b34 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b088      	sub	sp, #32
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8002b44:	2300      	movs	r3, #0
 8002b46:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8002b48:	6878      	ldr	r0, [r7, #4]
 8002b4a:	f7ff fd7a 	bl	8002642 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8002b4e:	2110      	movs	r1, #16
 8002b50:	6878      	ldr	r0, [r7, #4]
 8002b52:	f7ff fd87 	bl	8002664 <USB_FlushTxFifo>
 8002b56:	4603      	mov	r3, r0
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d001      	beq.n	8002b60 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8002b60:	6878      	ldr	r0, [r7, #4]
 8002b62:	f7ff fdb1 	bl	80026c8 <USB_FlushRxFifo>
 8002b66:	4603      	mov	r3, r0
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d001      	beq.n	8002b70 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8002b70:	2300      	movs	r3, #0
 8002b72:	61bb      	str	r3, [r7, #24]
 8002b74:	e01f      	b.n	8002bb6 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8002b76:	69bb      	ldr	r3, [r7, #24]
 8002b78:	015a      	lsls	r2, r3, #5
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	4413      	add	r3, r2
 8002b7e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8002b86:	693b      	ldr	r3, [r7, #16]
 8002b88:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002b8c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002b94:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8002b96:	693b      	ldr	r3, [r7, #16]
 8002b98:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8002b9c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8002b9e:	69bb      	ldr	r3, [r7, #24]
 8002ba0:	015a      	lsls	r2, r3, #5
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	4413      	add	r3, r2
 8002ba6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002baa:	461a      	mov	r2, r3
 8002bac:	693b      	ldr	r3, [r7, #16]
 8002bae:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8002bb0:	69bb      	ldr	r3, [r7, #24]
 8002bb2:	3301      	adds	r3, #1
 8002bb4:	61bb      	str	r3, [r7, #24]
 8002bb6:	69bb      	ldr	r3, [r7, #24]
 8002bb8:	2b0f      	cmp	r3, #15
 8002bba:	d9dc      	bls.n	8002b76 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	61bb      	str	r3, [r7, #24]
 8002bc0:	e034      	b.n	8002c2c <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8002bc2:	69bb      	ldr	r3, [r7, #24]
 8002bc4:	015a      	lsls	r2, r3, #5
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	4413      	add	r3, r2
 8002bca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8002bd2:	693b      	ldr	r3, [r7, #16]
 8002bd4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002bd8:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8002bda:	693b      	ldr	r3, [r7, #16]
 8002bdc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002be0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8002be2:	693b      	ldr	r3, [r7, #16]
 8002be4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8002be8:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8002bea:	69bb      	ldr	r3, [r7, #24]
 8002bec:	015a      	lsls	r2, r3, #5
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	4413      	add	r3, r2
 8002bf2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002bf6:	461a      	mov	r2, r3
 8002bf8:	693b      	ldr	r3, [r7, #16]
 8002bfa:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	3301      	adds	r3, #1
 8002c00:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002c08:	d80c      	bhi.n	8002c24 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8002c0a:	69bb      	ldr	r3, [r7, #24]
 8002c0c:	015a      	lsls	r2, r3, #5
 8002c0e:	697b      	ldr	r3, [r7, #20]
 8002c10:	4413      	add	r3, r2
 8002c12:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002c1c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002c20:	d0ec      	beq.n	8002bfc <USB_StopHost+0xc8>
 8002c22:	e000      	b.n	8002c26 <USB_StopHost+0xf2>
        break;
 8002c24:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8002c26:	69bb      	ldr	r3, [r7, #24]
 8002c28:	3301      	adds	r3, #1
 8002c2a:	61bb      	str	r3, [r7, #24]
 8002c2c:	69bb      	ldr	r3, [r7, #24]
 8002c2e:	2b0f      	cmp	r3, #15
 8002c30:	d9c7      	bls.n	8002bc2 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8002c32:	697b      	ldr	r3, [r7, #20]
 8002c34:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002c38:	461a      	mov	r2, r3
 8002c3a:	f04f 33ff 	mov.w	r3, #4294967295
 8002c3e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	f04f 32ff 	mov.w	r2, #4294967295
 8002c46:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8002c48:	6878      	ldr	r0, [r7, #4]
 8002c4a:	f7ff fce9 	bl	8002620 <USB_EnableGlobalInt>

  return ret;
 8002c4e:	7ffb      	ldrb	r3, [r7, #31]
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	3720      	adds	r7, #32
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bd80      	pop	{r7, pc}

08002c58 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b082      	sub	sp, #8
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8002c66:	1c5a      	adds	r2, r3, #1
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 8002c6e:	6878      	ldr	r0, [r7, #4]
 8002c70:	f000 f804 	bl	8002c7c <USBH_HandleSof>
}
 8002c74:	bf00      	nop
 8002c76:	3708      	adds	r7, #8
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd80      	pop	{r7, pc}

08002c7c <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b082      	sub	sp, #8
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	781b      	ldrb	r3, [r3, #0]
 8002c88:	b2db      	uxtb	r3, r3
 8002c8a:	2b0b      	cmp	r3, #11
 8002c8c:	d10a      	bne.n	8002ca4 <USBH_HandleSof+0x28>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d005      	beq.n	8002ca4 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8002c9e:	699b      	ldr	r3, [r3, #24]
 8002ca0:	6878      	ldr	r0, [r7, #4]
 8002ca2:	4798      	blx	r3
  }
}
 8002ca4:	bf00      	nop
 8002ca6:	3708      	adds	r7, #8
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bd80      	pop	{r7, pc}

08002cac <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8002cac:	b480      	push	{r7}
 8002cae:	b083      	sub	sp, #12
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8002cbc:	bf00      	nop
}
 8002cbe:	370c      	adds	r7, #12
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc6:	4770      	bx	lr

08002cc8 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b083      	sub	sp, #12
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 8002cd8:	bf00      	nop
}
 8002cda:	370c      	adds	r7, #12
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce2:	4770      	bx	lr

08002ce4 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b083      	sub	sp, #12
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2201      	movs	r2, #1
 8002cf0:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8002d04:	2300      	movs	r3, #0
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	370c      	adds	r7, #12
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d10:	4770      	bx	lr

08002d12 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8002d12:	b580      	push	{r7, lr}
 8002d14:	b082      	sub	sp, #8
 8002d16:	af00      	add	r7, sp, #0
 8002d18:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2201      	movs	r2, #1
 8002d1e:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2200      	movs	r2, #0
 8002d26:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8002d32:	6878      	ldr	r0, [r7, #4]
 8002d34:	f000 f883 	bl	8002e3e <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	791b      	ldrb	r3, [r3, #4]
 8002d3c:	4619      	mov	r1, r3
 8002d3e:	6878      	ldr	r0, [r7, #4]
 8002d40:	f000 f80b 	bl	8002d5a <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	795b      	ldrb	r3, [r3, #5]
 8002d48:	4619      	mov	r1, r3
 8002d4a:	6878      	ldr	r0, [r7, #4]
 8002d4c:	f000 f805 	bl	8002d5a <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8002d50:	2300      	movs	r3, #0
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	3708      	adds	r7, #8
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}

08002d5a <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8002d5a:	b480      	push	{r7}
 8002d5c:	b083      	sub	sp, #12
 8002d5e:	af00      	add	r7, sp, #0
 8002d60:	6078      	str	r0, [r7, #4]
 8002d62:	460b      	mov	r3, r1
 8002d64:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8002d66:	78fb      	ldrb	r3, [r7, #3]
 8002d68:	2b0f      	cmp	r3, #15
 8002d6a:	d80d      	bhi.n	8002d88 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8002d6c:	78fb      	ldrb	r3, [r7, #3]
 8002d6e:	687a      	ldr	r2, [r7, #4]
 8002d70:	33e0      	adds	r3, #224	@ 0xe0
 8002d72:	009b      	lsls	r3, r3, #2
 8002d74:	4413      	add	r3, r2
 8002d76:	685a      	ldr	r2, [r3, #4]
 8002d78:	78fb      	ldrb	r3, [r7, #3]
 8002d7a:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8002d7e:	6879      	ldr	r1, [r7, #4]
 8002d80:	33e0      	adds	r3, #224	@ 0xe0
 8002d82:	009b      	lsls	r3, r3, #2
 8002d84:	440b      	add	r3, r1
 8002d86:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8002d88:	2300      	movs	r3, #0
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	370c      	adds	r7, #12
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d94:	4770      	bx	lr

08002d96 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8002d96:	b580      	push	{r7, lr}
 8002d98:	b082      	sub	sp, #8
 8002d9a:	af00      	add	r7, sp, #0
 8002d9c:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8002da4:	4618      	mov	r0, r3
 8002da6:	f7ff ff57 	bl	8002c58 <USBH_LL_IncTimer>
}
 8002daa:	bf00      	nop
 8002dac:	3708      	adds	r7, #8
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}

08002db2 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8002db2:	b580      	push	{r7, lr}
 8002db4:	b082      	sub	sp, #8
 8002db6:	af00      	add	r7, sp, #0
 8002db8:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	f7ff ff8f 	bl	8002ce4 <USBH_LL_Connect>
}
 8002dc6:	bf00      	nop
 8002dc8:	3708      	adds	r7, #8
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}

08002dce <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8002dce:	b580      	push	{r7, lr}
 8002dd0:	b082      	sub	sp, #8
 8002dd2:	af00      	add	r7, sp, #0
 8002dd4:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f7ff ff98 	bl	8002d12 <USBH_LL_Disconnect>
}
 8002de2:	bf00      	nop
 8002de4:	3708      	adds	r7, #8
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}

08002dea <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8002dea:	b480      	push	{r7}
 8002dec:	b083      	sub	sp, #12
 8002dee:	af00      	add	r7, sp, #0
 8002df0:	6078      	str	r0, [r7, #4]
 8002df2:	460b      	mov	r3, r1
 8002df4:	70fb      	strb	r3, [r7, #3]
 8002df6:	4613      	mov	r3, r2
 8002df8:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8002dfa:	bf00      	nop
 8002dfc:	370c      	adds	r7, #12
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e04:	4770      	bx	lr

08002e06 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8002e06:	b580      	push	{r7, lr}
 8002e08:	b082      	sub	sp, #8
 8002e0a:	af00      	add	r7, sp, #0
 8002e0c:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8002e14:	4618      	mov	r0, r3
 8002e16:	f7ff ff49 	bl	8002cac <USBH_LL_PortEnabled>
}
 8002e1a:	bf00      	nop
 8002e1c:	3708      	adds	r7, #8
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}

08002e22 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8002e22:	b580      	push	{r7, lr}
 8002e24:	b082      	sub	sp, #8
 8002e26:	af00      	add	r7, sp, #0
 8002e28:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8002e30:	4618      	mov	r0, r3
 8002e32:	f7ff ff49 	bl	8002cc8 <USBH_LL_PortDisabled>
}
 8002e36:	bf00      	nop
 8002e38:	3708      	adds	r7, #8
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}

08002e3e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8002e3e:	b580      	push	{r7, lr}
 8002e40:	b084      	sub	sp, #16
 8002e42:	af00      	add	r7, sp, #0
 8002e44:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8002e46:	2300      	movs	r3, #0
 8002e48:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8002e54:	4618      	mov	r0, r3
 8002e56:	f7fd ff4c 	bl	8000cf2 <HAL_HCD_Stop>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8002e5e:	7bfb      	ldrb	r3, [r7, #15]
 8002e60:	4618      	mov	r0, r3
 8002e62:	f000 f807 	bl	8002e74 <USBH_Get_USB_Status>
 8002e66:	4603      	mov	r3, r0
 8002e68:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8002e6a:	7bbb      	ldrb	r3, [r7, #14]
}
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	3710      	adds	r7, #16
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bd80      	pop	{r7, pc}

08002e74 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8002e74:	b480      	push	{r7}
 8002e76:	b085      	sub	sp, #20
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8002e82:	79fb      	ldrb	r3, [r7, #7]
 8002e84:	2b03      	cmp	r3, #3
 8002e86:	d817      	bhi.n	8002eb8 <USBH_Get_USB_Status+0x44>
 8002e88:	a201      	add	r2, pc, #4	@ (adr r2, 8002e90 <USBH_Get_USB_Status+0x1c>)
 8002e8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e8e:	bf00      	nop
 8002e90:	08002ea1 	.word	0x08002ea1
 8002e94:	08002ea7 	.word	0x08002ea7
 8002e98:	08002ead 	.word	0x08002ead
 8002e9c:	08002eb3 	.word	0x08002eb3
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	73fb      	strb	r3, [r7, #15]
    break;
 8002ea4:	e00b      	b.n	8002ebe <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8002ea6:	2302      	movs	r3, #2
 8002ea8:	73fb      	strb	r3, [r7, #15]
    break;
 8002eaa:	e008      	b.n	8002ebe <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8002eac:	2301      	movs	r3, #1
 8002eae:	73fb      	strb	r3, [r7, #15]
    break;
 8002eb0:	e005      	b.n	8002ebe <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8002eb2:	2302      	movs	r3, #2
 8002eb4:	73fb      	strb	r3, [r7, #15]
    break;
 8002eb6:	e002      	b.n	8002ebe <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8002eb8:	2302      	movs	r3, #2
 8002eba:	73fb      	strb	r3, [r7, #15]
    break;
 8002ebc:	bf00      	nop
  }
  return usb_status;
 8002ebe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	3714      	adds	r7, #20
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eca:	4770      	bx	lr

08002ecc <memset>:
 8002ecc:	4402      	add	r2, r0
 8002ece:	4603      	mov	r3, r0
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d100      	bne.n	8002ed6 <memset+0xa>
 8002ed4:	4770      	bx	lr
 8002ed6:	f803 1b01 	strb.w	r1, [r3], #1
 8002eda:	e7f9      	b.n	8002ed0 <memset+0x4>

08002edc <strchr>:
 8002edc:	b2c9      	uxtb	r1, r1
 8002ede:	4603      	mov	r3, r0
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002ee6:	b112      	cbz	r2, 8002eee <strchr+0x12>
 8002ee8:	428a      	cmp	r2, r1
 8002eea:	d1f9      	bne.n	8002ee0 <strchr+0x4>
 8002eec:	4770      	bx	lr
 8002eee:	2900      	cmp	r1, #0
 8002ef0:	bf18      	it	ne
 8002ef2:	2000      	movne	r0, #0
 8002ef4:	4770      	bx	lr

08002ef6 <strstr>:
 8002ef6:	780a      	ldrb	r2, [r1, #0]
 8002ef8:	b570      	push	{r4, r5, r6, lr}
 8002efa:	b96a      	cbnz	r2, 8002f18 <strstr+0x22>
 8002efc:	bd70      	pop	{r4, r5, r6, pc}
 8002efe:	429a      	cmp	r2, r3
 8002f00:	d109      	bne.n	8002f16 <strstr+0x20>
 8002f02:	460c      	mov	r4, r1
 8002f04:	4605      	mov	r5, r0
 8002f06:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d0f6      	beq.n	8002efc <strstr+0x6>
 8002f0e:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8002f12:	429e      	cmp	r6, r3
 8002f14:	d0f7      	beq.n	8002f06 <strstr+0x10>
 8002f16:	3001      	adds	r0, #1
 8002f18:	7803      	ldrb	r3, [r0, #0]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d1ef      	bne.n	8002efe <strstr+0x8>
 8002f1e:	4618      	mov	r0, r3
 8002f20:	e7ec      	b.n	8002efc <strstr+0x6>
	...

08002f24 <__libc_init_array>:
 8002f24:	b570      	push	{r4, r5, r6, lr}
 8002f26:	4d0d      	ldr	r5, [pc, #52]	@ (8002f5c <__libc_init_array+0x38>)
 8002f28:	4c0d      	ldr	r4, [pc, #52]	@ (8002f60 <__libc_init_array+0x3c>)
 8002f2a:	1b64      	subs	r4, r4, r5
 8002f2c:	10a4      	asrs	r4, r4, #2
 8002f2e:	2600      	movs	r6, #0
 8002f30:	42a6      	cmp	r6, r4
 8002f32:	d109      	bne.n	8002f48 <__libc_init_array+0x24>
 8002f34:	4d0b      	ldr	r5, [pc, #44]	@ (8002f64 <__libc_init_array+0x40>)
 8002f36:	4c0c      	ldr	r4, [pc, #48]	@ (8002f68 <__libc_init_array+0x44>)
 8002f38:	f000 f818 	bl	8002f6c <_init>
 8002f3c:	1b64      	subs	r4, r4, r5
 8002f3e:	10a4      	asrs	r4, r4, #2
 8002f40:	2600      	movs	r6, #0
 8002f42:	42a6      	cmp	r6, r4
 8002f44:	d105      	bne.n	8002f52 <__libc_init_array+0x2e>
 8002f46:	bd70      	pop	{r4, r5, r6, pc}
 8002f48:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f4c:	4798      	blx	r3
 8002f4e:	3601      	adds	r6, #1
 8002f50:	e7ee      	b.n	8002f30 <__libc_init_array+0xc>
 8002f52:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f56:	4798      	blx	r3
 8002f58:	3601      	adds	r6, #1
 8002f5a:	e7f2      	b.n	8002f42 <__libc_init_array+0x1e>
 8002f5c:	08003050 	.word	0x08003050
 8002f60:	08003050 	.word	0x08003050
 8002f64:	08003050 	.word	0x08003050
 8002f68:	08003054 	.word	0x08003054

08002f6c <_init>:
 8002f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f6e:	bf00      	nop
 8002f70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f72:	bc08      	pop	{r3}
 8002f74:	469e      	mov	lr, r3
 8002f76:	4770      	bx	lr

08002f78 <_fini>:
 8002f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f7a:	bf00      	nop
 8002f7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f7e:	bc08      	pop	{r3}
 8002f80:	469e      	mov	lr, r3
 8002f82:	4770      	bx	lr
