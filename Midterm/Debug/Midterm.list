
Midterm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003240  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000164  080033d8  080033d8  000043d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800353c  0800353c  00005030  2**0
                  CONTENTS
  4 .ARM          00000008  0800353c  0800353c  0000453c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003544  08003544  00005030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003544  08003544  00004544  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003548  08003548  00004548  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000030  20000000  0800354c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001f890  20000030  0800357c  00005030  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2001f8c0  0800357c  000058c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00005030  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009d08  00000000  00000000  00005060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c79  00000000  00000000  0000ed68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000870  00000000  00000000  000109e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000646  00000000  00000000  00011258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000165ce  00000000  00000000  0001189e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009d94  00000000  00000000  00027e6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008be08  00000000  00000000  00031c00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bda08  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000022c4  00000000  00000000  000bda4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  000bfd10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000030 	.word	0x20000030
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080033c0 	.word	0x080033c0

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000034 	.word	0x20000034
 80001d4:	080033c0 	.word	0x080033c0

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <Button_Init>:
*/


#define GPIOA_BASE_ADDR 0x40020000 

void Button_Init() {
 80001e8:	b480      	push	{r7}
 80001ea:	b083      	sub	sp, #12
 80001ec:	af00      	add	r7, sp, #0

    // 1. Enable GPIO_A clock
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80001ee:	2300      	movs	r3, #0
 80001f0:	603b      	str	r3, [r7, #0]
 80001f2:	4b0d      	ldr	r3, [pc, #52]	@ (8000228 <Button_Init+0x40>)
 80001f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80001f6:	4a0c      	ldr	r2, [pc, #48]	@ (8000228 <Button_Init+0x40>)
 80001f8:	f043 0301 	orr.w	r3, r3, #1
 80001fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80001fe:	4b0a      	ldr	r3, [pc, #40]	@ (8000228 <Button_Init+0x40>)
 8000200:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000202:	f003 0301 	and.w	r3, r3, #1
 8000206:	603b      	str	r3, [r7, #0]
 8000208:	683b      	ldr	r3, [r7, #0]

    // 2. Set PA0 as input
    uint32_t* GPIOA_MODER = (uint32_t*)(GPIOA_BASE_ADDR + 0x00);
 800020a:	4b08      	ldr	r3, [pc, #32]	@ (800022c <Button_Init+0x44>)
 800020c:	607b      	str	r3, [r7, #4]
    *GPIOA_MODER &= ~(0b11 << 0); 
 800020e:	687b      	ldr	r3, [r7, #4]
 8000210:	681b      	ldr	r3, [r3, #0]
 8000212:	f023 0203 	bic.w	r2, r3, #3
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	601a      	str	r2, [r3, #0]
}
 800021a:	bf00      	nop
 800021c:	370c      	adds	r7, #12
 800021e:	46bd      	mov	sp, r7
 8000220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000224:	4770      	bx	lr
 8000226:	bf00      	nop
 8000228:	40023800 	.word	0x40023800
 800022c:	40020000 	.word	0x40020000

08000230 <Led_Init>:
            -- offset addr is 0
            -- 01 is output mode
*/
#define GPIOD_BASE_ADDR 0x40020C00 // Get addr from  Data sheet <- Memory mapping

void Led_Init() {
 8000230:	b480      	push	{r7}
 8000232:	b083      	sub	sp, #12
 8000234:	af00      	add	r7, sp, #0
    // 1. Enable GPIO_D clock
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000236:	2300      	movs	r3, #0
 8000238:	603b      	str	r3, [r7, #0]
 800023a:	4b10      	ldr	r3, [pc, #64]	@ (800027c <Led_Init+0x4c>)
 800023c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800023e:	4a0f      	ldr	r2, [pc, #60]	@ (800027c <Led_Init+0x4c>)
 8000240:	f043 0308 	orr.w	r3, r3, #8
 8000244:	6313      	str	r3, [r2, #48]	@ 0x30
 8000246:	4b0d      	ldr	r3, [pc, #52]	@ (800027c <Led_Init+0x4c>)
 8000248:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800024a:	f003 0308 	and.w	r3, r3, #8
 800024e:	603b      	str	r3, [r7, #0]
 8000250:	683b      	ldr	r3, [r7, #0]

    // 2. Set PD12, PD13, PD14 and PD15 as outputs - Get PD numbers from schematic
    uint32_t* GPIOD_MODER = (uint32_t*)(GPIOD_BASE_ADDR + 0x00);
 8000252:	4b0b      	ldr	r3, [pc, #44]	@ (8000280 <Led_Init+0x50>)
 8000254:	607b      	str	r3, [r7, #4]
    *GPIOD_MODER &= (0b11111111 << 24); // Clear
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	681b      	ldr	r3, [r3, #0]
 800025a:	f003 427f 	and.w	r2, r3, #4278190080	@ 0xff000000
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	601a      	str	r2, [r3, #0]
    *GPIOD_MODER |= (0b01010101 << 24); // Set
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	681b      	ldr	r3, [r3, #0]
 8000266:	f043 42aa 	orr.w	r2, r3, #1426063360	@ 0x55000000
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	601a      	str	r2, [r3, #0]
}
 800026e:	bf00      	nop
 8000270:	370c      	adds	r7, #12
 8000272:	46bd      	mov	sp, r7
 8000274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000278:	4770      	bx	lr
 800027a:	bf00      	nop
 800027c:	40023800 	.word	0x40023800
 8000280:	40020c00 	.word	0x40020c00

08000284 <Led_Ctrl>:
int RED_LED     = 14;
int BLUE_LED    = 15;
int ON          = 1;
int OFF         = 0;

void Led_Ctrl(int LED, int OnOff) {
 8000284:	b480      	push	{r7}
 8000286:	b085      	sub	sp, #20
 8000288:	af00      	add	r7, sp, #0
 800028a:	6078      	str	r0, [r7, #4]
 800028c:	6039      	str	r1, [r7, #0]
    uint32_t* GPIOD_ODR = (uint32_t*)(GPIOD_BASE_ADDR + 0x14);
 800028e:	4b0f      	ldr	r3, [pc, #60]	@ (80002cc <Led_Ctrl+0x48>)
 8000290:	60fb      	str	r3, [r7, #12]

    if (OnOff == 1)
 8000292:	683b      	ldr	r3, [r7, #0]
 8000294:	2b01      	cmp	r3, #1
 8000296:	d109      	bne.n	80002ac <Led_Ctrl+0x28>
        *GPIOD_ODR |=  (0b1 << LED);
 8000298:	68fb      	ldr	r3, [r7, #12]
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	2101      	movs	r1, #1
 800029e:	687a      	ldr	r2, [r7, #4]
 80002a0:	fa01 f202 	lsl.w	r2, r1, r2
 80002a4:	431a      	orrs	r2, r3
 80002a6:	68fb      	ldr	r3, [r7, #12]
 80002a8:	601a      	str	r2, [r3, #0]
    else
        *GPIOD_ODR &= ~(0b1 << LED);
}
 80002aa:	e009      	b.n	80002c0 <Led_Ctrl+0x3c>
        *GPIOD_ODR &= ~(0b1 << LED);
 80002ac:	68fb      	ldr	r3, [r7, #12]
 80002ae:	681b      	ldr	r3, [r3, #0]
 80002b0:	2101      	movs	r1, #1
 80002b2:	687a      	ldr	r2, [r7, #4]
 80002b4:	fa01 f202 	lsl.w	r2, r1, r2
 80002b8:	43d2      	mvns	r2, r2
 80002ba:	401a      	ands	r2, r3
 80002bc:	68fb      	ldr	r3, [r7, #12]
 80002be:	601a      	str	r2, [r3, #0]
}
 80002c0:	bf00      	nop
 80002c2:	3714      	adds	r7, #20
 80002c4:	46bd      	mov	sp, r7
 80002c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ca:	4770      	bx	lr
 80002cc:	40020c14 	.word	0x40020c14

080002d0 <Button_Status>:

// 4 - Check if the button is pressed or not
int Button_Status() {
 80002d0:	b480      	push	{r7}
 80002d2:	b083      	sub	sp, #12
 80002d4:	af00      	add	r7, sp, #0
    uint32_t* GPIOA_IDR = (uint32_t*)(GPIOA_BASE_ADDR + 0x10);
 80002d6:	4b06      	ldr	r3, [pc, #24]	@ (80002f0 <Button_Status+0x20>)
 80002d8:	607b      	str	r3, [r7, #4]
    return (*GPIOA_IDR >> 0) & 1;
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	681b      	ldr	r3, [r3, #0]
 80002de:	f003 0301 	and.w	r3, r3, #1
}
 80002e2:	4618      	mov	r0, r3
 80002e4:	370c      	adds	r7, #12
 80002e6:	46bd      	mov	sp, r7
 80002e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop
 80002f0:	40020010 	.word	0x40020010

080002f4 <Button_Interrupt_Int>:

*/
#define EXTI_BASE_ADDR 0x40013C00
#define ISER_BASE_ADDR 0xE000E100 // From ref manual - M4 

void Button_Interrupt_Int() {
 80002f4:	b480      	push	{r7}
 80002f6:	b085      	sub	sp, #20
 80002f8:	af00      	add	r7, sp, #0

  // Config EXTI to send interrupt to NVIC when detect rising of failling edge

  // select trigger for EXTI0 is rising
  uint32_t* EXTI_RTSR = (uint32_t*)(EXTI_BASE_ADDR + 0x08);
 80002fa:	4b13      	ldr	r3, [pc, #76]	@ (8000348 <Button_Interrupt_Int+0x54>)
 80002fc:	60fb      	str	r3, [r7, #12]
  *EXTI_RTSR |= (0b1 << 0);
 80002fe:	68fb      	ldr	r3, [r7, #12]
 8000300:	681b      	ldr	r3, [r3, #0]
 8000302:	f043 0201 	orr.w	r2, r3, #1
 8000306:	68fb      	ldr	r3, [r7, #12]
 8000308:	601a      	str	r2, [r3, #0]

  // select trigger for EXTI0 is falling
  uint32_t* EXTI_FTSR = (uint32_t*)(EXTI_BASE_ADDR + 0x0C);
 800030a:	4b10      	ldr	r3, [pc, #64]	@ (800034c <Button_Interrupt_Int+0x58>)
 800030c:	60bb      	str	r3, [r7, #8]
  *EXTI_FTSR |= (0b1 << 0);
 800030e:	68bb      	ldr	r3, [r7, #8]
 8000310:	681b      	ldr	r3, [r3, #0]
 8000312:	f043 0201 	orr.w	r2, r3, #1
 8000316:	68bb      	ldr	r3, [r7, #8]
 8000318:	601a      	str	r2, [r3, #0]

  // masking
  uint32_t* EXTI_IMR = (uint32_t*)(EXTI_BASE_ADDR + 0x00);
 800031a:	4b0d      	ldr	r3, [pc, #52]	@ (8000350 <Button_Interrupt_Int+0x5c>)
 800031c:	607b      	str	r3, [r7, #4]
  *EXTI_IMR |= (0b1 << 0);
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	681b      	ldr	r3, [r3, #0]
 8000322:	f043 0201 	orr.w	r2, r3, #1
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	601a      	str	r2, [r3, #0]

  // NVIC accepts interrupt from EXTI0
  /*
    From vectore table in ref manual - stm32, we know position of EXTI0 interrupt is 6
  */
  uint32_t* ISER0 = (uint32_t*)(ISER_BASE_ADDR + 0x00);
 800032a:	4b0a      	ldr	r3, [pc, #40]	@ (8000354 <Button_Interrupt_Int+0x60>)
 800032c:	603b      	str	r3, [r7, #0]
  *ISER0 |= (0b1 << 6);
 800032e:	683b      	ldr	r3, [r7, #0]
 8000330:	681b      	ldr	r3, [r3, #0]
 8000332:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8000336:	683b      	ldr	r3, [r7, #0]
 8000338:	601a      	str	r2, [r3, #0]
  
}
 800033a:	bf00      	nop
 800033c:	3714      	adds	r7, #20
 800033e:	46bd      	mov	sp, r7
 8000340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000344:	4770      	bx	lr
 8000346:	bf00      	nop
 8000348:	40013c08 	.word	0x40013c08
 800034c:	40013c0c 	.word	0x40013c0c
 8000350:	40013c00 	.word	0x40013c00
 8000354:	e000e100 	.word	0xe000e100

08000358 <EXTI0_IRQHandler>:

void EXTI0_IRQHandler() {
 8000358:	b590      	push	{r4, r7, lr}
 800035a:	b083      	sub	sp, #12
 800035c:	af00      	add	r7, sp, #0

  Led_Ctrl(RED_LED, Button_Status());
 800035e:	4b0a      	ldr	r3, [pc, #40]	@ (8000388 <EXTI0_IRQHandler+0x30>)
 8000360:	681c      	ldr	r4, [r3, #0]
 8000362:	f7ff ffb5 	bl	80002d0 <Button_Status>
 8000366:	4603      	mov	r3, r0
 8000368:	4619      	mov	r1, r3
 800036a:	4620      	mov	r0, r4
 800036c:	f7ff ff8a 	bl	8000284 <Led_Ctrl>

  // Clear interrupt flag to exit handler function
  uint32_t* EXTI_PR = (uint32_t*)(EXTI_BASE_ADDR + 0x14);
 8000370:	4b06      	ldr	r3, [pc, #24]	@ (800038c <EXTI0_IRQHandler+0x34>)
 8000372:	607b      	str	r3, [r7, #4]
  *EXTI_PR |= (0b1 << 0);
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	681b      	ldr	r3, [r3, #0]
 8000378:	f043 0201 	orr.w	r2, r3, #1
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	601a      	str	r2, [r3, #0]
}
 8000380:	bf00      	nop
 8000382:	370c      	adds	r7, #12
 8000384:	46bd      	mov	sp, r7
 8000386:	bd90      	pop	{r4, r7, pc}
 8000388:	20000000 	.word	0x20000000
 800038c:	40013c14 	.word	0x40013c14

08000390 <Uart_Init>:
// 6. Config UART
#define GPIOB_BASE_ADDR 0x40020400
#define USART1_BASE_ADDR 0x40011000

void Uart_Init()
{
 8000390:	b480      	push	{r7}
 8000392:	b087      	sub	sp, #28
 8000394:	af00      	add	r7, sp, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000396:	2300      	movs	r3, #0
 8000398:	607b      	str	r3, [r7, #4]
 800039a:	4b35      	ldr	r3, [pc, #212]	@ (8000470 <Uart_Init+0xe0>)
 800039c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800039e:	4a34      	ldr	r2, [pc, #208]	@ (8000470 <Uart_Init+0xe0>)
 80003a0:	f043 0302 	orr.w	r3, r3, #2
 80003a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80003a6:	4b32      	ldr	r3, [pc, #200]	@ (8000470 <Uart_Init+0xe0>)
 80003a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003aa:	f003 0302 	and.w	r3, r3, #2
 80003ae:	607b      	str	r3, [r7, #4]
 80003b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_USART1_CLK_ENABLE();
 80003b2:	2300      	movs	r3, #0
 80003b4:	603b      	str	r3, [r7, #0]
 80003b6:	4b2e      	ldr	r3, [pc, #184]	@ (8000470 <Uart_Init+0xe0>)
 80003b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80003ba:	4a2d      	ldr	r2, [pc, #180]	@ (8000470 <Uart_Init+0xe0>)
 80003bc:	f043 0310 	orr.w	r3, r3, #16
 80003c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80003c2:	4b2b      	ldr	r3, [pc, #172]	@ (8000470 <Uart_Init+0xe0>)
 80003c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80003c6:	f003 0310 	and.w	r3, r3, #16
 80003ca:	603b      	str	r3, [r7, #0]
 80003cc:	683b      	ldr	r3, [r7, #0]
  uint32_t* GPIOB_MODER = (uint32_t*)(GPIOB_BASE_ADDR + 0x00);
 80003ce:	4b29      	ldr	r3, [pc, #164]	@ (8000474 <Uart_Init+0xe4>)
 80003d0:	617b      	str	r3, [r7, #20]
  uint32_t* GPIOB_AFRL  = (uint32_t*)(GPIOB_BASE_ADDR + 0x20);
 80003d2:	4b29      	ldr	r3, [pc, #164]	@ (8000478 <Uart_Init+0xe8>)
 80003d4:	613b      	str	r3, [r7, #16]
  uint32_t* USART_BRR  = (uint32_t*)(USART1_BASE_ADDR + 0x08);
 80003d6:	4b29      	ldr	r3, [pc, #164]	@ (800047c <Uart_Init+0xec>)
 80003d8:	60fb      	str	r3, [r7, #12]
  uint32_t* USART_CR1  = (uint32_t*)(USART1_BASE_ADDR + 0x0C);
 80003da:	4b29      	ldr	r3, [pc, #164]	@ (8000480 <Uart_Init+0xf0>)
 80003dc:	60bb      	str	r3, [r7, #8]


  *GPIOB_MODER &= ~(0b1111 << 12); // CLEAR
 80003de:	697b      	ldr	r3, [r7, #20]
 80003e0:	681b      	ldr	r3, [r3, #0]
 80003e2:	f423 4270 	bic.w	r2, r3, #61440	@ 0xf000
 80003e6:	697b      	ldr	r3, [r7, #20]
 80003e8:	601a      	str	r2, [r3, #0]
  *GPIOB_MODER |= (0b1010 << 12);
 80003ea:	697b      	ldr	r3, [r7, #20]
 80003ec:	681b      	ldr	r3, [r3, #0]
 80003ee:	f443 4220 	orr.w	r2, r3, #40960	@ 0xa000
 80003f2:	697b      	ldr	r3, [r7, #20]
 80003f4:	601a      	str	r2, [r3, #0]

  *GPIOB_AFRL	&= ~(0xff << 24);
 80003f6:	693b      	ldr	r3, [r7, #16]
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 80003fe:	693b      	ldr	r3, [r7, #16]
 8000400:	601a      	str	r2, [r3, #0]
  *GPIOB_AFRL	|= (0b01110111 << 24);
 8000402:	693b      	ldr	r3, [r7, #16]
 8000404:	681b      	ldr	r3, [r3, #0]
 8000406:	f043 42ee 	orr.w	r2, r3, #1996488704	@ 0x77000000
 800040a:	693b      	ldr	r3, [r7, #16]
 800040c:	601a      	str	r2, [r3, #0]

  // set baud rate ~ 9600 -> UARTDIV = 104.16667 -> mantissa = 104 & fraction = 0.16667 * 16 = 3
  *USART_BRR &= ~(0xffff << 0);
 800040e:	68fb      	ldr	r3, [r7, #12]
 8000410:	681b      	ldr	r3, [r3, #0]
 8000412:	0c1b      	lsrs	r3, r3, #16
 8000414:	041b      	lsls	r3, r3, #16
 8000416:	68fa      	ldr	r2, [r7, #12]
 8000418:	6013      	str	r3, [r2, #0]
  *USART_BRR |= (3 << 0);
 800041a:	68fb      	ldr	r3, [r7, #12]
 800041c:	681b      	ldr	r3, [r3, #0]
 800041e:	f043 0203 	orr.w	r2, r3, #3
 8000422:	68fb      	ldr	r3, [r7, #12]
 8000424:	601a      	str	r2, [r3, #0]
  *USART_BRR |= (104 << 4);
 8000426:	68fb      	ldr	r3, [r7, #12]
 8000428:	681b      	ldr	r3, [r3, #0]
 800042a:	f443 62d0 	orr.w	r2, r3, #1664	@ 0x680
 800042e:	68fb      	ldr	r3, [r7, #12]
 8000430:	601a      	str	r2, [r3, #0]

  // data frame
  *USART_CR1 |= (0b1 << 10); // Enable parity
 8000432:	68bb      	ldr	r3, [r7, #8]
 8000434:	681b      	ldr	r3, [r3, #0]
 8000436:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 800043a:	68bb      	ldr	r3, [r7, #8]
 800043c:	601a      	str	r2, [r3, #0]
  *USART_CR1 |= (0b1 << 12); // 9 bits length
 800043e:	68bb      	ldr	r3, [r7, #8]
 8000440:	681b      	ldr	r3, [r3, #0]
 8000442:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000446:	68bb      	ldr	r3, [r7, #8]
 8000448:	601a      	str	r2, [r3, #0]

  // enable UART
  *USART_CR1 |= (0b1 << 13);
 800044a:	68bb      	ldr	r3, [r7, #8]
 800044c:	681b      	ldr	r3, [r3, #0]
 800044e:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8000452:	68bb      	ldr	r3, [r7, #8]
 8000454:	601a      	str	r2, [r3, #0]

  // transmiter, receiver
  *USART_CR1 |= (0b11 << 2);
 8000456:	68bb      	ldr	r3, [r7, #8]
 8000458:	681b      	ldr	r3, [r3, #0]
 800045a:	f043 020c 	orr.w	r2, r3, #12
 800045e:	68bb      	ldr	r3, [r7, #8]
 8000460:	601a      	str	r2, [r3, #0]
}
 8000462:	bf00      	nop
 8000464:	371c      	adds	r7, #28
 8000466:	46bd      	mov	sp, r7
 8000468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800046c:	4770      	bx	lr
 800046e:	bf00      	nop
 8000470:	40023800 	.word	0x40023800
 8000474:	40020400 	.word	0x40020400
 8000478:	40020420 	.word	0x40020420
 800047c:	40011008 	.word	0x40011008
 8000480:	4001100c 	.word	0x4001100c

08000484 <uart_send_one_byte>:

void uart_send_one_byte(char data)
{
 8000484:	b480      	push	{r7}
 8000486:	b085      	sub	sp, #20
 8000488:	af00      	add	r7, sp, #0
 800048a:	4603      	mov	r3, r0
 800048c:	71fb      	strb	r3, [r7, #7]
  uint32_t* USART_SR = (uint32_t*)(USART1_BASE_ADDR + 0x00);
 800048e:	4b0e      	ldr	r3, [pc, #56]	@ (80004c8 <uart_send_one_byte+0x44>)
 8000490:	60fb      	str	r3, [r7, #12]
  uint32_t* USART_DR = (uint32_t*)(USART1_BASE_ADDR + 0x04);
 8000492:	4b0e      	ldr	r3, [pc, #56]	@ (80004cc <uart_send_one_byte+0x48>)
 8000494:	60bb      	str	r3, [r7, #8]
  // wait for TXE == 1
  while (((*USART_SR >> 7) & 1) == 0);
 8000496:	bf00      	nop
 8000498:	68fb      	ldr	r3, [r7, #12]
 800049a:	681b      	ldr	r3, [r3, #0]
 800049c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	d0f9      	beq.n	8000498 <uart_send_one_byte+0x14>

  *USART_DR = data;
 80004a4:	79fa      	ldrb	r2, [r7, #7]
 80004a6:	68bb      	ldr	r3, [r7, #8]
 80004a8:	601a      	str	r2, [r3, #0]

  while (((*USART_SR >> 6) & 1) == 0);
 80004aa:	bf00      	nop
 80004ac:	68fb      	ldr	r3, [r7, #12]
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80004b4:	2b00      	cmp	r3, #0
 80004b6:	d0f9      	beq.n	80004ac <uart_send_one_byte+0x28>
}
 80004b8:	bf00      	nop
 80004ba:	bf00      	nop
 80004bc:	3714      	adds	r7, #20
 80004be:	46bd      	mov	sp, r7
 80004c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop
 80004c8:	40011000 	.word	0x40011000
 80004cc:	40011004 	.word	0x40011004

080004d0 <uart_send_string>:

void uart_send_string(char* str)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b084      	sub	sp, #16
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]

  // Get size of string
  int size;
  size = strlen(str);
 80004d8:	6878      	ldr	r0, [r7, #4]
 80004da:	f7ff fe7d 	bl	80001d8 <strlen>
 80004de:	4603      	mov	r3, r0
 80004e0:	60bb      	str	r3, [r7, #8]

  for (int i = 0; i < size; i++)
 80004e2:	2300      	movs	r3, #0
 80004e4:	60fb      	str	r3, [r7, #12]
 80004e6:	e009      	b.n	80004fc <uart_send_string+0x2c>
    uart_send_one_byte(str[i]);
 80004e8:	68fb      	ldr	r3, [r7, #12]
 80004ea:	687a      	ldr	r2, [r7, #4]
 80004ec:	4413      	add	r3, r2
 80004ee:	781b      	ldrb	r3, [r3, #0]
 80004f0:	4618      	mov	r0, r3
 80004f2:	f7ff ffc7 	bl	8000484 <uart_send_one_byte>
  for (int i = 0; i < size; i++)
 80004f6:	68fb      	ldr	r3, [r7, #12]
 80004f8:	3301      	adds	r3, #1
 80004fa:	60fb      	str	r3, [r7, #12]
 80004fc:	68fa      	ldr	r2, [r7, #12]
 80004fe:	68bb      	ldr	r3, [r7, #8]
 8000500:	429a      	cmp	r2, r3
 8000502:	dbf1      	blt.n	80004e8 <uart_send_string+0x18>
}
 8000504:	bf00      	nop
 8000506:	bf00      	nop
 8000508:	3710      	adds	r7, #16
 800050a:	46bd      	mov	sp, r7
 800050c:	bd80      	pop	{r7, pc}
	...

08000510 <uart_receive_one_byte>:

char uart_receive_one_byte()
{
 8000510:	b480      	push	{r7}
 8000512:	b083      	sub	sp, #12
 8000514:	af00      	add	r7, sp, #0
  uint32_t* USART_SR = (uint32_t*)(USART1_BASE_ADDR + 0x00);
 8000516:	4b0a      	ldr	r3, [pc, #40]	@ (8000540 <uart_receive_one_byte+0x30>)
 8000518:	607b      	str	r3, [r7, #4]
  uint32_t* USART_DR = (uint32_t*)(USART1_BASE_ADDR + 0x04);
 800051a:	4b0a      	ldr	r3, [pc, #40]	@ (8000544 <uart_receive_one_byte+0x34>)
 800051c:	603b      	str	r3, [r7, #0]
  // wait for RxNE == 1
  while (((*USART_SR >> 5) & 1) == 0);
 800051e:	bf00      	nop
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	f003 0320 	and.w	r3, r3, #32
 8000528:	2b00      	cmp	r3, #0
 800052a:	d0f9      	beq.n	8000520 <uart_receive_one_byte+0x10>
  return *USART_DR;
 800052c:	683b      	ldr	r3, [r7, #0]
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	b2db      	uxtb	r3, r3
}
 8000532:	4618      	mov	r0, r3
 8000534:	370c      	adds	r7, #12
 8000536:	46bd      	mov	sp, r7
 8000538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop
 8000540:	40011000 	.word	0x40011000
 8000544:	40011004 	.word	0x40011004

08000548 <Uart_Interrupt_Init>:
        --> position 37
    + Mở ARM lên xem NESTED VECTOR INTERRUPT TABLE
        --> bit 5 của ISER1 (0xE000E100 + 4) 
*/

void Uart_Interrupt_Init() {
 8000548:	b480      	push	{r7}
 800054a:	b083      	sub	sp, #12
 800054c:	af00      	add	r7, sp, #0

  uint32_t* USART_CR1 = (uint32_t*)(USART1_BASE_ADDR + 0x0C);
 800054e:	4b0b      	ldr	r3, [pc, #44]	@ (800057c <Uart_Interrupt_Init+0x34>)
 8000550:	607b      	str	r3, [r7, #4]
  *USART_CR1 |= (0b1 << 5);
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	f043 0220 	orr.w	r2, r3, #32
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	601a      	str	r2, [r3, #0]

  uint32_t* ISER1 = (uint32_t*)(ISER_BASE_ADDR + 0x04);
 800055e:	4b08      	ldr	r3, [pc, #32]	@ (8000580 <Uart_Interrupt_Init+0x38>)
 8000560:	603b      	str	r3, [r7, #0]
  *ISER1 |= (0b1 << 5);
 8000562:	683b      	ldr	r3, [r7, #0]
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	f043 0220 	orr.w	r2, r3, #32
 800056a:	683b      	ldr	r3, [r7, #0]
 800056c:	601a      	str	r2, [r3, #0]
  
}
 800056e:	bf00      	nop
 8000570:	370c      	adds	r7, #12
 8000572:	46bd      	mov	sp, r7
 8000574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop
 800057c:	4001100c 	.word	0x4001100c
 8000580:	e000e104 	.word	0xe000e104

08000584 <USART1_IRQHandler>:

char cmd[32];
int cmd_index;

void USART1_IRQHandler() {
 8000584:	b598      	push	{r3, r4, r7, lr}
 8000586:	af00      	add	r7, sp, #0
  // if(data == 'x')
  //   Led_Ctrl(ORANGE_LED, ON);
  // else if(data == 'o')
  //   Led_Ctrl(ORANGE_LED, OFF);

  cmd[cmd_index] = uart_receive_one_byte();
 8000588:	4b36      	ldr	r3, [pc, #216]	@ (8000664 <USART1_IRQHandler+0xe0>)
 800058a:	681c      	ldr	r4, [r3, #0]
 800058c:	f7ff ffc0 	bl	8000510 <uart_receive_one_byte>
 8000590:	4603      	mov	r3, r0
 8000592:	461a      	mov	r2, r3
 8000594:	4b34      	ldr	r3, [pc, #208]	@ (8000668 <USART1_IRQHandler+0xe4>)
 8000596:	551a      	strb	r2, [r3, r4]
  cmd_index++;
 8000598:	4b32      	ldr	r3, [pc, #200]	@ (8000664 <USART1_IRQHandler+0xe0>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	3301      	adds	r3, #1
 800059e:	4a31      	ldr	r2, [pc, #196]	@ (8000664 <USART1_IRQHandler+0xe0>)
 80005a0:	6013      	str	r3, [r2, #0]
  if (strstr(cmd, "\n")) {
 80005a2:	210a      	movs	r1, #10
 80005a4:	4830      	ldr	r0, [pc, #192]	@ (8000668 <USART1_IRQHandler+0xe4>)
 80005a6:	f002 fec3 	bl	8003330 <strchr>
 80005aa:	4603      	mov	r3, r0
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d056      	beq.n	800065e <USART1_IRQHandler+0xda>
    if (strstr(cmd, "led red on")) {
 80005b0:	492e      	ldr	r1, [pc, #184]	@ (800066c <USART1_IRQHandler+0xe8>)
 80005b2:	482d      	ldr	r0, [pc, #180]	@ (8000668 <USART1_IRQHandler+0xe4>)
 80005b4:	f002 fec9 	bl	800334a <strstr>
 80005b8:	4603      	mov	r3, r0
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d00b      	beq.n	80005d6 <USART1_IRQHandler+0x52>
      Led_Ctrl(RED_LED, ON);
 80005be:	4b2c      	ldr	r3, [pc, #176]	@ (8000670 <USART1_IRQHandler+0xec>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	4a2c      	ldr	r2, [pc, #176]	@ (8000674 <USART1_IRQHandler+0xf0>)
 80005c4:	6812      	ldr	r2, [r2, #0]
 80005c6:	4611      	mov	r1, r2
 80005c8:	4618      	mov	r0, r3
 80005ca:	f7ff fe5b 	bl	8000284 <Led_Ctrl>
      uart_send_string("Da bat led DO\n");
 80005ce:	482a      	ldr	r0, [pc, #168]	@ (8000678 <USART1_IRQHandler+0xf4>)
 80005d0:	f7ff ff7e 	bl	80004d0 <uart_send_string>
 80005d4:	e03b      	b.n	800064e <USART1_IRQHandler+0xca>
    } else if (strstr(cmd, "led red off")) {
 80005d6:	4929      	ldr	r1, [pc, #164]	@ (800067c <USART1_IRQHandler+0xf8>)
 80005d8:	4823      	ldr	r0, [pc, #140]	@ (8000668 <USART1_IRQHandler+0xe4>)
 80005da:	f002 feb6 	bl	800334a <strstr>
 80005de:	4603      	mov	r3, r0
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d00b      	beq.n	80005fc <USART1_IRQHandler+0x78>
      Led_Ctrl(RED_LED, OFF);
 80005e4:	4b22      	ldr	r3, [pc, #136]	@ (8000670 <USART1_IRQHandler+0xec>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	4a25      	ldr	r2, [pc, #148]	@ (8000680 <USART1_IRQHandler+0xfc>)
 80005ea:	6812      	ldr	r2, [r2, #0]
 80005ec:	4611      	mov	r1, r2
 80005ee:	4618      	mov	r0, r3
 80005f0:	f7ff fe48 	bl	8000284 <Led_Ctrl>
      uart_send_string("Da tat led DO\n");
 80005f4:	4823      	ldr	r0, [pc, #140]	@ (8000684 <USART1_IRQHandler+0x100>)
 80005f6:	f7ff ff6b 	bl	80004d0 <uart_send_string>
 80005fa:	e028      	b.n	800064e <USART1_IRQHandler+0xca>
    } else if (strstr(cmd, "led blue on")) {
 80005fc:	4922      	ldr	r1, [pc, #136]	@ (8000688 <USART1_IRQHandler+0x104>)
 80005fe:	481a      	ldr	r0, [pc, #104]	@ (8000668 <USART1_IRQHandler+0xe4>)
 8000600:	f002 fea3 	bl	800334a <strstr>
 8000604:	4603      	mov	r3, r0
 8000606:	2b00      	cmp	r3, #0
 8000608:	d00b      	beq.n	8000622 <USART1_IRQHandler+0x9e>
      Led_Ctrl(BLUE_LED, ON);
 800060a:	4b20      	ldr	r3, [pc, #128]	@ (800068c <USART1_IRQHandler+0x108>)
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	4a19      	ldr	r2, [pc, #100]	@ (8000674 <USART1_IRQHandler+0xf0>)
 8000610:	6812      	ldr	r2, [r2, #0]
 8000612:	4611      	mov	r1, r2
 8000614:	4618      	mov	r0, r3
 8000616:	f7ff fe35 	bl	8000284 <Led_Ctrl>
      uart_send_string("Da bat led XANH\n");
 800061a:	481d      	ldr	r0, [pc, #116]	@ (8000690 <USART1_IRQHandler+0x10c>)
 800061c:	f7ff ff58 	bl	80004d0 <uart_send_string>
 8000620:	e015      	b.n	800064e <USART1_IRQHandler+0xca>
    } else if (strstr(cmd, "led red off")) {
 8000622:	4916      	ldr	r1, [pc, #88]	@ (800067c <USART1_IRQHandler+0xf8>)
 8000624:	4810      	ldr	r0, [pc, #64]	@ (8000668 <USART1_IRQHandler+0xe4>)
 8000626:	f002 fe90 	bl	800334a <strstr>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d00b      	beq.n	8000648 <USART1_IRQHandler+0xc4>
      Led_Ctrl(BLUE_LED, OFF);
 8000630:	4b16      	ldr	r3, [pc, #88]	@ (800068c <USART1_IRQHandler+0x108>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	4a12      	ldr	r2, [pc, #72]	@ (8000680 <USART1_IRQHandler+0xfc>)
 8000636:	6812      	ldr	r2, [r2, #0]
 8000638:	4611      	mov	r1, r2
 800063a:	4618      	mov	r0, r3
 800063c:	f7ff fe22 	bl	8000284 <Led_Ctrl>
      uart_send_string("Da tat led XANH\n");
 8000640:	4814      	ldr	r0, [pc, #80]	@ (8000694 <USART1_IRQHandler+0x110>)
 8000642:	f7ff ff45 	bl	80004d0 <uart_send_string>
 8000646:	e002      	b.n	800064e <USART1_IRQHandler+0xca>
    } else
      uart_send_string("Khong tiem thay command\n");
 8000648:	4813      	ldr	r0, [pc, #76]	@ (8000698 <USART1_IRQHandler+0x114>)
 800064a:	f7ff ff41 	bl	80004d0 <uart_send_string>

    memset(cmd, 0, 32);
 800064e:	2220      	movs	r2, #32
 8000650:	2100      	movs	r1, #0
 8000652:	4805      	ldr	r0, [pc, #20]	@ (8000668 <USART1_IRQHandler+0xe4>)
 8000654:	f002 fe64 	bl	8003320 <memset>
    cmd_index = 0;
 8000658:	4b02      	ldr	r3, [pc, #8]	@ (8000664 <USART1_IRQHandler+0xe0>)
 800065a:	2200      	movs	r2, #0
 800065c:	601a      	str	r2, [r3, #0]
  }
}
 800065e:	bf00      	nop
 8000660:	bd98      	pop	{r3, r4, r7, pc}
 8000662:	bf00      	nop
 8000664:	20000070 	.word	0x20000070
 8000668:	20000050 	.word	0x20000050
 800066c:	080033d8 	.word	0x080033d8
 8000670:	20000000 	.word	0x20000000
 8000674:	20000008 	.word	0x20000008
 8000678:	080033e4 	.word	0x080033e4
 800067c:	080033f4 	.word	0x080033f4
 8000680:	2000004c 	.word	0x2000004c
 8000684:	08003400 	.word	0x08003400
 8000688:	08003410 	.word	0x08003410
 800068c:	20000004 	.word	0x20000004
 8000690:	0800341c 	.word	0x0800341c
 8000694:	08003430 	.word	0x08003430
 8000698:	08003444 	.word	0x08003444

0800069c <DMA2_Stream2_IRQHandler>:
  *DMA_S2CR |= 1;
}

volatile char recv_completed = 0;

void DMA2_Stream2_IRQHandler() {
 800069c:	b580      	push	{r7, lr}
 800069e:	b082      	sub	sp, #8
 80006a0:	af00      	add	r7, sp, #0
  uart_send_string("\nDMA Interrupt\n");
 80006a2:	480f      	ldr	r0, [pc, #60]	@ (80006e0 <DMA2_Stream2_IRQHandler+0x44>)
 80006a4:	f7ff ff14 	bl	80004d0 <uart_send_string>
  recv_completed = 1;
 80006a8:	4b0e      	ldr	r3, [pc, #56]	@ (80006e4 <DMA2_Stream2_IRQHandler+0x48>)
 80006aa:	2201      	movs	r2, #1
 80006ac:	701a      	strb	r2, [r3, #0]

  // Clear buffer
  memset(rx_buf, 0, sizeof(rx_buf));
 80006ae:	2220      	movs	r2, #32
 80006b0:	2100      	movs	r1, #0
 80006b2:	480d      	ldr	r0, [pc, #52]	@ (80006e8 <DMA2_Stream2_IRQHandler+0x4c>)
 80006b4:	f002 fe34 	bl	8003320 <memset>

  // Clear interrupt flag
  uint32_t* DMA_LIFCR = (uint32_t*)(DMA2_BASE_ADDR + 0x08);
 80006b8:	4b0c      	ldr	r3, [pc, #48]	@ (80006ec <DMA2_Stream2_IRQHandler+0x50>)
 80006ba:	607b      	str	r3, [r7, #4]
  *DMA_LIFCR |= (1<<21);
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	601a      	str	r2, [r3, #0]

  // Re-enable DMA
  uint32_t* DMA_S2CR = (uint32_t*) (DMA2_BASE_ADDR + 0x10 + 0x18 * 2);
 80006c8:	4b09      	ldr	r3, [pc, #36]	@ (80006f0 <DMA2_Stream2_IRQHandler+0x54>)
 80006ca:	603b      	str	r3, [r7, #0]
  *DMA_S2CR |= 1;
 80006cc:	683b      	ldr	r3, [r7, #0]
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	f043 0201 	orr.w	r2, r3, #1
 80006d4:	683b      	ldr	r3, [r7, #0]
 80006d6:	601a      	str	r2, [r3, #0]
}
 80006d8:	bf00      	nop
 80006da:	3708      	adds	r7, #8
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	08003460 	.word	0x08003460
 80006e4:	20000094 	.word	0x20000094
 80006e8:	20000074 	.word	0x20000074
 80006ec:	40026408 	.word	0x40026408
 80006f0:	40026440 	.word	0x40026440

080006f4 <Flash_Erase>:

#define FLASH_BASE_ADDR 0x40023C00
#define KEY1            0x45670123
#define KEY2            0xCDEF89AB

void Flash_Erase(int sector_number) {
 80006f4:	b480      	push	{r7}
 80006f6:	b087      	sub	sp, #28
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]

  // 0. Check to see if FLASH_CR is locked or not
  uint32_t* FL_CR = (uint32_t*)(FLASH_BASE_ADDR + 0x10);
 80006fc:	4b1f      	ldr	r3, [pc, #124]	@ (800077c <Flash_Erase+0x88>)
 80006fe:	617b      	str	r3, [r7, #20]
  if (((*FL_CR >> 31) & 1) == 1) {
 8000700:	697b      	ldr	r3, [r7, #20]
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	0fdb      	lsrs	r3, r3, #31
 8000706:	2b01      	cmp	r3, #1
 8000708:	d107      	bne.n	800071a <Flash_Erase+0x26>
    // unlock FLASH_CR by unlock sequence
    uint32_t* FL_KEYR = (uint32_t*)(FLASH_BASE_ADDR + 0x4);
 800070a:	4b1d      	ldr	r3, [pc, #116]	@ (8000780 <Flash_Erase+0x8c>)
 800070c:	613b      	str	r3, [r7, #16]
    *FL_KEYR = 0x45670123;
 800070e:	693b      	ldr	r3, [r7, #16]
 8000710:	4a1c      	ldr	r2, [pc, #112]	@ (8000784 <Flash_Erase+0x90>)
 8000712:	601a      	str	r2, [r3, #0]
    *FL_KEYR = 0xCDEF89AB;
 8000714:	693b      	ldr	r3, [r7, #16]
 8000716:	4a1c      	ldr	r2, [pc, #112]	@ (8000788 <Flash_Erase+0x94>)
 8000718:	601a      	str	r2, [r3, #0]
  }

  // 1. Check to see if any onging opeartion on Flash
  uint32_t* FL_SR = (uint32_t*)(FLASH_BASE_ADDR + 0x0C);
 800071a:	4b1c      	ldr	r3, [pc, #112]	@ (800078c <Flash_Erase+0x98>)
 800071c:	60fb      	str	r3, [r7, #12]
  
  while (((*FL_SR >> 16) & 1) == 1);
 800071e:	bf00      	nop
 8000720:	68fb      	ldr	r3, [r7, #12]
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000728:	2b00      	cmp	r3, #0
 800072a:	d1f9      	bne.n	8000720 <Flash_Erase+0x2c>
  

  // 2. Set SER bit and select the sector in FLASH_CR regiser
  *FL_CR &= ~(0b1111 << 3);
 800072c:	697b      	ldr	r3, [r7, #20]
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	f023 0278 	bic.w	r2, r3, #120	@ 0x78
 8000734:	697b      	ldr	r3, [r7, #20]
 8000736:	601a      	str	r2, [r3, #0]
  *FL_CR |= (sector_number << 3);
 8000738:	697b      	ldr	r3, [r7, #20]
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	687a      	ldr	r2, [r7, #4]
 800073e:	00d2      	lsls	r2, r2, #3
 8000740:	431a      	orrs	r2, r3
 8000742:	697b      	ldr	r3, [r7, #20]
 8000744:	601a      	str	r2, [r3, #0]
  *FL_CR |= (0b1 << 1);
 8000746:	697b      	ldr	r3, [r7, #20]
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	f043 0202 	orr.w	r2, r3, #2
 800074e:	697b      	ldr	r3, [r7, #20]
 8000750:	601a      	str	r2, [r3, #0]

  // 3. Set the STRT bit in the FLASH_CR register
  *FL_CR |= (0b1 << 16);
 8000752:	697b      	ldr	r3, [r7, #20]
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800075a:	697b      	ldr	r3, [r7, #20]
 800075c:	601a      	str	r2, [r3, #0]

  // 4. Wait for the BSY bit to be cleared
  while (((*FL_SR >> 16 ) & 1) == 1);
 800075e:	bf00      	nop
 8000760:	68fb      	ldr	r3, [r7, #12]
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000768:	2b00      	cmp	r3, #0
 800076a:	d1f9      	bne.n	8000760 <Flash_Erase+0x6c>
}
 800076c:	bf00      	nop
 800076e:	bf00      	nop
 8000770:	371c      	adds	r7, #28
 8000772:	46bd      	mov	sp, r7
 8000774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000778:	4770      	bx	lr
 800077a:	bf00      	nop
 800077c:	40023c10 	.word	0x40023c10
 8000780:	40023c04 	.word	0x40023c04
 8000784:	45670123 	.word	0x45670123
 8000788:	cdef89ab 	.word	0xcdef89ab
 800078c:	40023c0c 	.word	0x40023c0c

08000790 <Flash_Program>:

void Flash_Program(char* flash_addr, char* data_addr, int size) {
 8000790:	b480      	push	{r7}
 8000792:	b089      	sub	sp, #36	@ 0x24
 8000794:	af00      	add	r7, sp, #0
 8000796:	60f8      	str	r0, [r7, #12]
 8000798:	60b9      	str	r1, [r7, #8]
 800079a:	607a      	str	r2, [r7, #4]

  // 0. Check to see if FLASH_CR is locked or not
  uint32_t* FL_CR = (uint32_t*)(FLASH_BASE_ADDR + 0x10);
 800079c:	4b1e      	ldr	r3, [pc, #120]	@ (8000818 <Flash_Program+0x88>)
 800079e:	61bb      	str	r3, [r7, #24]
  if (((*FL_CR >> 31) & 1) == 1) {
 80007a0:	69bb      	ldr	r3, [r7, #24]
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	0fdb      	lsrs	r3, r3, #31
 80007a6:	2b01      	cmp	r3, #1
 80007a8:	d107      	bne.n	80007ba <Flash_Program+0x2a>
    // unlock FLASH_CR by unlock sequence
    uint32_t* FL_KEYR = (uint32_t*)(FLASH_BASE_ADDR + 0x4);
 80007aa:	4b1c      	ldr	r3, [pc, #112]	@ (800081c <Flash_Program+0x8c>)
 80007ac:	617b      	str	r3, [r7, #20]
    *FL_KEYR = KEY1;
 80007ae:	697b      	ldr	r3, [r7, #20]
 80007b0:	4a1b      	ldr	r2, [pc, #108]	@ (8000820 <Flash_Program+0x90>)
 80007b2:	601a      	str	r2, [r3, #0]
    *FL_KEYR = KEY2;
 80007b4:	697b      	ldr	r3, [r7, #20]
 80007b6:	4a1b      	ldr	r2, [pc, #108]	@ (8000824 <Flash_Program+0x94>)
 80007b8:	601a      	str	r2, [r3, #0]
  }

  // 1. Check BSY bit to see if any ongoing operation
  uint32_t* FL_SR = (uint32_t*)(FLASH_BASE_ADDR + 0x0C);
 80007ba:	4b1b      	ldr	r3, [pc, #108]	@ (8000828 <Flash_Program+0x98>)
 80007bc:	613b      	str	r3, [r7, #16]
  
  while (((*FL_SR >> 16) & 1) == 1);
 80007be:	bf00      	nop
 80007c0:	693b      	ldr	r3, [r7, #16]
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d1f9      	bne.n	80007c0 <Flash_Program+0x30>

  // 2. Set the PG bit in the FLASH_CR register
  *FL_CR |= (0b1 << 0);
 80007cc:	69bb      	ldr	r3, [r7, #24]
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	f043 0201 	orr.w	r2, r3, #1
 80007d4:	69bb      	ldr	r3, [r7, #24]
 80007d6:	601a      	str	r2, [r3, #0]

  // 3. Perform the data write operation(s)
  for (int i = 0; i < size; i++) {
 80007d8:	2300      	movs	r3, #0
 80007da:	61fb      	str	r3, [r7, #28]
 80007dc:	e00a      	b.n	80007f4 <Flash_Program+0x64>
    //flash_addr[i] = data_addr[i];
    *(flash_addr+i) = *(data_addr+i);
 80007de:	69fb      	ldr	r3, [r7, #28]
 80007e0:	68ba      	ldr	r2, [r7, #8]
 80007e2:	441a      	add	r2, r3
 80007e4:	69fb      	ldr	r3, [r7, #28]
 80007e6:	68f9      	ldr	r1, [r7, #12]
 80007e8:	440b      	add	r3, r1
 80007ea:	7812      	ldrb	r2, [r2, #0]
 80007ec:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < size; i++) {
 80007ee:	69fb      	ldr	r3, [r7, #28]
 80007f0:	3301      	adds	r3, #1
 80007f2:	61fb      	str	r3, [r7, #28]
 80007f4:	69fa      	ldr	r2, [r7, #28]
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	429a      	cmp	r2, r3
 80007fa:	dbf0      	blt.n	80007de <Flash_Program+0x4e>
  }

  // 4. Wait for the BSY bit to be cleared
  while (((*FL_SR >> 16 ) & 1) == 1);
 80007fc:	bf00      	nop
 80007fe:	693b      	ldr	r3, [r7, #16]
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000806:	2b00      	cmp	r3, #0
 8000808:	d1f9      	bne.n	80007fe <Flash_Program+0x6e>
}
 800080a:	bf00      	nop
 800080c:	bf00      	nop
 800080e:	3724      	adds	r7, #36	@ 0x24
 8000810:	46bd      	mov	sp, r7
 8000812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000816:	4770      	bx	lr
 8000818:	40023c10 	.word	0x40023c10
 800081c:	40023c04 	.word	0x40023c04
 8000820:	45670123 	.word	0x45670123
 8000824:	cdef89ab 	.word	0xcdef89ab
 8000828:	40023c0c 	.word	0x40023c0c

0800082c <Flash_Read>:

volatile uint32_t read_data_buffer;

void Flash_Read(uint8_t* data, int sector_number) {
 800082c:	b480      	push	{r7}
 800082e:	b085      	sub	sp, #20
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
 8000834:	6039      	str	r1, [r7, #0]

  volatile uint32_t read_cnt = 0;
 8000836:	2300      	movs	r3, #0
 8000838:	60bb      	str	r3, [r7, #8]
  volatile char* flash_addr;
 
  switch (sector_number) {
 800083a:	683b      	ldr	r3, [r7, #0]
 800083c:	2b07      	cmp	r3, #7
 800083e:	d82c      	bhi.n	800089a <Flash_Read+0x6e>
 8000840:	a201      	add	r2, pc, #4	@ (adr r2, 8000848 <Flash_Read+0x1c>)
 8000842:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000846:	bf00      	nop
 8000848:	08000869 	.word	0x08000869
 800084c:	08000871 	.word	0x08000871
 8000850:	08000877 	.word	0x08000877
 8000854:	0800087d 	.word	0x0800087d
 8000858:	08000883 	.word	0x08000883
 800085c:	08000889 	.word	0x08000889
 8000860:	0800088f 	.word	0x0800088f
 8000864:	08000895 	.word	0x08000895
    case 0:
      flash_addr = (char*)0x08000000;
 8000868:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800086c:	60fb      	str	r3, [r7, #12]
      break;
 800086e:	e017      	b.n	80008a0 <Flash_Read+0x74>
 
    case 1:
      flash_addr = (char*)0x08004000;
 8000870:	4b29      	ldr	r3, [pc, #164]	@ (8000918 <Flash_Read+0xec>)
 8000872:	60fb      	str	r3, [r7, #12]
      break;
 8000874:	e014      	b.n	80008a0 <Flash_Read+0x74>
 
    case 2:
      flash_addr = (char*)0x08008000;
 8000876:	4b29      	ldr	r3, [pc, #164]	@ (800091c <Flash_Read+0xf0>)
 8000878:	60fb      	str	r3, [r7, #12]
      break;
 800087a:	e011      	b.n	80008a0 <Flash_Read+0x74>
 
    case 3:
      flash_addr = (char*)0x0800C000;
 800087c:	4b28      	ldr	r3, [pc, #160]	@ (8000920 <Flash_Read+0xf4>)
 800087e:	60fb      	str	r3, [r7, #12]
      break;
 8000880:	e00e      	b.n	80008a0 <Flash_Read+0x74>
 
    case 4:
      flash_addr = (char*)0x08010000;
 8000882:	4b28      	ldr	r3, [pc, #160]	@ (8000924 <Flash_Read+0xf8>)
 8000884:	60fb      	str	r3, [r7, #12]
      break;
 8000886:	e00b      	b.n	80008a0 <Flash_Read+0x74>
 
    case 5:
      flash_addr = (char*)0x08020000;
 8000888:	4b27      	ldr	r3, [pc, #156]	@ (8000928 <Flash_Read+0xfc>)
 800088a:	60fb      	str	r3, [r7, #12]
      break;
 800088c:	e008      	b.n	80008a0 <Flash_Read+0x74>
 
    case 6:
      flash_addr = (char*)0x08040000;
 800088e:	4b27      	ldr	r3, [pc, #156]	@ (800092c <Flash_Read+0x100>)
 8000890:	60fb      	str	r3, [r7, #12]
      break;
 8000892:	e005      	b.n	80008a0 <Flash_Read+0x74>
 
    case 7:
      flash_addr = (char*)0x08060000;
 8000894:	4b26      	ldr	r3, [pc, #152]	@ (8000930 <Flash_Read+0x104>)
 8000896:	60fb      	str	r3, [r7, #12]
      break;
 8000898:	e002      	b.n	80008a0 <Flash_Read+0x74>
 
    default:
      flash_addr = (char*)0x08000000;
 800089a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800089e:	60fb      	str	r3, [r7, #12]
  }
 
  do {
    read_data_buffer = *(uint32_t*)(flash_addr + read_cnt);
 80008a0:	68bb      	ldr	r3, [r7, #8]
 80008a2:	68fa      	ldr	r2, [r7, #12]
 80008a4:	4413      	add	r3, r2
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	4a22      	ldr	r2, [pc, #136]	@ (8000934 <Flash_Read+0x108>)
 80008aa:	6013      	str	r3, [r2, #0]
 
    if (read_data_buffer != 0xFFFFFFFF) {
 80008ac:	4b21      	ldr	r3, [pc, #132]	@ (8000934 <Flash_Read+0x108>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80008b4:	d024      	beq.n	8000900 <Flash_Read+0xd4>
      data[read_cnt] 		  = (uint8_t)read_data_buffer;
 80008b6:	4b1f      	ldr	r3, [pc, #124]	@ (8000934 <Flash_Read+0x108>)
 80008b8:	6819      	ldr	r1, [r3, #0]
 80008ba:	68bb      	ldr	r3, [r7, #8]
 80008bc:	687a      	ldr	r2, [r7, #4]
 80008be:	4413      	add	r3, r2
 80008c0:	b2ca      	uxtb	r2, r1
 80008c2:	701a      	strb	r2, [r3, #0]
      data[read_cnt+1] 		= (uint8_t)(read_data_buffer >> 8);
 80008c4:	4b1b      	ldr	r3, [pc, #108]	@ (8000934 <Flash_Read+0x108>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	0a19      	lsrs	r1, r3, #8
 80008ca:	68bb      	ldr	r3, [r7, #8]
 80008cc:	3301      	adds	r3, #1
 80008ce:	687a      	ldr	r2, [r7, #4]
 80008d0:	4413      	add	r3, r2
 80008d2:	b2ca      	uxtb	r2, r1
 80008d4:	701a      	strb	r2, [r3, #0]
      data[read_cnt+2] 		= (uint8_t)(read_data_buffer >> 16);
 80008d6:	4b17      	ldr	r3, [pc, #92]	@ (8000934 <Flash_Read+0x108>)
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	0c19      	lsrs	r1, r3, #16
 80008dc:	68bb      	ldr	r3, [r7, #8]
 80008de:	3302      	adds	r3, #2
 80008e0:	687a      	ldr	r2, [r7, #4]
 80008e2:	4413      	add	r3, r2
 80008e4:	b2ca      	uxtb	r2, r1
 80008e6:	701a      	strb	r2, [r3, #0]
      data[read_cnt+3] 		= (uint8_t)(read_data_buffer >> 24);
 80008e8:	4b12      	ldr	r3, [pc, #72]	@ (8000934 <Flash_Read+0x108>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	0e19      	lsrs	r1, r3, #24
 80008ee:	68bb      	ldr	r3, [r7, #8]
 80008f0:	3303      	adds	r3, #3
 80008f2:	687a      	ldr	r2, [r7, #4]
 80008f4:	4413      	add	r3, r2
 80008f6:	b2ca      	uxtb	r2, r1
 80008f8:	701a      	strb	r2, [r3, #0]
      read_cnt += 4;
 80008fa:	68bb      	ldr	r3, [r7, #8]
 80008fc:	3304      	adds	r3, #4
 80008fe:	60bb      	str	r3, [r7, #8]
    }
  } while(read_data_buffer != 0xFFFFFFFF);
 8000900:	4b0c      	ldr	r3, [pc, #48]	@ (8000934 <Flash_Read+0x108>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000908:	d1ca      	bne.n	80008a0 <Flash_Read+0x74>
}
 800090a:	bf00      	nop
 800090c:	bf00      	nop
 800090e:	3714      	adds	r7, #20
 8000910:	46bd      	mov	sp, r7
 8000912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000916:	4770      	bx	lr
 8000918:	08004000 	.word	0x08004000
 800091c:	08008000 	.word	0x08008000
 8000920:	0800c000 	.word	0x0800c000
 8000924:	08010000 	.word	0x08010000
 8000928:	08020000 	.word	0x08020000
 800092c:	08040000 	.word	0x08040000
 8000930:	08060000 	.word	0x08060000
 8000934:	20000098 	.word	0x20000098

08000938 <current_firmware_init>:

// bootloader
void current_firmware_init(uint32_t* firmware_addr, uint32_t* tmp) {
 8000938:	b580      	push	{r7, lr}
 800093a:	b086      	sub	sp, #24
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
 8000940:	6039      	str	r1, [r7, #0]
 uint32_t* reset_hander_address_pointer;


 reset_hander_address_pointer = (uint32_t*)(tmp);
 8000942:	683b      	ldr	r3, [r7, #0]
 8000944:	617b      	str	r3, [r7, #20]

 uint32_t reset_hander_address = *reset_hander_address_pointer;
 8000946:	697b      	ldr	r3, [r7, #20]
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	613b      	str	r3, [r7, #16]

 void (*hander)();
 hander = reset_hander_address;
 800094c:	693b      	ldr	r3, [r7, #16]
 800094e:	60fb      	str	r3, [r7, #12]

 uint32_t* VTOR = (uint32_t*)0xE000ED08;
 8000950:	4b05      	ldr	r3, [pc, #20]	@ (8000968 <current_firmware_init+0x30>)
 8000952:	60bb      	str	r3, [r7, #8]
 *VTOR = firmware_addr;
 8000954:	687a      	ldr	r2, [r7, #4]
 8000956:	68bb      	ldr	r3, [r7, #8]
 8000958:	601a      	str	r2, [r3, #0]
 hander();
 800095a:	68fb      	ldr	r3, [r7, #12]
 800095c:	4798      	blx	r3
}
 800095e:	bf00      	nop
 8000960:	3718      	adds	r7, #24
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	e000ed08 	.word	0xe000ed08

0800096c <swap_fw_func>:

char swap_fw[128000];
void swap_fw_func() {
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0

  memset(swap_fw, 0 , sizeof(swap_fw));
 8000970:	f44f 32fa 	mov.w	r2, #128000	@ 0x1f400
 8000974:	2100      	movs	r1, #0
 8000976:	4817      	ldr	r0, [pc, #92]	@ (80009d4 <swap_fw_func+0x68>)
 8000978:	f002 fcd2 	bl	8003320 <memset>
  Flash_Read((uint8_t*)swap_fw, 5);
 800097c:	2105      	movs	r1, #5
 800097e:	4815      	ldr	r0, [pc, #84]	@ (80009d4 <swap_fw_func+0x68>)
 8000980:	f7ff ff54 	bl	800082c <Flash_Read>

  Flash_Erase(7);
 8000984:	2007      	movs	r0, #7
 8000986:	f7ff feb5 	bl	80006f4 <Flash_Erase>
  Flash_Program((char*)0x08060000, swap_fw, sizeof(swap_fw));
 800098a:	f44f 32fa 	mov.w	r2, #128000	@ 0x1f400
 800098e:	4911      	ldr	r1, [pc, #68]	@ (80009d4 <swap_fw_func+0x68>)
 8000990:	4811      	ldr	r0, [pc, #68]	@ (80009d8 <swap_fw_func+0x6c>)
 8000992:	f7ff fefd 	bl	8000790 <Flash_Program>

  memset(swap_fw, 0 , sizeof(swap_fw));
 8000996:	f44f 32fa 	mov.w	r2, #128000	@ 0x1f400
 800099a:	2100      	movs	r1, #0
 800099c:	480d      	ldr	r0, [pc, #52]	@ (80009d4 <swap_fw_func+0x68>)
 800099e:	f002 fcbf 	bl	8003320 <memset>
  Flash_Read((uint8_t*)swap_fw, 6);
 80009a2:	2106      	movs	r1, #6
 80009a4:	480b      	ldr	r0, [pc, #44]	@ (80009d4 <swap_fw_func+0x68>)
 80009a6:	f7ff ff41 	bl	800082c <Flash_Read>
  Flash_Erase(5);
 80009aa:	2005      	movs	r0, #5
 80009ac:	f7ff fea2 	bl	80006f4 <Flash_Erase>
  Flash_Program((char*)0x08020000, swap_fw, sizeof(swap_fw));
 80009b0:	f44f 32fa 	mov.w	r2, #128000	@ 0x1f400
 80009b4:	4907      	ldr	r1, [pc, #28]	@ (80009d4 <swap_fw_func+0x68>)
 80009b6:	4809      	ldr	r0, [pc, #36]	@ (80009dc <swap_fw_func+0x70>)
 80009b8:	f7ff feea 	bl	8000790 <Flash_Program>

  uart_send_string("Firmwares SWAPPED!\n");
 80009bc:	4808      	ldr	r0, [pc, #32]	@ (80009e0 <swap_fw_func+0x74>)
 80009be:	f7ff fd87 	bl	80004d0 <uart_send_string>
  Flash_Erase(4);
 80009c2:	2004      	movs	r0, #4
 80009c4:	f7ff fe96 	bl	80006f4 <Flash_Erase>
  uart_send_string("BOOTLOADER - Erased sector 4\n");
 80009c8:	4806      	ldr	r0, [pc, #24]	@ (80009e4 <swap_fw_func+0x78>)
 80009ca:	f7ff fd81 	bl	80004d0 <uart_send_string>

}
 80009ce:	bf00      	nop
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	2000009c 	.word	0x2000009c
 80009d8:	08060000 	.word	0x08060000
 80009dc:	08020000 	.word	0x08020000
 80009e0:	08003470 	.word	0x08003470
 80009e4:	08003484 	.word	0x08003484

080009e8 <check_info>:


char msg_rec[64];
int check_info(char* msg_check) {
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b084      	sub	sp, #16
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
 int status = 0;
 80009f0:	2300      	movs	r3, #0
 80009f2:	60fb      	str	r3, [r7, #12]
//char msg_rec[sizeof(msg_check)];

 uart_send_string("Checking sector 4 \n");
 80009f4:	4814      	ldr	r0, [pc, #80]	@ (8000a48 <check_info+0x60>)
 80009f6:	f7ff fd6b 	bl	80004d0 <uart_send_string>

//memset(msg_rec, 0 , sizeof(msg_rec));
 Flash_Read((uint8_t*)msg_rec, 4);
 80009fa:	2104      	movs	r1, #4
 80009fc:	4813      	ldr	r0, [pc, #76]	@ (8000a4c <check_info+0x64>)
 80009fe:	f7ff ff15 	bl	800082c <Flash_Read>

 uart_send_string("Finished reading sector 4 \n");
 8000a02:	4813      	ldr	r0, [pc, #76]	@ (8000a50 <check_info+0x68>)
 8000a04:	f7ff fd64 	bl	80004d0 <uart_send_string>

 if (strstr(msg_rec, "\n")) {
 8000a08:	210a      	movs	r1, #10
 8000a0a:	4810      	ldr	r0, [pc, #64]	@ (8000a4c <check_info+0x64>)
 8000a0c:	f002 fc90 	bl	8003330 <strchr>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d00f      	beq.n	8000a36 <check_info+0x4e>
   if (strstr((char*)msg_rec, msg_check)) {
 8000a16:	6879      	ldr	r1, [r7, #4]
 8000a18:	480c      	ldr	r0, [pc, #48]	@ (8000a4c <check_info+0x64>)
 8000a1a:	f002 fc96 	bl	800334a <strstr>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d005      	beq.n	8000a30 <check_info+0x48>
     status = 1;
 8000a24:	2301      	movs	r3, #1
 8000a26:	60fb      	str	r3, [r7, #12]
     uart_send_string("Da nhan du firmware\n");
 8000a28:	480a      	ldr	r0, [pc, #40]	@ (8000a54 <check_info+0x6c>)
 8000a2a:	f7ff fd51 	bl	80004d0 <uart_send_string>
 8000a2e:	e002      	b.n	8000a36 <check_info+0x4e>
   } else {
     uart_send_string("Firmware COOKED!\n");
 8000a30:	4809      	ldr	r0, [pc, #36]	@ (8000a58 <check_info+0x70>)
 8000a32:	f7ff fd4d 	bl	80004d0 <uart_send_string>
   }
 }

//memset(msg_rec, 0, sizeof(msg_rec));
  uart_send_string("Finished checking sector 4 \n");
 8000a36:	4809      	ldr	r0, [pc, #36]	@ (8000a5c <check_info+0x74>)
 8000a38:	f7ff fd4a 	bl	80004d0 <uart_send_string>
  return status;
 8000a3c:	68fb      	ldr	r3, [r7, #12]
}
 8000a3e:	4618      	mov	r0, r3
 8000a40:	3710      	adds	r7, #16
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	080034a4 	.word	0x080034a4
 8000a4c:	2001f49c 	.word	0x2001f49c
 8000a50:	080034b8 	.word	0x080034b8
 8000a54:	080034d4 	.word	0x080034d4
 8000a58:	080034ec 	.word	0x080034ec
 8000a5c:	08003500 	.word	0x08003500

08000a60 <main>:

//char new_fw[10516];
int fw_status = 0;
char fw_msg[] = "New firmware received!\n";

int main() {
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0

 HAL_Init();
 8000a64:	f000 f8e4 	bl	8000c30 <HAL_Init>
  Button_Init();
 8000a68:	f7ff fbbe 	bl	80001e8 <Button_Init>
  Led_Init();
 8000a6c:	f7ff fbe0 	bl	8000230 <Led_Init>
  Button_Interrupt_Int();
 8000a70:	f7ff fc40 	bl	80002f4 <Button_Interrupt_Int>
  Uart_Init();
 8000a74:	f7ff fc8c 	bl	8000390 <Uart_Init>
Uart_Interrupt_Init();
 8000a78:	f7ff fd66 	bl	8000548 <Uart_Interrupt_Init>

  // uart_send_string("Da nhan duoc firmware...\n");
  // Flash_Erase(6);
  // Flash_Program((char*)0x08040000, new_fw, sizeof(new_fw));
  
  uart_send_string("BOOTLEADER!!!!!\n");
 8000a7c:	4815      	ldr	r0, [pc, #84]	@ (8000ad4 <main+0x74>)
 8000a7e:	f7ff fd27 	bl	80004d0 <uart_send_string>

  while(1) {
     Led_Ctrl(BLUE_LED, ON);
 8000a82:	4b15      	ldr	r3, [pc, #84]	@ (8000ad8 <main+0x78>)
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	4a15      	ldr	r2, [pc, #84]	@ (8000adc <main+0x7c>)
 8000a88:	6812      	ldr	r2, [r2, #0]
 8000a8a:	4611      	mov	r1, r2
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f7ff fbf9 	bl	8000284 <Led_Ctrl>
     HAL_Delay(1000);
 8000a92:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000a96:	f000 f93d 	bl	8000d14 <HAL_Delay>
     Led_Ctrl(BLUE_LED, OFF);
 8000a9a:	4b0f      	ldr	r3, [pc, #60]	@ (8000ad8 <main+0x78>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	4a10      	ldr	r2, [pc, #64]	@ (8000ae0 <main+0x80>)
 8000aa0:	6812      	ldr	r2, [r2, #0]
 8000aa2:	4611      	mov	r1, r2
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f7ff fbed 	bl	8000284 <Led_Ctrl>
     HAL_Delay(1000);
 8000aaa:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000aae:	f000 f931 	bl	8000d14 <HAL_Delay>
     uart_send_string("HELLO\n");
 8000ab2:	480c      	ldr	r0, [pc, #48]	@ (8000ae4 <main+0x84>)
 8000ab4:	f7ff fd0c 	bl	80004d0 <uart_send_string>
  // } else {
  //   uart_send_string("BL - Running FW1\n");
 	// 	current_firmware_init((uint32_t*)0x08020000, (uint32_t*)0x08020004);
  // }

    if (check_info(fw_msg))
 8000ab8:	480b      	ldr	r0, [pc, #44]	@ (8000ae8 <main+0x88>)
 8000aba:	f7ff ff95 	bl	80009e8 <check_info>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d001      	beq.n	8000ac8 <main+0x68>
      swap_fw_func();
 8000ac4:	f7ff ff52 	bl	800096c <swap_fw_func>

  current_firmware_init((uint32_t*)0x08020000, (uint32_t*)0x08020004);
 8000ac8:	4908      	ldr	r1, [pc, #32]	@ (8000aec <main+0x8c>)
 8000aca:	4809      	ldr	r0, [pc, #36]	@ (8000af0 <main+0x90>)
 8000acc:	f7ff ff34 	bl	8000938 <current_firmware_init>
     Led_Ctrl(BLUE_LED, ON);
 8000ad0:	e7d7      	b.n	8000a82 <main+0x22>
 8000ad2:	bf00      	nop
 8000ad4:	08003520 	.word	0x08003520
 8000ad8:	20000004 	.word	0x20000004
 8000adc:	20000008 	.word	0x20000008
 8000ae0:	2000004c 	.word	0x2000004c
 8000ae4:	08003534 	.word	0x08003534
 8000ae8:	2000000c 	.word	0x2000000c
 8000aec:	08020004 	.word	0x08020004
 8000af0:	08020000 	.word	0x08020000

08000af4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b082      	sub	sp, #8
 8000af8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000afa:	2300      	movs	r3, #0
 8000afc:	607b      	str	r3, [r7, #4]
 8000afe:	4b10      	ldr	r3, [pc, #64]	@ (8000b40 <HAL_MspInit+0x4c>)
 8000b00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b02:	4a0f      	ldr	r2, [pc, #60]	@ (8000b40 <HAL_MspInit+0x4c>)
 8000b04:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b08:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b0a:	4b0d      	ldr	r3, [pc, #52]	@ (8000b40 <HAL_MspInit+0x4c>)
 8000b0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b0e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b12:	607b      	str	r3, [r7, #4]
 8000b14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b16:	2300      	movs	r3, #0
 8000b18:	603b      	str	r3, [r7, #0]
 8000b1a:	4b09      	ldr	r3, [pc, #36]	@ (8000b40 <HAL_MspInit+0x4c>)
 8000b1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b1e:	4a08      	ldr	r2, [pc, #32]	@ (8000b40 <HAL_MspInit+0x4c>)
 8000b20:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b24:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b26:	4b06      	ldr	r3, [pc, #24]	@ (8000b40 <HAL_MspInit+0x4c>)
 8000b28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b2e:	603b      	str	r3, [r7, #0]
 8000b30:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000b32:	2007      	movs	r0, #7
 8000b34:	f000 f9c4 	bl	8000ec0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b38:	bf00      	nop
 8000b3a:	3708      	adds	r7, #8
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	40023800 	.word	0x40023800

08000b44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b48:	bf00      	nop
 8000b4a:	e7fd      	b.n	8000b48 <NMI_Handler+0x4>

08000b4c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b50:	bf00      	nop
 8000b52:	e7fd      	b.n	8000b50 <HardFault_Handler+0x4>

08000b54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b58:	bf00      	nop
 8000b5a:	e7fd      	b.n	8000b58 <MemManage_Handler+0x4>

08000b5c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b60:	bf00      	nop
 8000b62:	e7fd      	b.n	8000b60 <BusFault_Handler+0x4>

08000b64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b68:	bf00      	nop
 8000b6a:	e7fd      	b.n	8000b68 <UsageFault_Handler+0x4>

08000b6c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b70:	bf00      	nop
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr

08000b7a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b7a:	b480      	push	{r7}
 8000b7c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b7e:	bf00      	nop
 8000b80:	46bd      	mov	sp, r7
 8000b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b86:	4770      	bx	lr

08000b88 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b8c:	bf00      	nop
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b94:	4770      	bx	lr

08000b96 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b96:	b580      	push	{r7, lr}
 8000b98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b9a:	f000 f89b 	bl	8000cd4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b9e:	bf00      	nop
 8000ba0:	bd80      	pop	{r7, pc}
	...

08000ba4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000ba8:	4802      	ldr	r0, [pc, #8]	@ (8000bb4 <OTG_FS_IRQHandler+0x10>)
 8000baa:	f000 f9bc 	bl	8000f26 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000bae:	bf00      	nop
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	2001f4e0 	.word	0x2001f4e0

08000bb8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bbc:	4b06      	ldr	r3, [pc, #24]	@ (8000bd8 <SystemInit+0x20>)
 8000bbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000bc2:	4a05      	ldr	r2, [pc, #20]	@ (8000bd8 <SystemInit+0x20>)
 8000bc4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000bc8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bcc:	bf00      	nop
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop
 8000bd8:	e000ed00 	.word	0xe000ed00

08000bdc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000bdc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c14 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000be0:	f7ff ffea 	bl	8000bb8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000be4:	480c      	ldr	r0, [pc, #48]	@ (8000c18 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000be6:	490d      	ldr	r1, [pc, #52]	@ (8000c1c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000be8:	4a0d      	ldr	r2, [pc, #52]	@ (8000c20 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000bea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bec:	e002      	b.n	8000bf4 <LoopCopyDataInit>

08000bee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bf0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bf2:	3304      	adds	r3, #4

08000bf4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bf4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bf6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bf8:	d3f9      	bcc.n	8000bee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bfa:	4a0a      	ldr	r2, [pc, #40]	@ (8000c24 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000bfc:	4c0a      	ldr	r4, [pc, #40]	@ (8000c28 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000bfe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c00:	e001      	b.n	8000c06 <LoopFillZerobss>

08000c02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c04:	3204      	adds	r2, #4

08000c06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c08:	d3fb      	bcc.n	8000c02 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c0a:	f002 fbb5 	bl	8003378 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c0e:	f7ff ff27 	bl	8000a60 <main>
  bx  lr    
 8000c12:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c14:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c1c:	20000030 	.word	0x20000030
  ldr r2, =_sidata
 8000c20:	0800354c 	.word	0x0800354c
  ldr r2, =_sbss
 8000c24:	20000030 	.word	0x20000030
  ldr r4, =_ebss
 8000c28:	2001f8c0 	.word	0x2001f8c0

08000c2c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c2c:	e7fe      	b.n	8000c2c <ADC_IRQHandler>
	...

08000c30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c34:	4b0e      	ldr	r3, [pc, #56]	@ (8000c70 <HAL_Init+0x40>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	4a0d      	ldr	r2, [pc, #52]	@ (8000c70 <HAL_Init+0x40>)
 8000c3a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000c3e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c40:	4b0b      	ldr	r3, [pc, #44]	@ (8000c70 <HAL_Init+0x40>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	4a0a      	ldr	r2, [pc, #40]	@ (8000c70 <HAL_Init+0x40>)
 8000c46:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000c4a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c4c:	4b08      	ldr	r3, [pc, #32]	@ (8000c70 <HAL_Init+0x40>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	4a07      	ldr	r2, [pc, #28]	@ (8000c70 <HAL_Init+0x40>)
 8000c52:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c56:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c58:	2003      	movs	r0, #3
 8000c5a:	f000 f931 	bl	8000ec0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c5e:	2000      	movs	r0, #0
 8000c60:	f000 f808 	bl	8000c74 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c64:	f7ff ff46 	bl	8000af4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c68:	2300      	movs	r3, #0
}
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	40023c00 	.word	0x40023c00

08000c74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b082      	sub	sp, #8
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c7c:	4b12      	ldr	r3, [pc, #72]	@ (8000cc8 <HAL_InitTick+0x54>)
 8000c7e:	681a      	ldr	r2, [r3, #0]
 8000c80:	4b12      	ldr	r3, [pc, #72]	@ (8000ccc <HAL_InitTick+0x58>)
 8000c82:	781b      	ldrb	r3, [r3, #0]
 8000c84:	4619      	mov	r1, r3
 8000c86:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c92:	4618      	mov	r0, r3
 8000c94:	f000 f93b 	bl	8000f0e <HAL_SYSTICK_Config>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d001      	beq.n	8000ca2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	e00e      	b.n	8000cc0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	2b0f      	cmp	r3, #15
 8000ca6:	d80a      	bhi.n	8000cbe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ca8:	2200      	movs	r2, #0
 8000caa:	6879      	ldr	r1, [r7, #4]
 8000cac:	f04f 30ff 	mov.w	r0, #4294967295
 8000cb0:	f000 f911 	bl	8000ed6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cb4:	4a06      	ldr	r2, [pc, #24]	@ (8000cd0 <HAL_InitTick+0x5c>)
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	e000      	b.n	8000cc0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cbe:	2301      	movs	r3, #1
}
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	3708      	adds	r7, #8
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	20000024 	.word	0x20000024
 8000ccc:	2000002c 	.word	0x2000002c
 8000cd0:	20000028 	.word	0x20000028

08000cd4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cd8:	4b06      	ldr	r3, [pc, #24]	@ (8000cf4 <HAL_IncTick+0x20>)
 8000cda:	781b      	ldrb	r3, [r3, #0]
 8000cdc:	461a      	mov	r2, r3
 8000cde:	4b06      	ldr	r3, [pc, #24]	@ (8000cf8 <HAL_IncTick+0x24>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	4413      	add	r3, r2
 8000ce4:	4a04      	ldr	r2, [pc, #16]	@ (8000cf8 <HAL_IncTick+0x24>)
 8000ce6:	6013      	str	r3, [r2, #0]
}
 8000ce8:	bf00      	nop
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr
 8000cf2:	bf00      	nop
 8000cf4:	2000002c 	.word	0x2000002c
 8000cf8:	2001f4dc 	.word	0x2001f4dc

08000cfc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  return uwTick;
 8000d00:	4b03      	ldr	r3, [pc, #12]	@ (8000d10 <HAL_GetTick+0x14>)
 8000d02:	681b      	ldr	r3, [r3, #0]
}
 8000d04:	4618      	mov	r0, r3
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop
 8000d10:	2001f4dc 	.word	0x2001f4dc

08000d14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b084      	sub	sp, #16
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d1c:	f7ff ffee 	bl	8000cfc <HAL_GetTick>
 8000d20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d2c:	d005      	beq.n	8000d3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d2e:	4b0a      	ldr	r3, [pc, #40]	@ (8000d58 <HAL_Delay+0x44>)
 8000d30:	781b      	ldrb	r3, [r3, #0]
 8000d32:	461a      	mov	r2, r3
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	4413      	add	r3, r2
 8000d38:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d3a:	bf00      	nop
 8000d3c:	f7ff ffde 	bl	8000cfc <HAL_GetTick>
 8000d40:	4602      	mov	r2, r0
 8000d42:	68bb      	ldr	r3, [r7, #8]
 8000d44:	1ad3      	subs	r3, r2, r3
 8000d46:	68fa      	ldr	r2, [r7, #12]
 8000d48:	429a      	cmp	r2, r3
 8000d4a:	d8f7      	bhi.n	8000d3c <HAL_Delay+0x28>
  {
  }
}
 8000d4c:	bf00      	nop
 8000d4e:	bf00      	nop
 8000d50:	3710      	adds	r7, #16
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	2000002c 	.word	0x2000002c

08000d5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b085      	sub	sp, #20
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	f003 0307 	and.w	r3, r3, #7
 8000d6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d6c:	4b0c      	ldr	r3, [pc, #48]	@ (8000da0 <__NVIC_SetPriorityGrouping+0x44>)
 8000d6e:	68db      	ldr	r3, [r3, #12]
 8000d70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d72:	68ba      	ldr	r2, [r7, #8]
 8000d74:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d78:	4013      	ands	r3, r2
 8000d7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d80:	68bb      	ldr	r3, [r7, #8]
 8000d82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d84:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d88:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d8e:	4a04      	ldr	r2, [pc, #16]	@ (8000da0 <__NVIC_SetPriorityGrouping+0x44>)
 8000d90:	68bb      	ldr	r3, [r7, #8]
 8000d92:	60d3      	str	r3, [r2, #12]
}
 8000d94:	bf00      	nop
 8000d96:	3714      	adds	r7, #20
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9e:	4770      	bx	lr
 8000da0:	e000ed00 	.word	0xe000ed00

08000da4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000da8:	4b04      	ldr	r3, [pc, #16]	@ (8000dbc <__NVIC_GetPriorityGrouping+0x18>)
 8000daa:	68db      	ldr	r3, [r3, #12]
 8000dac:	0a1b      	lsrs	r3, r3, #8
 8000dae:	f003 0307 	and.w	r3, r3, #7
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	46bd      	mov	sp, r7
 8000db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dba:	4770      	bx	lr
 8000dbc:	e000ed00 	.word	0xe000ed00

08000dc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b083      	sub	sp, #12
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	6039      	str	r1, [r7, #0]
 8000dca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	db0a      	blt.n	8000dea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	b2da      	uxtb	r2, r3
 8000dd8:	490c      	ldr	r1, [pc, #48]	@ (8000e0c <__NVIC_SetPriority+0x4c>)
 8000dda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dde:	0112      	lsls	r2, r2, #4
 8000de0:	b2d2      	uxtb	r2, r2
 8000de2:	440b      	add	r3, r1
 8000de4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000de8:	e00a      	b.n	8000e00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	b2da      	uxtb	r2, r3
 8000dee:	4908      	ldr	r1, [pc, #32]	@ (8000e10 <__NVIC_SetPriority+0x50>)
 8000df0:	79fb      	ldrb	r3, [r7, #7]
 8000df2:	f003 030f 	and.w	r3, r3, #15
 8000df6:	3b04      	subs	r3, #4
 8000df8:	0112      	lsls	r2, r2, #4
 8000dfa:	b2d2      	uxtb	r2, r2
 8000dfc:	440b      	add	r3, r1
 8000dfe:	761a      	strb	r2, [r3, #24]
}
 8000e00:	bf00      	nop
 8000e02:	370c      	adds	r7, #12
 8000e04:	46bd      	mov	sp, r7
 8000e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0a:	4770      	bx	lr
 8000e0c:	e000e100 	.word	0xe000e100
 8000e10:	e000ed00 	.word	0xe000ed00

08000e14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e14:	b480      	push	{r7}
 8000e16:	b089      	sub	sp, #36	@ 0x24
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	60f8      	str	r0, [r7, #12]
 8000e1c:	60b9      	str	r1, [r7, #8]
 8000e1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	f003 0307 	and.w	r3, r3, #7
 8000e26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e28:	69fb      	ldr	r3, [r7, #28]
 8000e2a:	f1c3 0307 	rsb	r3, r3, #7
 8000e2e:	2b04      	cmp	r3, #4
 8000e30:	bf28      	it	cs
 8000e32:	2304      	movcs	r3, #4
 8000e34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e36:	69fb      	ldr	r3, [r7, #28]
 8000e38:	3304      	adds	r3, #4
 8000e3a:	2b06      	cmp	r3, #6
 8000e3c:	d902      	bls.n	8000e44 <NVIC_EncodePriority+0x30>
 8000e3e:	69fb      	ldr	r3, [r7, #28]
 8000e40:	3b03      	subs	r3, #3
 8000e42:	e000      	b.n	8000e46 <NVIC_EncodePriority+0x32>
 8000e44:	2300      	movs	r3, #0
 8000e46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e48:	f04f 32ff 	mov.w	r2, #4294967295
 8000e4c:	69bb      	ldr	r3, [r7, #24]
 8000e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e52:	43da      	mvns	r2, r3
 8000e54:	68bb      	ldr	r3, [r7, #8]
 8000e56:	401a      	ands	r2, r3
 8000e58:	697b      	ldr	r3, [r7, #20]
 8000e5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e5c:	f04f 31ff 	mov.w	r1, #4294967295
 8000e60:	697b      	ldr	r3, [r7, #20]
 8000e62:	fa01 f303 	lsl.w	r3, r1, r3
 8000e66:	43d9      	mvns	r1, r3
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e6c:	4313      	orrs	r3, r2
         );
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	3724      	adds	r7, #36	@ 0x24
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr
	...

08000e7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	3b01      	subs	r3, #1
 8000e88:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000e8c:	d301      	bcc.n	8000e92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e8e:	2301      	movs	r3, #1
 8000e90:	e00f      	b.n	8000eb2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e92:	4a0a      	ldr	r2, [pc, #40]	@ (8000ebc <SysTick_Config+0x40>)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	3b01      	subs	r3, #1
 8000e98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e9a:	210f      	movs	r1, #15
 8000e9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000ea0:	f7ff ff8e 	bl	8000dc0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ea4:	4b05      	ldr	r3, [pc, #20]	@ (8000ebc <SysTick_Config+0x40>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000eaa:	4b04      	ldr	r3, [pc, #16]	@ (8000ebc <SysTick_Config+0x40>)
 8000eac:	2207      	movs	r2, #7
 8000eae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000eb0:	2300      	movs	r3, #0
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	3708      	adds	r7, #8
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	e000e010 	.word	0xe000e010

08000ec0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ec8:	6878      	ldr	r0, [r7, #4]
 8000eca:	f7ff ff47 	bl	8000d5c <__NVIC_SetPriorityGrouping>
}
 8000ece:	bf00      	nop
 8000ed0:	3708      	adds	r7, #8
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}

08000ed6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ed6:	b580      	push	{r7, lr}
 8000ed8:	b086      	sub	sp, #24
 8000eda:	af00      	add	r7, sp, #0
 8000edc:	4603      	mov	r3, r0
 8000ede:	60b9      	str	r1, [r7, #8]
 8000ee0:	607a      	str	r2, [r7, #4]
 8000ee2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ee8:	f7ff ff5c 	bl	8000da4 <__NVIC_GetPriorityGrouping>
 8000eec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000eee:	687a      	ldr	r2, [r7, #4]
 8000ef0:	68b9      	ldr	r1, [r7, #8]
 8000ef2:	6978      	ldr	r0, [r7, #20]
 8000ef4:	f7ff ff8e 	bl	8000e14 <NVIC_EncodePriority>
 8000ef8:	4602      	mov	r2, r0
 8000efa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000efe:	4611      	mov	r1, r2
 8000f00:	4618      	mov	r0, r3
 8000f02:	f7ff ff5d 	bl	8000dc0 <__NVIC_SetPriority>
}
 8000f06:	bf00      	nop
 8000f08:	3718      	adds	r7, #24
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}

08000f0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f0e:	b580      	push	{r7, lr}
 8000f10:	b082      	sub	sp, #8
 8000f12:	af00      	add	r7, sp, #0
 8000f14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f16:	6878      	ldr	r0, [r7, #4]
 8000f18:	f7ff ffb0 	bl	8000e7c <SysTick_Config>
 8000f1c:	4603      	mov	r3, r0
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	3708      	adds	r7, #8
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}

08000f26 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8000f26:	b580      	push	{r7, lr}
 8000f28:	b086      	sub	sp, #24
 8000f2a:	af00      	add	r7, sp, #0
 8000f2c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8000f34:	693b      	ldr	r3, [r7, #16]
 8000f36:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f001 fea7 	bl	8002c90 <USB_GetMode>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b01      	cmp	r3, #1
 8000f46:	f040 80fb 	bne.w	8001140 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f001 fe6a 	bl	8002c28 <USB_ReadInterrupts>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	f000 80f1 	beq.w	800113e <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	4618      	mov	r0, r3
 8000f62:	f001 fe61 	bl	8002c28 <USB_ReadInterrupts>
 8000f66:	4603      	mov	r3, r0
 8000f68:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f6c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8000f70:	d104      	bne.n	8000f7c <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8000f7a:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4618      	mov	r0, r3
 8000f82:	f001 fe51 	bl	8002c28 <USB_ReadInterrupts>
 8000f86:	4603      	mov	r3, r0
 8000f88:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000f8c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8000f90:	d104      	bne.n	8000f9c <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8000f9a:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f001 fe41 	bl	8002c28 <USB_ReadInterrupts>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000fac:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8000fb0:	d104      	bne.n	8000fbc <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000fba:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f001 fe31 	bl	8002c28 <USB_ReadInterrupts>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	f003 0302 	and.w	r3, r3, #2
 8000fcc:	2b02      	cmp	r3, #2
 8000fce:	d103      	bne.n	8000fd8 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	2202      	movs	r2, #2
 8000fd6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f001 fe23 	bl	8002c28 <USB_ReadInterrupts>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000fe8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000fec:	d120      	bne.n	8001030 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8000ff6:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	f003 0301 	and.w	r3, r3, #1
 8001004:	2b00      	cmp	r3, #0
 8001006:	d113      	bne.n	8001030 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001008:	2110      	movs	r1, #16
 800100a:	6938      	ldr	r0, [r7, #16]
 800100c:	f001 fd54 	bl	8002ab8 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001010:	6938      	ldr	r0, [r7, #16]
 8001012:	f001 fd83 	bl	8002b1c <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	7a5b      	ldrb	r3, [r3, #9]
 800101a:	2b02      	cmp	r3, #2
 800101c:	d105      	bne.n	800102a <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	2101      	movs	r1, #1
 8001024:	4618      	mov	r0, r3
 8001026:	f001 fe41 	bl	8002cac <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 800102a:	6878      	ldr	r0, [r7, #4]
 800102c:	f002 f8f9 	bl	8003222 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4618      	mov	r0, r3
 8001036:	f001 fdf7 	bl	8002c28 <USB_ReadInterrupts>
 800103a:	4603      	mov	r3, r0
 800103c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001040:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001044:	d102      	bne.n	800104c <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8001046:	6878      	ldr	r0, [r7, #4]
 8001048:	f001 fca1 	bl	800298e <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4618      	mov	r0, r3
 8001052:	f001 fde9 	bl	8002c28 <USB_ReadInterrupts>
 8001056:	4603      	mov	r3, r0
 8001058:	f003 0308 	and.w	r3, r3, #8
 800105c:	2b08      	cmp	r3, #8
 800105e:	d106      	bne.n	800106e <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001060:	6878      	ldr	r0, [r7, #4]
 8001062:	f002 f8c2 	bl	80031ea <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	2208      	movs	r2, #8
 800106c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	4618      	mov	r0, r3
 8001074:	f001 fdd8 	bl	8002c28 <USB_ReadInterrupts>
 8001078:	4603      	mov	r3, r0
 800107a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800107e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001082:	d139      	bne.n	80010f8 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4618      	mov	r0, r3
 800108a:	f001 fe4c 	bl	8002d26 <USB_HC_ReadInterrupt>
 800108e:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001090:	2300      	movs	r3, #0
 8001092:	617b      	str	r3, [r7, #20]
 8001094:	e025      	b.n	80010e2 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001096:	697b      	ldr	r3, [r7, #20]
 8001098:	f003 030f 	and.w	r3, r3, #15
 800109c:	68ba      	ldr	r2, [r7, #8]
 800109e:	fa22 f303 	lsr.w	r3, r2, r3
 80010a2:	f003 0301 	and.w	r3, r3, #1
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d018      	beq.n	80010dc <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80010aa:	697b      	ldr	r3, [r7, #20]
 80010ac:	015a      	lsls	r2, r3, #5
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	4413      	add	r3, r2
 80010b2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80010bc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80010c0:	d106      	bne.n	80010d0 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80010c2:	697b      	ldr	r3, [r7, #20]
 80010c4:	b2db      	uxtb	r3, r3
 80010c6:	4619      	mov	r1, r3
 80010c8:	6878      	ldr	r0, [r7, #4]
 80010ca:	f000 f859 	bl	8001180 <HCD_HC_IN_IRQHandler>
 80010ce:	e005      	b.n	80010dc <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80010d0:	697b      	ldr	r3, [r7, #20]
 80010d2:	b2db      	uxtb	r3, r3
 80010d4:	4619      	mov	r1, r3
 80010d6:	6878      	ldr	r0, [r7, #4]
 80010d8:	f000 febb 	bl	8001e52 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80010dc:	697b      	ldr	r3, [r7, #20]
 80010de:	3301      	adds	r3, #1
 80010e0:	617b      	str	r3, [r7, #20]
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	795b      	ldrb	r3, [r3, #5]
 80010e6:	461a      	mov	r2, r3
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d3d3      	bcc.n	8001096 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80010f6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	4618      	mov	r0, r3
 80010fe:	f001 fd93 	bl	8002c28 <USB_ReadInterrupts>
 8001102:	4603      	mov	r3, r0
 8001104:	f003 0310 	and.w	r3, r3, #16
 8001108:	2b10      	cmp	r3, #16
 800110a:	d101      	bne.n	8001110 <HAL_HCD_IRQHandler+0x1ea>
 800110c:	2301      	movs	r3, #1
 800110e:	e000      	b.n	8001112 <HAL_HCD_IRQHandler+0x1ec>
 8001110:	2300      	movs	r3, #0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d014      	beq.n	8001140 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	699a      	ldr	r2, [r3, #24]
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f022 0210 	bic.w	r2, r2, #16
 8001124:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001126:	6878      	ldr	r0, [r7, #4]
 8001128:	f001 fb52 	bl	80027d0 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	699a      	ldr	r2, [r3, #24]
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f042 0210 	orr.w	r2, r2, #16
 800113a:	619a      	str	r2, [r3, #24]
 800113c:	e000      	b.n	8001140 <HAL_HCD_IRQHandler+0x21a>
      return;
 800113e:	bf00      	nop
    }
  }
}
 8001140:	3718      	adds	r7, #24
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}

08001146 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001146:	b580      	push	{r7, lr}
 8001148:	b082      	sub	sp, #8
 800114a:	af00      	add	r7, sp, #0
 800114c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001154:	2b01      	cmp	r3, #1
 8001156:	d101      	bne.n	800115c <HAL_HCD_Stop+0x16>
 8001158:	2302      	movs	r3, #2
 800115a:	e00d      	b.n	8001178 <HAL_HCD_Stop+0x32>
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	2201      	movs	r2, #1
 8001160:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4618      	mov	r0, r3
 800116a:	f001 ff0d 	bl	8002f88 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	2200      	movs	r2, #0
 8001172:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8001176:	2300      	movs	r3, #0
}
 8001178:	4618      	mov	r0, r3
 800117a:	3708      	adds	r7, #8
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}

08001180 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b086      	sub	sp, #24
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
 8001188:	460b      	mov	r3, r1
 800118a:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001192:	697b      	ldr	r3, [r7, #20]
 8001194:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	78fa      	ldrb	r2, [r7, #3]
 800119c:	4611      	mov	r1, r2
 800119e:	4618      	mov	r0, r3
 80011a0:	f001 fd55 	bl	8002c4e <USB_ReadChInterrupts>
 80011a4:	4603      	mov	r3, r0
 80011a6:	f003 0304 	and.w	r3, r3, #4
 80011aa:	2b04      	cmp	r3, #4
 80011ac:	d11a      	bne.n	80011e4 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 80011ae:	78fb      	ldrb	r3, [r7, #3]
 80011b0:	015a      	lsls	r2, r3, #5
 80011b2:	693b      	ldr	r3, [r7, #16]
 80011b4:	4413      	add	r3, r2
 80011b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80011ba:	461a      	mov	r2, r3
 80011bc:	2304      	movs	r3, #4
 80011be:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80011c0:	78fa      	ldrb	r2, [r7, #3]
 80011c2:	6879      	ldr	r1, [r7, #4]
 80011c4:	4613      	mov	r3, r2
 80011c6:	011b      	lsls	r3, r3, #4
 80011c8:	1a9b      	subs	r3, r3, r2
 80011ca:	009b      	lsls	r3, r3, #2
 80011cc:	440b      	add	r3, r1
 80011ce:	334d      	adds	r3, #77	@ 0x4d
 80011d0:	2207      	movs	r2, #7
 80011d2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	78fa      	ldrb	r2, [r7, #3]
 80011da:	4611      	mov	r1, r2
 80011dc:	4618      	mov	r0, r3
 80011de:	f001 fdb3 	bl	8002d48 <USB_HC_Halt>
 80011e2:	e09e      	b.n	8001322 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	78fa      	ldrb	r2, [r7, #3]
 80011ea:	4611      	mov	r1, r2
 80011ec:	4618      	mov	r0, r3
 80011ee:	f001 fd2e 	bl	8002c4e <USB_ReadChInterrupts>
 80011f2:	4603      	mov	r3, r0
 80011f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80011f8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80011fc:	d11b      	bne.n	8001236 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 80011fe:	78fb      	ldrb	r3, [r7, #3]
 8001200:	015a      	lsls	r2, r3, #5
 8001202:	693b      	ldr	r3, [r7, #16]
 8001204:	4413      	add	r3, r2
 8001206:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800120a:	461a      	mov	r2, r3
 800120c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001210:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8001212:	78fa      	ldrb	r2, [r7, #3]
 8001214:	6879      	ldr	r1, [r7, #4]
 8001216:	4613      	mov	r3, r2
 8001218:	011b      	lsls	r3, r3, #4
 800121a:	1a9b      	subs	r3, r3, r2
 800121c:	009b      	lsls	r3, r3, #2
 800121e:	440b      	add	r3, r1
 8001220:	334d      	adds	r3, #77	@ 0x4d
 8001222:	2208      	movs	r2, #8
 8001224:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	78fa      	ldrb	r2, [r7, #3]
 800122c:	4611      	mov	r1, r2
 800122e:	4618      	mov	r0, r3
 8001230:	f001 fd8a 	bl	8002d48 <USB_HC_Halt>
 8001234:	e075      	b.n	8001322 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	78fa      	ldrb	r2, [r7, #3]
 800123c:	4611      	mov	r1, r2
 800123e:	4618      	mov	r0, r3
 8001240:	f001 fd05 	bl	8002c4e <USB_ReadChInterrupts>
 8001244:	4603      	mov	r3, r0
 8001246:	f003 0308 	and.w	r3, r3, #8
 800124a:	2b08      	cmp	r3, #8
 800124c:	d11a      	bne.n	8001284 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 800124e:	78fb      	ldrb	r3, [r7, #3]
 8001250:	015a      	lsls	r2, r3, #5
 8001252:	693b      	ldr	r3, [r7, #16]
 8001254:	4413      	add	r3, r2
 8001256:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800125a:	461a      	mov	r2, r3
 800125c:	2308      	movs	r3, #8
 800125e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8001260:	78fa      	ldrb	r2, [r7, #3]
 8001262:	6879      	ldr	r1, [r7, #4]
 8001264:	4613      	mov	r3, r2
 8001266:	011b      	lsls	r3, r3, #4
 8001268:	1a9b      	subs	r3, r3, r2
 800126a:	009b      	lsls	r3, r3, #2
 800126c:	440b      	add	r3, r1
 800126e:	334d      	adds	r3, #77	@ 0x4d
 8001270:	2206      	movs	r2, #6
 8001272:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	78fa      	ldrb	r2, [r7, #3]
 800127a:	4611      	mov	r1, r2
 800127c:	4618      	mov	r0, r3
 800127e:	f001 fd63 	bl	8002d48 <USB_HC_Halt>
 8001282:	e04e      	b.n	8001322 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	78fa      	ldrb	r2, [r7, #3]
 800128a:	4611      	mov	r1, r2
 800128c:	4618      	mov	r0, r3
 800128e:	f001 fcde 	bl	8002c4e <USB_ReadChInterrupts>
 8001292:	4603      	mov	r3, r0
 8001294:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001298:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800129c:	d11b      	bne.n	80012d6 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 800129e:	78fb      	ldrb	r3, [r7, #3]
 80012a0:	015a      	lsls	r2, r3, #5
 80012a2:	693b      	ldr	r3, [r7, #16]
 80012a4:	4413      	add	r3, r2
 80012a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80012aa:	461a      	mov	r2, r3
 80012ac:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80012b0:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 80012b2:	78fa      	ldrb	r2, [r7, #3]
 80012b4:	6879      	ldr	r1, [r7, #4]
 80012b6:	4613      	mov	r3, r2
 80012b8:	011b      	lsls	r3, r3, #4
 80012ba:	1a9b      	subs	r3, r3, r2
 80012bc:	009b      	lsls	r3, r3, #2
 80012be:	440b      	add	r3, r1
 80012c0:	334d      	adds	r3, #77	@ 0x4d
 80012c2:	2209      	movs	r2, #9
 80012c4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	78fa      	ldrb	r2, [r7, #3]
 80012cc:	4611      	mov	r1, r2
 80012ce:	4618      	mov	r0, r3
 80012d0:	f001 fd3a 	bl	8002d48 <USB_HC_Halt>
 80012d4:	e025      	b.n	8001322 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	78fa      	ldrb	r2, [r7, #3]
 80012dc:	4611      	mov	r1, r2
 80012de:	4618      	mov	r0, r3
 80012e0:	f001 fcb5 	bl	8002c4e <USB_ReadChInterrupts>
 80012e4:	4603      	mov	r3, r0
 80012e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80012ea:	2b80      	cmp	r3, #128	@ 0x80
 80012ec:	d119      	bne.n	8001322 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80012ee:	78fb      	ldrb	r3, [r7, #3]
 80012f0:	015a      	lsls	r2, r3, #5
 80012f2:	693b      	ldr	r3, [r7, #16]
 80012f4:	4413      	add	r3, r2
 80012f6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80012fa:	461a      	mov	r2, r3
 80012fc:	2380      	movs	r3, #128	@ 0x80
 80012fe:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8001300:	78fa      	ldrb	r2, [r7, #3]
 8001302:	6879      	ldr	r1, [r7, #4]
 8001304:	4613      	mov	r3, r2
 8001306:	011b      	lsls	r3, r3, #4
 8001308:	1a9b      	subs	r3, r3, r2
 800130a:	009b      	lsls	r3, r3, #2
 800130c:	440b      	add	r3, r1
 800130e:	334d      	adds	r3, #77	@ 0x4d
 8001310:	2207      	movs	r2, #7
 8001312:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	78fa      	ldrb	r2, [r7, #3]
 800131a:	4611      	mov	r1, r2
 800131c:	4618      	mov	r0, r3
 800131e:	f001 fd13 	bl	8002d48 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	78fa      	ldrb	r2, [r7, #3]
 8001328:	4611      	mov	r1, r2
 800132a:	4618      	mov	r0, r3
 800132c:	f001 fc8f 	bl	8002c4e <USB_ReadChInterrupts>
 8001330:	4603      	mov	r3, r0
 8001332:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001336:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800133a:	d112      	bne.n	8001362 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	78fa      	ldrb	r2, [r7, #3]
 8001342:	4611      	mov	r1, r2
 8001344:	4618      	mov	r0, r3
 8001346:	f001 fcff 	bl	8002d48 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 800134a:	78fb      	ldrb	r3, [r7, #3]
 800134c:	015a      	lsls	r2, r3, #5
 800134e:	693b      	ldr	r3, [r7, #16]
 8001350:	4413      	add	r3, r2
 8001352:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001356:	461a      	mov	r2, r3
 8001358:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800135c:	6093      	str	r3, [r2, #8]
 800135e:	f000 bd75 	b.w	8001e4c <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	78fa      	ldrb	r2, [r7, #3]
 8001368:	4611      	mov	r1, r2
 800136a:	4618      	mov	r0, r3
 800136c:	f001 fc6f 	bl	8002c4e <USB_ReadChInterrupts>
 8001370:	4603      	mov	r3, r0
 8001372:	f003 0301 	and.w	r3, r3, #1
 8001376:	2b01      	cmp	r3, #1
 8001378:	f040 8128 	bne.w	80015cc <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800137c:	78fb      	ldrb	r3, [r7, #3]
 800137e:	015a      	lsls	r2, r3, #5
 8001380:	693b      	ldr	r3, [r7, #16]
 8001382:	4413      	add	r3, r2
 8001384:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001388:	461a      	mov	r2, r3
 800138a:	2320      	movs	r3, #32
 800138c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 800138e:	78fa      	ldrb	r2, [r7, #3]
 8001390:	6879      	ldr	r1, [r7, #4]
 8001392:	4613      	mov	r3, r2
 8001394:	011b      	lsls	r3, r3, #4
 8001396:	1a9b      	subs	r3, r3, r2
 8001398:	009b      	lsls	r3, r3, #2
 800139a:	440b      	add	r3, r1
 800139c:	331b      	adds	r3, #27
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	2b01      	cmp	r3, #1
 80013a2:	d119      	bne.n	80013d8 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80013a4:	78fa      	ldrb	r2, [r7, #3]
 80013a6:	6879      	ldr	r1, [r7, #4]
 80013a8:	4613      	mov	r3, r2
 80013aa:	011b      	lsls	r3, r3, #4
 80013ac:	1a9b      	subs	r3, r3, r2
 80013ae:	009b      	lsls	r3, r3, #2
 80013b0:	440b      	add	r3, r1
 80013b2:	331b      	adds	r3, #27
 80013b4:	2200      	movs	r2, #0
 80013b6:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80013b8:	78fb      	ldrb	r3, [r7, #3]
 80013ba:	015a      	lsls	r2, r3, #5
 80013bc:	693b      	ldr	r3, [r7, #16]
 80013be:	4413      	add	r3, r2
 80013c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	78fa      	ldrb	r2, [r7, #3]
 80013c8:	0151      	lsls	r1, r2, #5
 80013ca:	693a      	ldr	r2, [r7, #16]
 80013cc:	440a      	add	r2, r1
 80013ce:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80013d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80013d6:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	799b      	ldrb	r3, [r3, #6]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d01b      	beq.n	8001418 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80013e0:	78fa      	ldrb	r2, [r7, #3]
 80013e2:	6879      	ldr	r1, [r7, #4]
 80013e4:	4613      	mov	r3, r2
 80013e6:	011b      	lsls	r3, r3, #4
 80013e8:	1a9b      	subs	r3, r3, r2
 80013ea:	009b      	lsls	r3, r3, #2
 80013ec:	440b      	add	r3, r1
 80013ee:	3330      	adds	r3, #48	@ 0x30
 80013f0:	6819      	ldr	r1, [r3, #0]
 80013f2:	78fb      	ldrb	r3, [r7, #3]
 80013f4:	015a      	lsls	r2, r3, #5
 80013f6:	693b      	ldr	r3, [r7, #16]
 80013f8:	4413      	add	r3, r2
 80013fa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80013fe:	691b      	ldr	r3, [r3, #16]
 8001400:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001404:	78fa      	ldrb	r2, [r7, #3]
 8001406:	1ac9      	subs	r1, r1, r3
 8001408:	6878      	ldr	r0, [r7, #4]
 800140a:	4613      	mov	r3, r2
 800140c:	011b      	lsls	r3, r3, #4
 800140e:	1a9b      	subs	r3, r3, r2
 8001410:	009b      	lsls	r3, r3, #2
 8001412:	4403      	add	r3, r0
 8001414:	3338      	adds	r3, #56	@ 0x38
 8001416:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8001418:	78fa      	ldrb	r2, [r7, #3]
 800141a:	6879      	ldr	r1, [r7, #4]
 800141c:	4613      	mov	r3, r2
 800141e:	011b      	lsls	r3, r3, #4
 8001420:	1a9b      	subs	r3, r3, r2
 8001422:	009b      	lsls	r3, r3, #2
 8001424:	440b      	add	r3, r1
 8001426:	334d      	adds	r3, #77	@ 0x4d
 8001428:	2201      	movs	r2, #1
 800142a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 800142c:	78fa      	ldrb	r2, [r7, #3]
 800142e:	6879      	ldr	r1, [r7, #4]
 8001430:	4613      	mov	r3, r2
 8001432:	011b      	lsls	r3, r3, #4
 8001434:	1a9b      	subs	r3, r3, r2
 8001436:	009b      	lsls	r3, r3, #2
 8001438:	440b      	add	r3, r1
 800143a:	3344      	adds	r3, #68	@ 0x44
 800143c:	2200      	movs	r2, #0
 800143e:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8001440:	78fb      	ldrb	r3, [r7, #3]
 8001442:	015a      	lsls	r2, r3, #5
 8001444:	693b      	ldr	r3, [r7, #16]
 8001446:	4413      	add	r3, r2
 8001448:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800144c:	461a      	mov	r2, r3
 800144e:	2301      	movs	r3, #1
 8001450:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001452:	78fa      	ldrb	r2, [r7, #3]
 8001454:	6879      	ldr	r1, [r7, #4]
 8001456:	4613      	mov	r3, r2
 8001458:	011b      	lsls	r3, r3, #4
 800145a:	1a9b      	subs	r3, r3, r2
 800145c:	009b      	lsls	r3, r3, #2
 800145e:	440b      	add	r3, r1
 8001460:	3326      	adds	r3, #38	@ 0x26
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d00a      	beq.n	800147e <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8001468:	78fa      	ldrb	r2, [r7, #3]
 800146a:	6879      	ldr	r1, [r7, #4]
 800146c:	4613      	mov	r3, r2
 800146e:	011b      	lsls	r3, r3, #4
 8001470:	1a9b      	subs	r3, r3, r2
 8001472:	009b      	lsls	r3, r3, #2
 8001474:	440b      	add	r3, r1
 8001476:	3326      	adds	r3, #38	@ 0x26
 8001478:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800147a:	2b02      	cmp	r3, #2
 800147c:	d110      	bne.n	80014a0 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	78fa      	ldrb	r2, [r7, #3]
 8001484:	4611      	mov	r1, r2
 8001486:	4618      	mov	r0, r3
 8001488:	f001 fc5e 	bl	8002d48 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800148c:	78fb      	ldrb	r3, [r7, #3]
 800148e:	015a      	lsls	r2, r3, #5
 8001490:	693b      	ldr	r3, [r7, #16]
 8001492:	4413      	add	r3, r2
 8001494:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001498:	461a      	mov	r2, r3
 800149a:	2310      	movs	r3, #16
 800149c:	6093      	str	r3, [r2, #8]
 800149e:	e03d      	b.n	800151c <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80014a0:	78fa      	ldrb	r2, [r7, #3]
 80014a2:	6879      	ldr	r1, [r7, #4]
 80014a4:	4613      	mov	r3, r2
 80014a6:	011b      	lsls	r3, r3, #4
 80014a8:	1a9b      	subs	r3, r3, r2
 80014aa:	009b      	lsls	r3, r3, #2
 80014ac:	440b      	add	r3, r1
 80014ae:	3326      	adds	r3, #38	@ 0x26
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	2b03      	cmp	r3, #3
 80014b4:	d00a      	beq.n	80014cc <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 80014b6:	78fa      	ldrb	r2, [r7, #3]
 80014b8:	6879      	ldr	r1, [r7, #4]
 80014ba:	4613      	mov	r3, r2
 80014bc:	011b      	lsls	r3, r3, #4
 80014be:	1a9b      	subs	r3, r3, r2
 80014c0:	009b      	lsls	r3, r3, #2
 80014c2:	440b      	add	r3, r1
 80014c4:	3326      	adds	r3, #38	@ 0x26
 80014c6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80014c8:	2b01      	cmp	r3, #1
 80014ca:	d127      	bne.n	800151c <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80014cc:	78fb      	ldrb	r3, [r7, #3]
 80014ce:	015a      	lsls	r2, r3, #5
 80014d0:	693b      	ldr	r3, [r7, #16]
 80014d2:	4413      	add	r3, r2
 80014d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	78fa      	ldrb	r2, [r7, #3]
 80014dc:	0151      	lsls	r1, r2, #5
 80014de:	693a      	ldr	r2, [r7, #16]
 80014e0:	440a      	add	r2, r1
 80014e2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80014e6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80014ea:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80014ec:	78fa      	ldrb	r2, [r7, #3]
 80014ee:	6879      	ldr	r1, [r7, #4]
 80014f0:	4613      	mov	r3, r2
 80014f2:	011b      	lsls	r3, r3, #4
 80014f4:	1a9b      	subs	r3, r3, r2
 80014f6:	009b      	lsls	r3, r3, #2
 80014f8:	440b      	add	r3, r1
 80014fa:	334c      	adds	r3, #76	@ 0x4c
 80014fc:	2201      	movs	r2, #1
 80014fe:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8001500:	78fa      	ldrb	r2, [r7, #3]
 8001502:	6879      	ldr	r1, [r7, #4]
 8001504:	4613      	mov	r3, r2
 8001506:	011b      	lsls	r3, r3, #4
 8001508:	1a9b      	subs	r3, r3, r2
 800150a:	009b      	lsls	r3, r3, #2
 800150c:	440b      	add	r3, r1
 800150e:	334c      	adds	r3, #76	@ 0x4c
 8001510:	781a      	ldrb	r2, [r3, #0]
 8001512:	78fb      	ldrb	r3, [r7, #3]
 8001514:	4619      	mov	r1, r3
 8001516:	6878      	ldr	r0, [r7, #4]
 8001518:	f001 fe91 	bl	800323e <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	799b      	ldrb	r3, [r3, #6]
 8001520:	2b01      	cmp	r3, #1
 8001522:	d13b      	bne.n	800159c <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8001524:	78fa      	ldrb	r2, [r7, #3]
 8001526:	6879      	ldr	r1, [r7, #4]
 8001528:	4613      	mov	r3, r2
 800152a:	011b      	lsls	r3, r3, #4
 800152c:	1a9b      	subs	r3, r3, r2
 800152e:	009b      	lsls	r3, r3, #2
 8001530:	440b      	add	r3, r1
 8001532:	3338      	adds	r3, #56	@ 0x38
 8001534:	6819      	ldr	r1, [r3, #0]
 8001536:	78fa      	ldrb	r2, [r7, #3]
 8001538:	6878      	ldr	r0, [r7, #4]
 800153a:	4613      	mov	r3, r2
 800153c:	011b      	lsls	r3, r3, #4
 800153e:	1a9b      	subs	r3, r3, r2
 8001540:	009b      	lsls	r3, r3, #2
 8001542:	4403      	add	r3, r0
 8001544:	3328      	adds	r3, #40	@ 0x28
 8001546:	881b      	ldrh	r3, [r3, #0]
 8001548:	440b      	add	r3, r1
 800154a:	1e59      	subs	r1, r3, #1
 800154c:	78fa      	ldrb	r2, [r7, #3]
 800154e:	6878      	ldr	r0, [r7, #4]
 8001550:	4613      	mov	r3, r2
 8001552:	011b      	lsls	r3, r3, #4
 8001554:	1a9b      	subs	r3, r3, r2
 8001556:	009b      	lsls	r3, r3, #2
 8001558:	4403      	add	r3, r0
 800155a:	3328      	adds	r3, #40	@ 0x28
 800155c:	881b      	ldrh	r3, [r3, #0]
 800155e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001562:	f003 0301 	and.w	r3, r3, #1
 8001566:	2b00      	cmp	r3, #0
 8001568:	f000 8470 	beq.w	8001e4c <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 800156c:	78fa      	ldrb	r2, [r7, #3]
 800156e:	6879      	ldr	r1, [r7, #4]
 8001570:	4613      	mov	r3, r2
 8001572:	011b      	lsls	r3, r3, #4
 8001574:	1a9b      	subs	r3, r3, r2
 8001576:	009b      	lsls	r3, r3, #2
 8001578:	440b      	add	r3, r1
 800157a:	333c      	adds	r3, #60	@ 0x3c
 800157c:	781b      	ldrb	r3, [r3, #0]
 800157e:	78fa      	ldrb	r2, [r7, #3]
 8001580:	f083 0301 	eor.w	r3, r3, #1
 8001584:	b2d8      	uxtb	r0, r3
 8001586:	6879      	ldr	r1, [r7, #4]
 8001588:	4613      	mov	r3, r2
 800158a:	011b      	lsls	r3, r3, #4
 800158c:	1a9b      	subs	r3, r3, r2
 800158e:	009b      	lsls	r3, r3, #2
 8001590:	440b      	add	r3, r1
 8001592:	333c      	adds	r3, #60	@ 0x3c
 8001594:	4602      	mov	r2, r0
 8001596:	701a      	strb	r2, [r3, #0]
 8001598:	f000 bc58 	b.w	8001e4c <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 800159c:	78fa      	ldrb	r2, [r7, #3]
 800159e:	6879      	ldr	r1, [r7, #4]
 80015a0:	4613      	mov	r3, r2
 80015a2:	011b      	lsls	r3, r3, #4
 80015a4:	1a9b      	subs	r3, r3, r2
 80015a6:	009b      	lsls	r3, r3, #2
 80015a8:	440b      	add	r3, r1
 80015aa:	333c      	adds	r3, #60	@ 0x3c
 80015ac:	781b      	ldrb	r3, [r3, #0]
 80015ae:	78fa      	ldrb	r2, [r7, #3]
 80015b0:	f083 0301 	eor.w	r3, r3, #1
 80015b4:	b2d8      	uxtb	r0, r3
 80015b6:	6879      	ldr	r1, [r7, #4]
 80015b8:	4613      	mov	r3, r2
 80015ba:	011b      	lsls	r3, r3, #4
 80015bc:	1a9b      	subs	r3, r3, r2
 80015be:	009b      	lsls	r3, r3, #2
 80015c0:	440b      	add	r3, r1
 80015c2:	333c      	adds	r3, #60	@ 0x3c
 80015c4:	4602      	mov	r2, r0
 80015c6:	701a      	strb	r2, [r3, #0]
 80015c8:	f000 bc40 	b.w	8001e4c <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	78fa      	ldrb	r2, [r7, #3]
 80015d2:	4611      	mov	r1, r2
 80015d4:	4618      	mov	r0, r3
 80015d6:	f001 fb3a 	bl	8002c4e <USB_ReadChInterrupts>
 80015da:	4603      	mov	r3, r0
 80015dc:	f003 0320 	and.w	r3, r3, #32
 80015e0:	2b20      	cmp	r3, #32
 80015e2:	d131      	bne.n	8001648 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80015e4:	78fb      	ldrb	r3, [r7, #3]
 80015e6:	015a      	lsls	r2, r3, #5
 80015e8:	693b      	ldr	r3, [r7, #16]
 80015ea:	4413      	add	r3, r2
 80015ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80015f0:	461a      	mov	r2, r3
 80015f2:	2320      	movs	r3, #32
 80015f4:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 80015f6:	78fa      	ldrb	r2, [r7, #3]
 80015f8:	6879      	ldr	r1, [r7, #4]
 80015fa:	4613      	mov	r3, r2
 80015fc:	011b      	lsls	r3, r3, #4
 80015fe:	1a9b      	subs	r3, r3, r2
 8001600:	009b      	lsls	r3, r3, #2
 8001602:	440b      	add	r3, r1
 8001604:	331a      	adds	r3, #26
 8001606:	781b      	ldrb	r3, [r3, #0]
 8001608:	2b01      	cmp	r3, #1
 800160a:	f040 841f 	bne.w	8001e4c <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 800160e:	78fa      	ldrb	r2, [r7, #3]
 8001610:	6879      	ldr	r1, [r7, #4]
 8001612:	4613      	mov	r3, r2
 8001614:	011b      	lsls	r3, r3, #4
 8001616:	1a9b      	subs	r3, r3, r2
 8001618:	009b      	lsls	r3, r3, #2
 800161a:	440b      	add	r3, r1
 800161c:	331b      	adds	r3, #27
 800161e:	2201      	movs	r2, #1
 8001620:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8001622:	78fa      	ldrb	r2, [r7, #3]
 8001624:	6879      	ldr	r1, [r7, #4]
 8001626:	4613      	mov	r3, r2
 8001628:	011b      	lsls	r3, r3, #4
 800162a:	1a9b      	subs	r3, r3, r2
 800162c:	009b      	lsls	r3, r3, #2
 800162e:	440b      	add	r3, r1
 8001630:	334d      	adds	r3, #77	@ 0x4d
 8001632:	2203      	movs	r2, #3
 8001634:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	78fa      	ldrb	r2, [r7, #3]
 800163c:	4611      	mov	r1, r2
 800163e:	4618      	mov	r0, r3
 8001640:	f001 fb82 	bl	8002d48 <USB_HC_Halt>
 8001644:	f000 bc02 	b.w	8001e4c <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	78fa      	ldrb	r2, [r7, #3]
 800164e:	4611      	mov	r1, r2
 8001650:	4618      	mov	r0, r3
 8001652:	f001 fafc 	bl	8002c4e <USB_ReadChInterrupts>
 8001656:	4603      	mov	r3, r0
 8001658:	f003 0302 	and.w	r3, r3, #2
 800165c:	2b02      	cmp	r3, #2
 800165e:	f040 8305 	bne.w	8001c6c <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8001662:	78fb      	ldrb	r3, [r7, #3]
 8001664:	015a      	lsls	r2, r3, #5
 8001666:	693b      	ldr	r3, [r7, #16]
 8001668:	4413      	add	r3, r2
 800166a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800166e:	461a      	mov	r2, r3
 8001670:	2302      	movs	r3, #2
 8001672:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8001674:	78fa      	ldrb	r2, [r7, #3]
 8001676:	6879      	ldr	r1, [r7, #4]
 8001678:	4613      	mov	r3, r2
 800167a:	011b      	lsls	r3, r3, #4
 800167c:	1a9b      	subs	r3, r3, r2
 800167e:	009b      	lsls	r3, r3, #2
 8001680:	440b      	add	r3, r1
 8001682:	334d      	adds	r3, #77	@ 0x4d
 8001684:	781b      	ldrb	r3, [r3, #0]
 8001686:	2b01      	cmp	r3, #1
 8001688:	d114      	bne.n	80016b4 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800168a:	78fa      	ldrb	r2, [r7, #3]
 800168c:	6879      	ldr	r1, [r7, #4]
 800168e:	4613      	mov	r3, r2
 8001690:	011b      	lsls	r3, r3, #4
 8001692:	1a9b      	subs	r3, r3, r2
 8001694:	009b      	lsls	r3, r3, #2
 8001696:	440b      	add	r3, r1
 8001698:	334d      	adds	r3, #77	@ 0x4d
 800169a:	2202      	movs	r2, #2
 800169c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800169e:	78fa      	ldrb	r2, [r7, #3]
 80016a0:	6879      	ldr	r1, [r7, #4]
 80016a2:	4613      	mov	r3, r2
 80016a4:	011b      	lsls	r3, r3, #4
 80016a6:	1a9b      	subs	r3, r3, r2
 80016a8:	009b      	lsls	r3, r3, #2
 80016aa:	440b      	add	r3, r1
 80016ac:	334c      	adds	r3, #76	@ 0x4c
 80016ae:	2201      	movs	r2, #1
 80016b0:	701a      	strb	r2, [r3, #0]
 80016b2:	e2cc      	b.n	8001c4e <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80016b4:	78fa      	ldrb	r2, [r7, #3]
 80016b6:	6879      	ldr	r1, [r7, #4]
 80016b8:	4613      	mov	r3, r2
 80016ba:	011b      	lsls	r3, r3, #4
 80016bc:	1a9b      	subs	r3, r3, r2
 80016be:	009b      	lsls	r3, r3, #2
 80016c0:	440b      	add	r3, r1
 80016c2:	334d      	adds	r3, #77	@ 0x4d
 80016c4:	781b      	ldrb	r3, [r3, #0]
 80016c6:	2b06      	cmp	r3, #6
 80016c8:	d114      	bne.n	80016f4 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80016ca:	78fa      	ldrb	r2, [r7, #3]
 80016cc:	6879      	ldr	r1, [r7, #4]
 80016ce:	4613      	mov	r3, r2
 80016d0:	011b      	lsls	r3, r3, #4
 80016d2:	1a9b      	subs	r3, r3, r2
 80016d4:	009b      	lsls	r3, r3, #2
 80016d6:	440b      	add	r3, r1
 80016d8:	334d      	adds	r3, #77	@ 0x4d
 80016da:	2202      	movs	r2, #2
 80016dc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 80016de:	78fa      	ldrb	r2, [r7, #3]
 80016e0:	6879      	ldr	r1, [r7, #4]
 80016e2:	4613      	mov	r3, r2
 80016e4:	011b      	lsls	r3, r3, #4
 80016e6:	1a9b      	subs	r3, r3, r2
 80016e8:	009b      	lsls	r3, r3, #2
 80016ea:	440b      	add	r3, r1
 80016ec:	334c      	adds	r3, #76	@ 0x4c
 80016ee:	2205      	movs	r2, #5
 80016f0:	701a      	strb	r2, [r3, #0]
 80016f2:	e2ac      	b.n	8001c4e <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80016f4:	78fa      	ldrb	r2, [r7, #3]
 80016f6:	6879      	ldr	r1, [r7, #4]
 80016f8:	4613      	mov	r3, r2
 80016fa:	011b      	lsls	r3, r3, #4
 80016fc:	1a9b      	subs	r3, r3, r2
 80016fe:	009b      	lsls	r3, r3, #2
 8001700:	440b      	add	r3, r1
 8001702:	334d      	adds	r3, #77	@ 0x4d
 8001704:	781b      	ldrb	r3, [r3, #0]
 8001706:	2b07      	cmp	r3, #7
 8001708:	d00b      	beq.n	8001722 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 800170a:	78fa      	ldrb	r2, [r7, #3]
 800170c:	6879      	ldr	r1, [r7, #4]
 800170e:	4613      	mov	r3, r2
 8001710:	011b      	lsls	r3, r3, #4
 8001712:	1a9b      	subs	r3, r3, r2
 8001714:	009b      	lsls	r3, r3, #2
 8001716:	440b      	add	r3, r1
 8001718:	334d      	adds	r3, #77	@ 0x4d
 800171a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800171c:	2b09      	cmp	r3, #9
 800171e:	f040 80a6 	bne.w	800186e <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8001722:	78fa      	ldrb	r2, [r7, #3]
 8001724:	6879      	ldr	r1, [r7, #4]
 8001726:	4613      	mov	r3, r2
 8001728:	011b      	lsls	r3, r3, #4
 800172a:	1a9b      	subs	r3, r3, r2
 800172c:	009b      	lsls	r3, r3, #2
 800172e:	440b      	add	r3, r1
 8001730:	334d      	adds	r3, #77	@ 0x4d
 8001732:	2202      	movs	r2, #2
 8001734:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8001736:	78fa      	ldrb	r2, [r7, #3]
 8001738:	6879      	ldr	r1, [r7, #4]
 800173a:	4613      	mov	r3, r2
 800173c:	011b      	lsls	r3, r3, #4
 800173e:	1a9b      	subs	r3, r3, r2
 8001740:	009b      	lsls	r3, r3, #2
 8001742:	440b      	add	r3, r1
 8001744:	3344      	adds	r3, #68	@ 0x44
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	1c59      	adds	r1, r3, #1
 800174a:	6878      	ldr	r0, [r7, #4]
 800174c:	4613      	mov	r3, r2
 800174e:	011b      	lsls	r3, r3, #4
 8001750:	1a9b      	subs	r3, r3, r2
 8001752:	009b      	lsls	r3, r3, #2
 8001754:	4403      	add	r3, r0
 8001756:	3344      	adds	r3, #68	@ 0x44
 8001758:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800175a:	78fa      	ldrb	r2, [r7, #3]
 800175c:	6879      	ldr	r1, [r7, #4]
 800175e:	4613      	mov	r3, r2
 8001760:	011b      	lsls	r3, r3, #4
 8001762:	1a9b      	subs	r3, r3, r2
 8001764:	009b      	lsls	r3, r3, #2
 8001766:	440b      	add	r3, r1
 8001768:	3344      	adds	r3, #68	@ 0x44
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	2b02      	cmp	r3, #2
 800176e:	d943      	bls.n	80017f8 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8001770:	78fa      	ldrb	r2, [r7, #3]
 8001772:	6879      	ldr	r1, [r7, #4]
 8001774:	4613      	mov	r3, r2
 8001776:	011b      	lsls	r3, r3, #4
 8001778:	1a9b      	subs	r3, r3, r2
 800177a:	009b      	lsls	r3, r3, #2
 800177c:	440b      	add	r3, r1
 800177e:	3344      	adds	r3, #68	@ 0x44
 8001780:	2200      	movs	r2, #0
 8001782:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8001784:	78fa      	ldrb	r2, [r7, #3]
 8001786:	6879      	ldr	r1, [r7, #4]
 8001788:	4613      	mov	r3, r2
 800178a:	011b      	lsls	r3, r3, #4
 800178c:	1a9b      	subs	r3, r3, r2
 800178e:	009b      	lsls	r3, r3, #2
 8001790:	440b      	add	r3, r1
 8001792:	331a      	adds	r3, #26
 8001794:	781b      	ldrb	r3, [r3, #0]
 8001796:	2b01      	cmp	r3, #1
 8001798:	d123      	bne.n	80017e2 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 800179a:	78fa      	ldrb	r2, [r7, #3]
 800179c:	6879      	ldr	r1, [r7, #4]
 800179e:	4613      	mov	r3, r2
 80017a0:	011b      	lsls	r3, r3, #4
 80017a2:	1a9b      	subs	r3, r3, r2
 80017a4:	009b      	lsls	r3, r3, #2
 80017a6:	440b      	add	r3, r1
 80017a8:	331b      	adds	r3, #27
 80017aa:	2200      	movs	r2, #0
 80017ac:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 80017ae:	78fa      	ldrb	r2, [r7, #3]
 80017b0:	6879      	ldr	r1, [r7, #4]
 80017b2:	4613      	mov	r3, r2
 80017b4:	011b      	lsls	r3, r3, #4
 80017b6:	1a9b      	subs	r3, r3, r2
 80017b8:	009b      	lsls	r3, r3, #2
 80017ba:	440b      	add	r3, r1
 80017bc:	331c      	adds	r3, #28
 80017be:	2200      	movs	r2, #0
 80017c0:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80017c2:	78fb      	ldrb	r3, [r7, #3]
 80017c4:	015a      	lsls	r2, r3, #5
 80017c6:	693b      	ldr	r3, [r7, #16]
 80017c8:	4413      	add	r3, r2
 80017ca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	78fa      	ldrb	r2, [r7, #3]
 80017d2:	0151      	lsls	r1, r2, #5
 80017d4:	693a      	ldr	r2, [r7, #16]
 80017d6:	440a      	add	r2, r1
 80017d8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80017dc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80017e0:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 80017e2:	78fa      	ldrb	r2, [r7, #3]
 80017e4:	6879      	ldr	r1, [r7, #4]
 80017e6:	4613      	mov	r3, r2
 80017e8:	011b      	lsls	r3, r3, #4
 80017ea:	1a9b      	subs	r3, r3, r2
 80017ec:	009b      	lsls	r3, r3, #2
 80017ee:	440b      	add	r3, r1
 80017f0:	334c      	adds	r3, #76	@ 0x4c
 80017f2:	2204      	movs	r2, #4
 80017f4:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80017f6:	e229      	b.n	8001c4c <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80017f8:	78fa      	ldrb	r2, [r7, #3]
 80017fa:	6879      	ldr	r1, [r7, #4]
 80017fc:	4613      	mov	r3, r2
 80017fe:	011b      	lsls	r3, r3, #4
 8001800:	1a9b      	subs	r3, r3, r2
 8001802:	009b      	lsls	r3, r3, #2
 8001804:	440b      	add	r3, r1
 8001806:	334c      	adds	r3, #76	@ 0x4c
 8001808:	2202      	movs	r2, #2
 800180a:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800180c:	78fa      	ldrb	r2, [r7, #3]
 800180e:	6879      	ldr	r1, [r7, #4]
 8001810:	4613      	mov	r3, r2
 8001812:	011b      	lsls	r3, r3, #4
 8001814:	1a9b      	subs	r3, r3, r2
 8001816:	009b      	lsls	r3, r3, #2
 8001818:	440b      	add	r3, r1
 800181a:	3326      	adds	r3, #38	@ 0x26
 800181c:	781b      	ldrb	r3, [r3, #0]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d00b      	beq.n	800183a <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8001822:	78fa      	ldrb	r2, [r7, #3]
 8001824:	6879      	ldr	r1, [r7, #4]
 8001826:	4613      	mov	r3, r2
 8001828:	011b      	lsls	r3, r3, #4
 800182a:	1a9b      	subs	r3, r3, r2
 800182c:	009b      	lsls	r3, r3, #2
 800182e:	440b      	add	r3, r1
 8001830:	3326      	adds	r3, #38	@ 0x26
 8001832:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001834:	2b02      	cmp	r3, #2
 8001836:	f040 8209 	bne.w	8001c4c <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 800183a:	78fb      	ldrb	r3, [r7, #3]
 800183c:	015a      	lsls	r2, r3, #5
 800183e:	693b      	ldr	r3, [r7, #16]
 8001840:	4413      	add	r3, r2
 8001842:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8001850:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001858:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 800185a:	78fb      	ldrb	r3, [r7, #3]
 800185c:	015a      	lsls	r2, r3, #5
 800185e:	693b      	ldr	r3, [r7, #16]
 8001860:	4413      	add	r3, r2
 8001862:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001866:	461a      	mov	r2, r3
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800186c:	e1ee      	b.n	8001c4c <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 800186e:	78fa      	ldrb	r2, [r7, #3]
 8001870:	6879      	ldr	r1, [r7, #4]
 8001872:	4613      	mov	r3, r2
 8001874:	011b      	lsls	r3, r3, #4
 8001876:	1a9b      	subs	r3, r3, r2
 8001878:	009b      	lsls	r3, r3, #2
 800187a:	440b      	add	r3, r1
 800187c:	334d      	adds	r3, #77	@ 0x4d
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	2b05      	cmp	r3, #5
 8001882:	f040 80c8 	bne.w	8001a16 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8001886:	78fa      	ldrb	r2, [r7, #3]
 8001888:	6879      	ldr	r1, [r7, #4]
 800188a:	4613      	mov	r3, r2
 800188c:	011b      	lsls	r3, r3, #4
 800188e:	1a9b      	subs	r3, r3, r2
 8001890:	009b      	lsls	r3, r3, #2
 8001892:	440b      	add	r3, r1
 8001894:	334d      	adds	r3, #77	@ 0x4d
 8001896:	2202      	movs	r2, #2
 8001898:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800189a:	78fa      	ldrb	r2, [r7, #3]
 800189c:	6879      	ldr	r1, [r7, #4]
 800189e:	4613      	mov	r3, r2
 80018a0:	011b      	lsls	r3, r3, #4
 80018a2:	1a9b      	subs	r3, r3, r2
 80018a4:	009b      	lsls	r3, r3, #2
 80018a6:	440b      	add	r3, r1
 80018a8:	331b      	adds	r3, #27
 80018aa:	781b      	ldrb	r3, [r3, #0]
 80018ac:	2b01      	cmp	r3, #1
 80018ae:	f040 81ce 	bne.w	8001c4e <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80018b2:	78fa      	ldrb	r2, [r7, #3]
 80018b4:	6879      	ldr	r1, [r7, #4]
 80018b6:	4613      	mov	r3, r2
 80018b8:	011b      	lsls	r3, r3, #4
 80018ba:	1a9b      	subs	r3, r3, r2
 80018bc:	009b      	lsls	r3, r3, #2
 80018be:	440b      	add	r3, r1
 80018c0:	3326      	adds	r3, #38	@ 0x26
 80018c2:	781b      	ldrb	r3, [r3, #0]
 80018c4:	2b03      	cmp	r3, #3
 80018c6:	d16b      	bne.n	80019a0 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 80018c8:	78fa      	ldrb	r2, [r7, #3]
 80018ca:	6879      	ldr	r1, [r7, #4]
 80018cc:	4613      	mov	r3, r2
 80018ce:	011b      	lsls	r3, r3, #4
 80018d0:	1a9b      	subs	r3, r3, r2
 80018d2:	009b      	lsls	r3, r3, #2
 80018d4:	440b      	add	r3, r1
 80018d6:	3348      	adds	r3, #72	@ 0x48
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	1c59      	adds	r1, r3, #1
 80018dc:	6878      	ldr	r0, [r7, #4]
 80018de:	4613      	mov	r3, r2
 80018e0:	011b      	lsls	r3, r3, #4
 80018e2:	1a9b      	subs	r3, r3, r2
 80018e4:	009b      	lsls	r3, r3, #2
 80018e6:	4403      	add	r3, r0
 80018e8:	3348      	adds	r3, #72	@ 0x48
 80018ea:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 80018ec:	78fa      	ldrb	r2, [r7, #3]
 80018ee:	6879      	ldr	r1, [r7, #4]
 80018f0:	4613      	mov	r3, r2
 80018f2:	011b      	lsls	r3, r3, #4
 80018f4:	1a9b      	subs	r3, r3, r2
 80018f6:	009b      	lsls	r3, r3, #2
 80018f8:	440b      	add	r3, r1
 80018fa:	3348      	adds	r3, #72	@ 0x48
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	2b02      	cmp	r3, #2
 8001900:	d943      	bls.n	800198a <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8001902:	78fa      	ldrb	r2, [r7, #3]
 8001904:	6879      	ldr	r1, [r7, #4]
 8001906:	4613      	mov	r3, r2
 8001908:	011b      	lsls	r3, r3, #4
 800190a:	1a9b      	subs	r3, r3, r2
 800190c:	009b      	lsls	r3, r3, #2
 800190e:	440b      	add	r3, r1
 8001910:	3348      	adds	r3, #72	@ 0x48
 8001912:	2200      	movs	r2, #0
 8001914:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8001916:	78fa      	ldrb	r2, [r7, #3]
 8001918:	6879      	ldr	r1, [r7, #4]
 800191a:	4613      	mov	r3, r2
 800191c:	011b      	lsls	r3, r3, #4
 800191e:	1a9b      	subs	r3, r3, r2
 8001920:	009b      	lsls	r3, r3, #2
 8001922:	440b      	add	r3, r1
 8001924:	331b      	adds	r3, #27
 8001926:	2200      	movs	r2, #0
 8001928:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 800192a:	78fa      	ldrb	r2, [r7, #3]
 800192c:	6879      	ldr	r1, [r7, #4]
 800192e:	4613      	mov	r3, r2
 8001930:	011b      	lsls	r3, r3, #4
 8001932:	1a9b      	subs	r3, r3, r2
 8001934:	009b      	lsls	r3, r3, #2
 8001936:	440b      	add	r3, r1
 8001938:	3344      	adds	r3, #68	@ 0x44
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	2b02      	cmp	r3, #2
 800193e:	d809      	bhi.n	8001954 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8001940:	78fa      	ldrb	r2, [r7, #3]
 8001942:	6879      	ldr	r1, [r7, #4]
 8001944:	4613      	mov	r3, r2
 8001946:	011b      	lsls	r3, r3, #4
 8001948:	1a9b      	subs	r3, r3, r2
 800194a:	009b      	lsls	r3, r3, #2
 800194c:	440b      	add	r3, r1
 800194e:	331c      	adds	r3, #28
 8001950:	2201      	movs	r2, #1
 8001952:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8001954:	78fb      	ldrb	r3, [r7, #3]
 8001956:	015a      	lsls	r2, r3, #5
 8001958:	693b      	ldr	r3, [r7, #16]
 800195a:	4413      	add	r3, r2
 800195c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	78fa      	ldrb	r2, [r7, #3]
 8001964:	0151      	lsls	r1, r2, #5
 8001966:	693a      	ldr	r2, [r7, #16]
 8001968:	440a      	add	r2, r1
 800196a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800196e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001972:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8001974:	78fa      	ldrb	r2, [r7, #3]
 8001976:	6879      	ldr	r1, [r7, #4]
 8001978:	4613      	mov	r3, r2
 800197a:	011b      	lsls	r3, r3, #4
 800197c:	1a9b      	subs	r3, r3, r2
 800197e:	009b      	lsls	r3, r3, #2
 8001980:	440b      	add	r3, r1
 8001982:	334c      	adds	r3, #76	@ 0x4c
 8001984:	2204      	movs	r2, #4
 8001986:	701a      	strb	r2, [r3, #0]
 8001988:	e014      	b.n	80019b4 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800198a:	78fa      	ldrb	r2, [r7, #3]
 800198c:	6879      	ldr	r1, [r7, #4]
 800198e:	4613      	mov	r3, r2
 8001990:	011b      	lsls	r3, r3, #4
 8001992:	1a9b      	subs	r3, r3, r2
 8001994:	009b      	lsls	r3, r3, #2
 8001996:	440b      	add	r3, r1
 8001998:	334c      	adds	r3, #76	@ 0x4c
 800199a:	2202      	movs	r2, #2
 800199c:	701a      	strb	r2, [r3, #0]
 800199e:	e009      	b.n	80019b4 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80019a0:	78fa      	ldrb	r2, [r7, #3]
 80019a2:	6879      	ldr	r1, [r7, #4]
 80019a4:	4613      	mov	r3, r2
 80019a6:	011b      	lsls	r3, r3, #4
 80019a8:	1a9b      	subs	r3, r3, r2
 80019aa:	009b      	lsls	r3, r3, #2
 80019ac:	440b      	add	r3, r1
 80019ae:	334c      	adds	r3, #76	@ 0x4c
 80019b0:	2202      	movs	r2, #2
 80019b2:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80019b4:	78fa      	ldrb	r2, [r7, #3]
 80019b6:	6879      	ldr	r1, [r7, #4]
 80019b8:	4613      	mov	r3, r2
 80019ba:	011b      	lsls	r3, r3, #4
 80019bc:	1a9b      	subs	r3, r3, r2
 80019be:	009b      	lsls	r3, r3, #2
 80019c0:	440b      	add	r3, r1
 80019c2:	3326      	adds	r3, #38	@ 0x26
 80019c4:	781b      	ldrb	r3, [r3, #0]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d00b      	beq.n	80019e2 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80019ca:	78fa      	ldrb	r2, [r7, #3]
 80019cc:	6879      	ldr	r1, [r7, #4]
 80019ce:	4613      	mov	r3, r2
 80019d0:	011b      	lsls	r3, r3, #4
 80019d2:	1a9b      	subs	r3, r3, r2
 80019d4:	009b      	lsls	r3, r3, #2
 80019d6:	440b      	add	r3, r1
 80019d8:	3326      	adds	r3, #38	@ 0x26
 80019da:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80019dc:	2b02      	cmp	r3, #2
 80019de:	f040 8136 	bne.w	8001c4e <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80019e2:	78fb      	ldrb	r3, [r7, #3]
 80019e4:	015a      	lsls	r2, r3, #5
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	4413      	add	r3, r2
 80019ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80019f8:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001a00:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8001a02:	78fb      	ldrb	r3, [r7, #3]
 8001a04:	015a      	lsls	r2, r3, #5
 8001a06:	693b      	ldr	r3, [r7, #16]
 8001a08:	4413      	add	r3, r2
 8001a0a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001a0e:	461a      	mov	r2, r3
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	6013      	str	r3, [r2, #0]
 8001a14:	e11b      	b.n	8001c4e <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8001a16:	78fa      	ldrb	r2, [r7, #3]
 8001a18:	6879      	ldr	r1, [r7, #4]
 8001a1a:	4613      	mov	r3, r2
 8001a1c:	011b      	lsls	r3, r3, #4
 8001a1e:	1a9b      	subs	r3, r3, r2
 8001a20:	009b      	lsls	r3, r3, #2
 8001a22:	440b      	add	r3, r1
 8001a24:	334d      	adds	r3, #77	@ 0x4d
 8001a26:	781b      	ldrb	r3, [r3, #0]
 8001a28:	2b03      	cmp	r3, #3
 8001a2a:	f040 8081 	bne.w	8001b30 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8001a2e:	78fa      	ldrb	r2, [r7, #3]
 8001a30:	6879      	ldr	r1, [r7, #4]
 8001a32:	4613      	mov	r3, r2
 8001a34:	011b      	lsls	r3, r3, #4
 8001a36:	1a9b      	subs	r3, r3, r2
 8001a38:	009b      	lsls	r3, r3, #2
 8001a3a:	440b      	add	r3, r1
 8001a3c:	334d      	adds	r3, #77	@ 0x4d
 8001a3e:	2202      	movs	r2, #2
 8001a40:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8001a42:	78fa      	ldrb	r2, [r7, #3]
 8001a44:	6879      	ldr	r1, [r7, #4]
 8001a46:	4613      	mov	r3, r2
 8001a48:	011b      	lsls	r3, r3, #4
 8001a4a:	1a9b      	subs	r3, r3, r2
 8001a4c:	009b      	lsls	r3, r3, #2
 8001a4e:	440b      	add	r3, r1
 8001a50:	331b      	adds	r3, #27
 8001a52:	781b      	ldrb	r3, [r3, #0]
 8001a54:	2b01      	cmp	r3, #1
 8001a56:	f040 80fa 	bne.w	8001c4e <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8001a5a:	78fa      	ldrb	r2, [r7, #3]
 8001a5c:	6879      	ldr	r1, [r7, #4]
 8001a5e:	4613      	mov	r3, r2
 8001a60:	011b      	lsls	r3, r3, #4
 8001a62:	1a9b      	subs	r3, r3, r2
 8001a64:	009b      	lsls	r3, r3, #2
 8001a66:	440b      	add	r3, r1
 8001a68:	334c      	adds	r3, #76	@ 0x4c
 8001a6a:	2202      	movs	r2, #2
 8001a6c:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8001a6e:	78fb      	ldrb	r3, [r7, #3]
 8001a70:	015a      	lsls	r2, r3, #5
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	4413      	add	r3, r2
 8001a76:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	78fa      	ldrb	r2, [r7, #3]
 8001a7e:	0151      	lsls	r1, r2, #5
 8001a80:	693a      	ldr	r2, [r7, #16]
 8001a82:	440a      	add	r2, r1
 8001a84:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8001a88:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a8c:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8001a8e:	78fb      	ldrb	r3, [r7, #3]
 8001a90:	015a      	lsls	r2, r3, #5
 8001a92:	693b      	ldr	r3, [r7, #16]
 8001a94:	4413      	add	r3, r2
 8001a96:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001a9a:	68db      	ldr	r3, [r3, #12]
 8001a9c:	78fa      	ldrb	r2, [r7, #3]
 8001a9e:	0151      	lsls	r1, r2, #5
 8001aa0:	693a      	ldr	r2, [r7, #16]
 8001aa2:	440a      	add	r2, r1
 8001aa4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8001aa8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001aac:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8001aae:	78fb      	ldrb	r3, [r7, #3]
 8001ab0:	015a      	lsls	r2, r3, #5
 8001ab2:	693b      	ldr	r3, [r7, #16]
 8001ab4:	4413      	add	r3, r2
 8001ab6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001aba:	68db      	ldr	r3, [r3, #12]
 8001abc:	78fa      	ldrb	r2, [r7, #3]
 8001abe:	0151      	lsls	r1, r2, #5
 8001ac0:	693a      	ldr	r2, [r7, #16]
 8001ac2:	440a      	add	r2, r1
 8001ac4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8001ac8:	f023 0320 	bic.w	r3, r3, #32
 8001acc:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001ace:	78fa      	ldrb	r2, [r7, #3]
 8001ad0:	6879      	ldr	r1, [r7, #4]
 8001ad2:	4613      	mov	r3, r2
 8001ad4:	011b      	lsls	r3, r3, #4
 8001ad6:	1a9b      	subs	r3, r3, r2
 8001ad8:	009b      	lsls	r3, r3, #2
 8001ada:	440b      	add	r3, r1
 8001adc:	3326      	adds	r3, #38	@ 0x26
 8001ade:	781b      	ldrb	r3, [r3, #0]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d00b      	beq.n	8001afc <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8001ae4:	78fa      	ldrb	r2, [r7, #3]
 8001ae6:	6879      	ldr	r1, [r7, #4]
 8001ae8:	4613      	mov	r3, r2
 8001aea:	011b      	lsls	r3, r3, #4
 8001aec:	1a9b      	subs	r3, r3, r2
 8001aee:	009b      	lsls	r3, r3, #2
 8001af0:	440b      	add	r3, r1
 8001af2:	3326      	adds	r3, #38	@ 0x26
 8001af4:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001af6:	2b02      	cmp	r3, #2
 8001af8:	f040 80a9 	bne.w	8001c4e <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8001afc:	78fb      	ldrb	r3, [r7, #3]
 8001afe:	015a      	lsls	r2, r3, #5
 8001b00:	693b      	ldr	r3, [r7, #16]
 8001b02:	4413      	add	r3, r2
 8001b04:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8001b12:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001b1a:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8001b1c:	78fb      	ldrb	r3, [r7, #3]
 8001b1e:	015a      	lsls	r2, r3, #5
 8001b20:	693b      	ldr	r3, [r7, #16]
 8001b22:	4413      	add	r3, r2
 8001b24:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001b28:	461a      	mov	r2, r3
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	6013      	str	r3, [r2, #0]
 8001b2e:	e08e      	b.n	8001c4e <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8001b30:	78fa      	ldrb	r2, [r7, #3]
 8001b32:	6879      	ldr	r1, [r7, #4]
 8001b34:	4613      	mov	r3, r2
 8001b36:	011b      	lsls	r3, r3, #4
 8001b38:	1a9b      	subs	r3, r3, r2
 8001b3a:	009b      	lsls	r3, r3, #2
 8001b3c:	440b      	add	r3, r1
 8001b3e:	334d      	adds	r3, #77	@ 0x4d
 8001b40:	781b      	ldrb	r3, [r3, #0]
 8001b42:	2b04      	cmp	r3, #4
 8001b44:	d143      	bne.n	8001bce <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8001b46:	78fa      	ldrb	r2, [r7, #3]
 8001b48:	6879      	ldr	r1, [r7, #4]
 8001b4a:	4613      	mov	r3, r2
 8001b4c:	011b      	lsls	r3, r3, #4
 8001b4e:	1a9b      	subs	r3, r3, r2
 8001b50:	009b      	lsls	r3, r3, #2
 8001b52:	440b      	add	r3, r1
 8001b54:	334d      	adds	r3, #77	@ 0x4d
 8001b56:	2202      	movs	r2, #2
 8001b58:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8001b5a:	78fa      	ldrb	r2, [r7, #3]
 8001b5c:	6879      	ldr	r1, [r7, #4]
 8001b5e:	4613      	mov	r3, r2
 8001b60:	011b      	lsls	r3, r3, #4
 8001b62:	1a9b      	subs	r3, r3, r2
 8001b64:	009b      	lsls	r3, r3, #2
 8001b66:	440b      	add	r3, r1
 8001b68:	334c      	adds	r3, #76	@ 0x4c
 8001b6a:	2202      	movs	r2, #2
 8001b6c:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001b6e:	78fa      	ldrb	r2, [r7, #3]
 8001b70:	6879      	ldr	r1, [r7, #4]
 8001b72:	4613      	mov	r3, r2
 8001b74:	011b      	lsls	r3, r3, #4
 8001b76:	1a9b      	subs	r3, r3, r2
 8001b78:	009b      	lsls	r3, r3, #2
 8001b7a:	440b      	add	r3, r1
 8001b7c:	3326      	adds	r3, #38	@ 0x26
 8001b7e:	781b      	ldrb	r3, [r3, #0]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d00a      	beq.n	8001b9a <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8001b84:	78fa      	ldrb	r2, [r7, #3]
 8001b86:	6879      	ldr	r1, [r7, #4]
 8001b88:	4613      	mov	r3, r2
 8001b8a:	011b      	lsls	r3, r3, #4
 8001b8c:	1a9b      	subs	r3, r3, r2
 8001b8e:	009b      	lsls	r3, r3, #2
 8001b90:	440b      	add	r3, r1
 8001b92:	3326      	adds	r3, #38	@ 0x26
 8001b94:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001b96:	2b02      	cmp	r3, #2
 8001b98:	d159      	bne.n	8001c4e <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8001b9a:	78fb      	ldrb	r3, [r7, #3]
 8001b9c:	015a      	lsls	r2, r3, #5
 8001b9e:	693b      	ldr	r3, [r7, #16]
 8001ba0:	4413      	add	r3, r2
 8001ba2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8001bb0:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001bb8:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8001bba:	78fb      	ldrb	r3, [r7, #3]
 8001bbc:	015a      	lsls	r2, r3, #5
 8001bbe:	693b      	ldr	r3, [r7, #16]
 8001bc0:	4413      	add	r3, r2
 8001bc2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001bc6:	461a      	mov	r2, r3
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	6013      	str	r3, [r2, #0]
 8001bcc:	e03f      	b.n	8001c4e <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8001bce:	78fa      	ldrb	r2, [r7, #3]
 8001bd0:	6879      	ldr	r1, [r7, #4]
 8001bd2:	4613      	mov	r3, r2
 8001bd4:	011b      	lsls	r3, r3, #4
 8001bd6:	1a9b      	subs	r3, r3, r2
 8001bd8:	009b      	lsls	r3, r3, #2
 8001bda:	440b      	add	r3, r1
 8001bdc:	334d      	adds	r3, #77	@ 0x4d
 8001bde:	781b      	ldrb	r3, [r3, #0]
 8001be0:	2b08      	cmp	r3, #8
 8001be2:	d126      	bne.n	8001c32 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8001be4:	78fa      	ldrb	r2, [r7, #3]
 8001be6:	6879      	ldr	r1, [r7, #4]
 8001be8:	4613      	mov	r3, r2
 8001bea:	011b      	lsls	r3, r3, #4
 8001bec:	1a9b      	subs	r3, r3, r2
 8001bee:	009b      	lsls	r3, r3, #2
 8001bf0:	440b      	add	r3, r1
 8001bf2:	334d      	adds	r3, #77	@ 0x4d
 8001bf4:	2202      	movs	r2, #2
 8001bf6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8001bf8:	78fa      	ldrb	r2, [r7, #3]
 8001bfa:	6879      	ldr	r1, [r7, #4]
 8001bfc:	4613      	mov	r3, r2
 8001bfe:	011b      	lsls	r3, r3, #4
 8001c00:	1a9b      	subs	r3, r3, r2
 8001c02:	009b      	lsls	r3, r3, #2
 8001c04:	440b      	add	r3, r1
 8001c06:	3344      	adds	r3, #68	@ 0x44
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	1c59      	adds	r1, r3, #1
 8001c0c:	6878      	ldr	r0, [r7, #4]
 8001c0e:	4613      	mov	r3, r2
 8001c10:	011b      	lsls	r3, r3, #4
 8001c12:	1a9b      	subs	r3, r3, r2
 8001c14:	009b      	lsls	r3, r3, #2
 8001c16:	4403      	add	r3, r0
 8001c18:	3344      	adds	r3, #68	@ 0x44
 8001c1a:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8001c1c:	78fa      	ldrb	r2, [r7, #3]
 8001c1e:	6879      	ldr	r1, [r7, #4]
 8001c20:	4613      	mov	r3, r2
 8001c22:	011b      	lsls	r3, r3, #4
 8001c24:	1a9b      	subs	r3, r3, r2
 8001c26:	009b      	lsls	r3, r3, #2
 8001c28:	440b      	add	r3, r1
 8001c2a:	334c      	adds	r3, #76	@ 0x4c
 8001c2c:	2204      	movs	r2, #4
 8001c2e:	701a      	strb	r2, [r3, #0]
 8001c30:	e00d      	b.n	8001c4e <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8001c32:	78fa      	ldrb	r2, [r7, #3]
 8001c34:	6879      	ldr	r1, [r7, #4]
 8001c36:	4613      	mov	r3, r2
 8001c38:	011b      	lsls	r3, r3, #4
 8001c3a:	1a9b      	subs	r3, r3, r2
 8001c3c:	009b      	lsls	r3, r3, #2
 8001c3e:	440b      	add	r3, r1
 8001c40:	334d      	adds	r3, #77	@ 0x4d
 8001c42:	781b      	ldrb	r3, [r3, #0]
 8001c44:	2b02      	cmp	r3, #2
 8001c46:	f000 8100 	beq.w	8001e4a <HCD_HC_IN_IRQHandler+0xcca>
 8001c4a:	e000      	b.n	8001c4e <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8001c4c:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8001c4e:	78fa      	ldrb	r2, [r7, #3]
 8001c50:	6879      	ldr	r1, [r7, #4]
 8001c52:	4613      	mov	r3, r2
 8001c54:	011b      	lsls	r3, r3, #4
 8001c56:	1a9b      	subs	r3, r3, r2
 8001c58:	009b      	lsls	r3, r3, #2
 8001c5a:	440b      	add	r3, r1
 8001c5c:	334c      	adds	r3, #76	@ 0x4c
 8001c5e:	781a      	ldrb	r2, [r3, #0]
 8001c60:	78fb      	ldrb	r3, [r7, #3]
 8001c62:	4619      	mov	r1, r3
 8001c64:	6878      	ldr	r0, [r7, #4]
 8001c66:	f001 faea 	bl	800323e <HAL_HCD_HC_NotifyURBChange_Callback>
 8001c6a:	e0ef      	b.n	8001e4c <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	78fa      	ldrb	r2, [r7, #3]
 8001c72:	4611      	mov	r1, r2
 8001c74:	4618      	mov	r0, r3
 8001c76:	f000 ffea 	bl	8002c4e <USB_ReadChInterrupts>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c80:	2b40      	cmp	r3, #64	@ 0x40
 8001c82:	d12f      	bne.n	8001ce4 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8001c84:	78fb      	ldrb	r3, [r7, #3]
 8001c86:	015a      	lsls	r2, r3, #5
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	4413      	add	r3, r2
 8001c8c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001c90:	461a      	mov	r2, r3
 8001c92:	2340      	movs	r3, #64	@ 0x40
 8001c94:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8001c96:	78fa      	ldrb	r2, [r7, #3]
 8001c98:	6879      	ldr	r1, [r7, #4]
 8001c9a:	4613      	mov	r3, r2
 8001c9c:	011b      	lsls	r3, r3, #4
 8001c9e:	1a9b      	subs	r3, r3, r2
 8001ca0:	009b      	lsls	r3, r3, #2
 8001ca2:	440b      	add	r3, r1
 8001ca4:	334d      	adds	r3, #77	@ 0x4d
 8001ca6:	2205      	movs	r2, #5
 8001ca8:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8001caa:	78fa      	ldrb	r2, [r7, #3]
 8001cac:	6879      	ldr	r1, [r7, #4]
 8001cae:	4613      	mov	r3, r2
 8001cb0:	011b      	lsls	r3, r3, #4
 8001cb2:	1a9b      	subs	r3, r3, r2
 8001cb4:	009b      	lsls	r3, r3, #2
 8001cb6:	440b      	add	r3, r1
 8001cb8:	331a      	adds	r3, #26
 8001cba:	781b      	ldrb	r3, [r3, #0]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d109      	bne.n	8001cd4 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8001cc0:	78fa      	ldrb	r2, [r7, #3]
 8001cc2:	6879      	ldr	r1, [r7, #4]
 8001cc4:	4613      	mov	r3, r2
 8001cc6:	011b      	lsls	r3, r3, #4
 8001cc8:	1a9b      	subs	r3, r3, r2
 8001cca:	009b      	lsls	r3, r3, #2
 8001ccc:	440b      	add	r3, r1
 8001cce:	3344      	adds	r3, #68	@ 0x44
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	78fa      	ldrb	r2, [r7, #3]
 8001cda:	4611      	mov	r1, r2
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f001 f833 	bl	8002d48 <USB_HC_Halt>
 8001ce2:	e0b3      	b.n	8001e4c <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	78fa      	ldrb	r2, [r7, #3]
 8001cea:	4611      	mov	r1, r2
 8001cec:	4618      	mov	r0, r3
 8001cee:	f000 ffae 	bl	8002c4e <USB_ReadChInterrupts>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	f003 0310 	and.w	r3, r3, #16
 8001cf8:	2b10      	cmp	r3, #16
 8001cfa:	f040 80a7 	bne.w	8001e4c <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8001cfe:	78fa      	ldrb	r2, [r7, #3]
 8001d00:	6879      	ldr	r1, [r7, #4]
 8001d02:	4613      	mov	r3, r2
 8001d04:	011b      	lsls	r3, r3, #4
 8001d06:	1a9b      	subs	r3, r3, r2
 8001d08:	009b      	lsls	r3, r3, #2
 8001d0a:	440b      	add	r3, r1
 8001d0c:	3326      	adds	r3, #38	@ 0x26
 8001d0e:	781b      	ldrb	r3, [r3, #0]
 8001d10:	2b03      	cmp	r3, #3
 8001d12:	d11b      	bne.n	8001d4c <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8001d14:	78fa      	ldrb	r2, [r7, #3]
 8001d16:	6879      	ldr	r1, [r7, #4]
 8001d18:	4613      	mov	r3, r2
 8001d1a:	011b      	lsls	r3, r3, #4
 8001d1c:	1a9b      	subs	r3, r3, r2
 8001d1e:	009b      	lsls	r3, r3, #2
 8001d20:	440b      	add	r3, r1
 8001d22:	3344      	adds	r3, #68	@ 0x44
 8001d24:	2200      	movs	r2, #0
 8001d26:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8001d28:	78fa      	ldrb	r2, [r7, #3]
 8001d2a:	6879      	ldr	r1, [r7, #4]
 8001d2c:	4613      	mov	r3, r2
 8001d2e:	011b      	lsls	r3, r3, #4
 8001d30:	1a9b      	subs	r3, r3, r2
 8001d32:	009b      	lsls	r3, r3, #2
 8001d34:	440b      	add	r3, r1
 8001d36:	334d      	adds	r3, #77	@ 0x4d
 8001d38:	2204      	movs	r2, #4
 8001d3a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	78fa      	ldrb	r2, [r7, #3]
 8001d42:	4611      	mov	r1, r2
 8001d44:	4618      	mov	r0, r3
 8001d46:	f000 ffff 	bl	8002d48 <USB_HC_Halt>
 8001d4a:	e03f      	b.n	8001dcc <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001d4c:	78fa      	ldrb	r2, [r7, #3]
 8001d4e:	6879      	ldr	r1, [r7, #4]
 8001d50:	4613      	mov	r3, r2
 8001d52:	011b      	lsls	r3, r3, #4
 8001d54:	1a9b      	subs	r3, r3, r2
 8001d56:	009b      	lsls	r3, r3, #2
 8001d58:	440b      	add	r3, r1
 8001d5a:	3326      	adds	r3, #38	@ 0x26
 8001d5c:	781b      	ldrb	r3, [r3, #0]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d00a      	beq.n	8001d78 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8001d62:	78fa      	ldrb	r2, [r7, #3]
 8001d64:	6879      	ldr	r1, [r7, #4]
 8001d66:	4613      	mov	r3, r2
 8001d68:	011b      	lsls	r3, r3, #4
 8001d6a:	1a9b      	subs	r3, r3, r2
 8001d6c:	009b      	lsls	r3, r3, #2
 8001d6e:	440b      	add	r3, r1
 8001d70:	3326      	adds	r3, #38	@ 0x26
 8001d72:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001d74:	2b02      	cmp	r3, #2
 8001d76:	d129      	bne.n	8001dcc <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8001d78:	78fa      	ldrb	r2, [r7, #3]
 8001d7a:	6879      	ldr	r1, [r7, #4]
 8001d7c:	4613      	mov	r3, r2
 8001d7e:	011b      	lsls	r3, r3, #4
 8001d80:	1a9b      	subs	r3, r3, r2
 8001d82:	009b      	lsls	r3, r3, #2
 8001d84:	440b      	add	r3, r1
 8001d86:	3344      	adds	r3, #68	@ 0x44
 8001d88:	2200      	movs	r2, #0
 8001d8a:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	799b      	ldrb	r3, [r3, #6]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d00a      	beq.n	8001daa <HCD_HC_IN_IRQHandler+0xc2a>
 8001d94:	78fa      	ldrb	r2, [r7, #3]
 8001d96:	6879      	ldr	r1, [r7, #4]
 8001d98:	4613      	mov	r3, r2
 8001d9a:	011b      	lsls	r3, r3, #4
 8001d9c:	1a9b      	subs	r3, r3, r2
 8001d9e:	009b      	lsls	r3, r3, #2
 8001da0:	440b      	add	r3, r1
 8001da2:	331b      	adds	r3, #27
 8001da4:	781b      	ldrb	r3, [r3, #0]
 8001da6:	2b01      	cmp	r3, #1
 8001da8:	d110      	bne.n	8001dcc <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8001daa:	78fa      	ldrb	r2, [r7, #3]
 8001dac:	6879      	ldr	r1, [r7, #4]
 8001dae:	4613      	mov	r3, r2
 8001db0:	011b      	lsls	r3, r3, #4
 8001db2:	1a9b      	subs	r3, r3, r2
 8001db4:	009b      	lsls	r3, r3, #2
 8001db6:	440b      	add	r3, r1
 8001db8:	334d      	adds	r3, #77	@ 0x4d
 8001dba:	2204      	movs	r2, #4
 8001dbc:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	78fa      	ldrb	r2, [r7, #3]
 8001dc4:	4611      	mov	r1, r2
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f000 ffbe 	bl	8002d48 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8001dcc:	78fa      	ldrb	r2, [r7, #3]
 8001dce:	6879      	ldr	r1, [r7, #4]
 8001dd0:	4613      	mov	r3, r2
 8001dd2:	011b      	lsls	r3, r3, #4
 8001dd4:	1a9b      	subs	r3, r3, r2
 8001dd6:	009b      	lsls	r3, r3, #2
 8001dd8:	440b      	add	r3, r1
 8001dda:	331b      	adds	r3, #27
 8001ddc:	781b      	ldrb	r3, [r3, #0]
 8001dde:	2b01      	cmp	r3, #1
 8001de0:	d129      	bne.n	8001e36 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8001de2:	78fa      	ldrb	r2, [r7, #3]
 8001de4:	6879      	ldr	r1, [r7, #4]
 8001de6:	4613      	mov	r3, r2
 8001de8:	011b      	lsls	r3, r3, #4
 8001dea:	1a9b      	subs	r3, r3, r2
 8001dec:	009b      	lsls	r3, r3, #2
 8001dee:	440b      	add	r3, r1
 8001df0:	331b      	adds	r3, #27
 8001df2:	2200      	movs	r2, #0
 8001df4:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8001df6:	78fb      	ldrb	r3, [r7, #3]
 8001df8:	015a      	lsls	r2, r3, #5
 8001dfa:	693b      	ldr	r3, [r7, #16]
 8001dfc:	4413      	add	r3, r2
 8001dfe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	78fa      	ldrb	r2, [r7, #3]
 8001e06:	0151      	lsls	r1, r2, #5
 8001e08:	693a      	ldr	r2, [r7, #16]
 8001e0a:	440a      	add	r2, r1
 8001e0c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8001e10:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e14:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8001e16:	78fb      	ldrb	r3, [r7, #3]
 8001e18:	015a      	lsls	r2, r3, #5
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	4413      	add	r3, r2
 8001e1e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001e22:	68db      	ldr	r3, [r3, #12]
 8001e24:	78fa      	ldrb	r2, [r7, #3]
 8001e26:	0151      	lsls	r1, r2, #5
 8001e28:	693a      	ldr	r2, [r7, #16]
 8001e2a:	440a      	add	r2, r1
 8001e2c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8001e30:	f043 0320 	orr.w	r3, r3, #32
 8001e34:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8001e36:	78fb      	ldrb	r3, [r7, #3]
 8001e38:	015a      	lsls	r2, r3, #5
 8001e3a:	693b      	ldr	r3, [r7, #16]
 8001e3c:	4413      	add	r3, r2
 8001e3e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001e42:	461a      	mov	r2, r3
 8001e44:	2310      	movs	r3, #16
 8001e46:	6093      	str	r3, [r2, #8]
 8001e48:	e000      	b.n	8001e4c <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8001e4a:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8001e4c:	3718      	adds	r7, #24
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}

08001e52 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001e52:	b580      	push	{r7, lr}
 8001e54:	b086      	sub	sp, #24
 8001e56:	af00      	add	r7, sp, #0
 8001e58:	6078      	str	r0, [r7, #4]
 8001e5a:	460b      	mov	r3, r1
 8001e5c:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	78fa      	ldrb	r2, [r7, #3]
 8001e6e:	4611      	mov	r1, r2
 8001e70:	4618      	mov	r0, r3
 8001e72:	f000 feec 	bl	8002c4e <USB_ReadChInterrupts>
 8001e76:	4603      	mov	r3, r0
 8001e78:	f003 0304 	and.w	r3, r3, #4
 8001e7c:	2b04      	cmp	r3, #4
 8001e7e:	d11b      	bne.n	8001eb8 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8001e80:	78fb      	ldrb	r3, [r7, #3]
 8001e82:	015a      	lsls	r2, r3, #5
 8001e84:	693b      	ldr	r3, [r7, #16]
 8001e86:	4413      	add	r3, r2
 8001e88:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001e8c:	461a      	mov	r2, r3
 8001e8e:	2304      	movs	r3, #4
 8001e90:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8001e92:	78fa      	ldrb	r2, [r7, #3]
 8001e94:	6879      	ldr	r1, [r7, #4]
 8001e96:	4613      	mov	r3, r2
 8001e98:	011b      	lsls	r3, r3, #4
 8001e9a:	1a9b      	subs	r3, r3, r2
 8001e9c:	009b      	lsls	r3, r3, #2
 8001e9e:	440b      	add	r3, r1
 8001ea0:	334d      	adds	r3, #77	@ 0x4d
 8001ea2:	2207      	movs	r2, #7
 8001ea4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	78fa      	ldrb	r2, [r7, #3]
 8001eac:	4611      	mov	r1, r2
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f000 ff4a 	bl	8002d48 <USB_HC_Halt>
 8001eb4:	f000 bc89 	b.w	80027ca <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	78fa      	ldrb	r2, [r7, #3]
 8001ebe:	4611      	mov	r1, r2
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f000 fec4 	bl	8002c4e <USB_ReadChInterrupts>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	f003 0320 	and.w	r3, r3, #32
 8001ecc:	2b20      	cmp	r3, #32
 8001ece:	f040 8082 	bne.w	8001fd6 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8001ed2:	78fb      	ldrb	r3, [r7, #3]
 8001ed4:	015a      	lsls	r2, r3, #5
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	4413      	add	r3, r2
 8001eda:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001ede:	461a      	mov	r2, r3
 8001ee0:	2320      	movs	r3, #32
 8001ee2:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8001ee4:	78fa      	ldrb	r2, [r7, #3]
 8001ee6:	6879      	ldr	r1, [r7, #4]
 8001ee8:	4613      	mov	r3, r2
 8001eea:	011b      	lsls	r3, r3, #4
 8001eec:	1a9b      	subs	r3, r3, r2
 8001eee:	009b      	lsls	r3, r3, #2
 8001ef0:	440b      	add	r3, r1
 8001ef2:	3319      	adds	r3, #25
 8001ef4:	781b      	ldrb	r3, [r3, #0]
 8001ef6:	2b01      	cmp	r3, #1
 8001ef8:	d124      	bne.n	8001f44 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8001efa:	78fa      	ldrb	r2, [r7, #3]
 8001efc:	6879      	ldr	r1, [r7, #4]
 8001efe:	4613      	mov	r3, r2
 8001f00:	011b      	lsls	r3, r3, #4
 8001f02:	1a9b      	subs	r3, r3, r2
 8001f04:	009b      	lsls	r3, r3, #2
 8001f06:	440b      	add	r3, r1
 8001f08:	3319      	adds	r3, #25
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8001f0e:	78fa      	ldrb	r2, [r7, #3]
 8001f10:	6879      	ldr	r1, [r7, #4]
 8001f12:	4613      	mov	r3, r2
 8001f14:	011b      	lsls	r3, r3, #4
 8001f16:	1a9b      	subs	r3, r3, r2
 8001f18:	009b      	lsls	r3, r3, #2
 8001f1a:	440b      	add	r3, r1
 8001f1c:	334c      	adds	r3, #76	@ 0x4c
 8001f1e:	2202      	movs	r2, #2
 8001f20:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8001f22:	78fa      	ldrb	r2, [r7, #3]
 8001f24:	6879      	ldr	r1, [r7, #4]
 8001f26:	4613      	mov	r3, r2
 8001f28:	011b      	lsls	r3, r3, #4
 8001f2a:	1a9b      	subs	r3, r3, r2
 8001f2c:	009b      	lsls	r3, r3, #2
 8001f2e:	440b      	add	r3, r1
 8001f30:	334d      	adds	r3, #77	@ 0x4d
 8001f32:	2203      	movs	r2, #3
 8001f34:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	78fa      	ldrb	r2, [r7, #3]
 8001f3c:	4611      	mov	r1, r2
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f000 ff02 	bl	8002d48 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8001f44:	78fa      	ldrb	r2, [r7, #3]
 8001f46:	6879      	ldr	r1, [r7, #4]
 8001f48:	4613      	mov	r3, r2
 8001f4a:	011b      	lsls	r3, r3, #4
 8001f4c:	1a9b      	subs	r3, r3, r2
 8001f4e:	009b      	lsls	r3, r3, #2
 8001f50:	440b      	add	r3, r1
 8001f52:	331a      	adds	r3, #26
 8001f54:	781b      	ldrb	r3, [r3, #0]
 8001f56:	2b01      	cmp	r3, #1
 8001f58:	f040 8437 	bne.w	80027ca <HCD_HC_OUT_IRQHandler+0x978>
 8001f5c:	78fa      	ldrb	r2, [r7, #3]
 8001f5e:	6879      	ldr	r1, [r7, #4]
 8001f60:	4613      	mov	r3, r2
 8001f62:	011b      	lsls	r3, r3, #4
 8001f64:	1a9b      	subs	r3, r3, r2
 8001f66:	009b      	lsls	r3, r3, #2
 8001f68:	440b      	add	r3, r1
 8001f6a:	331b      	adds	r3, #27
 8001f6c:	781b      	ldrb	r3, [r3, #0]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	f040 842b 	bne.w	80027ca <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8001f74:	78fa      	ldrb	r2, [r7, #3]
 8001f76:	6879      	ldr	r1, [r7, #4]
 8001f78:	4613      	mov	r3, r2
 8001f7a:	011b      	lsls	r3, r3, #4
 8001f7c:	1a9b      	subs	r3, r3, r2
 8001f7e:	009b      	lsls	r3, r3, #2
 8001f80:	440b      	add	r3, r1
 8001f82:	3326      	adds	r3, #38	@ 0x26
 8001f84:	781b      	ldrb	r3, [r3, #0]
 8001f86:	2b01      	cmp	r3, #1
 8001f88:	d009      	beq.n	8001f9e <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8001f8a:	78fa      	ldrb	r2, [r7, #3]
 8001f8c:	6879      	ldr	r1, [r7, #4]
 8001f8e:	4613      	mov	r3, r2
 8001f90:	011b      	lsls	r3, r3, #4
 8001f92:	1a9b      	subs	r3, r3, r2
 8001f94:	009b      	lsls	r3, r3, #2
 8001f96:	440b      	add	r3, r1
 8001f98:	331b      	adds	r3, #27
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8001f9e:	78fa      	ldrb	r2, [r7, #3]
 8001fa0:	6879      	ldr	r1, [r7, #4]
 8001fa2:	4613      	mov	r3, r2
 8001fa4:	011b      	lsls	r3, r3, #4
 8001fa6:	1a9b      	subs	r3, r3, r2
 8001fa8:	009b      	lsls	r3, r3, #2
 8001faa:	440b      	add	r3, r1
 8001fac:	334d      	adds	r3, #77	@ 0x4d
 8001fae:	2203      	movs	r2, #3
 8001fb0:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	78fa      	ldrb	r2, [r7, #3]
 8001fb8:	4611      	mov	r1, r2
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f000 fec4 	bl	8002d48 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8001fc0:	78fa      	ldrb	r2, [r7, #3]
 8001fc2:	6879      	ldr	r1, [r7, #4]
 8001fc4:	4613      	mov	r3, r2
 8001fc6:	011b      	lsls	r3, r3, #4
 8001fc8:	1a9b      	subs	r3, r3, r2
 8001fca:	009b      	lsls	r3, r3, #2
 8001fcc:	440b      	add	r3, r1
 8001fce:	3344      	adds	r3, #68	@ 0x44
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	601a      	str	r2, [r3, #0]
 8001fd4:	e3f9      	b.n	80027ca <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	78fa      	ldrb	r2, [r7, #3]
 8001fdc:	4611      	mov	r1, r2
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f000 fe35 	bl	8002c4e <USB_ReadChInterrupts>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001fea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001fee:	d111      	bne.n	8002014 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8001ff0:	78fb      	ldrb	r3, [r7, #3]
 8001ff2:	015a      	lsls	r2, r3, #5
 8001ff4:	693b      	ldr	r3, [r7, #16]
 8001ff6:	4413      	add	r3, r2
 8001ff8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001ffc:	461a      	mov	r2, r3
 8001ffe:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002002:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	78fa      	ldrb	r2, [r7, #3]
 800200a:	4611      	mov	r1, r2
 800200c:	4618      	mov	r0, r3
 800200e:	f000 fe9b 	bl	8002d48 <USB_HC_Halt>
 8002012:	e3da      	b.n	80027ca <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	78fa      	ldrb	r2, [r7, #3]
 800201a:	4611      	mov	r1, r2
 800201c:	4618      	mov	r0, r3
 800201e:	f000 fe16 	bl	8002c4e <USB_ReadChInterrupts>
 8002022:	4603      	mov	r3, r0
 8002024:	f003 0301 	and.w	r3, r3, #1
 8002028:	2b01      	cmp	r3, #1
 800202a:	d168      	bne.n	80020fe <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 800202c:	78fa      	ldrb	r2, [r7, #3]
 800202e:	6879      	ldr	r1, [r7, #4]
 8002030:	4613      	mov	r3, r2
 8002032:	011b      	lsls	r3, r3, #4
 8002034:	1a9b      	subs	r3, r3, r2
 8002036:	009b      	lsls	r3, r3, #2
 8002038:	440b      	add	r3, r1
 800203a:	3344      	adds	r3, #68	@ 0x44
 800203c:	2200      	movs	r2, #0
 800203e:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	78fa      	ldrb	r2, [r7, #3]
 8002046:	4611      	mov	r1, r2
 8002048:	4618      	mov	r0, r3
 800204a:	f000 fe00 	bl	8002c4e <USB_ReadChInterrupts>
 800204e:	4603      	mov	r3, r0
 8002050:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002054:	2b40      	cmp	r3, #64	@ 0x40
 8002056:	d112      	bne.n	800207e <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8002058:	78fa      	ldrb	r2, [r7, #3]
 800205a:	6879      	ldr	r1, [r7, #4]
 800205c:	4613      	mov	r3, r2
 800205e:	011b      	lsls	r3, r3, #4
 8002060:	1a9b      	subs	r3, r3, r2
 8002062:	009b      	lsls	r3, r3, #2
 8002064:	440b      	add	r3, r1
 8002066:	3319      	adds	r3, #25
 8002068:	2201      	movs	r2, #1
 800206a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800206c:	78fb      	ldrb	r3, [r7, #3]
 800206e:	015a      	lsls	r2, r3, #5
 8002070:	693b      	ldr	r3, [r7, #16]
 8002072:	4413      	add	r3, r2
 8002074:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002078:	461a      	mov	r2, r3
 800207a:	2340      	movs	r3, #64	@ 0x40
 800207c:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 800207e:	78fa      	ldrb	r2, [r7, #3]
 8002080:	6879      	ldr	r1, [r7, #4]
 8002082:	4613      	mov	r3, r2
 8002084:	011b      	lsls	r3, r3, #4
 8002086:	1a9b      	subs	r3, r3, r2
 8002088:	009b      	lsls	r3, r3, #2
 800208a:	440b      	add	r3, r1
 800208c:	331b      	adds	r3, #27
 800208e:	781b      	ldrb	r3, [r3, #0]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d019      	beq.n	80020c8 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002094:	78fa      	ldrb	r2, [r7, #3]
 8002096:	6879      	ldr	r1, [r7, #4]
 8002098:	4613      	mov	r3, r2
 800209a:	011b      	lsls	r3, r3, #4
 800209c:	1a9b      	subs	r3, r3, r2
 800209e:	009b      	lsls	r3, r3, #2
 80020a0:	440b      	add	r3, r1
 80020a2:	331b      	adds	r3, #27
 80020a4:	2200      	movs	r2, #0
 80020a6:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80020a8:	78fb      	ldrb	r3, [r7, #3]
 80020aa:	015a      	lsls	r2, r3, #5
 80020ac:	693b      	ldr	r3, [r7, #16]
 80020ae:	4413      	add	r3, r2
 80020b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	78fa      	ldrb	r2, [r7, #3]
 80020b8:	0151      	lsls	r1, r2, #5
 80020ba:	693a      	ldr	r2, [r7, #16]
 80020bc:	440a      	add	r2, r1
 80020be:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80020c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80020c6:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80020c8:	78fb      	ldrb	r3, [r7, #3]
 80020ca:	015a      	lsls	r2, r3, #5
 80020cc:	693b      	ldr	r3, [r7, #16]
 80020ce:	4413      	add	r3, r2
 80020d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80020d4:	461a      	mov	r2, r3
 80020d6:	2301      	movs	r3, #1
 80020d8:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 80020da:	78fa      	ldrb	r2, [r7, #3]
 80020dc:	6879      	ldr	r1, [r7, #4]
 80020de:	4613      	mov	r3, r2
 80020e0:	011b      	lsls	r3, r3, #4
 80020e2:	1a9b      	subs	r3, r3, r2
 80020e4:	009b      	lsls	r3, r3, #2
 80020e6:	440b      	add	r3, r1
 80020e8:	334d      	adds	r3, #77	@ 0x4d
 80020ea:	2201      	movs	r2, #1
 80020ec:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	78fa      	ldrb	r2, [r7, #3]
 80020f4:	4611      	mov	r1, r2
 80020f6:	4618      	mov	r0, r3
 80020f8:	f000 fe26 	bl	8002d48 <USB_HC_Halt>
 80020fc:	e365      	b.n	80027ca <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	78fa      	ldrb	r2, [r7, #3]
 8002104:	4611      	mov	r1, r2
 8002106:	4618      	mov	r0, r3
 8002108:	f000 fda1 	bl	8002c4e <USB_ReadChInterrupts>
 800210c:	4603      	mov	r3, r0
 800210e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002112:	2b40      	cmp	r3, #64	@ 0x40
 8002114:	d139      	bne.n	800218a <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8002116:	78fa      	ldrb	r2, [r7, #3]
 8002118:	6879      	ldr	r1, [r7, #4]
 800211a:	4613      	mov	r3, r2
 800211c:	011b      	lsls	r3, r3, #4
 800211e:	1a9b      	subs	r3, r3, r2
 8002120:	009b      	lsls	r3, r3, #2
 8002122:	440b      	add	r3, r1
 8002124:	334d      	adds	r3, #77	@ 0x4d
 8002126:	2205      	movs	r2, #5
 8002128:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 800212a:	78fa      	ldrb	r2, [r7, #3]
 800212c:	6879      	ldr	r1, [r7, #4]
 800212e:	4613      	mov	r3, r2
 8002130:	011b      	lsls	r3, r3, #4
 8002132:	1a9b      	subs	r3, r3, r2
 8002134:	009b      	lsls	r3, r3, #2
 8002136:	440b      	add	r3, r1
 8002138:	331a      	adds	r3, #26
 800213a:	781b      	ldrb	r3, [r3, #0]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d109      	bne.n	8002154 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8002140:	78fa      	ldrb	r2, [r7, #3]
 8002142:	6879      	ldr	r1, [r7, #4]
 8002144:	4613      	mov	r3, r2
 8002146:	011b      	lsls	r3, r3, #4
 8002148:	1a9b      	subs	r3, r3, r2
 800214a:	009b      	lsls	r3, r3, #2
 800214c:	440b      	add	r3, r1
 800214e:	3319      	adds	r3, #25
 8002150:	2201      	movs	r2, #1
 8002152:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8002154:	78fa      	ldrb	r2, [r7, #3]
 8002156:	6879      	ldr	r1, [r7, #4]
 8002158:	4613      	mov	r3, r2
 800215a:	011b      	lsls	r3, r3, #4
 800215c:	1a9b      	subs	r3, r3, r2
 800215e:	009b      	lsls	r3, r3, #2
 8002160:	440b      	add	r3, r1
 8002162:	3344      	adds	r3, #68	@ 0x44
 8002164:	2200      	movs	r2, #0
 8002166:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	78fa      	ldrb	r2, [r7, #3]
 800216e:	4611      	mov	r1, r2
 8002170:	4618      	mov	r0, r3
 8002172:	f000 fde9 	bl	8002d48 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002176:	78fb      	ldrb	r3, [r7, #3]
 8002178:	015a      	lsls	r2, r3, #5
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	4413      	add	r3, r2
 800217e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002182:	461a      	mov	r2, r3
 8002184:	2340      	movs	r3, #64	@ 0x40
 8002186:	6093      	str	r3, [r2, #8]
 8002188:	e31f      	b.n	80027ca <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	78fa      	ldrb	r2, [r7, #3]
 8002190:	4611      	mov	r1, r2
 8002192:	4618      	mov	r0, r3
 8002194:	f000 fd5b 	bl	8002c4e <USB_ReadChInterrupts>
 8002198:	4603      	mov	r3, r0
 800219a:	f003 0308 	and.w	r3, r3, #8
 800219e:	2b08      	cmp	r3, #8
 80021a0:	d11a      	bne.n	80021d8 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80021a2:	78fb      	ldrb	r3, [r7, #3]
 80021a4:	015a      	lsls	r2, r3, #5
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	4413      	add	r3, r2
 80021aa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80021ae:	461a      	mov	r2, r3
 80021b0:	2308      	movs	r3, #8
 80021b2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 80021b4:	78fa      	ldrb	r2, [r7, #3]
 80021b6:	6879      	ldr	r1, [r7, #4]
 80021b8:	4613      	mov	r3, r2
 80021ba:	011b      	lsls	r3, r3, #4
 80021bc:	1a9b      	subs	r3, r3, r2
 80021be:	009b      	lsls	r3, r3, #2
 80021c0:	440b      	add	r3, r1
 80021c2:	334d      	adds	r3, #77	@ 0x4d
 80021c4:	2206      	movs	r2, #6
 80021c6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	78fa      	ldrb	r2, [r7, #3]
 80021ce:	4611      	mov	r1, r2
 80021d0:	4618      	mov	r0, r3
 80021d2:	f000 fdb9 	bl	8002d48 <USB_HC_Halt>
 80021d6:	e2f8      	b.n	80027ca <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	78fa      	ldrb	r2, [r7, #3]
 80021de:	4611      	mov	r1, r2
 80021e0:	4618      	mov	r0, r3
 80021e2:	f000 fd34 	bl	8002c4e <USB_ReadChInterrupts>
 80021e6:	4603      	mov	r3, r0
 80021e8:	f003 0310 	and.w	r3, r3, #16
 80021ec:	2b10      	cmp	r3, #16
 80021ee:	d144      	bne.n	800227a <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 80021f0:	78fa      	ldrb	r2, [r7, #3]
 80021f2:	6879      	ldr	r1, [r7, #4]
 80021f4:	4613      	mov	r3, r2
 80021f6:	011b      	lsls	r3, r3, #4
 80021f8:	1a9b      	subs	r3, r3, r2
 80021fa:	009b      	lsls	r3, r3, #2
 80021fc:	440b      	add	r3, r1
 80021fe:	3344      	adds	r3, #68	@ 0x44
 8002200:	2200      	movs	r2, #0
 8002202:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8002204:	78fa      	ldrb	r2, [r7, #3]
 8002206:	6879      	ldr	r1, [r7, #4]
 8002208:	4613      	mov	r3, r2
 800220a:	011b      	lsls	r3, r3, #4
 800220c:	1a9b      	subs	r3, r3, r2
 800220e:	009b      	lsls	r3, r3, #2
 8002210:	440b      	add	r3, r1
 8002212:	334d      	adds	r3, #77	@ 0x4d
 8002214:	2204      	movs	r2, #4
 8002216:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8002218:	78fa      	ldrb	r2, [r7, #3]
 800221a:	6879      	ldr	r1, [r7, #4]
 800221c:	4613      	mov	r3, r2
 800221e:	011b      	lsls	r3, r3, #4
 8002220:	1a9b      	subs	r3, r3, r2
 8002222:	009b      	lsls	r3, r3, #2
 8002224:	440b      	add	r3, r1
 8002226:	3319      	adds	r3, #25
 8002228:	781b      	ldrb	r3, [r3, #0]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d114      	bne.n	8002258 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 800222e:	78fa      	ldrb	r2, [r7, #3]
 8002230:	6879      	ldr	r1, [r7, #4]
 8002232:	4613      	mov	r3, r2
 8002234:	011b      	lsls	r3, r3, #4
 8002236:	1a9b      	subs	r3, r3, r2
 8002238:	009b      	lsls	r3, r3, #2
 800223a:	440b      	add	r3, r1
 800223c:	3318      	adds	r3, #24
 800223e:	781b      	ldrb	r3, [r3, #0]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d109      	bne.n	8002258 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8002244:	78fa      	ldrb	r2, [r7, #3]
 8002246:	6879      	ldr	r1, [r7, #4]
 8002248:	4613      	mov	r3, r2
 800224a:	011b      	lsls	r3, r3, #4
 800224c:	1a9b      	subs	r3, r3, r2
 800224e:	009b      	lsls	r3, r3, #2
 8002250:	440b      	add	r3, r1
 8002252:	3319      	adds	r3, #25
 8002254:	2201      	movs	r2, #1
 8002256:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	78fa      	ldrb	r2, [r7, #3]
 800225e:	4611      	mov	r1, r2
 8002260:	4618      	mov	r0, r3
 8002262:	f000 fd71 	bl	8002d48 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002266:	78fb      	ldrb	r3, [r7, #3]
 8002268:	015a      	lsls	r2, r3, #5
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	4413      	add	r3, r2
 800226e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002272:	461a      	mov	r2, r3
 8002274:	2310      	movs	r3, #16
 8002276:	6093      	str	r3, [r2, #8]
 8002278:	e2a7      	b.n	80027ca <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	78fa      	ldrb	r2, [r7, #3]
 8002280:	4611      	mov	r1, r2
 8002282:	4618      	mov	r0, r3
 8002284:	f000 fce3 	bl	8002c4e <USB_ReadChInterrupts>
 8002288:	4603      	mov	r3, r0
 800228a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800228e:	2b80      	cmp	r3, #128	@ 0x80
 8002290:	f040 8083 	bne.w	800239a <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	799b      	ldrb	r3, [r3, #6]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d111      	bne.n	80022c0 <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 800229c:	78fa      	ldrb	r2, [r7, #3]
 800229e:	6879      	ldr	r1, [r7, #4]
 80022a0:	4613      	mov	r3, r2
 80022a2:	011b      	lsls	r3, r3, #4
 80022a4:	1a9b      	subs	r3, r3, r2
 80022a6:	009b      	lsls	r3, r3, #2
 80022a8:	440b      	add	r3, r1
 80022aa:	334d      	adds	r3, #77	@ 0x4d
 80022ac:	2207      	movs	r2, #7
 80022ae:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	78fa      	ldrb	r2, [r7, #3]
 80022b6:	4611      	mov	r1, r2
 80022b8:	4618      	mov	r0, r3
 80022ba:	f000 fd45 	bl	8002d48 <USB_HC_Halt>
 80022be:	e062      	b.n	8002386 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 80022c0:	78fa      	ldrb	r2, [r7, #3]
 80022c2:	6879      	ldr	r1, [r7, #4]
 80022c4:	4613      	mov	r3, r2
 80022c6:	011b      	lsls	r3, r3, #4
 80022c8:	1a9b      	subs	r3, r3, r2
 80022ca:	009b      	lsls	r3, r3, #2
 80022cc:	440b      	add	r3, r1
 80022ce:	3344      	adds	r3, #68	@ 0x44
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	1c59      	adds	r1, r3, #1
 80022d4:	6878      	ldr	r0, [r7, #4]
 80022d6:	4613      	mov	r3, r2
 80022d8:	011b      	lsls	r3, r3, #4
 80022da:	1a9b      	subs	r3, r3, r2
 80022dc:	009b      	lsls	r3, r3, #2
 80022de:	4403      	add	r3, r0
 80022e0:	3344      	adds	r3, #68	@ 0x44
 80022e2:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80022e4:	78fa      	ldrb	r2, [r7, #3]
 80022e6:	6879      	ldr	r1, [r7, #4]
 80022e8:	4613      	mov	r3, r2
 80022ea:	011b      	lsls	r3, r3, #4
 80022ec:	1a9b      	subs	r3, r3, r2
 80022ee:	009b      	lsls	r3, r3, #2
 80022f0:	440b      	add	r3, r1
 80022f2:	3344      	adds	r3, #68	@ 0x44
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	2b02      	cmp	r3, #2
 80022f8:	d922      	bls.n	8002340 <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80022fa:	78fa      	ldrb	r2, [r7, #3]
 80022fc:	6879      	ldr	r1, [r7, #4]
 80022fe:	4613      	mov	r3, r2
 8002300:	011b      	lsls	r3, r3, #4
 8002302:	1a9b      	subs	r3, r3, r2
 8002304:	009b      	lsls	r3, r3, #2
 8002306:	440b      	add	r3, r1
 8002308:	3344      	adds	r3, #68	@ 0x44
 800230a:	2200      	movs	r2, #0
 800230c:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 800230e:	78fa      	ldrb	r2, [r7, #3]
 8002310:	6879      	ldr	r1, [r7, #4]
 8002312:	4613      	mov	r3, r2
 8002314:	011b      	lsls	r3, r3, #4
 8002316:	1a9b      	subs	r3, r3, r2
 8002318:	009b      	lsls	r3, r3, #2
 800231a:	440b      	add	r3, r1
 800231c:	334c      	adds	r3, #76	@ 0x4c
 800231e:	2204      	movs	r2, #4
 8002320:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002322:	78fa      	ldrb	r2, [r7, #3]
 8002324:	6879      	ldr	r1, [r7, #4]
 8002326:	4613      	mov	r3, r2
 8002328:	011b      	lsls	r3, r3, #4
 800232a:	1a9b      	subs	r3, r3, r2
 800232c:	009b      	lsls	r3, r3, #2
 800232e:	440b      	add	r3, r1
 8002330:	334c      	adds	r3, #76	@ 0x4c
 8002332:	781a      	ldrb	r2, [r3, #0]
 8002334:	78fb      	ldrb	r3, [r7, #3]
 8002336:	4619      	mov	r1, r3
 8002338:	6878      	ldr	r0, [r7, #4]
 800233a:	f000 ff80 	bl	800323e <HAL_HCD_HC_NotifyURBChange_Callback>
 800233e:	e022      	b.n	8002386 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002340:	78fa      	ldrb	r2, [r7, #3]
 8002342:	6879      	ldr	r1, [r7, #4]
 8002344:	4613      	mov	r3, r2
 8002346:	011b      	lsls	r3, r3, #4
 8002348:	1a9b      	subs	r3, r3, r2
 800234a:	009b      	lsls	r3, r3, #2
 800234c:	440b      	add	r3, r1
 800234e:	334c      	adds	r3, #76	@ 0x4c
 8002350:	2202      	movs	r2, #2
 8002352:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8002354:	78fb      	ldrb	r3, [r7, #3]
 8002356:	015a      	lsls	r2, r3, #5
 8002358:	693b      	ldr	r3, [r7, #16]
 800235a:	4413      	add	r3, r2
 800235c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800236a:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002372:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8002374:	78fb      	ldrb	r3, [r7, #3]
 8002376:	015a      	lsls	r2, r3, #5
 8002378:	693b      	ldr	r3, [r7, #16]
 800237a:	4413      	add	r3, r2
 800237c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002380:	461a      	mov	r2, r3
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8002386:	78fb      	ldrb	r3, [r7, #3]
 8002388:	015a      	lsls	r2, r3, #5
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	4413      	add	r3, r2
 800238e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002392:	461a      	mov	r2, r3
 8002394:	2380      	movs	r3, #128	@ 0x80
 8002396:	6093      	str	r3, [r2, #8]
 8002398:	e217      	b.n	80027ca <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	78fa      	ldrb	r2, [r7, #3]
 80023a0:	4611      	mov	r1, r2
 80023a2:	4618      	mov	r0, r3
 80023a4:	f000 fc53 	bl	8002c4e <USB_ReadChInterrupts>
 80023a8:	4603      	mov	r3, r0
 80023aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80023b2:	d11b      	bne.n	80023ec <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 80023b4:	78fa      	ldrb	r2, [r7, #3]
 80023b6:	6879      	ldr	r1, [r7, #4]
 80023b8:	4613      	mov	r3, r2
 80023ba:	011b      	lsls	r3, r3, #4
 80023bc:	1a9b      	subs	r3, r3, r2
 80023be:	009b      	lsls	r3, r3, #2
 80023c0:	440b      	add	r3, r1
 80023c2:	334d      	adds	r3, #77	@ 0x4d
 80023c4:	2209      	movs	r2, #9
 80023c6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	78fa      	ldrb	r2, [r7, #3]
 80023ce:	4611      	mov	r1, r2
 80023d0:	4618      	mov	r0, r3
 80023d2:	f000 fcb9 	bl	8002d48 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80023d6:	78fb      	ldrb	r3, [r7, #3]
 80023d8:	015a      	lsls	r2, r3, #5
 80023da:	693b      	ldr	r3, [r7, #16]
 80023dc:	4413      	add	r3, r2
 80023de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80023e2:	461a      	mov	r2, r3
 80023e4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80023e8:	6093      	str	r3, [r2, #8]
 80023ea:	e1ee      	b.n	80027ca <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	78fa      	ldrb	r2, [r7, #3]
 80023f2:	4611      	mov	r1, r2
 80023f4:	4618      	mov	r0, r3
 80023f6:	f000 fc2a 	bl	8002c4e <USB_ReadChInterrupts>
 80023fa:	4603      	mov	r3, r0
 80023fc:	f003 0302 	and.w	r3, r3, #2
 8002400:	2b02      	cmp	r3, #2
 8002402:	f040 81df 	bne.w	80027c4 <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8002406:	78fb      	ldrb	r3, [r7, #3]
 8002408:	015a      	lsls	r2, r3, #5
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	4413      	add	r3, r2
 800240e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002412:	461a      	mov	r2, r3
 8002414:	2302      	movs	r3, #2
 8002416:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8002418:	78fa      	ldrb	r2, [r7, #3]
 800241a:	6879      	ldr	r1, [r7, #4]
 800241c:	4613      	mov	r3, r2
 800241e:	011b      	lsls	r3, r3, #4
 8002420:	1a9b      	subs	r3, r3, r2
 8002422:	009b      	lsls	r3, r3, #2
 8002424:	440b      	add	r3, r1
 8002426:	334d      	adds	r3, #77	@ 0x4d
 8002428:	781b      	ldrb	r3, [r3, #0]
 800242a:	2b01      	cmp	r3, #1
 800242c:	f040 8093 	bne.w	8002556 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002430:	78fa      	ldrb	r2, [r7, #3]
 8002432:	6879      	ldr	r1, [r7, #4]
 8002434:	4613      	mov	r3, r2
 8002436:	011b      	lsls	r3, r3, #4
 8002438:	1a9b      	subs	r3, r3, r2
 800243a:	009b      	lsls	r3, r3, #2
 800243c:	440b      	add	r3, r1
 800243e:	334d      	adds	r3, #77	@ 0x4d
 8002440:	2202      	movs	r2, #2
 8002442:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002444:	78fa      	ldrb	r2, [r7, #3]
 8002446:	6879      	ldr	r1, [r7, #4]
 8002448:	4613      	mov	r3, r2
 800244a:	011b      	lsls	r3, r3, #4
 800244c:	1a9b      	subs	r3, r3, r2
 800244e:	009b      	lsls	r3, r3, #2
 8002450:	440b      	add	r3, r1
 8002452:	334c      	adds	r3, #76	@ 0x4c
 8002454:	2201      	movs	r2, #1
 8002456:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8002458:	78fa      	ldrb	r2, [r7, #3]
 800245a:	6879      	ldr	r1, [r7, #4]
 800245c:	4613      	mov	r3, r2
 800245e:	011b      	lsls	r3, r3, #4
 8002460:	1a9b      	subs	r3, r3, r2
 8002462:	009b      	lsls	r3, r3, #2
 8002464:	440b      	add	r3, r1
 8002466:	3326      	adds	r3, #38	@ 0x26
 8002468:	781b      	ldrb	r3, [r3, #0]
 800246a:	2b02      	cmp	r3, #2
 800246c:	d00b      	beq.n	8002486 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 800246e:	78fa      	ldrb	r2, [r7, #3]
 8002470:	6879      	ldr	r1, [r7, #4]
 8002472:	4613      	mov	r3, r2
 8002474:	011b      	lsls	r3, r3, #4
 8002476:	1a9b      	subs	r3, r3, r2
 8002478:	009b      	lsls	r3, r3, #2
 800247a:	440b      	add	r3, r1
 800247c:	3326      	adds	r3, #38	@ 0x26
 800247e:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8002480:	2b03      	cmp	r3, #3
 8002482:	f040 8190 	bne.w	80027a6 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	799b      	ldrb	r3, [r3, #6]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d115      	bne.n	80024ba <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 800248e:	78fa      	ldrb	r2, [r7, #3]
 8002490:	6879      	ldr	r1, [r7, #4]
 8002492:	4613      	mov	r3, r2
 8002494:	011b      	lsls	r3, r3, #4
 8002496:	1a9b      	subs	r3, r3, r2
 8002498:	009b      	lsls	r3, r3, #2
 800249a:	440b      	add	r3, r1
 800249c:	333d      	adds	r3, #61	@ 0x3d
 800249e:	781b      	ldrb	r3, [r3, #0]
 80024a0:	78fa      	ldrb	r2, [r7, #3]
 80024a2:	f083 0301 	eor.w	r3, r3, #1
 80024a6:	b2d8      	uxtb	r0, r3
 80024a8:	6879      	ldr	r1, [r7, #4]
 80024aa:	4613      	mov	r3, r2
 80024ac:	011b      	lsls	r3, r3, #4
 80024ae:	1a9b      	subs	r3, r3, r2
 80024b0:	009b      	lsls	r3, r3, #2
 80024b2:	440b      	add	r3, r1
 80024b4:	333d      	adds	r3, #61	@ 0x3d
 80024b6:	4602      	mov	r2, r0
 80024b8:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	799b      	ldrb	r3, [r3, #6]
 80024be:	2b01      	cmp	r3, #1
 80024c0:	f040 8171 	bne.w	80027a6 <HCD_HC_OUT_IRQHandler+0x954>
 80024c4:	78fa      	ldrb	r2, [r7, #3]
 80024c6:	6879      	ldr	r1, [r7, #4]
 80024c8:	4613      	mov	r3, r2
 80024ca:	011b      	lsls	r3, r3, #4
 80024cc:	1a9b      	subs	r3, r3, r2
 80024ce:	009b      	lsls	r3, r3, #2
 80024d0:	440b      	add	r3, r1
 80024d2:	3334      	adds	r3, #52	@ 0x34
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	f000 8165 	beq.w	80027a6 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 80024dc:	78fa      	ldrb	r2, [r7, #3]
 80024de:	6879      	ldr	r1, [r7, #4]
 80024e0:	4613      	mov	r3, r2
 80024e2:	011b      	lsls	r3, r3, #4
 80024e4:	1a9b      	subs	r3, r3, r2
 80024e6:	009b      	lsls	r3, r3, #2
 80024e8:	440b      	add	r3, r1
 80024ea:	3334      	adds	r3, #52	@ 0x34
 80024ec:	6819      	ldr	r1, [r3, #0]
 80024ee:	78fa      	ldrb	r2, [r7, #3]
 80024f0:	6878      	ldr	r0, [r7, #4]
 80024f2:	4613      	mov	r3, r2
 80024f4:	011b      	lsls	r3, r3, #4
 80024f6:	1a9b      	subs	r3, r3, r2
 80024f8:	009b      	lsls	r3, r3, #2
 80024fa:	4403      	add	r3, r0
 80024fc:	3328      	adds	r3, #40	@ 0x28
 80024fe:	881b      	ldrh	r3, [r3, #0]
 8002500:	440b      	add	r3, r1
 8002502:	1e59      	subs	r1, r3, #1
 8002504:	78fa      	ldrb	r2, [r7, #3]
 8002506:	6878      	ldr	r0, [r7, #4]
 8002508:	4613      	mov	r3, r2
 800250a:	011b      	lsls	r3, r3, #4
 800250c:	1a9b      	subs	r3, r3, r2
 800250e:	009b      	lsls	r3, r3, #2
 8002510:	4403      	add	r3, r0
 8002512:	3328      	adds	r3, #40	@ 0x28
 8002514:	881b      	ldrh	r3, [r3, #0]
 8002516:	fbb1 f3f3 	udiv	r3, r1, r3
 800251a:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	f003 0301 	and.w	r3, r3, #1
 8002522:	2b00      	cmp	r3, #0
 8002524:	f000 813f 	beq.w	80027a6 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8002528:	78fa      	ldrb	r2, [r7, #3]
 800252a:	6879      	ldr	r1, [r7, #4]
 800252c:	4613      	mov	r3, r2
 800252e:	011b      	lsls	r3, r3, #4
 8002530:	1a9b      	subs	r3, r3, r2
 8002532:	009b      	lsls	r3, r3, #2
 8002534:	440b      	add	r3, r1
 8002536:	333d      	adds	r3, #61	@ 0x3d
 8002538:	781b      	ldrb	r3, [r3, #0]
 800253a:	78fa      	ldrb	r2, [r7, #3]
 800253c:	f083 0301 	eor.w	r3, r3, #1
 8002540:	b2d8      	uxtb	r0, r3
 8002542:	6879      	ldr	r1, [r7, #4]
 8002544:	4613      	mov	r3, r2
 8002546:	011b      	lsls	r3, r3, #4
 8002548:	1a9b      	subs	r3, r3, r2
 800254a:	009b      	lsls	r3, r3, #2
 800254c:	440b      	add	r3, r1
 800254e:	333d      	adds	r3, #61	@ 0x3d
 8002550:	4602      	mov	r2, r0
 8002552:	701a      	strb	r2, [r3, #0]
 8002554:	e127      	b.n	80027a6 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8002556:	78fa      	ldrb	r2, [r7, #3]
 8002558:	6879      	ldr	r1, [r7, #4]
 800255a:	4613      	mov	r3, r2
 800255c:	011b      	lsls	r3, r3, #4
 800255e:	1a9b      	subs	r3, r3, r2
 8002560:	009b      	lsls	r3, r3, #2
 8002562:	440b      	add	r3, r1
 8002564:	334d      	adds	r3, #77	@ 0x4d
 8002566:	781b      	ldrb	r3, [r3, #0]
 8002568:	2b03      	cmp	r3, #3
 800256a:	d120      	bne.n	80025ae <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800256c:	78fa      	ldrb	r2, [r7, #3]
 800256e:	6879      	ldr	r1, [r7, #4]
 8002570:	4613      	mov	r3, r2
 8002572:	011b      	lsls	r3, r3, #4
 8002574:	1a9b      	subs	r3, r3, r2
 8002576:	009b      	lsls	r3, r3, #2
 8002578:	440b      	add	r3, r1
 800257a:	334d      	adds	r3, #77	@ 0x4d
 800257c:	2202      	movs	r2, #2
 800257e:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002580:	78fa      	ldrb	r2, [r7, #3]
 8002582:	6879      	ldr	r1, [r7, #4]
 8002584:	4613      	mov	r3, r2
 8002586:	011b      	lsls	r3, r3, #4
 8002588:	1a9b      	subs	r3, r3, r2
 800258a:	009b      	lsls	r3, r3, #2
 800258c:	440b      	add	r3, r1
 800258e:	331b      	adds	r3, #27
 8002590:	781b      	ldrb	r3, [r3, #0]
 8002592:	2b01      	cmp	r3, #1
 8002594:	f040 8107 	bne.w	80027a6 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002598:	78fa      	ldrb	r2, [r7, #3]
 800259a:	6879      	ldr	r1, [r7, #4]
 800259c:	4613      	mov	r3, r2
 800259e:	011b      	lsls	r3, r3, #4
 80025a0:	1a9b      	subs	r3, r3, r2
 80025a2:	009b      	lsls	r3, r3, #2
 80025a4:	440b      	add	r3, r1
 80025a6:	334c      	adds	r3, #76	@ 0x4c
 80025a8:	2202      	movs	r2, #2
 80025aa:	701a      	strb	r2, [r3, #0]
 80025ac:	e0fb      	b.n	80027a6 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80025ae:	78fa      	ldrb	r2, [r7, #3]
 80025b0:	6879      	ldr	r1, [r7, #4]
 80025b2:	4613      	mov	r3, r2
 80025b4:	011b      	lsls	r3, r3, #4
 80025b6:	1a9b      	subs	r3, r3, r2
 80025b8:	009b      	lsls	r3, r3, #2
 80025ba:	440b      	add	r3, r1
 80025bc:	334d      	adds	r3, #77	@ 0x4d
 80025be:	781b      	ldrb	r3, [r3, #0]
 80025c0:	2b04      	cmp	r3, #4
 80025c2:	d13a      	bne.n	800263a <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80025c4:	78fa      	ldrb	r2, [r7, #3]
 80025c6:	6879      	ldr	r1, [r7, #4]
 80025c8:	4613      	mov	r3, r2
 80025ca:	011b      	lsls	r3, r3, #4
 80025cc:	1a9b      	subs	r3, r3, r2
 80025ce:	009b      	lsls	r3, r3, #2
 80025d0:	440b      	add	r3, r1
 80025d2:	334d      	adds	r3, #77	@ 0x4d
 80025d4:	2202      	movs	r2, #2
 80025d6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80025d8:	78fa      	ldrb	r2, [r7, #3]
 80025da:	6879      	ldr	r1, [r7, #4]
 80025dc:	4613      	mov	r3, r2
 80025de:	011b      	lsls	r3, r3, #4
 80025e0:	1a9b      	subs	r3, r3, r2
 80025e2:	009b      	lsls	r3, r3, #2
 80025e4:	440b      	add	r3, r1
 80025e6:	334c      	adds	r3, #76	@ 0x4c
 80025e8:	2202      	movs	r2, #2
 80025ea:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80025ec:	78fa      	ldrb	r2, [r7, #3]
 80025ee:	6879      	ldr	r1, [r7, #4]
 80025f0:	4613      	mov	r3, r2
 80025f2:	011b      	lsls	r3, r3, #4
 80025f4:	1a9b      	subs	r3, r3, r2
 80025f6:	009b      	lsls	r3, r3, #2
 80025f8:	440b      	add	r3, r1
 80025fa:	331b      	adds	r3, #27
 80025fc:	781b      	ldrb	r3, [r3, #0]
 80025fe:	2b01      	cmp	r3, #1
 8002600:	f040 80d1 	bne.w	80027a6 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8002604:	78fa      	ldrb	r2, [r7, #3]
 8002606:	6879      	ldr	r1, [r7, #4]
 8002608:	4613      	mov	r3, r2
 800260a:	011b      	lsls	r3, r3, #4
 800260c:	1a9b      	subs	r3, r3, r2
 800260e:	009b      	lsls	r3, r3, #2
 8002610:	440b      	add	r3, r1
 8002612:	331b      	adds	r3, #27
 8002614:	2200      	movs	r2, #0
 8002616:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002618:	78fb      	ldrb	r3, [r7, #3]
 800261a:	015a      	lsls	r2, r3, #5
 800261c:	693b      	ldr	r3, [r7, #16]
 800261e:	4413      	add	r3, r2
 8002620:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	78fa      	ldrb	r2, [r7, #3]
 8002628:	0151      	lsls	r1, r2, #5
 800262a:	693a      	ldr	r2, [r7, #16]
 800262c:	440a      	add	r2, r1
 800262e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002632:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002636:	6053      	str	r3, [r2, #4]
 8002638:	e0b5      	b.n	80027a6 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 800263a:	78fa      	ldrb	r2, [r7, #3]
 800263c:	6879      	ldr	r1, [r7, #4]
 800263e:	4613      	mov	r3, r2
 8002640:	011b      	lsls	r3, r3, #4
 8002642:	1a9b      	subs	r3, r3, r2
 8002644:	009b      	lsls	r3, r3, #2
 8002646:	440b      	add	r3, r1
 8002648:	334d      	adds	r3, #77	@ 0x4d
 800264a:	781b      	ldrb	r3, [r3, #0]
 800264c:	2b05      	cmp	r3, #5
 800264e:	d114      	bne.n	800267a <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002650:	78fa      	ldrb	r2, [r7, #3]
 8002652:	6879      	ldr	r1, [r7, #4]
 8002654:	4613      	mov	r3, r2
 8002656:	011b      	lsls	r3, r3, #4
 8002658:	1a9b      	subs	r3, r3, r2
 800265a:	009b      	lsls	r3, r3, #2
 800265c:	440b      	add	r3, r1
 800265e:	334d      	adds	r3, #77	@ 0x4d
 8002660:	2202      	movs	r2, #2
 8002662:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8002664:	78fa      	ldrb	r2, [r7, #3]
 8002666:	6879      	ldr	r1, [r7, #4]
 8002668:	4613      	mov	r3, r2
 800266a:	011b      	lsls	r3, r3, #4
 800266c:	1a9b      	subs	r3, r3, r2
 800266e:	009b      	lsls	r3, r3, #2
 8002670:	440b      	add	r3, r1
 8002672:	334c      	adds	r3, #76	@ 0x4c
 8002674:	2202      	movs	r2, #2
 8002676:	701a      	strb	r2, [r3, #0]
 8002678:	e095      	b.n	80027a6 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 800267a:	78fa      	ldrb	r2, [r7, #3]
 800267c:	6879      	ldr	r1, [r7, #4]
 800267e:	4613      	mov	r3, r2
 8002680:	011b      	lsls	r3, r3, #4
 8002682:	1a9b      	subs	r3, r3, r2
 8002684:	009b      	lsls	r3, r3, #2
 8002686:	440b      	add	r3, r1
 8002688:	334d      	adds	r3, #77	@ 0x4d
 800268a:	781b      	ldrb	r3, [r3, #0]
 800268c:	2b06      	cmp	r3, #6
 800268e:	d114      	bne.n	80026ba <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002690:	78fa      	ldrb	r2, [r7, #3]
 8002692:	6879      	ldr	r1, [r7, #4]
 8002694:	4613      	mov	r3, r2
 8002696:	011b      	lsls	r3, r3, #4
 8002698:	1a9b      	subs	r3, r3, r2
 800269a:	009b      	lsls	r3, r3, #2
 800269c:	440b      	add	r3, r1
 800269e:	334d      	adds	r3, #77	@ 0x4d
 80026a0:	2202      	movs	r2, #2
 80026a2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 80026a4:	78fa      	ldrb	r2, [r7, #3]
 80026a6:	6879      	ldr	r1, [r7, #4]
 80026a8:	4613      	mov	r3, r2
 80026aa:	011b      	lsls	r3, r3, #4
 80026ac:	1a9b      	subs	r3, r3, r2
 80026ae:	009b      	lsls	r3, r3, #2
 80026b0:	440b      	add	r3, r1
 80026b2:	334c      	adds	r3, #76	@ 0x4c
 80026b4:	2205      	movs	r2, #5
 80026b6:	701a      	strb	r2, [r3, #0]
 80026b8:	e075      	b.n	80027a6 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80026ba:	78fa      	ldrb	r2, [r7, #3]
 80026bc:	6879      	ldr	r1, [r7, #4]
 80026be:	4613      	mov	r3, r2
 80026c0:	011b      	lsls	r3, r3, #4
 80026c2:	1a9b      	subs	r3, r3, r2
 80026c4:	009b      	lsls	r3, r3, #2
 80026c6:	440b      	add	r3, r1
 80026c8:	334d      	adds	r3, #77	@ 0x4d
 80026ca:	781b      	ldrb	r3, [r3, #0]
 80026cc:	2b07      	cmp	r3, #7
 80026ce:	d00a      	beq.n	80026e6 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80026d0:	78fa      	ldrb	r2, [r7, #3]
 80026d2:	6879      	ldr	r1, [r7, #4]
 80026d4:	4613      	mov	r3, r2
 80026d6:	011b      	lsls	r3, r3, #4
 80026d8:	1a9b      	subs	r3, r3, r2
 80026da:	009b      	lsls	r3, r3, #2
 80026dc:	440b      	add	r3, r1
 80026de:	334d      	adds	r3, #77	@ 0x4d
 80026e0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80026e2:	2b09      	cmp	r3, #9
 80026e4:	d170      	bne.n	80027c8 <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80026e6:	78fa      	ldrb	r2, [r7, #3]
 80026e8:	6879      	ldr	r1, [r7, #4]
 80026ea:	4613      	mov	r3, r2
 80026ec:	011b      	lsls	r3, r3, #4
 80026ee:	1a9b      	subs	r3, r3, r2
 80026f0:	009b      	lsls	r3, r3, #2
 80026f2:	440b      	add	r3, r1
 80026f4:	334d      	adds	r3, #77	@ 0x4d
 80026f6:	2202      	movs	r2, #2
 80026f8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80026fa:	78fa      	ldrb	r2, [r7, #3]
 80026fc:	6879      	ldr	r1, [r7, #4]
 80026fe:	4613      	mov	r3, r2
 8002700:	011b      	lsls	r3, r3, #4
 8002702:	1a9b      	subs	r3, r3, r2
 8002704:	009b      	lsls	r3, r3, #2
 8002706:	440b      	add	r3, r1
 8002708:	3344      	adds	r3, #68	@ 0x44
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	1c59      	adds	r1, r3, #1
 800270e:	6878      	ldr	r0, [r7, #4]
 8002710:	4613      	mov	r3, r2
 8002712:	011b      	lsls	r3, r3, #4
 8002714:	1a9b      	subs	r3, r3, r2
 8002716:	009b      	lsls	r3, r3, #2
 8002718:	4403      	add	r3, r0
 800271a:	3344      	adds	r3, #68	@ 0x44
 800271c:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800271e:	78fa      	ldrb	r2, [r7, #3]
 8002720:	6879      	ldr	r1, [r7, #4]
 8002722:	4613      	mov	r3, r2
 8002724:	011b      	lsls	r3, r3, #4
 8002726:	1a9b      	subs	r3, r3, r2
 8002728:	009b      	lsls	r3, r3, #2
 800272a:	440b      	add	r3, r1
 800272c:	3344      	adds	r3, #68	@ 0x44
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	2b02      	cmp	r3, #2
 8002732:	d914      	bls.n	800275e <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8002734:	78fa      	ldrb	r2, [r7, #3]
 8002736:	6879      	ldr	r1, [r7, #4]
 8002738:	4613      	mov	r3, r2
 800273a:	011b      	lsls	r3, r3, #4
 800273c:	1a9b      	subs	r3, r3, r2
 800273e:	009b      	lsls	r3, r3, #2
 8002740:	440b      	add	r3, r1
 8002742:	3344      	adds	r3, #68	@ 0x44
 8002744:	2200      	movs	r2, #0
 8002746:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8002748:	78fa      	ldrb	r2, [r7, #3]
 800274a:	6879      	ldr	r1, [r7, #4]
 800274c:	4613      	mov	r3, r2
 800274e:	011b      	lsls	r3, r3, #4
 8002750:	1a9b      	subs	r3, r3, r2
 8002752:	009b      	lsls	r3, r3, #2
 8002754:	440b      	add	r3, r1
 8002756:	334c      	adds	r3, #76	@ 0x4c
 8002758:	2204      	movs	r2, #4
 800275a:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800275c:	e022      	b.n	80027a4 <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800275e:	78fa      	ldrb	r2, [r7, #3]
 8002760:	6879      	ldr	r1, [r7, #4]
 8002762:	4613      	mov	r3, r2
 8002764:	011b      	lsls	r3, r3, #4
 8002766:	1a9b      	subs	r3, r3, r2
 8002768:	009b      	lsls	r3, r3, #2
 800276a:	440b      	add	r3, r1
 800276c:	334c      	adds	r3, #76	@ 0x4c
 800276e:	2202      	movs	r2, #2
 8002770:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8002772:	78fb      	ldrb	r3, [r7, #3]
 8002774:	015a      	lsls	r2, r3, #5
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	4413      	add	r3, r2
 800277a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002788:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002790:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8002792:	78fb      	ldrb	r3, [r7, #3]
 8002794:	015a      	lsls	r2, r3, #5
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	4413      	add	r3, r2
 800279a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800279e:	461a      	mov	r2, r3
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80027a4:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80027a6:	78fa      	ldrb	r2, [r7, #3]
 80027a8:	6879      	ldr	r1, [r7, #4]
 80027aa:	4613      	mov	r3, r2
 80027ac:	011b      	lsls	r3, r3, #4
 80027ae:	1a9b      	subs	r3, r3, r2
 80027b0:	009b      	lsls	r3, r3, #2
 80027b2:	440b      	add	r3, r1
 80027b4:	334c      	adds	r3, #76	@ 0x4c
 80027b6:	781a      	ldrb	r2, [r3, #0]
 80027b8:	78fb      	ldrb	r3, [r7, #3]
 80027ba:	4619      	mov	r1, r3
 80027bc:	6878      	ldr	r0, [r7, #4]
 80027be:	f000 fd3e 	bl	800323e <HAL_HCD_HC_NotifyURBChange_Callback>
 80027c2:	e002      	b.n	80027ca <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 80027c4:	bf00      	nop
 80027c6:	e000      	b.n	80027ca <HCD_HC_OUT_IRQHandler+0x978>
      return;
 80027c8:	bf00      	nop
  }
}
 80027ca:	3718      	adds	r7, #24
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}

080027d0 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b08a      	sub	sp, #40	@ 0x28
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80027de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027e0:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	6a1b      	ldr	r3, [r3, #32]
 80027e8:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80027ea:	69fb      	ldr	r3, [r7, #28]
 80027ec:	f003 030f 	and.w	r3, r3, #15
 80027f0:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80027f2:	69fb      	ldr	r3, [r7, #28]
 80027f4:	0c5b      	lsrs	r3, r3, #17
 80027f6:	f003 030f 	and.w	r3, r3, #15
 80027fa:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80027fc:	69fb      	ldr	r3, [r7, #28]
 80027fe:	091b      	lsrs	r3, r3, #4
 8002800:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002804:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002806:	697b      	ldr	r3, [r7, #20]
 8002808:	2b02      	cmp	r3, #2
 800280a:	d004      	beq.n	8002816 <HCD_RXQLVL_IRQHandler+0x46>
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	2b05      	cmp	r3, #5
 8002810:	f000 80b6 	beq.w	8002980 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002814:	e0b7      	b.n	8002986 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	2b00      	cmp	r3, #0
 800281a:	f000 80b3 	beq.w	8002984 <HCD_RXQLVL_IRQHandler+0x1b4>
 800281e:	6879      	ldr	r1, [r7, #4]
 8002820:	69ba      	ldr	r2, [r7, #24]
 8002822:	4613      	mov	r3, r2
 8002824:	011b      	lsls	r3, r3, #4
 8002826:	1a9b      	subs	r3, r3, r2
 8002828:	009b      	lsls	r3, r3, #2
 800282a:	440b      	add	r3, r1
 800282c:	332c      	adds	r3, #44	@ 0x2c
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	2b00      	cmp	r3, #0
 8002832:	f000 80a7 	beq.w	8002984 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8002836:	6879      	ldr	r1, [r7, #4]
 8002838:	69ba      	ldr	r2, [r7, #24]
 800283a:	4613      	mov	r3, r2
 800283c:	011b      	lsls	r3, r3, #4
 800283e:	1a9b      	subs	r3, r3, r2
 8002840:	009b      	lsls	r3, r3, #2
 8002842:	440b      	add	r3, r1
 8002844:	3338      	adds	r3, #56	@ 0x38
 8002846:	681a      	ldr	r2, [r3, #0]
 8002848:	693b      	ldr	r3, [r7, #16]
 800284a:	18d1      	adds	r1, r2, r3
 800284c:	6878      	ldr	r0, [r7, #4]
 800284e:	69ba      	ldr	r2, [r7, #24]
 8002850:	4613      	mov	r3, r2
 8002852:	011b      	lsls	r3, r3, #4
 8002854:	1a9b      	subs	r3, r3, r2
 8002856:	009b      	lsls	r3, r3, #2
 8002858:	4403      	add	r3, r0
 800285a:	3334      	adds	r3, #52	@ 0x34
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4299      	cmp	r1, r3
 8002860:	f200 8083 	bhi.w	800296a <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6818      	ldr	r0, [r3, #0]
 8002868:	6879      	ldr	r1, [r7, #4]
 800286a:	69ba      	ldr	r2, [r7, #24]
 800286c:	4613      	mov	r3, r2
 800286e:	011b      	lsls	r3, r3, #4
 8002870:	1a9b      	subs	r3, r3, r2
 8002872:	009b      	lsls	r3, r3, #2
 8002874:	440b      	add	r3, r1
 8002876:	332c      	adds	r3, #44	@ 0x2c
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	693a      	ldr	r2, [r7, #16]
 800287c:	b292      	uxth	r2, r2
 800287e:	4619      	mov	r1, r3
 8002880:	f000 f97a 	bl	8002b78 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8002884:	6879      	ldr	r1, [r7, #4]
 8002886:	69ba      	ldr	r2, [r7, #24]
 8002888:	4613      	mov	r3, r2
 800288a:	011b      	lsls	r3, r3, #4
 800288c:	1a9b      	subs	r3, r3, r2
 800288e:	009b      	lsls	r3, r3, #2
 8002890:	440b      	add	r3, r1
 8002892:	332c      	adds	r3, #44	@ 0x2c
 8002894:	681a      	ldr	r2, [r3, #0]
 8002896:	693b      	ldr	r3, [r7, #16]
 8002898:	18d1      	adds	r1, r2, r3
 800289a:	6878      	ldr	r0, [r7, #4]
 800289c:	69ba      	ldr	r2, [r7, #24]
 800289e:	4613      	mov	r3, r2
 80028a0:	011b      	lsls	r3, r3, #4
 80028a2:	1a9b      	subs	r3, r3, r2
 80028a4:	009b      	lsls	r3, r3, #2
 80028a6:	4403      	add	r3, r0
 80028a8:	332c      	adds	r3, #44	@ 0x2c
 80028aa:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 80028ac:	6879      	ldr	r1, [r7, #4]
 80028ae:	69ba      	ldr	r2, [r7, #24]
 80028b0:	4613      	mov	r3, r2
 80028b2:	011b      	lsls	r3, r3, #4
 80028b4:	1a9b      	subs	r3, r3, r2
 80028b6:	009b      	lsls	r3, r3, #2
 80028b8:	440b      	add	r3, r1
 80028ba:	3338      	adds	r3, #56	@ 0x38
 80028bc:	681a      	ldr	r2, [r3, #0]
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	18d1      	adds	r1, r2, r3
 80028c2:	6878      	ldr	r0, [r7, #4]
 80028c4:	69ba      	ldr	r2, [r7, #24]
 80028c6:	4613      	mov	r3, r2
 80028c8:	011b      	lsls	r3, r3, #4
 80028ca:	1a9b      	subs	r3, r3, r2
 80028cc:	009b      	lsls	r3, r3, #2
 80028ce:	4403      	add	r3, r0
 80028d0:	3338      	adds	r3, #56	@ 0x38
 80028d2:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80028d4:	69bb      	ldr	r3, [r7, #24]
 80028d6:	015a      	lsls	r2, r3, #5
 80028d8:	6a3b      	ldr	r3, [r7, #32]
 80028da:	4413      	add	r3, r2
 80028dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80028e0:	691b      	ldr	r3, [r3, #16]
 80028e2:	0cdb      	lsrs	r3, r3, #19
 80028e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80028e8:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80028ea:	6879      	ldr	r1, [r7, #4]
 80028ec:	69ba      	ldr	r2, [r7, #24]
 80028ee:	4613      	mov	r3, r2
 80028f0:	011b      	lsls	r3, r3, #4
 80028f2:	1a9b      	subs	r3, r3, r2
 80028f4:	009b      	lsls	r3, r3, #2
 80028f6:	440b      	add	r3, r1
 80028f8:	3328      	adds	r3, #40	@ 0x28
 80028fa:	881b      	ldrh	r3, [r3, #0]
 80028fc:	461a      	mov	r2, r3
 80028fe:	693b      	ldr	r3, [r7, #16]
 8002900:	4293      	cmp	r3, r2
 8002902:	d13f      	bne.n	8002984 <HCD_RXQLVL_IRQHandler+0x1b4>
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d03c      	beq.n	8002984 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 800290a:	69bb      	ldr	r3, [r7, #24]
 800290c:	015a      	lsls	r2, r3, #5
 800290e:	6a3b      	ldr	r3, [r7, #32]
 8002910:	4413      	add	r3, r2
 8002912:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800291a:	68bb      	ldr	r3, [r7, #8]
 800291c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002920:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002922:	68bb      	ldr	r3, [r7, #8]
 8002924:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002928:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 800292a:	69bb      	ldr	r3, [r7, #24]
 800292c:	015a      	lsls	r2, r3, #5
 800292e:	6a3b      	ldr	r3, [r7, #32]
 8002930:	4413      	add	r3, r2
 8002932:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002936:	461a      	mov	r2, r3
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 800293c:	6879      	ldr	r1, [r7, #4]
 800293e:	69ba      	ldr	r2, [r7, #24]
 8002940:	4613      	mov	r3, r2
 8002942:	011b      	lsls	r3, r3, #4
 8002944:	1a9b      	subs	r3, r3, r2
 8002946:	009b      	lsls	r3, r3, #2
 8002948:	440b      	add	r3, r1
 800294a:	333c      	adds	r3, #60	@ 0x3c
 800294c:	781b      	ldrb	r3, [r3, #0]
 800294e:	f083 0301 	eor.w	r3, r3, #1
 8002952:	b2d8      	uxtb	r0, r3
 8002954:	6879      	ldr	r1, [r7, #4]
 8002956:	69ba      	ldr	r2, [r7, #24]
 8002958:	4613      	mov	r3, r2
 800295a:	011b      	lsls	r3, r3, #4
 800295c:	1a9b      	subs	r3, r3, r2
 800295e:	009b      	lsls	r3, r3, #2
 8002960:	440b      	add	r3, r1
 8002962:	333c      	adds	r3, #60	@ 0x3c
 8002964:	4602      	mov	r2, r0
 8002966:	701a      	strb	r2, [r3, #0]
      break;
 8002968:	e00c      	b.n	8002984 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 800296a:	6879      	ldr	r1, [r7, #4]
 800296c:	69ba      	ldr	r2, [r7, #24]
 800296e:	4613      	mov	r3, r2
 8002970:	011b      	lsls	r3, r3, #4
 8002972:	1a9b      	subs	r3, r3, r2
 8002974:	009b      	lsls	r3, r3, #2
 8002976:	440b      	add	r3, r1
 8002978:	334c      	adds	r3, #76	@ 0x4c
 800297a:	2204      	movs	r2, #4
 800297c:	701a      	strb	r2, [r3, #0]
      break;
 800297e:	e001      	b.n	8002984 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8002980:	bf00      	nop
 8002982:	e000      	b.n	8002986 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8002984:	bf00      	nop
  }
}
 8002986:	bf00      	nop
 8002988:	3728      	adds	r7, #40	@ 0x28
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}

0800298e <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800298e:	b580      	push	{r7, lr}
 8002990:	b086      	sub	sp, #24
 8002992:	af00      	add	r7, sp, #0
 8002994:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800299c:	697b      	ldr	r3, [r7, #20]
 800299e:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80029a0:	693b      	ldr	r3, [r7, #16]
 80029a2:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80029aa:	693b      	ldr	r3, [r7, #16]
 80029ac:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80029ba:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	f003 0302 	and.w	r3, r3, #2
 80029c2:	2b02      	cmp	r3, #2
 80029c4:	d10b      	bne.n	80029de <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	f003 0301 	and.w	r3, r3, #1
 80029cc:	2b01      	cmp	r3, #1
 80029ce:	d102      	bne.n	80029d6 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80029d0:	6878      	ldr	r0, [r7, #4]
 80029d2:	f000 fc18 	bl	8003206 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80029d6:	68bb      	ldr	r3, [r7, #8]
 80029d8:	f043 0302 	orr.w	r3, r3, #2
 80029dc:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	f003 0308 	and.w	r3, r3, #8
 80029e4:	2b08      	cmp	r3, #8
 80029e6:	d132      	bne.n	8002a4e <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	f043 0308 	orr.w	r3, r3, #8
 80029ee:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	f003 0304 	and.w	r3, r3, #4
 80029f6:	2b04      	cmp	r3, #4
 80029f8:	d126      	bne.n	8002a48 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	7a5b      	ldrb	r3, [r3, #9]
 80029fe:	2b02      	cmp	r3, #2
 8002a00:	d113      	bne.n	8002a2a <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8002a08:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002a0c:	d106      	bne.n	8002a1c <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	2102      	movs	r1, #2
 8002a14:	4618      	mov	r0, r3
 8002a16:	f000 f949 	bl	8002cac <USB_InitFSLSPClkSel>
 8002a1a:	e011      	b.n	8002a40 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	2101      	movs	r1, #1
 8002a22:	4618      	mov	r0, r3
 8002a24:	f000 f942 	bl	8002cac <USB_InitFSLSPClkSel>
 8002a28:	e00a      	b.n	8002a40 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	79db      	ldrb	r3, [r3, #7]
 8002a2e:	2b01      	cmp	r3, #1
 8002a30:	d106      	bne.n	8002a40 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002a38:	461a      	mov	r2, r3
 8002a3a:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8002a3e:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002a40:	6878      	ldr	r0, [r7, #4]
 8002a42:	f000 fc0a 	bl	800325a <HAL_HCD_PortEnabled_Callback>
 8002a46:	e002      	b.n	8002a4e <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002a48:	6878      	ldr	r0, [r7, #4]
 8002a4a:	f000 fc14 	bl	8003276 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	f003 0320 	and.w	r3, r3, #32
 8002a54:	2b20      	cmp	r3, #32
 8002a56:	d103      	bne.n	8002a60 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	f043 0320 	orr.w	r3, r3, #32
 8002a5e:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002a60:	693b      	ldr	r3, [r7, #16]
 8002a62:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8002a66:	461a      	mov	r2, r3
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	6013      	str	r3, [r2, #0]
}
 8002a6c:	bf00      	nop
 8002a6e:	3718      	adds	r7, #24
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bd80      	pop	{r7, pc}

08002a74 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b083      	sub	sp, #12
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	f043 0201 	orr.w	r2, r3, #1
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002a88:	2300      	movs	r3, #0
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	370c      	adds	r7, #12
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a94:	4770      	bx	lr

08002a96 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002a96:	b480      	push	{r7}
 8002a98:	b083      	sub	sp, #12
 8002a9a:	af00      	add	r7, sp, #0
 8002a9c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	689b      	ldr	r3, [r3, #8]
 8002aa2:	f023 0201 	bic.w	r2, r3, #1
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002aaa:	2300      	movs	r3, #0
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	370c      	adds	r7, #12
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab6:	4770      	bx	lr

08002ab8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b085      	sub	sp, #20
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
 8002ac0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	3301      	adds	r3, #1
 8002aca:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8002ad2:	d901      	bls.n	8002ad8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8002ad4:	2303      	movs	r3, #3
 8002ad6:	e01b      	b.n	8002b10 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	691b      	ldr	r3, [r3, #16]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	daf2      	bge.n	8002ac6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	019b      	lsls	r3, r3, #6
 8002ae8:	f043 0220 	orr.w	r2, r3, #32
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	3301      	adds	r3, #1
 8002af4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8002afc:	d901      	bls.n	8002b02 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8002afe:	2303      	movs	r3, #3
 8002b00:	e006      	b.n	8002b10 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	691b      	ldr	r3, [r3, #16]
 8002b06:	f003 0320 	and.w	r3, r3, #32
 8002b0a:	2b20      	cmp	r3, #32
 8002b0c:	d0f0      	beq.n	8002af0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8002b0e:	2300      	movs	r3, #0
}
 8002b10:	4618      	mov	r0, r3
 8002b12:	3714      	adds	r7, #20
 8002b14:	46bd      	mov	sp, r7
 8002b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1a:	4770      	bx	lr

08002b1c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b085      	sub	sp, #20
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002b24:	2300      	movs	r3, #0
 8002b26:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	3301      	adds	r3, #1
 8002b2c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8002b34:	d901      	bls.n	8002b3a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8002b36:	2303      	movs	r3, #3
 8002b38:	e018      	b.n	8002b6c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	691b      	ldr	r3, [r3, #16]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	daf2      	bge.n	8002b28 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8002b42:	2300      	movs	r3, #0
 8002b44:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2210      	movs	r2, #16
 8002b4a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	3301      	adds	r3, #1
 8002b50:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8002b58:	d901      	bls.n	8002b5e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8002b5a:	2303      	movs	r3, #3
 8002b5c:	e006      	b.n	8002b6c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	691b      	ldr	r3, [r3, #16]
 8002b62:	f003 0310 	and.w	r3, r3, #16
 8002b66:	2b10      	cmp	r3, #16
 8002b68:	d0f0      	beq.n	8002b4c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8002b6a:	2300      	movs	r3, #0
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	3714      	adds	r7, #20
 8002b70:	46bd      	mov	sp, r7
 8002b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b76:	4770      	bx	lr

08002b78 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b08b      	sub	sp, #44	@ 0x2c
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	60f8      	str	r0, [r7, #12]
 8002b80:	60b9      	str	r1, [r7, #8]
 8002b82:	4613      	mov	r3, r2
 8002b84:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8002b8a:	68bb      	ldr	r3, [r7, #8]
 8002b8c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8002b8e:	88fb      	ldrh	r3, [r7, #6]
 8002b90:	089b      	lsrs	r3, r3, #2
 8002b92:	b29b      	uxth	r3, r3
 8002b94:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8002b96:	88fb      	ldrh	r3, [r7, #6]
 8002b98:	f003 0303 	and.w	r3, r3, #3
 8002b9c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	623b      	str	r3, [r7, #32]
 8002ba2:	e014      	b.n	8002bce <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8002ba4:	69bb      	ldr	r3, [r7, #24]
 8002ba6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002baa:	681a      	ldr	r2, [r3, #0]
 8002bac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bae:	601a      	str	r2, [r3, #0]
    pDest++;
 8002bb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bb2:	3301      	adds	r3, #1
 8002bb4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8002bb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bb8:	3301      	adds	r3, #1
 8002bba:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8002bbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bbe:	3301      	adds	r3, #1
 8002bc0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8002bc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bc4:	3301      	adds	r3, #1
 8002bc6:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8002bc8:	6a3b      	ldr	r3, [r7, #32]
 8002bca:	3301      	adds	r3, #1
 8002bcc:	623b      	str	r3, [r7, #32]
 8002bce:	6a3a      	ldr	r2, [r7, #32]
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	429a      	cmp	r2, r3
 8002bd4:	d3e6      	bcc.n	8002ba4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8002bd6:	8bfb      	ldrh	r3, [r7, #30]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d01e      	beq.n	8002c1a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8002be0:	69bb      	ldr	r3, [r7, #24]
 8002be2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002be6:	461a      	mov	r2, r3
 8002be8:	f107 0310 	add.w	r3, r7, #16
 8002bec:	6812      	ldr	r2, [r2, #0]
 8002bee:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8002bf0:	693a      	ldr	r2, [r7, #16]
 8002bf2:	6a3b      	ldr	r3, [r7, #32]
 8002bf4:	b2db      	uxtb	r3, r3
 8002bf6:	00db      	lsls	r3, r3, #3
 8002bf8:	fa22 f303 	lsr.w	r3, r2, r3
 8002bfc:	b2da      	uxtb	r2, r3
 8002bfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c00:	701a      	strb	r2, [r3, #0]
      i++;
 8002c02:	6a3b      	ldr	r3, [r7, #32]
 8002c04:	3301      	adds	r3, #1
 8002c06:	623b      	str	r3, [r7, #32]
      pDest++;
 8002c08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c0a:	3301      	adds	r3, #1
 8002c0c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8002c0e:	8bfb      	ldrh	r3, [r7, #30]
 8002c10:	3b01      	subs	r3, #1
 8002c12:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8002c14:	8bfb      	ldrh	r3, [r7, #30]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d1ea      	bne.n	8002bf0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8002c1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	372c      	adds	r7, #44	@ 0x2c
 8002c20:	46bd      	mov	sp, r7
 8002c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c26:	4770      	bx	lr

08002c28 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b085      	sub	sp, #20
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	695b      	ldr	r3, [r3, #20]
 8002c34:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	699b      	ldr	r3, [r3, #24]
 8002c3a:	68fa      	ldr	r2, [r7, #12]
 8002c3c:	4013      	ands	r3, r2
 8002c3e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8002c40:	68fb      	ldr	r3, [r7, #12]
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	3714      	adds	r7, #20
 8002c46:	46bd      	mov	sp, r7
 8002c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4c:	4770      	bx	lr

08002c4e <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8002c4e:	b480      	push	{r7}
 8002c50:	b085      	sub	sp, #20
 8002c52:	af00      	add	r7, sp, #0
 8002c54:	6078      	str	r0, [r7, #4]
 8002c56:	460b      	mov	r3, r1
 8002c58:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8002c5e:	78fb      	ldrb	r3, [r7, #3]
 8002c60:	015a      	lsls	r2, r3, #5
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	4413      	add	r3, r2
 8002c66:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c6a:	689b      	ldr	r3, [r3, #8]
 8002c6c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8002c6e:	78fb      	ldrb	r3, [r7, #3]
 8002c70:	015a      	lsls	r2, r3, #5
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	4413      	add	r3, r2
 8002c76:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c7a:	68db      	ldr	r3, [r3, #12]
 8002c7c:	68ba      	ldr	r2, [r7, #8]
 8002c7e:	4013      	ands	r3, r2
 8002c80:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8002c82:	68bb      	ldr	r3, [r7, #8]
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	3714      	adds	r7, #20
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8e:	4770      	bx	lr

08002c90 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b083      	sub	sp, #12
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	695b      	ldr	r3, [r3, #20]
 8002c9c:	f003 0301 	and.w	r3, r3, #1
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	370c      	adds	r7, #12
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002caa:	4770      	bx	lr

08002cac <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8002cac:	b480      	push	{r7}
 8002cae:	b085      	sub	sp, #20
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
 8002cb4:	460b      	mov	r3, r1
 8002cb6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	68fa      	ldr	r2, [r7, #12]
 8002cc6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002cca:	f023 0303 	bic.w	r3, r3, #3
 8002cce:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002cd6:	681a      	ldr	r2, [r3, #0]
 8002cd8:	78fb      	ldrb	r3, [r7, #3]
 8002cda:	f003 0303 	and.w	r3, r3, #3
 8002cde:	68f9      	ldr	r1, [r7, #12]
 8002ce0:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8002ce8:	78fb      	ldrb	r3, [r7, #3]
 8002cea:	2b01      	cmp	r3, #1
 8002cec:	d107      	bne.n	8002cfe <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002cf4:	461a      	mov	r2, r3
 8002cf6:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8002cfa:	6053      	str	r3, [r2, #4]
 8002cfc:	e00c      	b.n	8002d18 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8002cfe:	78fb      	ldrb	r3, [r7, #3]
 8002d00:	2b02      	cmp	r3, #2
 8002d02:	d107      	bne.n	8002d14 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002d0a:	461a      	mov	r2, r3
 8002d0c:	f241 7370 	movw	r3, #6000	@ 0x1770
 8002d10:	6053      	str	r3, [r2, #4]
 8002d12:	e001      	b.n	8002d18 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	e000      	b.n	8002d1a <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8002d18:	2300      	movs	r3, #0
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	3714      	adds	r7, #20
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d24:	4770      	bx	lr

08002d26 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8002d26:	b480      	push	{r7}
 8002d28:	b085      	sub	sp, #20
 8002d2a:	af00      	add	r7, sp, #0
 8002d2c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002d38:	695b      	ldr	r3, [r3, #20]
 8002d3a:	b29b      	uxth	r3, r3
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	3714      	adds	r7, #20
 8002d40:	46bd      	mov	sp, r7
 8002d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d46:	4770      	bx	lr

08002d48 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b089      	sub	sp, #36	@ 0x24
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
 8002d50:	460b      	mov	r3, r1
 8002d52:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8002d58:	78fb      	ldrb	r3, [r7, #3]
 8002d5a:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8002d60:	69bb      	ldr	r3, [r7, #24]
 8002d62:	015a      	lsls	r2, r3, #5
 8002d64:	69fb      	ldr	r3, [r7, #28]
 8002d66:	4413      	add	r3, r2
 8002d68:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	0c9b      	lsrs	r3, r3, #18
 8002d70:	f003 0303 	and.w	r3, r3, #3
 8002d74:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8002d76:	69bb      	ldr	r3, [r7, #24]
 8002d78:	015a      	lsls	r2, r3, #5
 8002d7a:	69fb      	ldr	r3, [r7, #28]
 8002d7c:	4413      	add	r3, r2
 8002d7e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	0fdb      	lsrs	r3, r3, #31
 8002d86:	f003 0301 	and.w	r3, r3, #1
 8002d8a:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8002d8c:	69bb      	ldr	r3, [r7, #24]
 8002d8e:	015a      	lsls	r2, r3, #5
 8002d90:	69fb      	ldr	r3, [r7, #28]
 8002d92:	4413      	add	r3, r2
 8002d94:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	0fdb      	lsrs	r3, r3, #31
 8002d9c:	f003 0301 	and.w	r3, r3, #1
 8002da0:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	f003 0320 	and.w	r3, r3, #32
 8002daa:	2b20      	cmp	r3, #32
 8002dac:	d10d      	bne.n	8002dca <USB_HC_Halt+0x82>
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d10a      	bne.n	8002dca <USB_HC_Halt+0x82>
 8002db4:	693b      	ldr	r3, [r7, #16]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d005      	beq.n	8002dc6 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8002dba:	697b      	ldr	r3, [r7, #20]
 8002dbc:	2b01      	cmp	r3, #1
 8002dbe:	d002      	beq.n	8002dc6 <USB_HC_Halt+0x7e>
 8002dc0:	697b      	ldr	r3, [r7, #20]
 8002dc2:	2b03      	cmp	r3, #3
 8002dc4:	d101      	bne.n	8002dca <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	e0d8      	b.n	8002f7c <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d002      	beq.n	8002dd6 <USB_HC_Halt+0x8e>
 8002dd0:	697b      	ldr	r3, [r7, #20]
 8002dd2:	2b02      	cmp	r3, #2
 8002dd4:	d173      	bne.n	8002ebe <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8002dd6:	69bb      	ldr	r3, [r7, #24]
 8002dd8:	015a      	lsls	r2, r3, #5
 8002dda:	69fb      	ldr	r3, [r7, #28]
 8002ddc:	4413      	add	r3, r2
 8002dde:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	69ba      	ldr	r2, [r7, #24]
 8002de6:	0151      	lsls	r1, r2, #5
 8002de8:	69fa      	ldr	r2, [r7, #28]
 8002dea:	440a      	add	r2, r1
 8002dec:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002df0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002df4:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	689b      	ldr	r3, [r3, #8]
 8002dfa:	f003 0320 	and.w	r3, r3, #32
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d14a      	bne.n	8002e98 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e06:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d133      	bne.n	8002e76 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8002e0e:	69bb      	ldr	r3, [r7, #24]
 8002e10:	015a      	lsls	r2, r3, #5
 8002e12:	69fb      	ldr	r3, [r7, #28]
 8002e14:	4413      	add	r3, r2
 8002e16:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	69ba      	ldr	r2, [r7, #24]
 8002e1e:	0151      	lsls	r1, r2, #5
 8002e20:	69fa      	ldr	r2, [r7, #28]
 8002e22:	440a      	add	r2, r1
 8002e24:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002e28:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002e2c:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8002e2e:	69bb      	ldr	r3, [r7, #24]
 8002e30:	015a      	lsls	r2, r3, #5
 8002e32:	69fb      	ldr	r3, [r7, #28]
 8002e34:	4413      	add	r3, r2
 8002e36:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	69ba      	ldr	r2, [r7, #24]
 8002e3e:	0151      	lsls	r1, r2, #5
 8002e40:	69fa      	ldr	r2, [r7, #28]
 8002e42:	440a      	add	r2, r1
 8002e44:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002e48:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002e4c:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	3301      	adds	r3, #1
 8002e52:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002e5a:	d82e      	bhi.n	8002eba <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8002e5c:	69bb      	ldr	r3, [r7, #24]
 8002e5e:	015a      	lsls	r2, r3, #5
 8002e60:	69fb      	ldr	r3, [r7, #28]
 8002e62:	4413      	add	r3, r2
 8002e64:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002e6e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002e72:	d0ec      	beq.n	8002e4e <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8002e74:	e081      	b.n	8002f7a <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8002e76:	69bb      	ldr	r3, [r7, #24]
 8002e78:	015a      	lsls	r2, r3, #5
 8002e7a:	69fb      	ldr	r3, [r7, #28]
 8002e7c:	4413      	add	r3, r2
 8002e7e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	69ba      	ldr	r2, [r7, #24]
 8002e86:	0151      	lsls	r1, r2, #5
 8002e88:	69fa      	ldr	r2, [r7, #28]
 8002e8a:	440a      	add	r2, r1
 8002e8c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002e90:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002e94:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8002e96:	e070      	b.n	8002f7a <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8002e98:	69bb      	ldr	r3, [r7, #24]
 8002e9a:	015a      	lsls	r2, r3, #5
 8002e9c:	69fb      	ldr	r3, [r7, #28]
 8002e9e:	4413      	add	r3, r2
 8002ea0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	69ba      	ldr	r2, [r7, #24]
 8002ea8:	0151      	lsls	r1, r2, #5
 8002eaa:	69fa      	ldr	r2, [r7, #28]
 8002eac:	440a      	add	r2, r1
 8002eae:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002eb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002eb6:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8002eb8:	e05f      	b.n	8002f7a <USB_HC_Halt+0x232>
            break;
 8002eba:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8002ebc:	e05d      	b.n	8002f7a <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8002ebe:	69bb      	ldr	r3, [r7, #24]
 8002ec0:	015a      	lsls	r2, r3, #5
 8002ec2:	69fb      	ldr	r3, [r7, #28]
 8002ec4:	4413      	add	r3, r2
 8002ec6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	69ba      	ldr	r2, [r7, #24]
 8002ece:	0151      	lsls	r1, r2, #5
 8002ed0:	69fa      	ldr	r2, [r7, #28]
 8002ed2:	440a      	add	r2, r1
 8002ed4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002ed8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002edc:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8002ede:	69fb      	ldr	r3, [r7, #28]
 8002ee0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002ee4:	691b      	ldr	r3, [r3, #16]
 8002ee6:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d133      	bne.n	8002f56 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8002eee:	69bb      	ldr	r3, [r7, #24]
 8002ef0:	015a      	lsls	r2, r3, #5
 8002ef2:	69fb      	ldr	r3, [r7, #28]
 8002ef4:	4413      	add	r3, r2
 8002ef6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	69ba      	ldr	r2, [r7, #24]
 8002efe:	0151      	lsls	r1, r2, #5
 8002f00:	69fa      	ldr	r2, [r7, #28]
 8002f02:	440a      	add	r2, r1
 8002f04:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002f08:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002f0c:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8002f0e:	69bb      	ldr	r3, [r7, #24]
 8002f10:	015a      	lsls	r2, r3, #5
 8002f12:	69fb      	ldr	r3, [r7, #28]
 8002f14:	4413      	add	r3, r2
 8002f16:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	69ba      	ldr	r2, [r7, #24]
 8002f1e:	0151      	lsls	r1, r2, #5
 8002f20:	69fa      	ldr	r2, [r7, #28]
 8002f22:	440a      	add	r2, r1
 8002f24:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002f28:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002f2c:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8002f2e:	68bb      	ldr	r3, [r7, #8]
 8002f30:	3301      	adds	r3, #1
 8002f32:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002f3a:	d81d      	bhi.n	8002f78 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8002f3c:	69bb      	ldr	r3, [r7, #24]
 8002f3e:	015a      	lsls	r2, r3, #5
 8002f40:	69fb      	ldr	r3, [r7, #28]
 8002f42:	4413      	add	r3, r2
 8002f44:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002f4e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002f52:	d0ec      	beq.n	8002f2e <USB_HC_Halt+0x1e6>
 8002f54:	e011      	b.n	8002f7a <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8002f56:	69bb      	ldr	r3, [r7, #24]
 8002f58:	015a      	lsls	r2, r3, #5
 8002f5a:	69fb      	ldr	r3, [r7, #28]
 8002f5c:	4413      	add	r3, r2
 8002f5e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	69ba      	ldr	r2, [r7, #24]
 8002f66:	0151      	lsls	r1, r2, #5
 8002f68:	69fa      	ldr	r2, [r7, #28]
 8002f6a:	440a      	add	r2, r1
 8002f6c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002f70:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002f74:	6013      	str	r3, [r2, #0]
 8002f76:	e000      	b.n	8002f7a <USB_HC_Halt+0x232>
          break;
 8002f78:	bf00      	nop
    }
  }

  return HAL_OK;
 8002f7a:	2300      	movs	r3, #0
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	3724      	adds	r7, #36	@ 0x24
 8002f80:	46bd      	mov	sp, r7
 8002f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f86:	4770      	bx	lr

08002f88 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b088      	sub	sp, #32
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8002f90:	2300      	movs	r3, #0
 8002f92:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8002f98:	2300      	movs	r3, #0
 8002f9a:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8002f9c:	6878      	ldr	r0, [r7, #4]
 8002f9e:	f7ff fd7a 	bl	8002a96 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8002fa2:	2110      	movs	r1, #16
 8002fa4:	6878      	ldr	r0, [r7, #4]
 8002fa6:	f7ff fd87 	bl	8002ab8 <USB_FlushTxFifo>
 8002faa:	4603      	mov	r3, r0
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d001      	beq.n	8002fb4 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8002fb4:	6878      	ldr	r0, [r7, #4]
 8002fb6:	f7ff fdb1 	bl	8002b1c <USB_FlushRxFifo>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d001      	beq.n	8002fc4 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	61bb      	str	r3, [r7, #24]
 8002fc8:	e01f      	b.n	800300a <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8002fca:	69bb      	ldr	r3, [r7, #24]
 8002fcc:	015a      	lsls	r2, r3, #5
 8002fce:	697b      	ldr	r3, [r7, #20]
 8002fd0:	4413      	add	r3, r2
 8002fd2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002fe0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8002fe2:	693b      	ldr	r3, [r7, #16]
 8002fe4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002fe8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8002ff0:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8002ff2:	69bb      	ldr	r3, [r7, #24]
 8002ff4:	015a      	lsls	r2, r3, #5
 8002ff6:	697b      	ldr	r3, [r7, #20]
 8002ff8:	4413      	add	r3, r2
 8002ffa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ffe:	461a      	mov	r2, r3
 8003000:	693b      	ldr	r3, [r7, #16]
 8003002:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8003004:	69bb      	ldr	r3, [r7, #24]
 8003006:	3301      	adds	r3, #1
 8003008:	61bb      	str	r3, [r7, #24]
 800300a:	69bb      	ldr	r3, [r7, #24]
 800300c:	2b0f      	cmp	r3, #15
 800300e:	d9dc      	bls.n	8002fca <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8003010:	2300      	movs	r3, #0
 8003012:	61bb      	str	r3, [r7, #24]
 8003014:	e034      	b.n	8003080 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8003016:	69bb      	ldr	r3, [r7, #24]
 8003018:	015a      	lsls	r2, r3, #5
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	4413      	add	r3, r2
 800301e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800302c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003034:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800303c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800303e:	69bb      	ldr	r3, [r7, #24]
 8003040:	015a      	lsls	r2, r3, #5
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	4413      	add	r3, r2
 8003046:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800304a:	461a      	mov	r2, r3
 800304c:	693b      	ldr	r3, [r7, #16]
 800304e:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	3301      	adds	r3, #1
 8003054:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800305c:	d80c      	bhi.n	8003078 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800305e:	69bb      	ldr	r3, [r7, #24]
 8003060:	015a      	lsls	r2, r3, #5
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	4413      	add	r3, r2
 8003066:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003070:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003074:	d0ec      	beq.n	8003050 <USB_StopHost+0xc8>
 8003076:	e000      	b.n	800307a <USB_StopHost+0xf2>
        break;
 8003078:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800307a:	69bb      	ldr	r3, [r7, #24]
 800307c:	3301      	adds	r3, #1
 800307e:	61bb      	str	r3, [r7, #24]
 8003080:	69bb      	ldr	r3, [r7, #24]
 8003082:	2b0f      	cmp	r3, #15
 8003084:	d9c7      	bls.n	8003016 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800308c:	461a      	mov	r2, r3
 800308e:	f04f 33ff 	mov.w	r3, #4294967295
 8003092:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	f04f 32ff 	mov.w	r2, #4294967295
 800309a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800309c:	6878      	ldr	r0, [r7, #4]
 800309e:	f7ff fce9 	bl	8002a74 <USB_EnableGlobalInt>

  return ret;
 80030a2:	7ffb      	ldrb	r3, [r7, #31]
}
 80030a4:	4618      	mov	r0, r3
 80030a6:	3720      	adds	r7, #32
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bd80      	pop	{r7, pc}

080030ac <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b082      	sub	sp, #8
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80030ba:	1c5a      	adds	r2, r3, #1
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 80030c2:	6878      	ldr	r0, [r7, #4]
 80030c4:	f000 f804 	bl	80030d0 <USBH_HandleSof>
}
 80030c8:	bf00      	nop
 80030ca:	3708      	adds	r7, #8
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd80      	pop	{r7, pc}

080030d0 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b082      	sub	sp, #8
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	781b      	ldrb	r3, [r3, #0]
 80030dc:	b2db      	uxtb	r3, r3
 80030de:	2b0b      	cmp	r3, #11
 80030e0:	d10a      	bne.n	80030f8 <USBH_HandleSof+0x28>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d005      	beq.n	80030f8 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80030f2:	699b      	ldr	r3, [r3, #24]
 80030f4:	6878      	ldr	r0, [r7, #4]
 80030f6:	4798      	blx	r3
  }
}
 80030f8:	bf00      	nop
 80030fa:	3708      	adds	r7, #8
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bd80      	pop	{r7, pc}

08003100 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8003100:	b480      	push	{r7}
 8003102:	b083      	sub	sp, #12
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2201      	movs	r2, #1
 800310c:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8003110:	bf00      	nop
}
 8003112:	370c      	adds	r7, #12
 8003114:	46bd      	mov	sp, r7
 8003116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311a:	4770      	bx	lr

0800311c <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800311c:	b480      	push	{r7}
 800311e:	b083      	sub	sp, #12
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2200      	movs	r2, #0
 8003128:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 800312c:	bf00      	nop
}
 800312e:	370c      	adds	r7, #12
 8003130:	46bd      	mov	sp, r7
 8003132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003136:	4770      	bx	lr

08003138 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8003138:	b480      	push	{r7}
 800313a:	b083      	sub	sp, #12
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2201      	movs	r2, #1
 8003144:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2200      	movs	r2, #0
 800314c:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2200      	movs	r2, #0
 8003154:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8003158:	2300      	movs	r3, #0
}
 800315a:	4618      	mov	r0, r3
 800315c:	370c      	adds	r7, #12
 800315e:	46bd      	mov	sp, r7
 8003160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003164:	4770      	bx	lr

08003166 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8003166:	b580      	push	{r7, lr}
 8003168:	b082      	sub	sp, #8
 800316a:	af00      	add	r7, sp, #0
 800316c:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2201      	movs	r2, #1
 8003172:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2200      	movs	r2, #0
 800317a:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2200      	movs	r2, #0
 8003182:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8003186:	6878      	ldr	r0, [r7, #4]
 8003188:	f000 f883 	bl	8003292 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	791b      	ldrb	r3, [r3, #4]
 8003190:	4619      	mov	r1, r3
 8003192:	6878      	ldr	r0, [r7, #4]
 8003194:	f000 f80b 	bl	80031ae <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	795b      	ldrb	r3, [r3, #5]
 800319c:	4619      	mov	r1, r3
 800319e:	6878      	ldr	r0, [r7, #4]
 80031a0:	f000 f805 	bl	80031ae <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80031a4:	2300      	movs	r3, #0
}
 80031a6:	4618      	mov	r0, r3
 80031a8:	3708      	adds	r7, #8
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}

080031ae <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80031ae:	b480      	push	{r7}
 80031b0:	b083      	sub	sp, #12
 80031b2:	af00      	add	r7, sp, #0
 80031b4:	6078      	str	r0, [r7, #4]
 80031b6:	460b      	mov	r3, r1
 80031b8:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 80031ba:	78fb      	ldrb	r3, [r7, #3]
 80031bc:	2b0f      	cmp	r3, #15
 80031be:	d80d      	bhi.n	80031dc <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80031c0:	78fb      	ldrb	r3, [r7, #3]
 80031c2:	687a      	ldr	r2, [r7, #4]
 80031c4:	33e0      	adds	r3, #224	@ 0xe0
 80031c6:	009b      	lsls	r3, r3, #2
 80031c8:	4413      	add	r3, r2
 80031ca:	685a      	ldr	r2, [r3, #4]
 80031cc:	78fb      	ldrb	r3, [r7, #3]
 80031ce:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80031d2:	6879      	ldr	r1, [r7, #4]
 80031d4:	33e0      	adds	r3, #224	@ 0xe0
 80031d6:	009b      	lsls	r3, r3, #2
 80031d8:	440b      	add	r3, r1
 80031da:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80031dc:	2300      	movs	r3, #0
}
 80031de:	4618      	mov	r0, r3
 80031e0:	370c      	adds	r7, #12
 80031e2:	46bd      	mov	sp, r7
 80031e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e8:	4770      	bx	lr

080031ea <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80031ea:	b580      	push	{r7, lr}
 80031ec:	b082      	sub	sp, #8
 80031ee:	af00      	add	r7, sp, #0
 80031f0:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80031f8:	4618      	mov	r0, r3
 80031fa:	f7ff ff57 	bl	80030ac <USBH_LL_IncTimer>
}
 80031fe:	bf00      	nop
 8003200:	3708      	adds	r7, #8
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}

08003206 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8003206:	b580      	push	{r7, lr}
 8003208:	b082      	sub	sp, #8
 800320a:	af00      	add	r7, sp, #0
 800320c:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8003214:	4618      	mov	r0, r3
 8003216:	f7ff ff8f 	bl	8003138 <USBH_LL_Connect>
}
 800321a:	bf00      	nop
 800321c:	3708      	adds	r7, #8
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}

08003222 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8003222:	b580      	push	{r7, lr}
 8003224:	b082      	sub	sp, #8
 8003226:	af00      	add	r7, sp, #0
 8003228:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8003230:	4618      	mov	r0, r3
 8003232:	f7ff ff98 	bl	8003166 <USBH_LL_Disconnect>
}
 8003236:	bf00      	nop
 8003238:	3708      	adds	r7, #8
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}

0800323e <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800323e:	b480      	push	{r7}
 8003240:	b083      	sub	sp, #12
 8003242:	af00      	add	r7, sp, #0
 8003244:	6078      	str	r0, [r7, #4]
 8003246:	460b      	mov	r3, r1
 8003248:	70fb      	strb	r3, [r7, #3]
 800324a:	4613      	mov	r3, r2
 800324c:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800324e:	bf00      	nop
 8003250:	370c      	adds	r7, #12
 8003252:	46bd      	mov	sp, r7
 8003254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003258:	4770      	bx	lr

0800325a <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800325a:	b580      	push	{r7, lr}
 800325c:	b082      	sub	sp, #8
 800325e:	af00      	add	r7, sp, #0
 8003260:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8003268:	4618      	mov	r0, r3
 800326a:	f7ff ff49 	bl	8003100 <USBH_LL_PortEnabled>
}
 800326e:	bf00      	nop
 8003270:	3708      	adds	r7, #8
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}

08003276 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8003276:	b580      	push	{r7, lr}
 8003278:	b082      	sub	sp, #8
 800327a:	af00      	add	r7, sp, #0
 800327c:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8003284:	4618      	mov	r0, r3
 8003286:	f7ff ff49 	bl	800311c <USBH_LL_PortDisabled>
}
 800328a:	bf00      	nop
 800328c:	3708      	adds	r7, #8
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}

08003292 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8003292:	b580      	push	{r7, lr}
 8003294:	b084      	sub	sp, #16
 8003296:	af00      	add	r7, sp, #0
 8003298:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800329a:	2300      	movs	r3, #0
 800329c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800329e:	2300      	movs	r3, #0
 80032a0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80032a8:	4618      	mov	r0, r3
 80032aa:	f7fd ff4c 	bl	8001146 <HAL_HCD_Stop>
 80032ae:	4603      	mov	r3, r0
 80032b0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80032b2:	7bfb      	ldrb	r3, [r7, #15]
 80032b4:	4618      	mov	r0, r3
 80032b6:	f000 f807 	bl	80032c8 <USBH_Get_USB_Status>
 80032ba:	4603      	mov	r3, r0
 80032bc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80032be:	7bbb      	ldrb	r3, [r7, #14]
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	3710      	adds	r7, #16
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}

080032c8 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80032c8:	b480      	push	{r7}
 80032ca:	b085      	sub	sp, #20
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	4603      	mov	r3, r0
 80032d0:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80032d2:	2300      	movs	r3, #0
 80032d4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80032d6:	79fb      	ldrb	r3, [r7, #7]
 80032d8:	2b03      	cmp	r3, #3
 80032da:	d817      	bhi.n	800330c <USBH_Get_USB_Status+0x44>
 80032dc:	a201      	add	r2, pc, #4	@ (adr r2, 80032e4 <USBH_Get_USB_Status+0x1c>)
 80032de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032e2:	bf00      	nop
 80032e4:	080032f5 	.word	0x080032f5
 80032e8:	080032fb 	.word	0x080032fb
 80032ec:	08003301 	.word	0x08003301
 80032f0:	08003307 	.word	0x08003307
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80032f4:	2300      	movs	r3, #0
 80032f6:	73fb      	strb	r3, [r7, #15]
    break;
 80032f8:	e00b      	b.n	8003312 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80032fa:	2302      	movs	r3, #2
 80032fc:	73fb      	strb	r3, [r7, #15]
    break;
 80032fe:	e008      	b.n	8003312 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8003300:	2301      	movs	r3, #1
 8003302:	73fb      	strb	r3, [r7, #15]
    break;
 8003304:	e005      	b.n	8003312 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8003306:	2302      	movs	r3, #2
 8003308:	73fb      	strb	r3, [r7, #15]
    break;
 800330a:	e002      	b.n	8003312 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800330c:	2302      	movs	r3, #2
 800330e:	73fb      	strb	r3, [r7, #15]
    break;
 8003310:	bf00      	nop
  }
  return usb_status;
 8003312:	7bfb      	ldrb	r3, [r7, #15]
}
 8003314:	4618      	mov	r0, r3
 8003316:	3714      	adds	r7, #20
 8003318:	46bd      	mov	sp, r7
 800331a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331e:	4770      	bx	lr

08003320 <memset>:
 8003320:	4402      	add	r2, r0
 8003322:	4603      	mov	r3, r0
 8003324:	4293      	cmp	r3, r2
 8003326:	d100      	bne.n	800332a <memset+0xa>
 8003328:	4770      	bx	lr
 800332a:	f803 1b01 	strb.w	r1, [r3], #1
 800332e:	e7f9      	b.n	8003324 <memset+0x4>

08003330 <strchr>:
 8003330:	b2c9      	uxtb	r1, r1
 8003332:	4603      	mov	r3, r0
 8003334:	4618      	mov	r0, r3
 8003336:	f813 2b01 	ldrb.w	r2, [r3], #1
 800333a:	b112      	cbz	r2, 8003342 <strchr+0x12>
 800333c:	428a      	cmp	r2, r1
 800333e:	d1f9      	bne.n	8003334 <strchr+0x4>
 8003340:	4770      	bx	lr
 8003342:	2900      	cmp	r1, #0
 8003344:	bf18      	it	ne
 8003346:	2000      	movne	r0, #0
 8003348:	4770      	bx	lr

0800334a <strstr>:
 800334a:	780a      	ldrb	r2, [r1, #0]
 800334c:	b570      	push	{r4, r5, r6, lr}
 800334e:	b96a      	cbnz	r2, 800336c <strstr+0x22>
 8003350:	bd70      	pop	{r4, r5, r6, pc}
 8003352:	429a      	cmp	r2, r3
 8003354:	d109      	bne.n	800336a <strstr+0x20>
 8003356:	460c      	mov	r4, r1
 8003358:	4605      	mov	r5, r0
 800335a:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800335e:	2b00      	cmp	r3, #0
 8003360:	d0f6      	beq.n	8003350 <strstr+0x6>
 8003362:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8003366:	429e      	cmp	r6, r3
 8003368:	d0f7      	beq.n	800335a <strstr+0x10>
 800336a:	3001      	adds	r0, #1
 800336c:	7803      	ldrb	r3, [r0, #0]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d1ef      	bne.n	8003352 <strstr+0x8>
 8003372:	4618      	mov	r0, r3
 8003374:	e7ec      	b.n	8003350 <strstr+0x6>
	...

08003378 <__libc_init_array>:
 8003378:	b570      	push	{r4, r5, r6, lr}
 800337a:	4d0d      	ldr	r5, [pc, #52]	@ (80033b0 <__libc_init_array+0x38>)
 800337c:	4c0d      	ldr	r4, [pc, #52]	@ (80033b4 <__libc_init_array+0x3c>)
 800337e:	1b64      	subs	r4, r4, r5
 8003380:	10a4      	asrs	r4, r4, #2
 8003382:	2600      	movs	r6, #0
 8003384:	42a6      	cmp	r6, r4
 8003386:	d109      	bne.n	800339c <__libc_init_array+0x24>
 8003388:	4d0b      	ldr	r5, [pc, #44]	@ (80033b8 <__libc_init_array+0x40>)
 800338a:	4c0c      	ldr	r4, [pc, #48]	@ (80033bc <__libc_init_array+0x44>)
 800338c:	f000 f818 	bl	80033c0 <_init>
 8003390:	1b64      	subs	r4, r4, r5
 8003392:	10a4      	asrs	r4, r4, #2
 8003394:	2600      	movs	r6, #0
 8003396:	42a6      	cmp	r6, r4
 8003398:	d105      	bne.n	80033a6 <__libc_init_array+0x2e>
 800339a:	bd70      	pop	{r4, r5, r6, pc}
 800339c:	f855 3b04 	ldr.w	r3, [r5], #4
 80033a0:	4798      	blx	r3
 80033a2:	3601      	adds	r6, #1
 80033a4:	e7ee      	b.n	8003384 <__libc_init_array+0xc>
 80033a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80033aa:	4798      	blx	r3
 80033ac:	3601      	adds	r6, #1
 80033ae:	e7f2      	b.n	8003396 <__libc_init_array+0x1e>
 80033b0:	08003544 	.word	0x08003544
 80033b4:	08003544 	.word	0x08003544
 80033b8:	08003544 	.word	0x08003544
 80033bc:	08003548 	.word	0x08003548

080033c0 <_init>:
 80033c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033c2:	bf00      	nop
 80033c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033c6:	bc08      	pop	{r3}
 80033c8:	469e      	mov	lr, r3
 80033ca:	4770      	bx	lr

080033cc <_fini>:
 80033cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033ce:	bf00      	nop
 80033d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033d2:	bc08      	pop	{r3}
 80033d4:	469e      	mov	lr, r3
 80033d6:	4770      	bx	lr
