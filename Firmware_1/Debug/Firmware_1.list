
Firmware_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08020000  08020000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002dc4  08020198  08020198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  08022f5c  08022f5c  00003f5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08022fac  08022fac  00004010  2**0
                  CONTENTS
  4 .ARM          00000008  08022fac  08022fac  00003fac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08022fb4  08022fb4  00004010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08022fb4  08022fb4  00003fb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08022fb8  08022fb8  00003fb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08022fbc  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002d14  20000010  08022fcc  00004010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002d24  08022fcc  00004d24  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00004010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000099d1  00000000  00000000  00004040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b8f  00000000  00000000  0000da11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000830  00000000  00000000  0000f5a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000613  00000000  00000000  0000fdd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000165c7  00000000  00000000  000103e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009b8d  00000000  00000000  000269aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008bc84  00000000  00000000  00030537  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bc1bb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000213c  00000000  00000000  000bc200  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  000be33c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08020198 <__do_global_dtors_aux>:
 8020198:	b510      	push	{r4, lr}
 802019a:	4c05      	ldr	r4, [pc, #20]	@ (80201b0 <__do_global_dtors_aux+0x18>)
 802019c:	7823      	ldrb	r3, [r4, #0]
 802019e:	b933      	cbnz	r3, 80201ae <__do_global_dtors_aux+0x16>
 80201a0:	4b04      	ldr	r3, [pc, #16]	@ (80201b4 <__do_global_dtors_aux+0x1c>)
 80201a2:	b113      	cbz	r3, 80201aa <__do_global_dtors_aux+0x12>
 80201a4:	4804      	ldr	r0, [pc, #16]	@ (80201b8 <__do_global_dtors_aux+0x20>)
 80201a6:	f3af 8000 	nop.w
 80201aa:	2301      	movs	r3, #1
 80201ac:	7023      	strb	r3, [r4, #0]
 80201ae:	bd10      	pop	{r4, pc}
 80201b0:	20000010 	.word	0x20000010
 80201b4:	00000000 	.word	0x00000000
 80201b8:	08022f44 	.word	0x08022f44

080201bc <frame_dummy>:
 80201bc:	b508      	push	{r3, lr}
 80201be:	4b03      	ldr	r3, [pc, #12]	@ (80201cc <frame_dummy+0x10>)
 80201c0:	b11b      	cbz	r3, 80201ca <frame_dummy+0xe>
 80201c2:	4903      	ldr	r1, [pc, #12]	@ (80201d0 <frame_dummy+0x14>)
 80201c4:	4803      	ldr	r0, [pc, #12]	@ (80201d4 <frame_dummy+0x18>)
 80201c6:	f3af 8000 	nop.w
 80201ca:	bd08      	pop	{r3, pc}
 80201cc:	00000000 	.word	0x00000000
 80201d0:	20000014 	.word	0x20000014
 80201d4:	08022f44 	.word	0x08022f44

080201d8 <strlen>:
 80201d8:	4603      	mov	r3, r0
 80201da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80201de:	2a00      	cmp	r2, #0
 80201e0:	d1fb      	bne.n	80201da <strlen+0x2>
 80201e2:	1a18      	subs	r0, r3, r0
 80201e4:	3801      	subs	r0, #1
 80201e6:	4770      	bx	lr

080201e8 <Button_Init>:
*/


#define GPIOA_BASE_ADDR 0x40020000 

void Button_Init() {
 80201e8:	b480      	push	{r7}
 80201ea:	b083      	sub	sp, #12
 80201ec:	af00      	add	r7, sp, #0

    // 1. Enable GPIO_A clock
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80201ee:	2300      	movs	r3, #0
 80201f0:	603b      	str	r3, [r7, #0]
 80201f2:	4b0d      	ldr	r3, [pc, #52]	@ (8020228 <Button_Init+0x40>)
 80201f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80201f6:	4a0c      	ldr	r2, [pc, #48]	@ (8020228 <Button_Init+0x40>)
 80201f8:	f043 0301 	orr.w	r3, r3, #1
 80201fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80201fe:	4b0a      	ldr	r3, [pc, #40]	@ (8020228 <Button_Init+0x40>)
 8020200:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8020202:	f003 0301 	and.w	r3, r3, #1
 8020206:	603b      	str	r3, [r7, #0]
 8020208:	683b      	ldr	r3, [r7, #0]

    // 2. Set PA0 as input
    uint32_t* GPIOA_MODER = (uint32_t*)(GPIOA_BASE_ADDR + 0x00);
 802020a:	4b08      	ldr	r3, [pc, #32]	@ (802022c <Button_Init+0x44>)
 802020c:	607b      	str	r3, [r7, #4]
    *GPIOA_MODER &= ~(0b11 << 0); 
 802020e:	687b      	ldr	r3, [r7, #4]
 8020210:	681b      	ldr	r3, [r3, #0]
 8020212:	f023 0203 	bic.w	r2, r3, #3
 8020216:	687b      	ldr	r3, [r7, #4]
 8020218:	601a      	str	r2, [r3, #0]
}
 802021a:	bf00      	nop
 802021c:	370c      	adds	r7, #12
 802021e:	46bd      	mov	sp, r7
 8020220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020224:	4770      	bx	lr
 8020226:	bf00      	nop
 8020228:	40023800 	.word	0x40023800
 802022c:	40020000 	.word	0x40020000

08020230 <Led_Init>:
            -- offset addr is 0
            -- 01 is output mode
*/
#define GPIOD_BASE_ADDR 0x40020C00 // Get addr from  Data sheet <- Memory mapping

void Led_Init() {
 8020230:	b480      	push	{r7}
 8020232:	b083      	sub	sp, #12
 8020234:	af00      	add	r7, sp, #0
    // 1. Enable GPIO_D clock
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8020236:	2300      	movs	r3, #0
 8020238:	603b      	str	r3, [r7, #0]
 802023a:	4b10      	ldr	r3, [pc, #64]	@ (802027c <Led_Init+0x4c>)
 802023c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802023e:	4a0f      	ldr	r2, [pc, #60]	@ (802027c <Led_Init+0x4c>)
 8020240:	f043 0308 	orr.w	r3, r3, #8
 8020244:	6313      	str	r3, [r2, #48]	@ 0x30
 8020246:	4b0d      	ldr	r3, [pc, #52]	@ (802027c <Led_Init+0x4c>)
 8020248:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802024a:	f003 0308 	and.w	r3, r3, #8
 802024e:	603b      	str	r3, [r7, #0]
 8020250:	683b      	ldr	r3, [r7, #0]

    // 2. Set PD12, PD13, PD14 and PD15 as outputs - Get PD numbers from schematic
    uint32_t* GPIOD_MODER = (uint32_t*)(GPIOD_BASE_ADDR + 0x00); 
 8020252:	4b0b      	ldr	r3, [pc, #44]	@ (8020280 <Led_Init+0x50>)
 8020254:	607b      	str	r3, [r7, #4]
    *GPIOD_MODER &= (0b11111111 << 24); // Clear
 8020256:	687b      	ldr	r3, [r7, #4]
 8020258:	681b      	ldr	r3, [r3, #0]
 802025a:	f003 427f 	and.w	r2, r3, #4278190080	@ 0xff000000
 802025e:	687b      	ldr	r3, [r7, #4]
 8020260:	601a      	str	r2, [r3, #0]
    *GPIOD_MODER |= (0b01010101 << 24); // Set
 8020262:	687b      	ldr	r3, [r7, #4]
 8020264:	681b      	ldr	r3, [r3, #0]
 8020266:	f043 42aa 	orr.w	r2, r3, #1426063360	@ 0x55000000
 802026a:	687b      	ldr	r3, [r7, #4]
 802026c:	601a      	str	r2, [r3, #0]
}
 802026e:	bf00      	nop
 8020270:	370c      	adds	r7, #12
 8020272:	46bd      	mov	sp, r7
 8020274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020278:	4770      	bx	lr
 802027a:	bf00      	nop
 802027c:	40023800 	.word	0x40023800
 8020280:	40020c00 	.word	0x40020c00

08020284 <Led_Ctrl>:
int RED_LED     = 14;
int BLUE_LED    = 15;
int ON          = 1;
int OFF         = 0;

void Led_Ctrl(int LED, int OnOff) {
 8020284:	b480      	push	{r7}
 8020286:	b085      	sub	sp, #20
 8020288:	af00      	add	r7, sp, #0
 802028a:	6078      	str	r0, [r7, #4]
 802028c:	6039      	str	r1, [r7, #0]
    uint32_t* GPIOD_ODR = (uint32_t*)(GPIOD_BASE_ADDR + 0x14); 
 802028e:	4b0f      	ldr	r3, [pc, #60]	@ (80202cc <Led_Ctrl+0x48>)
 8020290:	60fb      	str	r3, [r7, #12]

    if (OnOff == 1)
 8020292:	683b      	ldr	r3, [r7, #0]
 8020294:	2b01      	cmp	r3, #1
 8020296:	d109      	bne.n	80202ac <Led_Ctrl+0x28>
        *GPIOD_ODR |=  (0b1 << LED);
 8020298:	68fb      	ldr	r3, [r7, #12]
 802029a:	681b      	ldr	r3, [r3, #0]
 802029c:	2101      	movs	r1, #1
 802029e:	687a      	ldr	r2, [r7, #4]
 80202a0:	fa01 f202 	lsl.w	r2, r1, r2
 80202a4:	431a      	orrs	r2, r3
 80202a6:	68fb      	ldr	r3, [r7, #12]
 80202a8:	601a      	str	r2, [r3, #0]
    else 
        *GPIOD_ODR &= ~(0b1 << LED);
}
 80202aa:	e009      	b.n	80202c0 <Led_Ctrl+0x3c>
        *GPIOD_ODR &= ~(0b1 << LED);
 80202ac:	68fb      	ldr	r3, [r7, #12]
 80202ae:	681b      	ldr	r3, [r3, #0]
 80202b0:	2101      	movs	r1, #1
 80202b2:	687a      	ldr	r2, [r7, #4]
 80202b4:	fa01 f202 	lsl.w	r2, r1, r2
 80202b8:	43d2      	mvns	r2, r2
 80202ba:	401a      	ands	r2, r3
 80202bc:	68fb      	ldr	r3, [r7, #12]
 80202be:	601a      	str	r2, [r3, #0]
}
 80202c0:	bf00      	nop
 80202c2:	3714      	adds	r7, #20
 80202c4:	46bd      	mov	sp, r7
 80202c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80202ca:	4770      	bx	lr
 80202cc:	40020c14 	.word	0x40020c14

080202d0 <Button_Status>:

// 4 - Check if the button is pressed or not
int Button_Status() {
 80202d0:	b480      	push	{r7}
 80202d2:	b083      	sub	sp, #12
 80202d4:	af00      	add	r7, sp, #0
    uint32_t* GPIOA_IDR = (uint32_t*)(GPIOA_BASE_ADDR + 0x10);
 80202d6:	4b06      	ldr	r3, [pc, #24]	@ (80202f0 <Button_Status+0x20>)
 80202d8:	607b      	str	r3, [r7, #4]
    return (*GPIOA_IDR >> 0) & 1;
 80202da:	687b      	ldr	r3, [r7, #4]
 80202dc:	681b      	ldr	r3, [r3, #0]
 80202de:	f003 0301 	and.w	r3, r3, #1
}
 80202e2:	4618      	mov	r0, r3
 80202e4:	370c      	adds	r7, #12
 80202e6:	46bd      	mov	sp, r7
 80202e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80202ec:	4770      	bx	lr
 80202ee:	bf00      	nop
 80202f0:	40020010 	.word	0x40020010

080202f4 <Button_Interrupt_Int>:

*/
#define EXTI_BASE_ADDR 0x40013C00
#define ISER_BASE_ADDR 0xE000E100 // From ref manual - M4 

void Button_Interrupt_Int() {
 80202f4:	b480      	push	{r7}
 80202f6:	b085      	sub	sp, #20
 80202f8:	af00      	add	r7, sp, #0

  // Config EXTI to send interrupt to NVIC when detect rising of failling edge

  // select trigger for EXTI0 is rising
  uint32_t* EXTI_RTSR = (uint32_t*)(EXTI_BASE_ADDR + 0x08);
 80202fa:	4b13      	ldr	r3, [pc, #76]	@ (8020348 <Button_Interrupt_Int+0x54>)
 80202fc:	60fb      	str	r3, [r7, #12]
  *EXTI_RTSR |= (0b1 << 0);
 80202fe:	68fb      	ldr	r3, [r7, #12]
 8020300:	681b      	ldr	r3, [r3, #0]
 8020302:	f043 0201 	orr.w	r2, r3, #1
 8020306:	68fb      	ldr	r3, [r7, #12]
 8020308:	601a      	str	r2, [r3, #0]

  // select trigger for EXTI0 is falling
  uint32_t* EXTI_FTSR = (uint32_t*)(EXTI_BASE_ADDR + 0x0C);
 802030a:	4b10      	ldr	r3, [pc, #64]	@ (802034c <Button_Interrupt_Int+0x58>)
 802030c:	60bb      	str	r3, [r7, #8]
  *EXTI_FTSR |= (0b1 << 0);
 802030e:	68bb      	ldr	r3, [r7, #8]
 8020310:	681b      	ldr	r3, [r3, #0]
 8020312:	f043 0201 	orr.w	r2, r3, #1
 8020316:	68bb      	ldr	r3, [r7, #8]
 8020318:	601a      	str	r2, [r3, #0]

  // masking
  uint32_t* EXTI_IMR = (uint32_t*)(EXTI_BASE_ADDR + 0x00);
 802031a:	4b0d      	ldr	r3, [pc, #52]	@ (8020350 <Button_Interrupt_Int+0x5c>)
 802031c:	607b      	str	r3, [r7, #4]
  *EXTI_IMR |= (0b1 << 0);
 802031e:	687b      	ldr	r3, [r7, #4]
 8020320:	681b      	ldr	r3, [r3, #0]
 8020322:	f043 0201 	orr.w	r2, r3, #1
 8020326:	687b      	ldr	r3, [r7, #4]
 8020328:	601a      	str	r2, [r3, #0]

  // NVIC accepts interrupt from EXTI0
  /*
    From vectore table in ref manual - stm32, we know position of EXTI0 interrupt is 6
  */
  uint32_t* ISER0 = (uint32_t*)(ISER_BASE_ADDR + 0x00);
 802032a:	4b0a      	ldr	r3, [pc, #40]	@ (8020354 <Button_Interrupt_Int+0x60>)
 802032c:	603b      	str	r3, [r7, #0]
  *ISER0 |= (0b1 << 6);
 802032e:	683b      	ldr	r3, [r7, #0]
 8020330:	681b      	ldr	r3, [r3, #0]
 8020332:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8020336:	683b      	ldr	r3, [r7, #0]
 8020338:	601a      	str	r2, [r3, #0]
  
}
 802033a:	bf00      	nop
 802033c:	3714      	adds	r7, #20
 802033e:	46bd      	mov	sp, r7
 8020340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020344:	4770      	bx	lr
 8020346:	bf00      	nop
 8020348:	40013c08 	.word	0x40013c08
 802034c:	40013c0c 	.word	0x40013c0c
 8020350:	40013c00 	.word	0x40013c00
 8020354:	e000e100 	.word	0xe000e100

08020358 <EXTI0_IRQHandler>:

void EXTI0_IRQHandler() {
 8020358:	b590      	push	{r4, r7, lr}
 802035a:	b083      	sub	sp, #12
 802035c:	af00      	add	r7, sp, #0

  Led_Ctrl(RED_LED, Button_Status());
 802035e:	4b0a      	ldr	r3, [pc, #40]	@ (8020388 <EXTI0_IRQHandler+0x30>)
 8020360:	681c      	ldr	r4, [r3, #0]
 8020362:	f7ff ffb5 	bl	80202d0 <Button_Status>
 8020366:	4603      	mov	r3, r0
 8020368:	4619      	mov	r1, r3
 802036a:	4620      	mov	r0, r4
 802036c:	f7ff ff8a 	bl	8020284 <Led_Ctrl>

  // Clear interrupt flag to exit handler function
  uint32_t* EXTI_PR = (uint32_t*)(EXTI_BASE_ADDR + 0x14);
 8020370:	4b06      	ldr	r3, [pc, #24]	@ (802038c <EXTI0_IRQHandler+0x34>)
 8020372:	607b      	str	r3, [r7, #4]
  *EXTI_PR |= (0b1 << 0);
 8020374:	687b      	ldr	r3, [r7, #4]
 8020376:	681b      	ldr	r3, [r3, #0]
 8020378:	f043 0201 	orr.w	r2, r3, #1
 802037c:	687b      	ldr	r3, [r7, #4]
 802037e:	601a      	str	r2, [r3, #0]
}
 8020380:	bf00      	nop
 8020382:	370c      	adds	r7, #12
 8020384:	46bd      	mov	sp, r7
 8020386:	bd90      	pop	{r4, r7, pc}
 8020388:	20000000 	.word	0x20000000
 802038c:	40013c14 	.word	0x40013c14

08020390 <Uart_Init>:
// 6. Config UART
#define GPIOB_BASE_ADDR 0x40020400
#define USART1_BASE_ADDR 0x40011000

void Uart_Init()
{
 8020390:	b480      	push	{r7}
 8020392:	b087      	sub	sp, #28
 8020394:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8020396:	2300      	movs	r3, #0
 8020398:	607b      	str	r3, [r7, #4]
 802039a:	4b35      	ldr	r3, [pc, #212]	@ (8020470 <Uart_Init+0xe0>)
 802039c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802039e:	4a34      	ldr	r2, [pc, #208]	@ (8020470 <Uart_Init+0xe0>)
 80203a0:	f043 0302 	orr.w	r3, r3, #2
 80203a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80203a6:	4b32      	ldr	r3, [pc, #200]	@ (8020470 <Uart_Init+0xe0>)
 80203a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80203aa:	f003 0302 	and.w	r3, r3, #2
 80203ae:	607b      	str	r3, [r7, #4]
 80203b0:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_USART1_CLK_ENABLE();
 80203b2:	2300      	movs	r3, #0
 80203b4:	603b      	str	r3, [r7, #0]
 80203b6:	4b2e      	ldr	r3, [pc, #184]	@ (8020470 <Uart_Init+0xe0>)
 80203b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80203ba:	4a2d      	ldr	r2, [pc, #180]	@ (8020470 <Uart_Init+0xe0>)
 80203bc:	f043 0310 	orr.w	r3, r3, #16
 80203c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80203c2:	4b2b      	ldr	r3, [pc, #172]	@ (8020470 <Uart_Init+0xe0>)
 80203c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80203c6:	f003 0310 	and.w	r3, r3, #16
 80203ca:	603b      	str	r3, [r7, #0]
 80203cc:	683b      	ldr	r3, [r7, #0]
	uint32_t* GPIOB_MODER = (uint32_t*)(GPIOB_BASE_ADDR + 0x00);
 80203ce:	4b29      	ldr	r3, [pc, #164]	@ (8020474 <Uart_Init+0xe4>)
 80203d0:	617b      	str	r3, [r7, #20]
	uint32_t* GPIOB_AFRL  = (uint32_t*)(GPIOB_BASE_ADDR + 0x20);
 80203d2:	4b29      	ldr	r3, [pc, #164]	@ (8020478 <Uart_Init+0xe8>)
 80203d4:	613b      	str	r3, [r7, #16]
	uint32_t* USART_BRR  = (uint32_t*)(USART1_BASE_ADDR + 0x08);
 80203d6:	4b29      	ldr	r3, [pc, #164]	@ (802047c <Uart_Init+0xec>)
 80203d8:	60fb      	str	r3, [r7, #12]
	uint32_t* USART_CR1  = (uint32_t*)(USART1_BASE_ADDR + 0x0C);
 80203da:	4b29      	ldr	r3, [pc, #164]	@ (8020480 <Uart_Init+0xf0>)
 80203dc:	60bb      	str	r3, [r7, #8]


	*GPIOB_MODER &= ~(0b1111 << 12); // CLEAR
 80203de:	697b      	ldr	r3, [r7, #20]
 80203e0:	681b      	ldr	r3, [r3, #0]
 80203e2:	f423 4270 	bic.w	r2, r3, #61440	@ 0xf000
 80203e6:	697b      	ldr	r3, [r7, #20]
 80203e8:	601a      	str	r2, [r3, #0]
	*GPIOB_MODER |= (0b1010 << 12);
 80203ea:	697b      	ldr	r3, [r7, #20]
 80203ec:	681b      	ldr	r3, [r3, #0]
 80203ee:	f443 4220 	orr.w	r2, r3, #40960	@ 0xa000
 80203f2:	697b      	ldr	r3, [r7, #20]
 80203f4:	601a      	str	r2, [r3, #0]

	*GPIOB_AFRL	&= ~(0xff << 24);
 80203f6:	693b      	ldr	r3, [r7, #16]
 80203f8:	681b      	ldr	r3, [r3, #0]
 80203fa:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 80203fe:	693b      	ldr	r3, [r7, #16]
 8020400:	601a      	str	r2, [r3, #0]
	*GPIOB_AFRL	|= (0b01110111 << 24);
 8020402:	693b      	ldr	r3, [r7, #16]
 8020404:	681b      	ldr	r3, [r3, #0]
 8020406:	f043 42ee 	orr.w	r2, r3, #1996488704	@ 0x77000000
 802040a:	693b      	ldr	r3, [r7, #16]
 802040c:	601a      	str	r2, [r3, #0]

	// set baud rate ~ 9600 -> UARTDIV = 104.16667 -> mantissa = 104 & fraction = 0.16667 * 16 = 3
	*USART_BRR &= ~(0xffff << 0);
 802040e:	68fb      	ldr	r3, [r7, #12]
 8020410:	681b      	ldr	r3, [r3, #0]
 8020412:	0c1b      	lsrs	r3, r3, #16
 8020414:	041b      	lsls	r3, r3, #16
 8020416:	68fa      	ldr	r2, [r7, #12]
 8020418:	6013      	str	r3, [r2, #0]
	*USART_BRR |= (3 << 0);
 802041a:	68fb      	ldr	r3, [r7, #12]
 802041c:	681b      	ldr	r3, [r3, #0]
 802041e:	f043 0203 	orr.w	r2, r3, #3
 8020422:	68fb      	ldr	r3, [r7, #12]
 8020424:	601a      	str	r2, [r3, #0]
	*USART_BRR |= (104 << 4);
 8020426:	68fb      	ldr	r3, [r7, #12]
 8020428:	681b      	ldr	r3, [r3, #0]
 802042a:	f443 62d0 	orr.w	r2, r3, #1664	@ 0x680
 802042e:	68fb      	ldr	r3, [r7, #12]
 8020430:	601a      	str	r2, [r3, #0]

	// data frame
	*USART_CR1 |= (0b1 << 10); // Enable parity
 8020432:	68bb      	ldr	r3, [r7, #8]
 8020434:	681b      	ldr	r3, [r3, #0]
 8020436:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 802043a:	68bb      	ldr	r3, [r7, #8]
 802043c:	601a      	str	r2, [r3, #0]
	*USART_CR1 |= (0b1 << 12); // 9 bits length
 802043e:	68bb      	ldr	r3, [r7, #8]
 8020440:	681b      	ldr	r3, [r3, #0]
 8020442:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8020446:	68bb      	ldr	r3, [r7, #8]
 8020448:	601a      	str	r2, [r3, #0]

	// enable UART
	*USART_CR1 |= (0b1 << 13);
 802044a:	68bb      	ldr	r3, [r7, #8]
 802044c:	681b      	ldr	r3, [r3, #0]
 802044e:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8020452:	68bb      	ldr	r3, [r7, #8]
 8020454:	601a      	str	r2, [r3, #0]

  // transmiter, receiver
	*USART_CR1 |= (0b11 << 2);
 8020456:	68bb      	ldr	r3, [r7, #8]
 8020458:	681b      	ldr	r3, [r3, #0]
 802045a:	f043 020c 	orr.w	r2, r3, #12
 802045e:	68bb      	ldr	r3, [r7, #8]
 8020460:	601a      	str	r2, [r3, #0]
}
 8020462:	bf00      	nop
 8020464:	371c      	adds	r7, #28
 8020466:	46bd      	mov	sp, r7
 8020468:	f85d 7b04 	ldr.w	r7, [sp], #4
 802046c:	4770      	bx	lr
 802046e:	bf00      	nop
 8020470:	40023800 	.word	0x40023800
 8020474:	40020400 	.word	0x40020400
 8020478:	40020420 	.word	0x40020420
 802047c:	40011008 	.word	0x40011008
 8020480:	4001100c 	.word	0x4001100c

08020484 <uart_send_one_byte>:

void uart_send_one_byte(char data)
{
 8020484:	b480      	push	{r7}
 8020486:	b085      	sub	sp, #20
 8020488:	af00      	add	r7, sp, #0
 802048a:	4603      	mov	r3, r0
 802048c:	71fb      	strb	r3, [r7, #7]
	uint32_t* USART_SR = (uint32_t*)(USART1_BASE_ADDR + 0x00);
 802048e:	4b0e      	ldr	r3, [pc, #56]	@ (80204c8 <uart_send_one_byte+0x44>)
 8020490:	60fb      	str	r3, [r7, #12]
	uint32_t* USART_DR = (uint32_t*)(USART1_BASE_ADDR + 0x04);
 8020492:	4b0e      	ldr	r3, [pc, #56]	@ (80204cc <uart_send_one_byte+0x48>)
 8020494:	60bb      	str	r3, [r7, #8]
	// wait for TXE == 1
	while (((*USART_SR >> 7) & 1) == 0);
 8020496:	bf00      	nop
 8020498:	68fb      	ldr	r3, [r7, #12]
 802049a:	681b      	ldr	r3, [r3, #0]
 802049c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80204a0:	2b00      	cmp	r3, #0
 80204a2:	d0f9      	beq.n	8020498 <uart_send_one_byte+0x14>

	*USART_DR = data;
 80204a4:	79fa      	ldrb	r2, [r7, #7]
 80204a6:	68bb      	ldr	r3, [r7, #8]
 80204a8:	601a      	str	r2, [r3, #0]

	while (((*USART_SR >> 6) & 1) == 0);
 80204aa:	bf00      	nop
 80204ac:	68fb      	ldr	r3, [r7, #12]
 80204ae:	681b      	ldr	r3, [r3, #0]
 80204b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80204b4:	2b00      	cmp	r3, #0
 80204b6:	d0f9      	beq.n	80204ac <uart_send_one_byte+0x28>
}
 80204b8:	bf00      	nop
 80204ba:	bf00      	nop
 80204bc:	3714      	adds	r7, #20
 80204be:	46bd      	mov	sp, r7
 80204c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80204c4:	4770      	bx	lr
 80204c6:	bf00      	nop
 80204c8:	40011000 	.word	0x40011000
 80204cc:	40011004 	.word	0x40011004

080204d0 <uart_send_string>:

void uart_send_string(char* str)
{
 80204d0:	b580      	push	{r7, lr}
 80204d2:	b084      	sub	sp, #16
 80204d4:	af00      	add	r7, sp, #0
 80204d6:	6078      	str	r0, [r7, #4]

	// Get size of string
	int size;
	size = strlen(str);
 80204d8:	6878      	ldr	r0, [r7, #4]
 80204da:	f7ff fe7d 	bl	80201d8 <strlen>
 80204de:	4603      	mov	r3, r0
 80204e0:	60bb      	str	r3, [r7, #8]

	for (int i = 0; i < size; i++)
 80204e2:	2300      	movs	r3, #0
 80204e4:	60fb      	str	r3, [r7, #12]
 80204e6:	e009      	b.n	80204fc <uart_send_string+0x2c>
		uart_send_one_byte(str[i]);
 80204e8:	68fb      	ldr	r3, [r7, #12]
 80204ea:	687a      	ldr	r2, [r7, #4]
 80204ec:	4413      	add	r3, r2
 80204ee:	781b      	ldrb	r3, [r3, #0]
 80204f0:	4618      	mov	r0, r3
 80204f2:	f7ff ffc7 	bl	8020484 <uart_send_one_byte>
	for (int i = 0; i < size; i++)
 80204f6:	68fb      	ldr	r3, [r7, #12]
 80204f8:	3301      	adds	r3, #1
 80204fa:	60fb      	str	r3, [r7, #12]
 80204fc:	68fa      	ldr	r2, [r7, #12]
 80204fe:	68bb      	ldr	r3, [r7, #8]
 8020500:	429a      	cmp	r2, r3
 8020502:	dbf1      	blt.n	80204e8 <uart_send_string+0x18>
}
 8020504:	bf00      	nop
 8020506:	bf00      	nop
 8020508:	3710      	adds	r7, #16
 802050a:	46bd      	mov	sp, r7
 802050c:	bd80      	pop	{r7, pc}
	...

08020510 <uart_receive_one_byte>:

char uart_receive_one_byte()
{
 8020510:	b480      	push	{r7}
 8020512:	b083      	sub	sp, #12
 8020514:	af00      	add	r7, sp, #0
	uint32_t* USART_SR = (uint32_t*)(USART1_BASE_ADDR + 0x00);
 8020516:	4b0a      	ldr	r3, [pc, #40]	@ (8020540 <uart_receive_one_byte+0x30>)
 8020518:	607b      	str	r3, [r7, #4]
	uint32_t* USART_DR = (uint32_t*)(USART1_BASE_ADDR + 0x04);
 802051a:	4b0a      	ldr	r3, [pc, #40]	@ (8020544 <uart_receive_one_byte+0x34>)
 802051c:	603b      	str	r3, [r7, #0]
	// wait for RxNE == 1
	while (((*USART_SR >> 5) & 1) == 0);
 802051e:	bf00      	nop
 8020520:	687b      	ldr	r3, [r7, #4]
 8020522:	681b      	ldr	r3, [r3, #0]
 8020524:	f003 0320 	and.w	r3, r3, #32
 8020528:	2b00      	cmp	r3, #0
 802052a:	d0f9      	beq.n	8020520 <uart_receive_one_byte+0x10>
	return *USART_DR;
 802052c:	683b      	ldr	r3, [r7, #0]
 802052e:	681b      	ldr	r3, [r3, #0]
 8020530:	b2db      	uxtb	r3, r3
}
 8020532:	4618      	mov	r0, r3
 8020534:	370c      	adds	r7, #12
 8020536:	46bd      	mov	sp, r7
 8020538:	f85d 7b04 	ldr.w	r7, [sp], #4
 802053c:	4770      	bx	lr
 802053e:	bf00      	nop
 8020540:	40011000 	.word	0x40011000
 8020544:	40011004 	.word	0x40011004

08020548 <Flash_Erase>:

#define FLASH_BASE_ADDR 0x40023C00
#define KEY1            0x45670123
#define KEY2            0xCDEF89AB

void Flash_Erase(int sector_number) {
 8020548:	b480      	push	{r7}
 802054a:	b087      	sub	sp, #28
 802054c:	af00      	add	r7, sp, #0
 802054e:	6078      	str	r0, [r7, #4]

  // 0. Check to see if FLASH_CR is locked or not
  uint32_t* FL_CR = (uint32_t*)(FLASH_BASE_ADDR + 0x10);
 8020550:	4b1f      	ldr	r3, [pc, #124]	@ (80205d0 <Flash_Erase+0x88>)
 8020552:	617b      	str	r3, [r7, #20]
  if (((*FL_CR >> 31) & 1) == 1) {
 8020554:	697b      	ldr	r3, [r7, #20]
 8020556:	681b      	ldr	r3, [r3, #0]
 8020558:	0fdb      	lsrs	r3, r3, #31
 802055a:	2b01      	cmp	r3, #1
 802055c:	d107      	bne.n	802056e <Flash_Erase+0x26>
    // unlock FLASH_CR by unlock sequence
    uint32_t* FL_KEYR = (uint32_t*)(FLASH_BASE_ADDR + 0x4);
 802055e:	4b1d      	ldr	r3, [pc, #116]	@ (80205d4 <Flash_Erase+0x8c>)
 8020560:	613b      	str	r3, [r7, #16]
    *FL_KEYR = 0x45670123;
 8020562:	693b      	ldr	r3, [r7, #16]
 8020564:	4a1c      	ldr	r2, [pc, #112]	@ (80205d8 <Flash_Erase+0x90>)
 8020566:	601a      	str	r2, [r3, #0]
    *FL_KEYR = 0xCDEF89AB;
 8020568:	693b      	ldr	r3, [r7, #16]
 802056a:	4a1c      	ldr	r2, [pc, #112]	@ (80205dc <Flash_Erase+0x94>)
 802056c:	601a      	str	r2, [r3, #0]
  }

  // 1. Check to see if any onging opeartion on Flash
  uint32_t* FL_SR = (uint32_t*)(FLASH_BASE_ADDR + 0x0C);
 802056e:	4b1c      	ldr	r3, [pc, #112]	@ (80205e0 <Flash_Erase+0x98>)
 8020570:	60fb      	str	r3, [r7, #12]
  
  while (((*FL_SR >> 16) & 1) == 1);
 8020572:	bf00      	nop
 8020574:	68fb      	ldr	r3, [r7, #12]
 8020576:	681b      	ldr	r3, [r3, #0]
 8020578:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 802057c:	2b00      	cmp	r3, #0
 802057e:	d1f9      	bne.n	8020574 <Flash_Erase+0x2c>
  

  // 2. Set SER bit and select the sector in FLASH_CR regiser
  *FL_CR &= ~(0b1111 << 3);
 8020580:	697b      	ldr	r3, [r7, #20]
 8020582:	681b      	ldr	r3, [r3, #0]
 8020584:	f023 0278 	bic.w	r2, r3, #120	@ 0x78
 8020588:	697b      	ldr	r3, [r7, #20]
 802058a:	601a      	str	r2, [r3, #0]
  *FL_CR |= (sector_number << 3);
 802058c:	697b      	ldr	r3, [r7, #20]
 802058e:	681b      	ldr	r3, [r3, #0]
 8020590:	687a      	ldr	r2, [r7, #4]
 8020592:	00d2      	lsls	r2, r2, #3
 8020594:	431a      	orrs	r2, r3
 8020596:	697b      	ldr	r3, [r7, #20]
 8020598:	601a      	str	r2, [r3, #0]
  *FL_CR |= (0b1 << 1);
 802059a:	697b      	ldr	r3, [r7, #20]
 802059c:	681b      	ldr	r3, [r3, #0]
 802059e:	f043 0202 	orr.w	r2, r3, #2
 80205a2:	697b      	ldr	r3, [r7, #20]
 80205a4:	601a      	str	r2, [r3, #0]

  // 3. Set the STRT bit in the FLASH_CR register
  *FL_CR |= (0b1 << 16);
 80205a6:	697b      	ldr	r3, [r7, #20]
 80205a8:	681b      	ldr	r3, [r3, #0]
 80205aa:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80205ae:	697b      	ldr	r3, [r7, #20]
 80205b0:	601a      	str	r2, [r3, #0]

  // 4. Wait for the BSY bit to be cleared
  while (((*FL_SR >> 16 ) & 1) == 1);
 80205b2:	bf00      	nop
 80205b4:	68fb      	ldr	r3, [r7, #12]
 80205b6:	681b      	ldr	r3, [r3, #0]
 80205b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80205bc:	2b00      	cmp	r3, #0
 80205be:	d1f9      	bne.n	80205b4 <Flash_Erase+0x6c>
}
 80205c0:	bf00      	nop
 80205c2:	bf00      	nop
 80205c4:	371c      	adds	r7, #28
 80205c6:	46bd      	mov	sp, r7
 80205c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80205cc:	4770      	bx	lr
 80205ce:	bf00      	nop
 80205d0:	40023c10 	.word	0x40023c10
 80205d4:	40023c04 	.word	0x40023c04
 80205d8:	45670123 	.word	0x45670123
 80205dc:	cdef89ab 	.word	0xcdef89ab
 80205e0:	40023c0c 	.word	0x40023c0c

080205e4 <Flash_Program>:

void Flash_Program(char* flash_addr, char* data_addr, int size) {
 80205e4:	b480      	push	{r7}
 80205e6:	b089      	sub	sp, #36	@ 0x24
 80205e8:	af00      	add	r7, sp, #0
 80205ea:	60f8      	str	r0, [r7, #12]
 80205ec:	60b9      	str	r1, [r7, #8]
 80205ee:	607a      	str	r2, [r7, #4]

  // 0. Check to see if FLASH_CR is locked or not
  uint32_t* FL_CR = (uint32_t*)(FLASH_BASE_ADDR + 0x10);
 80205f0:	4b1e      	ldr	r3, [pc, #120]	@ (802066c <Flash_Program+0x88>)
 80205f2:	61bb      	str	r3, [r7, #24]
  if (((*FL_CR >> 31) & 1) == 1) {
 80205f4:	69bb      	ldr	r3, [r7, #24]
 80205f6:	681b      	ldr	r3, [r3, #0]
 80205f8:	0fdb      	lsrs	r3, r3, #31
 80205fa:	2b01      	cmp	r3, #1
 80205fc:	d107      	bne.n	802060e <Flash_Program+0x2a>
    // unlock FLASH_CR by unlock sequence
    uint32_t* FL_KEYR = (uint32_t*)(FLASH_BASE_ADDR + 0x4);
 80205fe:	4b1c      	ldr	r3, [pc, #112]	@ (8020670 <Flash_Program+0x8c>)
 8020600:	617b      	str	r3, [r7, #20]
    *FL_KEYR = KEY1;
 8020602:	697b      	ldr	r3, [r7, #20]
 8020604:	4a1b      	ldr	r2, [pc, #108]	@ (8020674 <Flash_Program+0x90>)
 8020606:	601a      	str	r2, [r3, #0]
    *FL_KEYR = KEY2;
 8020608:	697b      	ldr	r3, [r7, #20]
 802060a:	4a1b      	ldr	r2, [pc, #108]	@ (8020678 <Flash_Program+0x94>)
 802060c:	601a      	str	r2, [r3, #0]
  }

  // 1. Check BSY bit to see if any ongoing operation
  uint32_t* FL_SR = (uint32_t*)(FLASH_BASE_ADDR + 0x0C);
 802060e:	4b1b      	ldr	r3, [pc, #108]	@ (802067c <Flash_Program+0x98>)
 8020610:	613b      	str	r3, [r7, #16]
  
  while (((*FL_SR >> 16) & 1) == 1);
 8020612:	bf00      	nop
 8020614:	693b      	ldr	r3, [r7, #16]
 8020616:	681b      	ldr	r3, [r3, #0]
 8020618:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 802061c:	2b00      	cmp	r3, #0
 802061e:	d1f9      	bne.n	8020614 <Flash_Program+0x30>

  // 2. Set the PG bit in the FLASH_CR register
  *FL_CR |= (0b1 << 0);
 8020620:	69bb      	ldr	r3, [r7, #24]
 8020622:	681b      	ldr	r3, [r3, #0]
 8020624:	f043 0201 	orr.w	r2, r3, #1
 8020628:	69bb      	ldr	r3, [r7, #24]
 802062a:	601a      	str	r2, [r3, #0]

  // 3. Perform the data write operation(s)
  for (int i = 0; i < size; i++) {
 802062c:	2300      	movs	r3, #0
 802062e:	61fb      	str	r3, [r7, #28]
 8020630:	e00a      	b.n	8020648 <Flash_Program+0x64>
    //flash_addr[i] = data_addr[i];
    *(flash_addr+i) = *(data_addr+i);
 8020632:	69fb      	ldr	r3, [r7, #28]
 8020634:	68ba      	ldr	r2, [r7, #8]
 8020636:	441a      	add	r2, r3
 8020638:	69fb      	ldr	r3, [r7, #28]
 802063a:	68f9      	ldr	r1, [r7, #12]
 802063c:	440b      	add	r3, r1
 802063e:	7812      	ldrb	r2, [r2, #0]
 8020640:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < size; i++) {
 8020642:	69fb      	ldr	r3, [r7, #28]
 8020644:	3301      	adds	r3, #1
 8020646:	61fb      	str	r3, [r7, #28]
 8020648:	69fa      	ldr	r2, [r7, #28]
 802064a:	687b      	ldr	r3, [r7, #4]
 802064c:	429a      	cmp	r2, r3
 802064e:	dbf0      	blt.n	8020632 <Flash_Program+0x4e>
  }

  // 4. Wait for the BSY bit to be cleared
  while (((*FL_SR >> 16 ) & 1) == 1);
 8020650:	bf00      	nop
 8020652:	693b      	ldr	r3, [r7, #16]
 8020654:	681b      	ldr	r3, [r3, #0]
 8020656:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 802065a:	2b00      	cmp	r3, #0
 802065c:	d1f9      	bne.n	8020652 <Flash_Program+0x6e>
}
 802065e:	bf00      	nop
 8020660:	bf00      	nop
 8020662:	3724      	adds	r7, #36	@ 0x24
 8020664:	46bd      	mov	sp, r7
 8020666:	f85d 7b04 	ldr.w	r7, [sp], #4
 802066a:	4770      	bx	lr
 802066c:	40023c10 	.word	0x40023c10
 8020670:	40023c04 	.word	0x40023c04
 8020674:	45670123 	.word	0x45670123
 8020678:	cdef89ab 	.word	0xcdef89ab
 802067c:	40023c0c 	.word	0x40023c0c

08020680 <rec_firmware>:
//   hander = reset_hander_address;
//   hander();
// }

char new_fw[10516];
void rec_firmware() {
 8020680:	b5b0      	push	{r4, r5, r7, lr}
 8020682:	b088      	sub	sp, #32
 8020684:	af00      	add	r7, sp, #0
//char new_fw[10516];

  uart_send_string("Vui long gui firmware...\n");
 8020686:	481c      	ldr	r0, [pc, #112]	@ (80206f8 <rec_firmware+0x78>)
 8020688:	f7ff ff22 	bl	80204d0 <uart_send_string>

  for (int i = 0; i < sizeof(new_fw); i++) {
 802068c:	2300      	movs	r3, #0
 802068e:	61fb      	str	r3, [r7, #28]
 8020690:	e00b      	b.n	80206aa <rec_firmware+0x2a>
    new_fw[i] = uart_receive_one_byte();
 8020692:	f7ff ff3d 	bl	8020510 <uart_receive_one_byte>
 8020696:	4603      	mov	r3, r0
 8020698:	4619      	mov	r1, r3
 802069a:	4a18      	ldr	r2, [pc, #96]	@ (80206fc <rec_firmware+0x7c>)
 802069c:	69fb      	ldr	r3, [r7, #28]
 802069e:	4413      	add	r3, r2
 80206a0:	460a      	mov	r2, r1
 80206a2:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < sizeof(new_fw); i++) {
 80206a4:	69fb      	ldr	r3, [r7, #28]
 80206a6:	3301      	adds	r3, #1
 80206a8:	61fb      	str	r3, [r7, #28]
 80206aa:	69fb      	ldr	r3, [r7, #28]
 80206ac:	f642 1213 	movw	r2, #10515	@ 0x2913
 80206b0:	4293      	cmp	r3, r2
 80206b2:	d9ee      	bls.n	8020692 <rec_firmware+0x12>
  }

  uart_send_string("Da nhan duoc firmware...\n");
 80206b4:	4812      	ldr	r0, [pc, #72]	@ (8020700 <rec_firmware+0x80>)
 80206b6:	f7ff ff0b 	bl	80204d0 <uart_send_string>
  Flash_Erase(6);
 80206ba:	2006      	movs	r0, #6
 80206bc:	f7ff ff44 	bl	8020548 <Flash_Erase>
  Flash_Program((char*)0x08040000, new_fw, sizeof(new_fw));
 80206c0:	f642 1214 	movw	r2, #10516	@ 0x2914
 80206c4:	490d      	ldr	r1, [pc, #52]	@ (80206fc <rec_firmware+0x7c>)
 80206c6:	480f      	ldr	r0, [pc, #60]	@ (8020704 <rec_firmware+0x84>)
 80206c8:	f7ff ff8c 	bl	80205e4 <Flash_Program>

  char fw_msg[] = "New firmware received!\n";
 80206cc:	4b0e      	ldr	r3, [pc, #56]	@ (8020708 <rec_firmware+0x88>)
 80206ce:	1d3c      	adds	r4, r7, #4
 80206d0:	461d      	mov	r5, r3
 80206d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80206d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80206d6:	e895 0003 	ldmia.w	r5, {r0, r1}
 80206da:	e884 0003 	stmia.w	r4, {r0, r1}
	Flash_Erase(4);
 80206de:	2004      	movs	r0, #4
 80206e0:	f7ff ff32 	bl	8020548 <Flash_Erase>
	Flash_Program((char*)0x08010000, fw_msg, sizeof(fw_msg));
 80206e4:	1d3b      	adds	r3, r7, #4
 80206e6:	2218      	movs	r2, #24
 80206e8:	4619      	mov	r1, r3
 80206ea:	4808      	ldr	r0, [pc, #32]	@ (802070c <rec_firmware+0x8c>)
 80206ec:	f7ff ff7a 	bl	80205e4 <Flash_Program>
}
 80206f0:	bf00      	nop
 80206f2:	3720      	adds	r7, #32
 80206f4:	46bd      	mov	sp, r7
 80206f6:	bdb0      	pop	{r4, r5, r7, pc}
 80206f8:	08022f5c 	.word	0x08022f5c
 80206fc:	2000002c 	.word	0x2000002c
 8020700:	08022f78 	.word	0x08022f78
 8020704:	08040000 	.word	0x08040000
 8020708:	08022f94 	.word	0x08022f94
 802070c:	08010000 	.word	0x08010000

08020710 <main>:


int main() {
 8020710:	b580      	push	{r7, lr}
 8020712:	af00      	add	r7, sp, #0

  HAL_Init();
 8020714:	f000 f8aa 	bl	802086c <HAL_Init>
  Button_Init();
 8020718:	f7ff fd66 	bl	80201e8 <Button_Init>
  Led_Init();
 802071c:	f7ff fd88 	bl	8020230 <Led_Init>
  Button_Interrupt_Int();
 8020720:	f7ff fde8 	bl	80202f4 <Button_Interrupt_Int>
  Uart_Init();
 8020724:	f7ff fe34 	bl	8020390 <Uart_Init>


rec_firmware();
 8020728:	f7ff ffaa 	bl	8020680 <rec_firmware>
  while(1) {
 802072c:	bf00      	nop
 802072e:	e7fd      	b.n	802072c <main+0x1c>

08020730 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8020730:	b580      	push	{r7, lr}
 8020732:	b082      	sub	sp, #8
 8020734:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8020736:	2300      	movs	r3, #0
 8020738:	607b      	str	r3, [r7, #4]
 802073a:	4b10      	ldr	r3, [pc, #64]	@ (802077c <HAL_MspInit+0x4c>)
 802073c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 802073e:	4a0f      	ldr	r2, [pc, #60]	@ (802077c <HAL_MspInit+0x4c>)
 8020740:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8020744:	6453      	str	r3, [r2, #68]	@ 0x44
 8020746:	4b0d      	ldr	r3, [pc, #52]	@ (802077c <HAL_MspInit+0x4c>)
 8020748:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 802074a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 802074e:	607b      	str	r3, [r7, #4]
 8020750:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8020752:	2300      	movs	r3, #0
 8020754:	603b      	str	r3, [r7, #0]
 8020756:	4b09      	ldr	r3, [pc, #36]	@ (802077c <HAL_MspInit+0x4c>)
 8020758:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 802075a:	4a08      	ldr	r2, [pc, #32]	@ (802077c <HAL_MspInit+0x4c>)
 802075c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8020760:	6413      	str	r3, [r2, #64]	@ 0x40
 8020762:	4b06      	ldr	r3, [pc, #24]	@ (802077c <HAL_MspInit+0x4c>)
 8020764:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8020766:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 802076a:	603b      	str	r3, [r7, #0]
 802076c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 802076e:	2007      	movs	r0, #7
 8020770:	f000 f994 	bl	8020a9c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8020774:	bf00      	nop
 8020776:	3708      	adds	r7, #8
 8020778:	46bd      	mov	sp, r7
 802077a:	bd80      	pop	{r7, pc}
 802077c:	40023800 	.word	0x40023800

08020780 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8020780:	b480      	push	{r7}
 8020782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8020784:	bf00      	nop
 8020786:	e7fd      	b.n	8020784 <NMI_Handler+0x4>

08020788 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8020788:	b480      	push	{r7}
 802078a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 802078c:	bf00      	nop
 802078e:	e7fd      	b.n	802078c <HardFault_Handler+0x4>

08020790 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8020790:	b480      	push	{r7}
 8020792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8020794:	bf00      	nop
 8020796:	e7fd      	b.n	8020794 <MemManage_Handler+0x4>

08020798 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8020798:	b480      	push	{r7}
 802079a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 802079c:	bf00      	nop
 802079e:	e7fd      	b.n	802079c <BusFault_Handler+0x4>

080207a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80207a0:	b480      	push	{r7}
 80207a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80207a4:	bf00      	nop
 80207a6:	e7fd      	b.n	80207a4 <UsageFault_Handler+0x4>

080207a8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80207a8:	b480      	push	{r7}
 80207aa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80207ac:	bf00      	nop
 80207ae:	46bd      	mov	sp, r7
 80207b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80207b4:	4770      	bx	lr

080207b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80207b6:	b480      	push	{r7}
 80207b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80207ba:	bf00      	nop
 80207bc:	46bd      	mov	sp, r7
 80207be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80207c2:	4770      	bx	lr

080207c4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80207c4:	b480      	push	{r7}
 80207c6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80207c8:	bf00      	nop
 80207ca:	46bd      	mov	sp, r7
 80207cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80207d0:	4770      	bx	lr

080207d2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80207d2:	b580      	push	{r7, lr}
 80207d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80207d6:	f000 f89b 	bl	8020910 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80207da:	bf00      	nop
 80207dc:	bd80      	pop	{r7, pc}
	...

080207e0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80207e0:	b580      	push	{r7, lr}
 80207e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80207e4:	4802      	ldr	r0, [pc, #8]	@ (80207f0 <OTG_FS_IRQHandler+0x10>)
 80207e6:	f000 f98c 	bl	8020b02 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80207ea:	bf00      	nop
 80207ec:	bd80      	pop	{r7, pc}
 80207ee:	bf00      	nop
 80207f0:	20002944 	.word	0x20002944

080207f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80207f4:	b480      	push	{r7}
 80207f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80207f8:	4b06      	ldr	r3, [pc, #24]	@ (8020814 <SystemInit+0x20>)
 80207fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80207fe:	4a05      	ldr	r2, [pc, #20]	@ (8020814 <SystemInit+0x20>)
 8020800:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8020804:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8020808:	bf00      	nop
 802080a:	46bd      	mov	sp, r7
 802080c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020810:	4770      	bx	lr
 8020812:	bf00      	nop
 8020814:	e000ed00 	.word	0xe000ed00

08020818 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8020818:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8020850 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 802081c:	f7ff ffea 	bl	80207f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8020820:	480c      	ldr	r0, [pc, #48]	@ (8020854 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8020822:	490d      	ldr	r1, [pc, #52]	@ (8020858 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8020824:	4a0d      	ldr	r2, [pc, #52]	@ (802085c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8020826:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8020828:	e002      	b.n	8020830 <LoopCopyDataInit>

0802082a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 802082a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 802082c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 802082e:	3304      	adds	r3, #4

08020830 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8020830:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8020832:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8020834:	d3f9      	bcc.n	802082a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8020836:	4a0a      	ldr	r2, [pc, #40]	@ (8020860 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8020838:	4c0a      	ldr	r4, [pc, #40]	@ (8020864 <LoopFillZerobss+0x22>)
  movs r3, #0
 802083a:	2300      	movs	r3, #0
  b LoopFillZerobss
 802083c:	e001      	b.n	8020842 <LoopFillZerobss>

0802083e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 802083e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8020840:	3204      	adds	r2, #4

08020842 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8020842:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8020844:	d3fb      	bcc.n	802083e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8020846:	f002 fb59 	bl	8022efc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 802084a:	f7ff ff61 	bl	8020710 <main>
  bx  lr    
 802084e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8020850:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8020854:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8020858:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 802085c:	08022fbc 	.word	0x08022fbc
  ldr r2, =_sbss
 8020860:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8020864:	20002d24 	.word	0x20002d24

08020868 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8020868:	e7fe      	b.n	8020868 <ADC_IRQHandler>
	...

0802086c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 802086c:	b580      	push	{r7, lr}
 802086e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8020870:	4b0e      	ldr	r3, [pc, #56]	@ (80208ac <HAL_Init+0x40>)
 8020872:	681b      	ldr	r3, [r3, #0]
 8020874:	4a0d      	ldr	r2, [pc, #52]	@ (80208ac <HAL_Init+0x40>)
 8020876:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 802087a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 802087c:	4b0b      	ldr	r3, [pc, #44]	@ (80208ac <HAL_Init+0x40>)
 802087e:	681b      	ldr	r3, [r3, #0]
 8020880:	4a0a      	ldr	r2, [pc, #40]	@ (80208ac <HAL_Init+0x40>)
 8020882:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8020886:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8020888:	4b08      	ldr	r3, [pc, #32]	@ (80208ac <HAL_Init+0x40>)
 802088a:	681b      	ldr	r3, [r3, #0]
 802088c:	4a07      	ldr	r2, [pc, #28]	@ (80208ac <HAL_Init+0x40>)
 802088e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8020892:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8020894:	2003      	movs	r0, #3
 8020896:	f000 f901 	bl	8020a9c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 802089a:	2000      	movs	r0, #0
 802089c:	f000 f808 	bl	80208b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80208a0:	f7ff ff46 	bl	8020730 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80208a4:	2300      	movs	r3, #0
}
 80208a6:	4618      	mov	r0, r3
 80208a8:	bd80      	pop	{r7, pc}
 80208aa:	bf00      	nop
 80208ac:	40023c00 	.word	0x40023c00

080208b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80208b0:	b580      	push	{r7, lr}
 80208b2:	b082      	sub	sp, #8
 80208b4:	af00      	add	r7, sp, #0
 80208b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80208b8:	4b12      	ldr	r3, [pc, #72]	@ (8020904 <HAL_InitTick+0x54>)
 80208ba:	681a      	ldr	r2, [r3, #0]
 80208bc:	4b12      	ldr	r3, [pc, #72]	@ (8020908 <HAL_InitTick+0x58>)
 80208be:	781b      	ldrb	r3, [r3, #0]
 80208c0:	4619      	mov	r1, r3
 80208c2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80208c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80208ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80208ce:	4618      	mov	r0, r3
 80208d0:	f000 f90b 	bl	8020aea <HAL_SYSTICK_Config>
 80208d4:	4603      	mov	r3, r0
 80208d6:	2b00      	cmp	r3, #0
 80208d8:	d001      	beq.n	80208de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80208da:	2301      	movs	r3, #1
 80208dc:	e00e      	b.n	80208fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80208de:	687b      	ldr	r3, [r7, #4]
 80208e0:	2b0f      	cmp	r3, #15
 80208e2:	d80a      	bhi.n	80208fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80208e4:	2200      	movs	r2, #0
 80208e6:	6879      	ldr	r1, [r7, #4]
 80208e8:	f04f 30ff 	mov.w	r0, #4294967295
 80208ec:	f000 f8e1 	bl	8020ab2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80208f0:	4a06      	ldr	r2, [pc, #24]	@ (802090c <HAL_InitTick+0x5c>)
 80208f2:	687b      	ldr	r3, [r7, #4]
 80208f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80208f6:	2300      	movs	r3, #0
 80208f8:	e000      	b.n	80208fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80208fa:	2301      	movs	r3, #1
}
 80208fc:	4618      	mov	r0, r3
 80208fe:	3708      	adds	r7, #8
 8020900:	46bd      	mov	sp, r7
 8020902:	bd80      	pop	{r7, pc}
 8020904:	20000004 	.word	0x20000004
 8020908:	2000000c 	.word	0x2000000c
 802090c:	20000008 	.word	0x20000008

08020910 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8020910:	b480      	push	{r7}
 8020912:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8020914:	4b06      	ldr	r3, [pc, #24]	@ (8020930 <HAL_IncTick+0x20>)
 8020916:	781b      	ldrb	r3, [r3, #0]
 8020918:	461a      	mov	r2, r3
 802091a:	4b06      	ldr	r3, [pc, #24]	@ (8020934 <HAL_IncTick+0x24>)
 802091c:	681b      	ldr	r3, [r3, #0]
 802091e:	4413      	add	r3, r2
 8020920:	4a04      	ldr	r2, [pc, #16]	@ (8020934 <HAL_IncTick+0x24>)
 8020922:	6013      	str	r3, [r2, #0]
}
 8020924:	bf00      	nop
 8020926:	46bd      	mov	sp, r7
 8020928:	f85d 7b04 	ldr.w	r7, [sp], #4
 802092c:	4770      	bx	lr
 802092e:	bf00      	nop
 8020930:	2000000c 	.word	0x2000000c
 8020934:	20002940 	.word	0x20002940

08020938 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8020938:	b480      	push	{r7}
 802093a:	b085      	sub	sp, #20
 802093c:	af00      	add	r7, sp, #0
 802093e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8020940:	687b      	ldr	r3, [r7, #4]
 8020942:	f003 0307 	and.w	r3, r3, #7
 8020946:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8020948:	4b0c      	ldr	r3, [pc, #48]	@ (802097c <__NVIC_SetPriorityGrouping+0x44>)
 802094a:	68db      	ldr	r3, [r3, #12]
 802094c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 802094e:	68ba      	ldr	r2, [r7, #8]
 8020950:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8020954:	4013      	ands	r3, r2
 8020956:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8020958:	68fb      	ldr	r3, [r7, #12]
 802095a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 802095c:	68bb      	ldr	r3, [r7, #8]
 802095e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8020960:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8020964:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8020968:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 802096a:	4a04      	ldr	r2, [pc, #16]	@ (802097c <__NVIC_SetPriorityGrouping+0x44>)
 802096c:	68bb      	ldr	r3, [r7, #8]
 802096e:	60d3      	str	r3, [r2, #12]
}
 8020970:	bf00      	nop
 8020972:	3714      	adds	r7, #20
 8020974:	46bd      	mov	sp, r7
 8020976:	f85d 7b04 	ldr.w	r7, [sp], #4
 802097a:	4770      	bx	lr
 802097c:	e000ed00 	.word	0xe000ed00

08020980 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8020980:	b480      	push	{r7}
 8020982:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8020984:	4b04      	ldr	r3, [pc, #16]	@ (8020998 <__NVIC_GetPriorityGrouping+0x18>)
 8020986:	68db      	ldr	r3, [r3, #12]
 8020988:	0a1b      	lsrs	r3, r3, #8
 802098a:	f003 0307 	and.w	r3, r3, #7
}
 802098e:	4618      	mov	r0, r3
 8020990:	46bd      	mov	sp, r7
 8020992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020996:	4770      	bx	lr
 8020998:	e000ed00 	.word	0xe000ed00

0802099c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 802099c:	b480      	push	{r7}
 802099e:	b083      	sub	sp, #12
 80209a0:	af00      	add	r7, sp, #0
 80209a2:	4603      	mov	r3, r0
 80209a4:	6039      	str	r1, [r7, #0]
 80209a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80209a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80209ac:	2b00      	cmp	r3, #0
 80209ae:	db0a      	blt.n	80209c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80209b0:	683b      	ldr	r3, [r7, #0]
 80209b2:	b2da      	uxtb	r2, r3
 80209b4:	490c      	ldr	r1, [pc, #48]	@ (80209e8 <__NVIC_SetPriority+0x4c>)
 80209b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80209ba:	0112      	lsls	r2, r2, #4
 80209bc:	b2d2      	uxtb	r2, r2
 80209be:	440b      	add	r3, r1
 80209c0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80209c4:	e00a      	b.n	80209dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80209c6:	683b      	ldr	r3, [r7, #0]
 80209c8:	b2da      	uxtb	r2, r3
 80209ca:	4908      	ldr	r1, [pc, #32]	@ (80209ec <__NVIC_SetPriority+0x50>)
 80209cc:	79fb      	ldrb	r3, [r7, #7]
 80209ce:	f003 030f 	and.w	r3, r3, #15
 80209d2:	3b04      	subs	r3, #4
 80209d4:	0112      	lsls	r2, r2, #4
 80209d6:	b2d2      	uxtb	r2, r2
 80209d8:	440b      	add	r3, r1
 80209da:	761a      	strb	r2, [r3, #24]
}
 80209dc:	bf00      	nop
 80209de:	370c      	adds	r7, #12
 80209e0:	46bd      	mov	sp, r7
 80209e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80209e6:	4770      	bx	lr
 80209e8:	e000e100 	.word	0xe000e100
 80209ec:	e000ed00 	.word	0xe000ed00

080209f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80209f0:	b480      	push	{r7}
 80209f2:	b089      	sub	sp, #36	@ 0x24
 80209f4:	af00      	add	r7, sp, #0
 80209f6:	60f8      	str	r0, [r7, #12]
 80209f8:	60b9      	str	r1, [r7, #8]
 80209fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80209fc:	68fb      	ldr	r3, [r7, #12]
 80209fe:	f003 0307 	and.w	r3, r3, #7
 8020a02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8020a04:	69fb      	ldr	r3, [r7, #28]
 8020a06:	f1c3 0307 	rsb	r3, r3, #7
 8020a0a:	2b04      	cmp	r3, #4
 8020a0c:	bf28      	it	cs
 8020a0e:	2304      	movcs	r3, #4
 8020a10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8020a12:	69fb      	ldr	r3, [r7, #28]
 8020a14:	3304      	adds	r3, #4
 8020a16:	2b06      	cmp	r3, #6
 8020a18:	d902      	bls.n	8020a20 <NVIC_EncodePriority+0x30>
 8020a1a:	69fb      	ldr	r3, [r7, #28]
 8020a1c:	3b03      	subs	r3, #3
 8020a1e:	e000      	b.n	8020a22 <NVIC_EncodePriority+0x32>
 8020a20:	2300      	movs	r3, #0
 8020a22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8020a24:	f04f 32ff 	mov.w	r2, #4294967295
 8020a28:	69bb      	ldr	r3, [r7, #24]
 8020a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8020a2e:	43da      	mvns	r2, r3
 8020a30:	68bb      	ldr	r3, [r7, #8]
 8020a32:	401a      	ands	r2, r3
 8020a34:	697b      	ldr	r3, [r7, #20]
 8020a36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8020a38:	f04f 31ff 	mov.w	r1, #4294967295
 8020a3c:	697b      	ldr	r3, [r7, #20]
 8020a3e:	fa01 f303 	lsl.w	r3, r1, r3
 8020a42:	43d9      	mvns	r1, r3
 8020a44:	687b      	ldr	r3, [r7, #4]
 8020a46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8020a48:	4313      	orrs	r3, r2
         );
}
 8020a4a:	4618      	mov	r0, r3
 8020a4c:	3724      	adds	r7, #36	@ 0x24
 8020a4e:	46bd      	mov	sp, r7
 8020a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020a54:	4770      	bx	lr
	...

08020a58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8020a58:	b580      	push	{r7, lr}
 8020a5a:	b082      	sub	sp, #8
 8020a5c:	af00      	add	r7, sp, #0
 8020a5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8020a60:	687b      	ldr	r3, [r7, #4]
 8020a62:	3b01      	subs	r3, #1
 8020a64:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8020a68:	d301      	bcc.n	8020a6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8020a6a:	2301      	movs	r3, #1
 8020a6c:	e00f      	b.n	8020a8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8020a6e:	4a0a      	ldr	r2, [pc, #40]	@ (8020a98 <SysTick_Config+0x40>)
 8020a70:	687b      	ldr	r3, [r7, #4]
 8020a72:	3b01      	subs	r3, #1
 8020a74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8020a76:	210f      	movs	r1, #15
 8020a78:	f04f 30ff 	mov.w	r0, #4294967295
 8020a7c:	f7ff ff8e 	bl	802099c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8020a80:	4b05      	ldr	r3, [pc, #20]	@ (8020a98 <SysTick_Config+0x40>)
 8020a82:	2200      	movs	r2, #0
 8020a84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8020a86:	4b04      	ldr	r3, [pc, #16]	@ (8020a98 <SysTick_Config+0x40>)
 8020a88:	2207      	movs	r2, #7
 8020a8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8020a8c:	2300      	movs	r3, #0
}
 8020a8e:	4618      	mov	r0, r3
 8020a90:	3708      	adds	r7, #8
 8020a92:	46bd      	mov	sp, r7
 8020a94:	bd80      	pop	{r7, pc}
 8020a96:	bf00      	nop
 8020a98:	e000e010 	.word	0xe000e010

08020a9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8020a9c:	b580      	push	{r7, lr}
 8020a9e:	b082      	sub	sp, #8
 8020aa0:	af00      	add	r7, sp, #0
 8020aa2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8020aa4:	6878      	ldr	r0, [r7, #4]
 8020aa6:	f7ff ff47 	bl	8020938 <__NVIC_SetPriorityGrouping>
}
 8020aaa:	bf00      	nop
 8020aac:	3708      	adds	r7, #8
 8020aae:	46bd      	mov	sp, r7
 8020ab0:	bd80      	pop	{r7, pc}

08020ab2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8020ab2:	b580      	push	{r7, lr}
 8020ab4:	b086      	sub	sp, #24
 8020ab6:	af00      	add	r7, sp, #0
 8020ab8:	4603      	mov	r3, r0
 8020aba:	60b9      	str	r1, [r7, #8]
 8020abc:	607a      	str	r2, [r7, #4]
 8020abe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8020ac0:	2300      	movs	r3, #0
 8020ac2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8020ac4:	f7ff ff5c 	bl	8020980 <__NVIC_GetPriorityGrouping>
 8020ac8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8020aca:	687a      	ldr	r2, [r7, #4]
 8020acc:	68b9      	ldr	r1, [r7, #8]
 8020ace:	6978      	ldr	r0, [r7, #20]
 8020ad0:	f7ff ff8e 	bl	80209f0 <NVIC_EncodePriority>
 8020ad4:	4602      	mov	r2, r0
 8020ad6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8020ada:	4611      	mov	r1, r2
 8020adc:	4618      	mov	r0, r3
 8020ade:	f7ff ff5d 	bl	802099c <__NVIC_SetPriority>
}
 8020ae2:	bf00      	nop
 8020ae4:	3718      	adds	r7, #24
 8020ae6:	46bd      	mov	sp, r7
 8020ae8:	bd80      	pop	{r7, pc}

08020aea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8020aea:	b580      	push	{r7, lr}
 8020aec:	b082      	sub	sp, #8
 8020aee:	af00      	add	r7, sp, #0
 8020af0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8020af2:	6878      	ldr	r0, [r7, #4]
 8020af4:	f7ff ffb0 	bl	8020a58 <SysTick_Config>
 8020af8:	4603      	mov	r3, r0
}
 8020afa:	4618      	mov	r0, r3
 8020afc:	3708      	adds	r7, #8
 8020afe:	46bd      	mov	sp, r7
 8020b00:	bd80      	pop	{r7, pc}

08020b02 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8020b02:	b580      	push	{r7, lr}
 8020b04:	b086      	sub	sp, #24
 8020b06:	af00      	add	r7, sp, #0
 8020b08:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8020b0a:	687b      	ldr	r3, [r7, #4]
 8020b0c:	681b      	ldr	r3, [r3, #0]
 8020b0e:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8020b10:	693b      	ldr	r3, [r7, #16]
 8020b12:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8020b14:	687b      	ldr	r3, [r7, #4]
 8020b16:	681b      	ldr	r3, [r3, #0]
 8020b18:	4618      	mov	r0, r3
 8020b1a:	f001 fea7 	bl	802286c <USB_GetMode>
 8020b1e:	4603      	mov	r3, r0
 8020b20:	2b01      	cmp	r3, #1
 8020b22:	f040 80fb 	bne.w	8020d1c <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8020b26:	687b      	ldr	r3, [r7, #4]
 8020b28:	681b      	ldr	r3, [r3, #0]
 8020b2a:	4618      	mov	r0, r3
 8020b2c:	f001 fe6a 	bl	8022804 <USB_ReadInterrupts>
 8020b30:	4603      	mov	r3, r0
 8020b32:	2b00      	cmp	r3, #0
 8020b34:	f000 80f1 	beq.w	8020d1a <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8020b38:	687b      	ldr	r3, [r7, #4]
 8020b3a:	681b      	ldr	r3, [r3, #0]
 8020b3c:	4618      	mov	r0, r3
 8020b3e:	f001 fe61 	bl	8022804 <USB_ReadInterrupts>
 8020b42:	4603      	mov	r3, r0
 8020b44:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8020b48:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8020b4c:	d104      	bne.n	8020b58 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8020b4e:	687b      	ldr	r3, [r7, #4]
 8020b50:	681b      	ldr	r3, [r3, #0]
 8020b52:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8020b56:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8020b58:	687b      	ldr	r3, [r7, #4]
 8020b5a:	681b      	ldr	r3, [r3, #0]
 8020b5c:	4618      	mov	r0, r3
 8020b5e:	f001 fe51 	bl	8022804 <USB_ReadInterrupts>
 8020b62:	4603      	mov	r3, r0
 8020b64:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8020b68:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8020b6c:	d104      	bne.n	8020b78 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8020b6e:	687b      	ldr	r3, [r7, #4]
 8020b70:	681b      	ldr	r3, [r3, #0]
 8020b72:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8020b76:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8020b78:	687b      	ldr	r3, [r7, #4]
 8020b7a:	681b      	ldr	r3, [r3, #0]
 8020b7c:	4618      	mov	r0, r3
 8020b7e:	f001 fe41 	bl	8022804 <USB_ReadInterrupts>
 8020b82:	4603      	mov	r3, r0
 8020b84:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8020b88:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8020b8c:	d104      	bne.n	8020b98 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8020b8e:	687b      	ldr	r3, [r7, #4]
 8020b90:	681b      	ldr	r3, [r3, #0]
 8020b92:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8020b96:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8020b98:	687b      	ldr	r3, [r7, #4]
 8020b9a:	681b      	ldr	r3, [r3, #0]
 8020b9c:	4618      	mov	r0, r3
 8020b9e:	f001 fe31 	bl	8022804 <USB_ReadInterrupts>
 8020ba2:	4603      	mov	r3, r0
 8020ba4:	f003 0302 	and.w	r3, r3, #2
 8020ba8:	2b02      	cmp	r3, #2
 8020baa:	d103      	bne.n	8020bb4 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8020bac:	687b      	ldr	r3, [r7, #4]
 8020bae:	681b      	ldr	r3, [r3, #0]
 8020bb0:	2202      	movs	r2, #2
 8020bb2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8020bb4:	687b      	ldr	r3, [r7, #4]
 8020bb6:	681b      	ldr	r3, [r3, #0]
 8020bb8:	4618      	mov	r0, r3
 8020bba:	f001 fe23 	bl	8022804 <USB_ReadInterrupts>
 8020bbe:	4603      	mov	r3, r0
 8020bc0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8020bc4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8020bc8:	d120      	bne.n	8020c0c <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8020bca:	687b      	ldr	r3, [r7, #4]
 8020bcc:	681b      	ldr	r3, [r3, #0]
 8020bce:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8020bd2:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8020bd4:	68fb      	ldr	r3, [r7, #12]
 8020bd6:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8020bda:	681b      	ldr	r3, [r3, #0]
 8020bdc:	f003 0301 	and.w	r3, r3, #1
 8020be0:	2b00      	cmp	r3, #0
 8020be2:	d113      	bne.n	8020c0c <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8020be4:	2110      	movs	r1, #16
 8020be6:	6938      	ldr	r0, [r7, #16]
 8020be8:	f001 fd54 	bl	8022694 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8020bec:	6938      	ldr	r0, [r7, #16]
 8020bee:	f001 fd83 	bl	80226f8 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8020bf2:	687b      	ldr	r3, [r7, #4]
 8020bf4:	7a5b      	ldrb	r3, [r3, #9]
 8020bf6:	2b02      	cmp	r3, #2
 8020bf8:	d105      	bne.n	8020c06 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8020bfa:	687b      	ldr	r3, [r7, #4]
 8020bfc:	681b      	ldr	r3, [r3, #0]
 8020bfe:	2101      	movs	r1, #1
 8020c00:	4618      	mov	r0, r3
 8020c02:	f001 fe41 	bl	8022888 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8020c06:	6878      	ldr	r0, [r7, #4]
 8020c08:	f002 f8f9 	bl	8022dfe <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8020c0c:	687b      	ldr	r3, [r7, #4]
 8020c0e:	681b      	ldr	r3, [r3, #0]
 8020c10:	4618      	mov	r0, r3
 8020c12:	f001 fdf7 	bl	8022804 <USB_ReadInterrupts>
 8020c16:	4603      	mov	r3, r0
 8020c18:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8020c1c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8020c20:	d102      	bne.n	8020c28 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8020c22:	6878      	ldr	r0, [r7, #4]
 8020c24:	f001 fca1 	bl	802256a <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8020c28:	687b      	ldr	r3, [r7, #4]
 8020c2a:	681b      	ldr	r3, [r3, #0]
 8020c2c:	4618      	mov	r0, r3
 8020c2e:	f001 fde9 	bl	8022804 <USB_ReadInterrupts>
 8020c32:	4603      	mov	r3, r0
 8020c34:	f003 0308 	and.w	r3, r3, #8
 8020c38:	2b08      	cmp	r3, #8
 8020c3a:	d106      	bne.n	8020c4a <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8020c3c:	6878      	ldr	r0, [r7, #4]
 8020c3e:	f002 f8c2 	bl	8022dc6 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8020c42:	687b      	ldr	r3, [r7, #4]
 8020c44:	681b      	ldr	r3, [r3, #0]
 8020c46:	2208      	movs	r2, #8
 8020c48:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8020c4a:	687b      	ldr	r3, [r7, #4]
 8020c4c:	681b      	ldr	r3, [r3, #0]
 8020c4e:	4618      	mov	r0, r3
 8020c50:	f001 fdd8 	bl	8022804 <USB_ReadInterrupts>
 8020c54:	4603      	mov	r3, r0
 8020c56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8020c5a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8020c5e:	d139      	bne.n	8020cd4 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8020c60:	687b      	ldr	r3, [r7, #4]
 8020c62:	681b      	ldr	r3, [r3, #0]
 8020c64:	4618      	mov	r0, r3
 8020c66:	f001 fe4c 	bl	8022902 <USB_HC_ReadInterrupt>
 8020c6a:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8020c6c:	2300      	movs	r3, #0
 8020c6e:	617b      	str	r3, [r7, #20]
 8020c70:	e025      	b.n	8020cbe <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8020c72:	697b      	ldr	r3, [r7, #20]
 8020c74:	f003 030f 	and.w	r3, r3, #15
 8020c78:	68ba      	ldr	r2, [r7, #8]
 8020c7a:	fa22 f303 	lsr.w	r3, r2, r3
 8020c7e:	f003 0301 	and.w	r3, r3, #1
 8020c82:	2b00      	cmp	r3, #0
 8020c84:	d018      	beq.n	8020cb8 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8020c86:	697b      	ldr	r3, [r7, #20]
 8020c88:	015a      	lsls	r2, r3, #5
 8020c8a:	68fb      	ldr	r3, [r7, #12]
 8020c8c:	4413      	add	r3, r2
 8020c8e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8020c92:	681b      	ldr	r3, [r3, #0]
 8020c94:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8020c98:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8020c9c:	d106      	bne.n	8020cac <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8020c9e:	697b      	ldr	r3, [r7, #20]
 8020ca0:	b2db      	uxtb	r3, r3
 8020ca2:	4619      	mov	r1, r3
 8020ca4:	6878      	ldr	r0, [r7, #4]
 8020ca6:	f000 f859 	bl	8020d5c <HCD_HC_IN_IRQHandler>
 8020caa:	e005      	b.n	8020cb8 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8020cac:	697b      	ldr	r3, [r7, #20]
 8020cae:	b2db      	uxtb	r3, r3
 8020cb0:	4619      	mov	r1, r3
 8020cb2:	6878      	ldr	r0, [r7, #4]
 8020cb4:	f000 febb 	bl	8021a2e <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8020cb8:	697b      	ldr	r3, [r7, #20]
 8020cba:	3301      	adds	r3, #1
 8020cbc:	617b      	str	r3, [r7, #20]
 8020cbe:	687b      	ldr	r3, [r7, #4]
 8020cc0:	795b      	ldrb	r3, [r3, #5]
 8020cc2:	461a      	mov	r2, r3
 8020cc4:	697b      	ldr	r3, [r7, #20]
 8020cc6:	4293      	cmp	r3, r2
 8020cc8:	d3d3      	bcc.n	8020c72 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8020cca:	687b      	ldr	r3, [r7, #4]
 8020ccc:	681b      	ldr	r3, [r3, #0]
 8020cce:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8020cd2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8020cd4:	687b      	ldr	r3, [r7, #4]
 8020cd6:	681b      	ldr	r3, [r3, #0]
 8020cd8:	4618      	mov	r0, r3
 8020cda:	f001 fd93 	bl	8022804 <USB_ReadInterrupts>
 8020cde:	4603      	mov	r3, r0
 8020ce0:	f003 0310 	and.w	r3, r3, #16
 8020ce4:	2b10      	cmp	r3, #16
 8020ce6:	d101      	bne.n	8020cec <HAL_HCD_IRQHandler+0x1ea>
 8020ce8:	2301      	movs	r3, #1
 8020cea:	e000      	b.n	8020cee <HAL_HCD_IRQHandler+0x1ec>
 8020cec:	2300      	movs	r3, #0
 8020cee:	2b00      	cmp	r3, #0
 8020cf0:	d014      	beq.n	8020d1c <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8020cf2:	687b      	ldr	r3, [r7, #4]
 8020cf4:	681b      	ldr	r3, [r3, #0]
 8020cf6:	699a      	ldr	r2, [r3, #24]
 8020cf8:	687b      	ldr	r3, [r7, #4]
 8020cfa:	681b      	ldr	r3, [r3, #0]
 8020cfc:	f022 0210 	bic.w	r2, r2, #16
 8020d00:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8020d02:	6878      	ldr	r0, [r7, #4]
 8020d04:	f001 fb52 	bl	80223ac <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8020d08:	687b      	ldr	r3, [r7, #4]
 8020d0a:	681b      	ldr	r3, [r3, #0]
 8020d0c:	699a      	ldr	r2, [r3, #24]
 8020d0e:	687b      	ldr	r3, [r7, #4]
 8020d10:	681b      	ldr	r3, [r3, #0]
 8020d12:	f042 0210 	orr.w	r2, r2, #16
 8020d16:	619a      	str	r2, [r3, #24]
 8020d18:	e000      	b.n	8020d1c <HAL_HCD_IRQHandler+0x21a>
      return;
 8020d1a:	bf00      	nop
    }
  }
}
 8020d1c:	3718      	adds	r7, #24
 8020d1e:	46bd      	mov	sp, r7
 8020d20:	bd80      	pop	{r7, pc}

08020d22 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8020d22:	b580      	push	{r7, lr}
 8020d24:	b082      	sub	sp, #8
 8020d26:	af00      	add	r7, sp, #0
 8020d28:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8020d2a:	687b      	ldr	r3, [r7, #4]
 8020d2c:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8020d30:	2b01      	cmp	r3, #1
 8020d32:	d101      	bne.n	8020d38 <HAL_HCD_Stop+0x16>
 8020d34:	2302      	movs	r3, #2
 8020d36:	e00d      	b.n	8020d54 <HAL_HCD_Stop+0x32>
 8020d38:	687b      	ldr	r3, [r7, #4]
 8020d3a:	2201      	movs	r2, #1
 8020d3c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8020d40:	687b      	ldr	r3, [r7, #4]
 8020d42:	681b      	ldr	r3, [r3, #0]
 8020d44:	4618      	mov	r0, r3
 8020d46:	f001 ff0d 	bl	8022b64 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8020d4a:	687b      	ldr	r3, [r7, #4]
 8020d4c:	2200      	movs	r2, #0
 8020d4e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8020d52:	2300      	movs	r3, #0
}
 8020d54:	4618      	mov	r0, r3
 8020d56:	3708      	adds	r7, #8
 8020d58:	46bd      	mov	sp, r7
 8020d5a:	bd80      	pop	{r7, pc}

08020d5c <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8020d5c:	b580      	push	{r7, lr}
 8020d5e:	b086      	sub	sp, #24
 8020d60:	af00      	add	r7, sp, #0
 8020d62:	6078      	str	r0, [r7, #4]
 8020d64:	460b      	mov	r3, r1
 8020d66:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8020d68:	687b      	ldr	r3, [r7, #4]
 8020d6a:	681b      	ldr	r3, [r3, #0]
 8020d6c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8020d6e:	697b      	ldr	r3, [r7, #20]
 8020d70:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8020d72:	687b      	ldr	r3, [r7, #4]
 8020d74:	681b      	ldr	r3, [r3, #0]
 8020d76:	78fa      	ldrb	r2, [r7, #3]
 8020d78:	4611      	mov	r1, r2
 8020d7a:	4618      	mov	r0, r3
 8020d7c:	f001 fd55 	bl	802282a <USB_ReadChInterrupts>
 8020d80:	4603      	mov	r3, r0
 8020d82:	f003 0304 	and.w	r3, r3, #4
 8020d86:	2b04      	cmp	r3, #4
 8020d88:	d11a      	bne.n	8020dc0 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8020d8a:	78fb      	ldrb	r3, [r7, #3]
 8020d8c:	015a      	lsls	r2, r3, #5
 8020d8e:	693b      	ldr	r3, [r7, #16]
 8020d90:	4413      	add	r3, r2
 8020d92:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8020d96:	461a      	mov	r2, r3
 8020d98:	2304      	movs	r3, #4
 8020d9a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8020d9c:	78fa      	ldrb	r2, [r7, #3]
 8020d9e:	6879      	ldr	r1, [r7, #4]
 8020da0:	4613      	mov	r3, r2
 8020da2:	011b      	lsls	r3, r3, #4
 8020da4:	1a9b      	subs	r3, r3, r2
 8020da6:	009b      	lsls	r3, r3, #2
 8020da8:	440b      	add	r3, r1
 8020daa:	334d      	adds	r3, #77	@ 0x4d
 8020dac:	2207      	movs	r2, #7
 8020dae:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8020db0:	687b      	ldr	r3, [r7, #4]
 8020db2:	681b      	ldr	r3, [r3, #0]
 8020db4:	78fa      	ldrb	r2, [r7, #3]
 8020db6:	4611      	mov	r1, r2
 8020db8:	4618      	mov	r0, r3
 8020dba:	f001 fdb3 	bl	8022924 <USB_HC_Halt>
 8020dbe:	e09e      	b.n	8020efe <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8020dc0:	687b      	ldr	r3, [r7, #4]
 8020dc2:	681b      	ldr	r3, [r3, #0]
 8020dc4:	78fa      	ldrb	r2, [r7, #3]
 8020dc6:	4611      	mov	r1, r2
 8020dc8:	4618      	mov	r0, r3
 8020dca:	f001 fd2e 	bl	802282a <USB_ReadChInterrupts>
 8020dce:	4603      	mov	r3, r0
 8020dd0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8020dd4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8020dd8:	d11b      	bne.n	8020e12 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8020dda:	78fb      	ldrb	r3, [r7, #3]
 8020ddc:	015a      	lsls	r2, r3, #5
 8020dde:	693b      	ldr	r3, [r7, #16]
 8020de0:	4413      	add	r3, r2
 8020de2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8020de6:	461a      	mov	r2, r3
 8020de8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8020dec:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8020dee:	78fa      	ldrb	r2, [r7, #3]
 8020df0:	6879      	ldr	r1, [r7, #4]
 8020df2:	4613      	mov	r3, r2
 8020df4:	011b      	lsls	r3, r3, #4
 8020df6:	1a9b      	subs	r3, r3, r2
 8020df8:	009b      	lsls	r3, r3, #2
 8020dfa:	440b      	add	r3, r1
 8020dfc:	334d      	adds	r3, #77	@ 0x4d
 8020dfe:	2208      	movs	r2, #8
 8020e00:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8020e02:	687b      	ldr	r3, [r7, #4]
 8020e04:	681b      	ldr	r3, [r3, #0]
 8020e06:	78fa      	ldrb	r2, [r7, #3]
 8020e08:	4611      	mov	r1, r2
 8020e0a:	4618      	mov	r0, r3
 8020e0c:	f001 fd8a 	bl	8022924 <USB_HC_Halt>
 8020e10:	e075      	b.n	8020efe <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8020e12:	687b      	ldr	r3, [r7, #4]
 8020e14:	681b      	ldr	r3, [r3, #0]
 8020e16:	78fa      	ldrb	r2, [r7, #3]
 8020e18:	4611      	mov	r1, r2
 8020e1a:	4618      	mov	r0, r3
 8020e1c:	f001 fd05 	bl	802282a <USB_ReadChInterrupts>
 8020e20:	4603      	mov	r3, r0
 8020e22:	f003 0308 	and.w	r3, r3, #8
 8020e26:	2b08      	cmp	r3, #8
 8020e28:	d11a      	bne.n	8020e60 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8020e2a:	78fb      	ldrb	r3, [r7, #3]
 8020e2c:	015a      	lsls	r2, r3, #5
 8020e2e:	693b      	ldr	r3, [r7, #16]
 8020e30:	4413      	add	r3, r2
 8020e32:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8020e36:	461a      	mov	r2, r3
 8020e38:	2308      	movs	r3, #8
 8020e3a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8020e3c:	78fa      	ldrb	r2, [r7, #3]
 8020e3e:	6879      	ldr	r1, [r7, #4]
 8020e40:	4613      	mov	r3, r2
 8020e42:	011b      	lsls	r3, r3, #4
 8020e44:	1a9b      	subs	r3, r3, r2
 8020e46:	009b      	lsls	r3, r3, #2
 8020e48:	440b      	add	r3, r1
 8020e4a:	334d      	adds	r3, #77	@ 0x4d
 8020e4c:	2206      	movs	r2, #6
 8020e4e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8020e50:	687b      	ldr	r3, [r7, #4]
 8020e52:	681b      	ldr	r3, [r3, #0]
 8020e54:	78fa      	ldrb	r2, [r7, #3]
 8020e56:	4611      	mov	r1, r2
 8020e58:	4618      	mov	r0, r3
 8020e5a:	f001 fd63 	bl	8022924 <USB_HC_Halt>
 8020e5e:	e04e      	b.n	8020efe <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8020e60:	687b      	ldr	r3, [r7, #4]
 8020e62:	681b      	ldr	r3, [r3, #0]
 8020e64:	78fa      	ldrb	r2, [r7, #3]
 8020e66:	4611      	mov	r1, r2
 8020e68:	4618      	mov	r0, r3
 8020e6a:	f001 fcde 	bl	802282a <USB_ReadChInterrupts>
 8020e6e:	4603      	mov	r3, r0
 8020e70:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8020e74:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8020e78:	d11b      	bne.n	8020eb2 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8020e7a:	78fb      	ldrb	r3, [r7, #3]
 8020e7c:	015a      	lsls	r2, r3, #5
 8020e7e:	693b      	ldr	r3, [r7, #16]
 8020e80:	4413      	add	r3, r2
 8020e82:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8020e86:	461a      	mov	r2, r3
 8020e88:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8020e8c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8020e8e:	78fa      	ldrb	r2, [r7, #3]
 8020e90:	6879      	ldr	r1, [r7, #4]
 8020e92:	4613      	mov	r3, r2
 8020e94:	011b      	lsls	r3, r3, #4
 8020e96:	1a9b      	subs	r3, r3, r2
 8020e98:	009b      	lsls	r3, r3, #2
 8020e9a:	440b      	add	r3, r1
 8020e9c:	334d      	adds	r3, #77	@ 0x4d
 8020e9e:	2209      	movs	r2, #9
 8020ea0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8020ea2:	687b      	ldr	r3, [r7, #4]
 8020ea4:	681b      	ldr	r3, [r3, #0]
 8020ea6:	78fa      	ldrb	r2, [r7, #3]
 8020ea8:	4611      	mov	r1, r2
 8020eaa:	4618      	mov	r0, r3
 8020eac:	f001 fd3a 	bl	8022924 <USB_HC_Halt>
 8020eb0:	e025      	b.n	8020efe <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8020eb2:	687b      	ldr	r3, [r7, #4]
 8020eb4:	681b      	ldr	r3, [r3, #0]
 8020eb6:	78fa      	ldrb	r2, [r7, #3]
 8020eb8:	4611      	mov	r1, r2
 8020eba:	4618      	mov	r0, r3
 8020ebc:	f001 fcb5 	bl	802282a <USB_ReadChInterrupts>
 8020ec0:	4603      	mov	r3, r0
 8020ec2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8020ec6:	2b80      	cmp	r3, #128	@ 0x80
 8020ec8:	d119      	bne.n	8020efe <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8020eca:	78fb      	ldrb	r3, [r7, #3]
 8020ecc:	015a      	lsls	r2, r3, #5
 8020ece:	693b      	ldr	r3, [r7, #16]
 8020ed0:	4413      	add	r3, r2
 8020ed2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8020ed6:	461a      	mov	r2, r3
 8020ed8:	2380      	movs	r3, #128	@ 0x80
 8020eda:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8020edc:	78fa      	ldrb	r2, [r7, #3]
 8020ede:	6879      	ldr	r1, [r7, #4]
 8020ee0:	4613      	mov	r3, r2
 8020ee2:	011b      	lsls	r3, r3, #4
 8020ee4:	1a9b      	subs	r3, r3, r2
 8020ee6:	009b      	lsls	r3, r3, #2
 8020ee8:	440b      	add	r3, r1
 8020eea:	334d      	adds	r3, #77	@ 0x4d
 8020eec:	2207      	movs	r2, #7
 8020eee:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8020ef0:	687b      	ldr	r3, [r7, #4]
 8020ef2:	681b      	ldr	r3, [r3, #0]
 8020ef4:	78fa      	ldrb	r2, [r7, #3]
 8020ef6:	4611      	mov	r1, r2
 8020ef8:	4618      	mov	r0, r3
 8020efa:	f001 fd13 	bl	8022924 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8020efe:	687b      	ldr	r3, [r7, #4]
 8020f00:	681b      	ldr	r3, [r3, #0]
 8020f02:	78fa      	ldrb	r2, [r7, #3]
 8020f04:	4611      	mov	r1, r2
 8020f06:	4618      	mov	r0, r3
 8020f08:	f001 fc8f 	bl	802282a <USB_ReadChInterrupts>
 8020f0c:	4603      	mov	r3, r0
 8020f0e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8020f12:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8020f16:	d112      	bne.n	8020f3e <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8020f18:	687b      	ldr	r3, [r7, #4]
 8020f1a:	681b      	ldr	r3, [r3, #0]
 8020f1c:	78fa      	ldrb	r2, [r7, #3]
 8020f1e:	4611      	mov	r1, r2
 8020f20:	4618      	mov	r0, r3
 8020f22:	f001 fcff 	bl	8022924 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8020f26:	78fb      	ldrb	r3, [r7, #3]
 8020f28:	015a      	lsls	r2, r3, #5
 8020f2a:	693b      	ldr	r3, [r7, #16]
 8020f2c:	4413      	add	r3, r2
 8020f2e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8020f32:	461a      	mov	r2, r3
 8020f34:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8020f38:	6093      	str	r3, [r2, #8]
 8020f3a:	f000 bd75 	b.w	8021a28 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8020f3e:	687b      	ldr	r3, [r7, #4]
 8020f40:	681b      	ldr	r3, [r3, #0]
 8020f42:	78fa      	ldrb	r2, [r7, #3]
 8020f44:	4611      	mov	r1, r2
 8020f46:	4618      	mov	r0, r3
 8020f48:	f001 fc6f 	bl	802282a <USB_ReadChInterrupts>
 8020f4c:	4603      	mov	r3, r0
 8020f4e:	f003 0301 	and.w	r3, r3, #1
 8020f52:	2b01      	cmp	r3, #1
 8020f54:	f040 8128 	bne.w	80211a8 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8020f58:	78fb      	ldrb	r3, [r7, #3]
 8020f5a:	015a      	lsls	r2, r3, #5
 8020f5c:	693b      	ldr	r3, [r7, #16]
 8020f5e:	4413      	add	r3, r2
 8020f60:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8020f64:	461a      	mov	r2, r3
 8020f66:	2320      	movs	r3, #32
 8020f68:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8020f6a:	78fa      	ldrb	r2, [r7, #3]
 8020f6c:	6879      	ldr	r1, [r7, #4]
 8020f6e:	4613      	mov	r3, r2
 8020f70:	011b      	lsls	r3, r3, #4
 8020f72:	1a9b      	subs	r3, r3, r2
 8020f74:	009b      	lsls	r3, r3, #2
 8020f76:	440b      	add	r3, r1
 8020f78:	331b      	adds	r3, #27
 8020f7a:	781b      	ldrb	r3, [r3, #0]
 8020f7c:	2b01      	cmp	r3, #1
 8020f7e:	d119      	bne.n	8020fb4 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8020f80:	78fa      	ldrb	r2, [r7, #3]
 8020f82:	6879      	ldr	r1, [r7, #4]
 8020f84:	4613      	mov	r3, r2
 8020f86:	011b      	lsls	r3, r3, #4
 8020f88:	1a9b      	subs	r3, r3, r2
 8020f8a:	009b      	lsls	r3, r3, #2
 8020f8c:	440b      	add	r3, r1
 8020f8e:	331b      	adds	r3, #27
 8020f90:	2200      	movs	r2, #0
 8020f92:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8020f94:	78fb      	ldrb	r3, [r7, #3]
 8020f96:	015a      	lsls	r2, r3, #5
 8020f98:	693b      	ldr	r3, [r7, #16]
 8020f9a:	4413      	add	r3, r2
 8020f9c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8020fa0:	685b      	ldr	r3, [r3, #4]
 8020fa2:	78fa      	ldrb	r2, [r7, #3]
 8020fa4:	0151      	lsls	r1, r2, #5
 8020fa6:	693a      	ldr	r2, [r7, #16]
 8020fa8:	440a      	add	r2, r1
 8020faa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8020fae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8020fb2:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8020fb4:	687b      	ldr	r3, [r7, #4]
 8020fb6:	799b      	ldrb	r3, [r3, #6]
 8020fb8:	2b00      	cmp	r3, #0
 8020fba:	d01b      	beq.n	8020ff4 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8020fbc:	78fa      	ldrb	r2, [r7, #3]
 8020fbe:	6879      	ldr	r1, [r7, #4]
 8020fc0:	4613      	mov	r3, r2
 8020fc2:	011b      	lsls	r3, r3, #4
 8020fc4:	1a9b      	subs	r3, r3, r2
 8020fc6:	009b      	lsls	r3, r3, #2
 8020fc8:	440b      	add	r3, r1
 8020fca:	3330      	adds	r3, #48	@ 0x30
 8020fcc:	6819      	ldr	r1, [r3, #0]
 8020fce:	78fb      	ldrb	r3, [r7, #3]
 8020fd0:	015a      	lsls	r2, r3, #5
 8020fd2:	693b      	ldr	r3, [r7, #16]
 8020fd4:	4413      	add	r3, r2
 8020fd6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8020fda:	691b      	ldr	r3, [r3, #16]
 8020fdc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8020fe0:	78fa      	ldrb	r2, [r7, #3]
 8020fe2:	1ac9      	subs	r1, r1, r3
 8020fe4:	6878      	ldr	r0, [r7, #4]
 8020fe6:	4613      	mov	r3, r2
 8020fe8:	011b      	lsls	r3, r3, #4
 8020fea:	1a9b      	subs	r3, r3, r2
 8020fec:	009b      	lsls	r3, r3, #2
 8020fee:	4403      	add	r3, r0
 8020ff0:	3338      	adds	r3, #56	@ 0x38
 8020ff2:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8020ff4:	78fa      	ldrb	r2, [r7, #3]
 8020ff6:	6879      	ldr	r1, [r7, #4]
 8020ff8:	4613      	mov	r3, r2
 8020ffa:	011b      	lsls	r3, r3, #4
 8020ffc:	1a9b      	subs	r3, r3, r2
 8020ffe:	009b      	lsls	r3, r3, #2
 8021000:	440b      	add	r3, r1
 8021002:	334d      	adds	r3, #77	@ 0x4d
 8021004:	2201      	movs	r2, #1
 8021006:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8021008:	78fa      	ldrb	r2, [r7, #3]
 802100a:	6879      	ldr	r1, [r7, #4]
 802100c:	4613      	mov	r3, r2
 802100e:	011b      	lsls	r3, r3, #4
 8021010:	1a9b      	subs	r3, r3, r2
 8021012:	009b      	lsls	r3, r3, #2
 8021014:	440b      	add	r3, r1
 8021016:	3344      	adds	r3, #68	@ 0x44
 8021018:	2200      	movs	r2, #0
 802101a:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 802101c:	78fb      	ldrb	r3, [r7, #3]
 802101e:	015a      	lsls	r2, r3, #5
 8021020:	693b      	ldr	r3, [r7, #16]
 8021022:	4413      	add	r3, r2
 8021024:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8021028:	461a      	mov	r2, r3
 802102a:	2301      	movs	r3, #1
 802102c:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 802102e:	78fa      	ldrb	r2, [r7, #3]
 8021030:	6879      	ldr	r1, [r7, #4]
 8021032:	4613      	mov	r3, r2
 8021034:	011b      	lsls	r3, r3, #4
 8021036:	1a9b      	subs	r3, r3, r2
 8021038:	009b      	lsls	r3, r3, #2
 802103a:	440b      	add	r3, r1
 802103c:	3326      	adds	r3, #38	@ 0x26
 802103e:	781b      	ldrb	r3, [r3, #0]
 8021040:	2b00      	cmp	r3, #0
 8021042:	d00a      	beq.n	802105a <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8021044:	78fa      	ldrb	r2, [r7, #3]
 8021046:	6879      	ldr	r1, [r7, #4]
 8021048:	4613      	mov	r3, r2
 802104a:	011b      	lsls	r3, r3, #4
 802104c:	1a9b      	subs	r3, r3, r2
 802104e:	009b      	lsls	r3, r3, #2
 8021050:	440b      	add	r3, r1
 8021052:	3326      	adds	r3, #38	@ 0x26
 8021054:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8021056:	2b02      	cmp	r3, #2
 8021058:	d110      	bne.n	802107c <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 802105a:	687b      	ldr	r3, [r7, #4]
 802105c:	681b      	ldr	r3, [r3, #0]
 802105e:	78fa      	ldrb	r2, [r7, #3]
 8021060:	4611      	mov	r1, r2
 8021062:	4618      	mov	r0, r3
 8021064:	f001 fc5e 	bl	8022924 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8021068:	78fb      	ldrb	r3, [r7, #3]
 802106a:	015a      	lsls	r2, r3, #5
 802106c:	693b      	ldr	r3, [r7, #16]
 802106e:	4413      	add	r3, r2
 8021070:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8021074:	461a      	mov	r2, r3
 8021076:	2310      	movs	r3, #16
 8021078:	6093      	str	r3, [r2, #8]
 802107a:	e03d      	b.n	80210f8 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 802107c:	78fa      	ldrb	r2, [r7, #3]
 802107e:	6879      	ldr	r1, [r7, #4]
 8021080:	4613      	mov	r3, r2
 8021082:	011b      	lsls	r3, r3, #4
 8021084:	1a9b      	subs	r3, r3, r2
 8021086:	009b      	lsls	r3, r3, #2
 8021088:	440b      	add	r3, r1
 802108a:	3326      	adds	r3, #38	@ 0x26
 802108c:	781b      	ldrb	r3, [r3, #0]
 802108e:	2b03      	cmp	r3, #3
 8021090:	d00a      	beq.n	80210a8 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8021092:	78fa      	ldrb	r2, [r7, #3]
 8021094:	6879      	ldr	r1, [r7, #4]
 8021096:	4613      	mov	r3, r2
 8021098:	011b      	lsls	r3, r3, #4
 802109a:	1a9b      	subs	r3, r3, r2
 802109c:	009b      	lsls	r3, r3, #2
 802109e:	440b      	add	r3, r1
 80210a0:	3326      	adds	r3, #38	@ 0x26
 80210a2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80210a4:	2b01      	cmp	r3, #1
 80210a6:	d127      	bne.n	80210f8 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80210a8:	78fb      	ldrb	r3, [r7, #3]
 80210aa:	015a      	lsls	r2, r3, #5
 80210ac:	693b      	ldr	r3, [r7, #16]
 80210ae:	4413      	add	r3, r2
 80210b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80210b4:	681b      	ldr	r3, [r3, #0]
 80210b6:	78fa      	ldrb	r2, [r7, #3]
 80210b8:	0151      	lsls	r1, r2, #5
 80210ba:	693a      	ldr	r2, [r7, #16]
 80210bc:	440a      	add	r2, r1
 80210be:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80210c2:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80210c6:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80210c8:	78fa      	ldrb	r2, [r7, #3]
 80210ca:	6879      	ldr	r1, [r7, #4]
 80210cc:	4613      	mov	r3, r2
 80210ce:	011b      	lsls	r3, r3, #4
 80210d0:	1a9b      	subs	r3, r3, r2
 80210d2:	009b      	lsls	r3, r3, #2
 80210d4:	440b      	add	r3, r1
 80210d6:	334c      	adds	r3, #76	@ 0x4c
 80210d8:	2201      	movs	r2, #1
 80210da:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80210dc:	78fa      	ldrb	r2, [r7, #3]
 80210de:	6879      	ldr	r1, [r7, #4]
 80210e0:	4613      	mov	r3, r2
 80210e2:	011b      	lsls	r3, r3, #4
 80210e4:	1a9b      	subs	r3, r3, r2
 80210e6:	009b      	lsls	r3, r3, #2
 80210e8:	440b      	add	r3, r1
 80210ea:	334c      	adds	r3, #76	@ 0x4c
 80210ec:	781a      	ldrb	r2, [r3, #0]
 80210ee:	78fb      	ldrb	r3, [r7, #3]
 80210f0:	4619      	mov	r1, r3
 80210f2:	6878      	ldr	r0, [r7, #4]
 80210f4:	f001 fe91 	bl	8022e1a <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 80210f8:	687b      	ldr	r3, [r7, #4]
 80210fa:	799b      	ldrb	r3, [r3, #6]
 80210fc:	2b01      	cmp	r3, #1
 80210fe:	d13b      	bne.n	8021178 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8021100:	78fa      	ldrb	r2, [r7, #3]
 8021102:	6879      	ldr	r1, [r7, #4]
 8021104:	4613      	mov	r3, r2
 8021106:	011b      	lsls	r3, r3, #4
 8021108:	1a9b      	subs	r3, r3, r2
 802110a:	009b      	lsls	r3, r3, #2
 802110c:	440b      	add	r3, r1
 802110e:	3338      	adds	r3, #56	@ 0x38
 8021110:	6819      	ldr	r1, [r3, #0]
 8021112:	78fa      	ldrb	r2, [r7, #3]
 8021114:	6878      	ldr	r0, [r7, #4]
 8021116:	4613      	mov	r3, r2
 8021118:	011b      	lsls	r3, r3, #4
 802111a:	1a9b      	subs	r3, r3, r2
 802111c:	009b      	lsls	r3, r3, #2
 802111e:	4403      	add	r3, r0
 8021120:	3328      	adds	r3, #40	@ 0x28
 8021122:	881b      	ldrh	r3, [r3, #0]
 8021124:	440b      	add	r3, r1
 8021126:	1e59      	subs	r1, r3, #1
 8021128:	78fa      	ldrb	r2, [r7, #3]
 802112a:	6878      	ldr	r0, [r7, #4]
 802112c:	4613      	mov	r3, r2
 802112e:	011b      	lsls	r3, r3, #4
 8021130:	1a9b      	subs	r3, r3, r2
 8021132:	009b      	lsls	r3, r3, #2
 8021134:	4403      	add	r3, r0
 8021136:	3328      	adds	r3, #40	@ 0x28
 8021138:	881b      	ldrh	r3, [r3, #0]
 802113a:	fbb1 f3f3 	udiv	r3, r1, r3
 802113e:	f003 0301 	and.w	r3, r3, #1
 8021142:	2b00      	cmp	r3, #0
 8021144:	f000 8470 	beq.w	8021a28 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8021148:	78fa      	ldrb	r2, [r7, #3]
 802114a:	6879      	ldr	r1, [r7, #4]
 802114c:	4613      	mov	r3, r2
 802114e:	011b      	lsls	r3, r3, #4
 8021150:	1a9b      	subs	r3, r3, r2
 8021152:	009b      	lsls	r3, r3, #2
 8021154:	440b      	add	r3, r1
 8021156:	333c      	adds	r3, #60	@ 0x3c
 8021158:	781b      	ldrb	r3, [r3, #0]
 802115a:	78fa      	ldrb	r2, [r7, #3]
 802115c:	f083 0301 	eor.w	r3, r3, #1
 8021160:	b2d8      	uxtb	r0, r3
 8021162:	6879      	ldr	r1, [r7, #4]
 8021164:	4613      	mov	r3, r2
 8021166:	011b      	lsls	r3, r3, #4
 8021168:	1a9b      	subs	r3, r3, r2
 802116a:	009b      	lsls	r3, r3, #2
 802116c:	440b      	add	r3, r1
 802116e:	333c      	adds	r3, #60	@ 0x3c
 8021170:	4602      	mov	r2, r0
 8021172:	701a      	strb	r2, [r3, #0]
 8021174:	f000 bc58 	b.w	8021a28 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8021178:	78fa      	ldrb	r2, [r7, #3]
 802117a:	6879      	ldr	r1, [r7, #4]
 802117c:	4613      	mov	r3, r2
 802117e:	011b      	lsls	r3, r3, #4
 8021180:	1a9b      	subs	r3, r3, r2
 8021182:	009b      	lsls	r3, r3, #2
 8021184:	440b      	add	r3, r1
 8021186:	333c      	adds	r3, #60	@ 0x3c
 8021188:	781b      	ldrb	r3, [r3, #0]
 802118a:	78fa      	ldrb	r2, [r7, #3]
 802118c:	f083 0301 	eor.w	r3, r3, #1
 8021190:	b2d8      	uxtb	r0, r3
 8021192:	6879      	ldr	r1, [r7, #4]
 8021194:	4613      	mov	r3, r2
 8021196:	011b      	lsls	r3, r3, #4
 8021198:	1a9b      	subs	r3, r3, r2
 802119a:	009b      	lsls	r3, r3, #2
 802119c:	440b      	add	r3, r1
 802119e:	333c      	adds	r3, #60	@ 0x3c
 80211a0:	4602      	mov	r2, r0
 80211a2:	701a      	strb	r2, [r3, #0]
 80211a4:	f000 bc40 	b.w	8021a28 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 80211a8:	687b      	ldr	r3, [r7, #4]
 80211aa:	681b      	ldr	r3, [r3, #0]
 80211ac:	78fa      	ldrb	r2, [r7, #3]
 80211ae:	4611      	mov	r1, r2
 80211b0:	4618      	mov	r0, r3
 80211b2:	f001 fb3a 	bl	802282a <USB_ReadChInterrupts>
 80211b6:	4603      	mov	r3, r0
 80211b8:	f003 0320 	and.w	r3, r3, #32
 80211bc:	2b20      	cmp	r3, #32
 80211be:	d131      	bne.n	8021224 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80211c0:	78fb      	ldrb	r3, [r7, #3]
 80211c2:	015a      	lsls	r2, r3, #5
 80211c4:	693b      	ldr	r3, [r7, #16]
 80211c6:	4413      	add	r3, r2
 80211c8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80211cc:	461a      	mov	r2, r3
 80211ce:	2320      	movs	r3, #32
 80211d0:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 80211d2:	78fa      	ldrb	r2, [r7, #3]
 80211d4:	6879      	ldr	r1, [r7, #4]
 80211d6:	4613      	mov	r3, r2
 80211d8:	011b      	lsls	r3, r3, #4
 80211da:	1a9b      	subs	r3, r3, r2
 80211dc:	009b      	lsls	r3, r3, #2
 80211de:	440b      	add	r3, r1
 80211e0:	331a      	adds	r3, #26
 80211e2:	781b      	ldrb	r3, [r3, #0]
 80211e4:	2b01      	cmp	r3, #1
 80211e6:	f040 841f 	bne.w	8021a28 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 80211ea:	78fa      	ldrb	r2, [r7, #3]
 80211ec:	6879      	ldr	r1, [r7, #4]
 80211ee:	4613      	mov	r3, r2
 80211f0:	011b      	lsls	r3, r3, #4
 80211f2:	1a9b      	subs	r3, r3, r2
 80211f4:	009b      	lsls	r3, r3, #2
 80211f6:	440b      	add	r3, r1
 80211f8:	331b      	adds	r3, #27
 80211fa:	2201      	movs	r2, #1
 80211fc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80211fe:	78fa      	ldrb	r2, [r7, #3]
 8021200:	6879      	ldr	r1, [r7, #4]
 8021202:	4613      	mov	r3, r2
 8021204:	011b      	lsls	r3, r3, #4
 8021206:	1a9b      	subs	r3, r3, r2
 8021208:	009b      	lsls	r3, r3, #2
 802120a:	440b      	add	r3, r1
 802120c:	334d      	adds	r3, #77	@ 0x4d
 802120e:	2203      	movs	r2, #3
 8021210:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8021212:	687b      	ldr	r3, [r7, #4]
 8021214:	681b      	ldr	r3, [r3, #0]
 8021216:	78fa      	ldrb	r2, [r7, #3]
 8021218:	4611      	mov	r1, r2
 802121a:	4618      	mov	r0, r3
 802121c:	f001 fb82 	bl	8022924 <USB_HC_Halt>
 8021220:	f000 bc02 	b.w	8021a28 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8021224:	687b      	ldr	r3, [r7, #4]
 8021226:	681b      	ldr	r3, [r3, #0]
 8021228:	78fa      	ldrb	r2, [r7, #3]
 802122a:	4611      	mov	r1, r2
 802122c:	4618      	mov	r0, r3
 802122e:	f001 fafc 	bl	802282a <USB_ReadChInterrupts>
 8021232:	4603      	mov	r3, r0
 8021234:	f003 0302 	and.w	r3, r3, #2
 8021238:	2b02      	cmp	r3, #2
 802123a:	f040 8305 	bne.w	8021848 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 802123e:	78fb      	ldrb	r3, [r7, #3]
 8021240:	015a      	lsls	r2, r3, #5
 8021242:	693b      	ldr	r3, [r7, #16]
 8021244:	4413      	add	r3, r2
 8021246:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 802124a:	461a      	mov	r2, r3
 802124c:	2302      	movs	r3, #2
 802124e:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8021250:	78fa      	ldrb	r2, [r7, #3]
 8021252:	6879      	ldr	r1, [r7, #4]
 8021254:	4613      	mov	r3, r2
 8021256:	011b      	lsls	r3, r3, #4
 8021258:	1a9b      	subs	r3, r3, r2
 802125a:	009b      	lsls	r3, r3, #2
 802125c:	440b      	add	r3, r1
 802125e:	334d      	adds	r3, #77	@ 0x4d
 8021260:	781b      	ldrb	r3, [r3, #0]
 8021262:	2b01      	cmp	r3, #1
 8021264:	d114      	bne.n	8021290 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8021266:	78fa      	ldrb	r2, [r7, #3]
 8021268:	6879      	ldr	r1, [r7, #4]
 802126a:	4613      	mov	r3, r2
 802126c:	011b      	lsls	r3, r3, #4
 802126e:	1a9b      	subs	r3, r3, r2
 8021270:	009b      	lsls	r3, r3, #2
 8021272:	440b      	add	r3, r1
 8021274:	334d      	adds	r3, #77	@ 0x4d
 8021276:	2202      	movs	r2, #2
 8021278:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 802127a:	78fa      	ldrb	r2, [r7, #3]
 802127c:	6879      	ldr	r1, [r7, #4]
 802127e:	4613      	mov	r3, r2
 8021280:	011b      	lsls	r3, r3, #4
 8021282:	1a9b      	subs	r3, r3, r2
 8021284:	009b      	lsls	r3, r3, #2
 8021286:	440b      	add	r3, r1
 8021288:	334c      	adds	r3, #76	@ 0x4c
 802128a:	2201      	movs	r2, #1
 802128c:	701a      	strb	r2, [r3, #0]
 802128e:	e2cc      	b.n	802182a <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8021290:	78fa      	ldrb	r2, [r7, #3]
 8021292:	6879      	ldr	r1, [r7, #4]
 8021294:	4613      	mov	r3, r2
 8021296:	011b      	lsls	r3, r3, #4
 8021298:	1a9b      	subs	r3, r3, r2
 802129a:	009b      	lsls	r3, r3, #2
 802129c:	440b      	add	r3, r1
 802129e:	334d      	adds	r3, #77	@ 0x4d
 80212a0:	781b      	ldrb	r3, [r3, #0]
 80212a2:	2b06      	cmp	r3, #6
 80212a4:	d114      	bne.n	80212d0 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80212a6:	78fa      	ldrb	r2, [r7, #3]
 80212a8:	6879      	ldr	r1, [r7, #4]
 80212aa:	4613      	mov	r3, r2
 80212ac:	011b      	lsls	r3, r3, #4
 80212ae:	1a9b      	subs	r3, r3, r2
 80212b0:	009b      	lsls	r3, r3, #2
 80212b2:	440b      	add	r3, r1
 80212b4:	334d      	adds	r3, #77	@ 0x4d
 80212b6:	2202      	movs	r2, #2
 80212b8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 80212ba:	78fa      	ldrb	r2, [r7, #3]
 80212bc:	6879      	ldr	r1, [r7, #4]
 80212be:	4613      	mov	r3, r2
 80212c0:	011b      	lsls	r3, r3, #4
 80212c2:	1a9b      	subs	r3, r3, r2
 80212c4:	009b      	lsls	r3, r3, #2
 80212c6:	440b      	add	r3, r1
 80212c8:	334c      	adds	r3, #76	@ 0x4c
 80212ca:	2205      	movs	r2, #5
 80212cc:	701a      	strb	r2, [r3, #0]
 80212ce:	e2ac      	b.n	802182a <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80212d0:	78fa      	ldrb	r2, [r7, #3]
 80212d2:	6879      	ldr	r1, [r7, #4]
 80212d4:	4613      	mov	r3, r2
 80212d6:	011b      	lsls	r3, r3, #4
 80212d8:	1a9b      	subs	r3, r3, r2
 80212da:	009b      	lsls	r3, r3, #2
 80212dc:	440b      	add	r3, r1
 80212de:	334d      	adds	r3, #77	@ 0x4d
 80212e0:	781b      	ldrb	r3, [r3, #0]
 80212e2:	2b07      	cmp	r3, #7
 80212e4:	d00b      	beq.n	80212fe <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80212e6:	78fa      	ldrb	r2, [r7, #3]
 80212e8:	6879      	ldr	r1, [r7, #4]
 80212ea:	4613      	mov	r3, r2
 80212ec:	011b      	lsls	r3, r3, #4
 80212ee:	1a9b      	subs	r3, r3, r2
 80212f0:	009b      	lsls	r3, r3, #2
 80212f2:	440b      	add	r3, r1
 80212f4:	334d      	adds	r3, #77	@ 0x4d
 80212f6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80212f8:	2b09      	cmp	r3, #9
 80212fa:	f040 80a6 	bne.w	802144a <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80212fe:	78fa      	ldrb	r2, [r7, #3]
 8021300:	6879      	ldr	r1, [r7, #4]
 8021302:	4613      	mov	r3, r2
 8021304:	011b      	lsls	r3, r3, #4
 8021306:	1a9b      	subs	r3, r3, r2
 8021308:	009b      	lsls	r3, r3, #2
 802130a:	440b      	add	r3, r1
 802130c:	334d      	adds	r3, #77	@ 0x4d
 802130e:	2202      	movs	r2, #2
 8021310:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8021312:	78fa      	ldrb	r2, [r7, #3]
 8021314:	6879      	ldr	r1, [r7, #4]
 8021316:	4613      	mov	r3, r2
 8021318:	011b      	lsls	r3, r3, #4
 802131a:	1a9b      	subs	r3, r3, r2
 802131c:	009b      	lsls	r3, r3, #2
 802131e:	440b      	add	r3, r1
 8021320:	3344      	adds	r3, #68	@ 0x44
 8021322:	681b      	ldr	r3, [r3, #0]
 8021324:	1c59      	adds	r1, r3, #1
 8021326:	6878      	ldr	r0, [r7, #4]
 8021328:	4613      	mov	r3, r2
 802132a:	011b      	lsls	r3, r3, #4
 802132c:	1a9b      	subs	r3, r3, r2
 802132e:	009b      	lsls	r3, r3, #2
 8021330:	4403      	add	r3, r0
 8021332:	3344      	adds	r3, #68	@ 0x44
 8021334:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8021336:	78fa      	ldrb	r2, [r7, #3]
 8021338:	6879      	ldr	r1, [r7, #4]
 802133a:	4613      	mov	r3, r2
 802133c:	011b      	lsls	r3, r3, #4
 802133e:	1a9b      	subs	r3, r3, r2
 8021340:	009b      	lsls	r3, r3, #2
 8021342:	440b      	add	r3, r1
 8021344:	3344      	adds	r3, #68	@ 0x44
 8021346:	681b      	ldr	r3, [r3, #0]
 8021348:	2b02      	cmp	r3, #2
 802134a:	d943      	bls.n	80213d4 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 802134c:	78fa      	ldrb	r2, [r7, #3]
 802134e:	6879      	ldr	r1, [r7, #4]
 8021350:	4613      	mov	r3, r2
 8021352:	011b      	lsls	r3, r3, #4
 8021354:	1a9b      	subs	r3, r3, r2
 8021356:	009b      	lsls	r3, r3, #2
 8021358:	440b      	add	r3, r1
 802135a:	3344      	adds	r3, #68	@ 0x44
 802135c:	2200      	movs	r2, #0
 802135e:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8021360:	78fa      	ldrb	r2, [r7, #3]
 8021362:	6879      	ldr	r1, [r7, #4]
 8021364:	4613      	mov	r3, r2
 8021366:	011b      	lsls	r3, r3, #4
 8021368:	1a9b      	subs	r3, r3, r2
 802136a:	009b      	lsls	r3, r3, #2
 802136c:	440b      	add	r3, r1
 802136e:	331a      	adds	r3, #26
 8021370:	781b      	ldrb	r3, [r3, #0]
 8021372:	2b01      	cmp	r3, #1
 8021374:	d123      	bne.n	80213be <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8021376:	78fa      	ldrb	r2, [r7, #3]
 8021378:	6879      	ldr	r1, [r7, #4]
 802137a:	4613      	mov	r3, r2
 802137c:	011b      	lsls	r3, r3, #4
 802137e:	1a9b      	subs	r3, r3, r2
 8021380:	009b      	lsls	r3, r3, #2
 8021382:	440b      	add	r3, r1
 8021384:	331b      	adds	r3, #27
 8021386:	2200      	movs	r2, #0
 8021388:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 802138a:	78fa      	ldrb	r2, [r7, #3]
 802138c:	6879      	ldr	r1, [r7, #4]
 802138e:	4613      	mov	r3, r2
 8021390:	011b      	lsls	r3, r3, #4
 8021392:	1a9b      	subs	r3, r3, r2
 8021394:	009b      	lsls	r3, r3, #2
 8021396:	440b      	add	r3, r1
 8021398:	331c      	adds	r3, #28
 802139a:	2200      	movs	r2, #0
 802139c:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 802139e:	78fb      	ldrb	r3, [r7, #3]
 80213a0:	015a      	lsls	r2, r3, #5
 80213a2:	693b      	ldr	r3, [r7, #16]
 80213a4:	4413      	add	r3, r2
 80213a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80213aa:	685b      	ldr	r3, [r3, #4]
 80213ac:	78fa      	ldrb	r2, [r7, #3]
 80213ae:	0151      	lsls	r1, r2, #5
 80213b0:	693a      	ldr	r2, [r7, #16]
 80213b2:	440a      	add	r2, r1
 80213b4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80213b8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80213bc:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 80213be:	78fa      	ldrb	r2, [r7, #3]
 80213c0:	6879      	ldr	r1, [r7, #4]
 80213c2:	4613      	mov	r3, r2
 80213c4:	011b      	lsls	r3, r3, #4
 80213c6:	1a9b      	subs	r3, r3, r2
 80213c8:	009b      	lsls	r3, r3, #2
 80213ca:	440b      	add	r3, r1
 80213cc:	334c      	adds	r3, #76	@ 0x4c
 80213ce:	2204      	movs	r2, #4
 80213d0:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80213d2:	e229      	b.n	8021828 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80213d4:	78fa      	ldrb	r2, [r7, #3]
 80213d6:	6879      	ldr	r1, [r7, #4]
 80213d8:	4613      	mov	r3, r2
 80213da:	011b      	lsls	r3, r3, #4
 80213dc:	1a9b      	subs	r3, r3, r2
 80213de:	009b      	lsls	r3, r3, #2
 80213e0:	440b      	add	r3, r1
 80213e2:	334c      	adds	r3, #76	@ 0x4c
 80213e4:	2202      	movs	r2, #2
 80213e6:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80213e8:	78fa      	ldrb	r2, [r7, #3]
 80213ea:	6879      	ldr	r1, [r7, #4]
 80213ec:	4613      	mov	r3, r2
 80213ee:	011b      	lsls	r3, r3, #4
 80213f0:	1a9b      	subs	r3, r3, r2
 80213f2:	009b      	lsls	r3, r3, #2
 80213f4:	440b      	add	r3, r1
 80213f6:	3326      	adds	r3, #38	@ 0x26
 80213f8:	781b      	ldrb	r3, [r3, #0]
 80213fa:	2b00      	cmp	r3, #0
 80213fc:	d00b      	beq.n	8021416 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80213fe:	78fa      	ldrb	r2, [r7, #3]
 8021400:	6879      	ldr	r1, [r7, #4]
 8021402:	4613      	mov	r3, r2
 8021404:	011b      	lsls	r3, r3, #4
 8021406:	1a9b      	subs	r3, r3, r2
 8021408:	009b      	lsls	r3, r3, #2
 802140a:	440b      	add	r3, r1
 802140c:	3326      	adds	r3, #38	@ 0x26
 802140e:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8021410:	2b02      	cmp	r3, #2
 8021412:	f040 8209 	bne.w	8021828 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8021416:	78fb      	ldrb	r3, [r7, #3]
 8021418:	015a      	lsls	r2, r3, #5
 802141a:	693b      	ldr	r3, [r7, #16]
 802141c:	4413      	add	r3, r2
 802141e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8021422:	681b      	ldr	r3, [r3, #0]
 8021424:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8021426:	68fb      	ldr	r3, [r7, #12]
 8021428:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 802142c:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 802142e:	68fb      	ldr	r3, [r7, #12]
 8021430:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8021434:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8021436:	78fb      	ldrb	r3, [r7, #3]
 8021438:	015a      	lsls	r2, r3, #5
 802143a:	693b      	ldr	r3, [r7, #16]
 802143c:	4413      	add	r3, r2
 802143e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8021442:	461a      	mov	r2, r3
 8021444:	68fb      	ldr	r3, [r7, #12]
 8021446:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8021448:	e1ee      	b.n	8021828 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 802144a:	78fa      	ldrb	r2, [r7, #3]
 802144c:	6879      	ldr	r1, [r7, #4]
 802144e:	4613      	mov	r3, r2
 8021450:	011b      	lsls	r3, r3, #4
 8021452:	1a9b      	subs	r3, r3, r2
 8021454:	009b      	lsls	r3, r3, #2
 8021456:	440b      	add	r3, r1
 8021458:	334d      	adds	r3, #77	@ 0x4d
 802145a:	781b      	ldrb	r3, [r3, #0]
 802145c:	2b05      	cmp	r3, #5
 802145e:	f040 80c8 	bne.w	80215f2 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8021462:	78fa      	ldrb	r2, [r7, #3]
 8021464:	6879      	ldr	r1, [r7, #4]
 8021466:	4613      	mov	r3, r2
 8021468:	011b      	lsls	r3, r3, #4
 802146a:	1a9b      	subs	r3, r3, r2
 802146c:	009b      	lsls	r3, r3, #2
 802146e:	440b      	add	r3, r1
 8021470:	334d      	adds	r3, #77	@ 0x4d
 8021472:	2202      	movs	r2, #2
 8021474:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8021476:	78fa      	ldrb	r2, [r7, #3]
 8021478:	6879      	ldr	r1, [r7, #4]
 802147a:	4613      	mov	r3, r2
 802147c:	011b      	lsls	r3, r3, #4
 802147e:	1a9b      	subs	r3, r3, r2
 8021480:	009b      	lsls	r3, r3, #2
 8021482:	440b      	add	r3, r1
 8021484:	331b      	adds	r3, #27
 8021486:	781b      	ldrb	r3, [r3, #0]
 8021488:	2b01      	cmp	r3, #1
 802148a:	f040 81ce 	bne.w	802182a <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 802148e:	78fa      	ldrb	r2, [r7, #3]
 8021490:	6879      	ldr	r1, [r7, #4]
 8021492:	4613      	mov	r3, r2
 8021494:	011b      	lsls	r3, r3, #4
 8021496:	1a9b      	subs	r3, r3, r2
 8021498:	009b      	lsls	r3, r3, #2
 802149a:	440b      	add	r3, r1
 802149c:	3326      	adds	r3, #38	@ 0x26
 802149e:	781b      	ldrb	r3, [r3, #0]
 80214a0:	2b03      	cmp	r3, #3
 80214a2:	d16b      	bne.n	802157c <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 80214a4:	78fa      	ldrb	r2, [r7, #3]
 80214a6:	6879      	ldr	r1, [r7, #4]
 80214a8:	4613      	mov	r3, r2
 80214aa:	011b      	lsls	r3, r3, #4
 80214ac:	1a9b      	subs	r3, r3, r2
 80214ae:	009b      	lsls	r3, r3, #2
 80214b0:	440b      	add	r3, r1
 80214b2:	3348      	adds	r3, #72	@ 0x48
 80214b4:	681b      	ldr	r3, [r3, #0]
 80214b6:	1c59      	adds	r1, r3, #1
 80214b8:	6878      	ldr	r0, [r7, #4]
 80214ba:	4613      	mov	r3, r2
 80214bc:	011b      	lsls	r3, r3, #4
 80214be:	1a9b      	subs	r3, r3, r2
 80214c0:	009b      	lsls	r3, r3, #2
 80214c2:	4403      	add	r3, r0
 80214c4:	3348      	adds	r3, #72	@ 0x48
 80214c6:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 80214c8:	78fa      	ldrb	r2, [r7, #3]
 80214ca:	6879      	ldr	r1, [r7, #4]
 80214cc:	4613      	mov	r3, r2
 80214ce:	011b      	lsls	r3, r3, #4
 80214d0:	1a9b      	subs	r3, r3, r2
 80214d2:	009b      	lsls	r3, r3, #2
 80214d4:	440b      	add	r3, r1
 80214d6:	3348      	adds	r3, #72	@ 0x48
 80214d8:	681b      	ldr	r3, [r3, #0]
 80214da:	2b02      	cmp	r3, #2
 80214dc:	d943      	bls.n	8021566 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 80214de:	78fa      	ldrb	r2, [r7, #3]
 80214e0:	6879      	ldr	r1, [r7, #4]
 80214e2:	4613      	mov	r3, r2
 80214e4:	011b      	lsls	r3, r3, #4
 80214e6:	1a9b      	subs	r3, r3, r2
 80214e8:	009b      	lsls	r3, r3, #2
 80214ea:	440b      	add	r3, r1
 80214ec:	3348      	adds	r3, #72	@ 0x48
 80214ee:	2200      	movs	r2, #0
 80214f0:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 80214f2:	78fa      	ldrb	r2, [r7, #3]
 80214f4:	6879      	ldr	r1, [r7, #4]
 80214f6:	4613      	mov	r3, r2
 80214f8:	011b      	lsls	r3, r3, #4
 80214fa:	1a9b      	subs	r3, r3, r2
 80214fc:	009b      	lsls	r3, r3, #2
 80214fe:	440b      	add	r3, r1
 8021500:	331b      	adds	r3, #27
 8021502:	2200      	movs	r2, #0
 8021504:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8021506:	78fa      	ldrb	r2, [r7, #3]
 8021508:	6879      	ldr	r1, [r7, #4]
 802150a:	4613      	mov	r3, r2
 802150c:	011b      	lsls	r3, r3, #4
 802150e:	1a9b      	subs	r3, r3, r2
 8021510:	009b      	lsls	r3, r3, #2
 8021512:	440b      	add	r3, r1
 8021514:	3344      	adds	r3, #68	@ 0x44
 8021516:	681b      	ldr	r3, [r3, #0]
 8021518:	2b02      	cmp	r3, #2
 802151a:	d809      	bhi.n	8021530 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 802151c:	78fa      	ldrb	r2, [r7, #3]
 802151e:	6879      	ldr	r1, [r7, #4]
 8021520:	4613      	mov	r3, r2
 8021522:	011b      	lsls	r3, r3, #4
 8021524:	1a9b      	subs	r3, r3, r2
 8021526:	009b      	lsls	r3, r3, #2
 8021528:	440b      	add	r3, r1
 802152a:	331c      	adds	r3, #28
 802152c:	2201      	movs	r2, #1
 802152e:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8021530:	78fb      	ldrb	r3, [r7, #3]
 8021532:	015a      	lsls	r2, r3, #5
 8021534:	693b      	ldr	r3, [r7, #16]
 8021536:	4413      	add	r3, r2
 8021538:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 802153c:	685b      	ldr	r3, [r3, #4]
 802153e:	78fa      	ldrb	r2, [r7, #3]
 8021540:	0151      	lsls	r1, r2, #5
 8021542:	693a      	ldr	r2, [r7, #16]
 8021544:	440a      	add	r2, r1
 8021546:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 802154a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 802154e:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8021550:	78fa      	ldrb	r2, [r7, #3]
 8021552:	6879      	ldr	r1, [r7, #4]
 8021554:	4613      	mov	r3, r2
 8021556:	011b      	lsls	r3, r3, #4
 8021558:	1a9b      	subs	r3, r3, r2
 802155a:	009b      	lsls	r3, r3, #2
 802155c:	440b      	add	r3, r1
 802155e:	334c      	adds	r3, #76	@ 0x4c
 8021560:	2204      	movs	r2, #4
 8021562:	701a      	strb	r2, [r3, #0]
 8021564:	e014      	b.n	8021590 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8021566:	78fa      	ldrb	r2, [r7, #3]
 8021568:	6879      	ldr	r1, [r7, #4]
 802156a:	4613      	mov	r3, r2
 802156c:	011b      	lsls	r3, r3, #4
 802156e:	1a9b      	subs	r3, r3, r2
 8021570:	009b      	lsls	r3, r3, #2
 8021572:	440b      	add	r3, r1
 8021574:	334c      	adds	r3, #76	@ 0x4c
 8021576:	2202      	movs	r2, #2
 8021578:	701a      	strb	r2, [r3, #0]
 802157a:	e009      	b.n	8021590 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 802157c:	78fa      	ldrb	r2, [r7, #3]
 802157e:	6879      	ldr	r1, [r7, #4]
 8021580:	4613      	mov	r3, r2
 8021582:	011b      	lsls	r3, r3, #4
 8021584:	1a9b      	subs	r3, r3, r2
 8021586:	009b      	lsls	r3, r3, #2
 8021588:	440b      	add	r3, r1
 802158a:	334c      	adds	r3, #76	@ 0x4c
 802158c:	2202      	movs	r2, #2
 802158e:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8021590:	78fa      	ldrb	r2, [r7, #3]
 8021592:	6879      	ldr	r1, [r7, #4]
 8021594:	4613      	mov	r3, r2
 8021596:	011b      	lsls	r3, r3, #4
 8021598:	1a9b      	subs	r3, r3, r2
 802159a:	009b      	lsls	r3, r3, #2
 802159c:	440b      	add	r3, r1
 802159e:	3326      	adds	r3, #38	@ 0x26
 80215a0:	781b      	ldrb	r3, [r3, #0]
 80215a2:	2b00      	cmp	r3, #0
 80215a4:	d00b      	beq.n	80215be <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80215a6:	78fa      	ldrb	r2, [r7, #3]
 80215a8:	6879      	ldr	r1, [r7, #4]
 80215aa:	4613      	mov	r3, r2
 80215ac:	011b      	lsls	r3, r3, #4
 80215ae:	1a9b      	subs	r3, r3, r2
 80215b0:	009b      	lsls	r3, r3, #2
 80215b2:	440b      	add	r3, r1
 80215b4:	3326      	adds	r3, #38	@ 0x26
 80215b6:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80215b8:	2b02      	cmp	r3, #2
 80215ba:	f040 8136 	bne.w	802182a <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80215be:	78fb      	ldrb	r3, [r7, #3]
 80215c0:	015a      	lsls	r2, r3, #5
 80215c2:	693b      	ldr	r3, [r7, #16]
 80215c4:	4413      	add	r3, r2
 80215c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80215ca:	681b      	ldr	r3, [r3, #0]
 80215cc:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80215ce:	68fb      	ldr	r3, [r7, #12]
 80215d0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80215d4:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80215d6:	68fb      	ldr	r3, [r7, #12]
 80215d8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80215dc:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80215de:	78fb      	ldrb	r3, [r7, #3]
 80215e0:	015a      	lsls	r2, r3, #5
 80215e2:	693b      	ldr	r3, [r7, #16]
 80215e4:	4413      	add	r3, r2
 80215e6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80215ea:	461a      	mov	r2, r3
 80215ec:	68fb      	ldr	r3, [r7, #12]
 80215ee:	6013      	str	r3, [r2, #0]
 80215f0:	e11b      	b.n	802182a <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80215f2:	78fa      	ldrb	r2, [r7, #3]
 80215f4:	6879      	ldr	r1, [r7, #4]
 80215f6:	4613      	mov	r3, r2
 80215f8:	011b      	lsls	r3, r3, #4
 80215fa:	1a9b      	subs	r3, r3, r2
 80215fc:	009b      	lsls	r3, r3, #2
 80215fe:	440b      	add	r3, r1
 8021600:	334d      	adds	r3, #77	@ 0x4d
 8021602:	781b      	ldrb	r3, [r3, #0]
 8021604:	2b03      	cmp	r3, #3
 8021606:	f040 8081 	bne.w	802170c <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 802160a:	78fa      	ldrb	r2, [r7, #3]
 802160c:	6879      	ldr	r1, [r7, #4]
 802160e:	4613      	mov	r3, r2
 8021610:	011b      	lsls	r3, r3, #4
 8021612:	1a9b      	subs	r3, r3, r2
 8021614:	009b      	lsls	r3, r3, #2
 8021616:	440b      	add	r3, r1
 8021618:	334d      	adds	r3, #77	@ 0x4d
 802161a:	2202      	movs	r2, #2
 802161c:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 802161e:	78fa      	ldrb	r2, [r7, #3]
 8021620:	6879      	ldr	r1, [r7, #4]
 8021622:	4613      	mov	r3, r2
 8021624:	011b      	lsls	r3, r3, #4
 8021626:	1a9b      	subs	r3, r3, r2
 8021628:	009b      	lsls	r3, r3, #2
 802162a:	440b      	add	r3, r1
 802162c:	331b      	adds	r3, #27
 802162e:	781b      	ldrb	r3, [r3, #0]
 8021630:	2b01      	cmp	r3, #1
 8021632:	f040 80fa 	bne.w	802182a <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8021636:	78fa      	ldrb	r2, [r7, #3]
 8021638:	6879      	ldr	r1, [r7, #4]
 802163a:	4613      	mov	r3, r2
 802163c:	011b      	lsls	r3, r3, #4
 802163e:	1a9b      	subs	r3, r3, r2
 8021640:	009b      	lsls	r3, r3, #2
 8021642:	440b      	add	r3, r1
 8021644:	334c      	adds	r3, #76	@ 0x4c
 8021646:	2202      	movs	r2, #2
 8021648:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 802164a:	78fb      	ldrb	r3, [r7, #3]
 802164c:	015a      	lsls	r2, r3, #5
 802164e:	693b      	ldr	r3, [r7, #16]
 8021650:	4413      	add	r3, r2
 8021652:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8021656:	685b      	ldr	r3, [r3, #4]
 8021658:	78fa      	ldrb	r2, [r7, #3]
 802165a:	0151      	lsls	r1, r2, #5
 802165c:	693a      	ldr	r2, [r7, #16]
 802165e:	440a      	add	r2, r1
 8021660:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8021664:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8021668:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 802166a:	78fb      	ldrb	r3, [r7, #3]
 802166c:	015a      	lsls	r2, r3, #5
 802166e:	693b      	ldr	r3, [r7, #16]
 8021670:	4413      	add	r3, r2
 8021672:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8021676:	68db      	ldr	r3, [r3, #12]
 8021678:	78fa      	ldrb	r2, [r7, #3]
 802167a:	0151      	lsls	r1, r2, #5
 802167c:	693a      	ldr	r2, [r7, #16]
 802167e:	440a      	add	r2, r1
 8021680:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8021684:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8021688:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 802168a:	78fb      	ldrb	r3, [r7, #3]
 802168c:	015a      	lsls	r2, r3, #5
 802168e:	693b      	ldr	r3, [r7, #16]
 8021690:	4413      	add	r3, r2
 8021692:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8021696:	68db      	ldr	r3, [r3, #12]
 8021698:	78fa      	ldrb	r2, [r7, #3]
 802169a:	0151      	lsls	r1, r2, #5
 802169c:	693a      	ldr	r2, [r7, #16]
 802169e:	440a      	add	r2, r1
 80216a0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80216a4:	f023 0320 	bic.w	r3, r3, #32
 80216a8:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80216aa:	78fa      	ldrb	r2, [r7, #3]
 80216ac:	6879      	ldr	r1, [r7, #4]
 80216ae:	4613      	mov	r3, r2
 80216b0:	011b      	lsls	r3, r3, #4
 80216b2:	1a9b      	subs	r3, r3, r2
 80216b4:	009b      	lsls	r3, r3, #2
 80216b6:	440b      	add	r3, r1
 80216b8:	3326      	adds	r3, #38	@ 0x26
 80216ba:	781b      	ldrb	r3, [r3, #0]
 80216bc:	2b00      	cmp	r3, #0
 80216be:	d00b      	beq.n	80216d8 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80216c0:	78fa      	ldrb	r2, [r7, #3]
 80216c2:	6879      	ldr	r1, [r7, #4]
 80216c4:	4613      	mov	r3, r2
 80216c6:	011b      	lsls	r3, r3, #4
 80216c8:	1a9b      	subs	r3, r3, r2
 80216ca:	009b      	lsls	r3, r3, #2
 80216cc:	440b      	add	r3, r1
 80216ce:	3326      	adds	r3, #38	@ 0x26
 80216d0:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80216d2:	2b02      	cmp	r3, #2
 80216d4:	f040 80a9 	bne.w	802182a <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80216d8:	78fb      	ldrb	r3, [r7, #3]
 80216da:	015a      	lsls	r2, r3, #5
 80216dc:	693b      	ldr	r3, [r7, #16]
 80216de:	4413      	add	r3, r2
 80216e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80216e4:	681b      	ldr	r3, [r3, #0]
 80216e6:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80216e8:	68fb      	ldr	r3, [r7, #12]
 80216ea:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80216ee:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80216f0:	68fb      	ldr	r3, [r7, #12]
 80216f2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80216f6:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80216f8:	78fb      	ldrb	r3, [r7, #3]
 80216fa:	015a      	lsls	r2, r3, #5
 80216fc:	693b      	ldr	r3, [r7, #16]
 80216fe:	4413      	add	r3, r2
 8021700:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8021704:	461a      	mov	r2, r3
 8021706:	68fb      	ldr	r3, [r7, #12]
 8021708:	6013      	str	r3, [r2, #0]
 802170a:	e08e      	b.n	802182a <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 802170c:	78fa      	ldrb	r2, [r7, #3]
 802170e:	6879      	ldr	r1, [r7, #4]
 8021710:	4613      	mov	r3, r2
 8021712:	011b      	lsls	r3, r3, #4
 8021714:	1a9b      	subs	r3, r3, r2
 8021716:	009b      	lsls	r3, r3, #2
 8021718:	440b      	add	r3, r1
 802171a:	334d      	adds	r3, #77	@ 0x4d
 802171c:	781b      	ldrb	r3, [r3, #0]
 802171e:	2b04      	cmp	r3, #4
 8021720:	d143      	bne.n	80217aa <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8021722:	78fa      	ldrb	r2, [r7, #3]
 8021724:	6879      	ldr	r1, [r7, #4]
 8021726:	4613      	mov	r3, r2
 8021728:	011b      	lsls	r3, r3, #4
 802172a:	1a9b      	subs	r3, r3, r2
 802172c:	009b      	lsls	r3, r3, #2
 802172e:	440b      	add	r3, r1
 8021730:	334d      	adds	r3, #77	@ 0x4d
 8021732:	2202      	movs	r2, #2
 8021734:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8021736:	78fa      	ldrb	r2, [r7, #3]
 8021738:	6879      	ldr	r1, [r7, #4]
 802173a:	4613      	mov	r3, r2
 802173c:	011b      	lsls	r3, r3, #4
 802173e:	1a9b      	subs	r3, r3, r2
 8021740:	009b      	lsls	r3, r3, #2
 8021742:	440b      	add	r3, r1
 8021744:	334c      	adds	r3, #76	@ 0x4c
 8021746:	2202      	movs	r2, #2
 8021748:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 802174a:	78fa      	ldrb	r2, [r7, #3]
 802174c:	6879      	ldr	r1, [r7, #4]
 802174e:	4613      	mov	r3, r2
 8021750:	011b      	lsls	r3, r3, #4
 8021752:	1a9b      	subs	r3, r3, r2
 8021754:	009b      	lsls	r3, r3, #2
 8021756:	440b      	add	r3, r1
 8021758:	3326      	adds	r3, #38	@ 0x26
 802175a:	781b      	ldrb	r3, [r3, #0]
 802175c:	2b00      	cmp	r3, #0
 802175e:	d00a      	beq.n	8021776 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8021760:	78fa      	ldrb	r2, [r7, #3]
 8021762:	6879      	ldr	r1, [r7, #4]
 8021764:	4613      	mov	r3, r2
 8021766:	011b      	lsls	r3, r3, #4
 8021768:	1a9b      	subs	r3, r3, r2
 802176a:	009b      	lsls	r3, r3, #2
 802176c:	440b      	add	r3, r1
 802176e:	3326      	adds	r3, #38	@ 0x26
 8021770:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8021772:	2b02      	cmp	r3, #2
 8021774:	d159      	bne.n	802182a <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8021776:	78fb      	ldrb	r3, [r7, #3]
 8021778:	015a      	lsls	r2, r3, #5
 802177a:	693b      	ldr	r3, [r7, #16]
 802177c:	4413      	add	r3, r2
 802177e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8021782:	681b      	ldr	r3, [r3, #0]
 8021784:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8021786:	68fb      	ldr	r3, [r7, #12]
 8021788:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 802178c:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 802178e:	68fb      	ldr	r3, [r7, #12]
 8021790:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8021794:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8021796:	78fb      	ldrb	r3, [r7, #3]
 8021798:	015a      	lsls	r2, r3, #5
 802179a:	693b      	ldr	r3, [r7, #16]
 802179c:	4413      	add	r3, r2
 802179e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80217a2:	461a      	mov	r2, r3
 80217a4:	68fb      	ldr	r3, [r7, #12]
 80217a6:	6013      	str	r3, [r2, #0]
 80217a8:	e03f      	b.n	802182a <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 80217aa:	78fa      	ldrb	r2, [r7, #3]
 80217ac:	6879      	ldr	r1, [r7, #4]
 80217ae:	4613      	mov	r3, r2
 80217b0:	011b      	lsls	r3, r3, #4
 80217b2:	1a9b      	subs	r3, r3, r2
 80217b4:	009b      	lsls	r3, r3, #2
 80217b6:	440b      	add	r3, r1
 80217b8:	334d      	adds	r3, #77	@ 0x4d
 80217ba:	781b      	ldrb	r3, [r3, #0]
 80217bc:	2b08      	cmp	r3, #8
 80217be:	d126      	bne.n	802180e <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80217c0:	78fa      	ldrb	r2, [r7, #3]
 80217c2:	6879      	ldr	r1, [r7, #4]
 80217c4:	4613      	mov	r3, r2
 80217c6:	011b      	lsls	r3, r3, #4
 80217c8:	1a9b      	subs	r3, r3, r2
 80217ca:	009b      	lsls	r3, r3, #2
 80217cc:	440b      	add	r3, r1
 80217ce:	334d      	adds	r3, #77	@ 0x4d
 80217d0:	2202      	movs	r2, #2
 80217d2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80217d4:	78fa      	ldrb	r2, [r7, #3]
 80217d6:	6879      	ldr	r1, [r7, #4]
 80217d8:	4613      	mov	r3, r2
 80217da:	011b      	lsls	r3, r3, #4
 80217dc:	1a9b      	subs	r3, r3, r2
 80217de:	009b      	lsls	r3, r3, #2
 80217e0:	440b      	add	r3, r1
 80217e2:	3344      	adds	r3, #68	@ 0x44
 80217e4:	681b      	ldr	r3, [r3, #0]
 80217e6:	1c59      	adds	r1, r3, #1
 80217e8:	6878      	ldr	r0, [r7, #4]
 80217ea:	4613      	mov	r3, r2
 80217ec:	011b      	lsls	r3, r3, #4
 80217ee:	1a9b      	subs	r3, r3, r2
 80217f0:	009b      	lsls	r3, r3, #2
 80217f2:	4403      	add	r3, r0
 80217f4:	3344      	adds	r3, #68	@ 0x44
 80217f6:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 80217f8:	78fa      	ldrb	r2, [r7, #3]
 80217fa:	6879      	ldr	r1, [r7, #4]
 80217fc:	4613      	mov	r3, r2
 80217fe:	011b      	lsls	r3, r3, #4
 8021800:	1a9b      	subs	r3, r3, r2
 8021802:	009b      	lsls	r3, r3, #2
 8021804:	440b      	add	r3, r1
 8021806:	334c      	adds	r3, #76	@ 0x4c
 8021808:	2204      	movs	r2, #4
 802180a:	701a      	strb	r2, [r3, #0]
 802180c:	e00d      	b.n	802182a <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 802180e:	78fa      	ldrb	r2, [r7, #3]
 8021810:	6879      	ldr	r1, [r7, #4]
 8021812:	4613      	mov	r3, r2
 8021814:	011b      	lsls	r3, r3, #4
 8021816:	1a9b      	subs	r3, r3, r2
 8021818:	009b      	lsls	r3, r3, #2
 802181a:	440b      	add	r3, r1
 802181c:	334d      	adds	r3, #77	@ 0x4d
 802181e:	781b      	ldrb	r3, [r3, #0]
 8021820:	2b02      	cmp	r3, #2
 8021822:	f000 8100 	beq.w	8021a26 <HCD_HC_IN_IRQHandler+0xcca>
 8021826:	e000      	b.n	802182a <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8021828:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 802182a:	78fa      	ldrb	r2, [r7, #3]
 802182c:	6879      	ldr	r1, [r7, #4]
 802182e:	4613      	mov	r3, r2
 8021830:	011b      	lsls	r3, r3, #4
 8021832:	1a9b      	subs	r3, r3, r2
 8021834:	009b      	lsls	r3, r3, #2
 8021836:	440b      	add	r3, r1
 8021838:	334c      	adds	r3, #76	@ 0x4c
 802183a:	781a      	ldrb	r2, [r3, #0]
 802183c:	78fb      	ldrb	r3, [r7, #3]
 802183e:	4619      	mov	r1, r3
 8021840:	6878      	ldr	r0, [r7, #4]
 8021842:	f001 faea 	bl	8022e1a <HAL_HCD_HC_NotifyURBChange_Callback>
 8021846:	e0ef      	b.n	8021a28 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8021848:	687b      	ldr	r3, [r7, #4]
 802184a:	681b      	ldr	r3, [r3, #0]
 802184c:	78fa      	ldrb	r2, [r7, #3]
 802184e:	4611      	mov	r1, r2
 8021850:	4618      	mov	r0, r3
 8021852:	f000 ffea 	bl	802282a <USB_ReadChInterrupts>
 8021856:	4603      	mov	r3, r0
 8021858:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 802185c:	2b40      	cmp	r3, #64	@ 0x40
 802185e:	d12f      	bne.n	80218c0 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8021860:	78fb      	ldrb	r3, [r7, #3]
 8021862:	015a      	lsls	r2, r3, #5
 8021864:	693b      	ldr	r3, [r7, #16]
 8021866:	4413      	add	r3, r2
 8021868:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 802186c:	461a      	mov	r2, r3
 802186e:	2340      	movs	r3, #64	@ 0x40
 8021870:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8021872:	78fa      	ldrb	r2, [r7, #3]
 8021874:	6879      	ldr	r1, [r7, #4]
 8021876:	4613      	mov	r3, r2
 8021878:	011b      	lsls	r3, r3, #4
 802187a:	1a9b      	subs	r3, r3, r2
 802187c:	009b      	lsls	r3, r3, #2
 802187e:	440b      	add	r3, r1
 8021880:	334d      	adds	r3, #77	@ 0x4d
 8021882:	2205      	movs	r2, #5
 8021884:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8021886:	78fa      	ldrb	r2, [r7, #3]
 8021888:	6879      	ldr	r1, [r7, #4]
 802188a:	4613      	mov	r3, r2
 802188c:	011b      	lsls	r3, r3, #4
 802188e:	1a9b      	subs	r3, r3, r2
 8021890:	009b      	lsls	r3, r3, #2
 8021892:	440b      	add	r3, r1
 8021894:	331a      	adds	r3, #26
 8021896:	781b      	ldrb	r3, [r3, #0]
 8021898:	2b00      	cmp	r3, #0
 802189a:	d109      	bne.n	80218b0 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 802189c:	78fa      	ldrb	r2, [r7, #3]
 802189e:	6879      	ldr	r1, [r7, #4]
 80218a0:	4613      	mov	r3, r2
 80218a2:	011b      	lsls	r3, r3, #4
 80218a4:	1a9b      	subs	r3, r3, r2
 80218a6:	009b      	lsls	r3, r3, #2
 80218a8:	440b      	add	r3, r1
 80218aa:	3344      	adds	r3, #68	@ 0x44
 80218ac:	2200      	movs	r2, #0
 80218ae:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80218b0:	687b      	ldr	r3, [r7, #4]
 80218b2:	681b      	ldr	r3, [r3, #0]
 80218b4:	78fa      	ldrb	r2, [r7, #3]
 80218b6:	4611      	mov	r1, r2
 80218b8:	4618      	mov	r0, r3
 80218ba:	f001 f833 	bl	8022924 <USB_HC_Halt>
 80218be:	e0b3      	b.n	8021a28 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80218c0:	687b      	ldr	r3, [r7, #4]
 80218c2:	681b      	ldr	r3, [r3, #0]
 80218c4:	78fa      	ldrb	r2, [r7, #3]
 80218c6:	4611      	mov	r1, r2
 80218c8:	4618      	mov	r0, r3
 80218ca:	f000 ffae 	bl	802282a <USB_ReadChInterrupts>
 80218ce:	4603      	mov	r3, r0
 80218d0:	f003 0310 	and.w	r3, r3, #16
 80218d4:	2b10      	cmp	r3, #16
 80218d6:	f040 80a7 	bne.w	8021a28 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80218da:	78fa      	ldrb	r2, [r7, #3]
 80218dc:	6879      	ldr	r1, [r7, #4]
 80218de:	4613      	mov	r3, r2
 80218e0:	011b      	lsls	r3, r3, #4
 80218e2:	1a9b      	subs	r3, r3, r2
 80218e4:	009b      	lsls	r3, r3, #2
 80218e6:	440b      	add	r3, r1
 80218e8:	3326      	adds	r3, #38	@ 0x26
 80218ea:	781b      	ldrb	r3, [r3, #0]
 80218ec:	2b03      	cmp	r3, #3
 80218ee:	d11b      	bne.n	8021928 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80218f0:	78fa      	ldrb	r2, [r7, #3]
 80218f2:	6879      	ldr	r1, [r7, #4]
 80218f4:	4613      	mov	r3, r2
 80218f6:	011b      	lsls	r3, r3, #4
 80218f8:	1a9b      	subs	r3, r3, r2
 80218fa:	009b      	lsls	r3, r3, #2
 80218fc:	440b      	add	r3, r1
 80218fe:	3344      	adds	r3, #68	@ 0x44
 8021900:	2200      	movs	r2, #0
 8021902:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8021904:	78fa      	ldrb	r2, [r7, #3]
 8021906:	6879      	ldr	r1, [r7, #4]
 8021908:	4613      	mov	r3, r2
 802190a:	011b      	lsls	r3, r3, #4
 802190c:	1a9b      	subs	r3, r3, r2
 802190e:	009b      	lsls	r3, r3, #2
 8021910:	440b      	add	r3, r1
 8021912:	334d      	adds	r3, #77	@ 0x4d
 8021914:	2204      	movs	r2, #4
 8021916:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8021918:	687b      	ldr	r3, [r7, #4]
 802191a:	681b      	ldr	r3, [r3, #0]
 802191c:	78fa      	ldrb	r2, [r7, #3]
 802191e:	4611      	mov	r1, r2
 8021920:	4618      	mov	r0, r3
 8021922:	f000 ffff 	bl	8022924 <USB_HC_Halt>
 8021926:	e03f      	b.n	80219a8 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8021928:	78fa      	ldrb	r2, [r7, #3]
 802192a:	6879      	ldr	r1, [r7, #4]
 802192c:	4613      	mov	r3, r2
 802192e:	011b      	lsls	r3, r3, #4
 8021930:	1a9b      	subs	r3, r3, r2
 8021932:	009b      	lsls	r3, r3, #2
 8021934:	440b      	add	r3, r1
 8021936:	3326      	adds	r3, #38	@ 0x26
 8021938:	781b      	ldrb	r3, [r3, #0]
 802193a:	2b00      	cmp	r3, #0
 802193c:	d00a      	beq.n	8021954 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 802193e:	78fa      	ldrb	r2, [r7, #3]
 8021940:	6879      	ldr	r1, [r7, #4]
 8021942:	4613      	mov	r3, r2
 8021944:	011b      	lsls	r3, r3, #4
 8021946:	1a9b      	subs	r3, r3, r2
 8021948:	009b      	lsls	r3, r3, #2
 802194a:	440b      	add	r3, r1
 802194c:	3326      	adds	r3, #38	@ 0x26
 802194e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8021950:	2b02      	cmp	r3, #2
 8021952:	d129      	bne.n	80219a8 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8021954:	78fa      	ldrb	r2, [r7, #3]
 8021956:	6879      	ldr	r1, [r7, #4]
 8021958:	4613      	mov	r3, r2
 802195a:	011b      	lsls	r3, r3, #4
 802195c:	1a9b      	subs	r3, r3, r2
 802195e:	009b      	lsls	r3, r3, #2
 8021960:	440b      	add	r3, r1
 8021962:	3344      	adds	r3, #68	@ 0x44
 8021964:	2200      	movs	r2, #0
 8021966:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8021968:	687b      	ldr	r3, [r7, #4]
 802196a:	799b      	ldrb	r3, [r3, #6]
 802196c:	2b00      	cmp	r3, #0
 802196e:	d00a      	beq.n	8021986 <HCD_HC_IN_IRQHandler+0xc2a>
 8021970:	78fa      	ldrb	r2, [r7, #3]
 8021972:	6879      	ldr	r1, [r7, #4]
 8021974:	4613      	mov	r3, r2
 8021976:	011b      	lsls	r3, r3, #4
 8021978:	1a9b      	subs	r3, r3, r2
 802197a:	009b      	lsls	r3, r3, #2
 802197c:	440b      	add	r3, r1
 802197e:	331b      	adds	r3, #27
 8021980:	781b      	ldrb	r3, [r3, #0]
 8021982:	2b01      	cmp	r3, #1
 8021984:	d110      	bne.n	80219a8 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8021986:	78fa      	ldrb	r2, [r7, #3]
 8021988:	6879      	ldr	r1, [r7, #4]
 802198a:	4613      	mov	r3, r2
 802198c:	011b      	lsls	r3, r3, #4
 802198e:	1a9b      	subs	r3, r3, r2
 8021990:	009b      	lsls	r3, r3, #2
 8021992:	440b      	add	r3, r1
 8021994:	334d      	adds	r3, #77	@ 0x4d
 8021996:	2204      	movs	r2, #4
 8021998:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 802199a:	687b      	ldr	r3, [r7, #4]
 802199c:	681b      	ldr	r3, [r3, #0]
 802199e:	78fa      	ldrb	r2, [r7, #3]
 80219a0:	4611      	mov	r1, r2
 80219a2:	4618      	mov	r0, r3
 80219a4:	f000 ffbe 	bl	8022924 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 80219a8:	78fa      	ldrb	r2, [r7, #3]
 80219aa:	6879      	ldr	r1, [r7, #4]
 80219ac:	4613      	mov	r3, r2
 80219ae:	011b      	lsls	r3, r3, #4
 80219b0:	1a9b      	subs	r3, r3, r2
 80219b2:	009b      	lsls	r3, r3, #2
 80219b4:	440b      	add	r3, r1
 80219b6:	331b      	adds	r3, #27
 80219b8:	781b      	ldrb	r3, [r3, #0]
 80219ba:	2b01      	cmp	r3, #1
 80219bc:	d129      	bne.n	8021a12 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80219be:	78fa      	ldrb	r2, [r7, #3]
 80219c0:	6879      	ldr	r1, [r7, #4]
 80219c2:	4613      	mov	r3, r2
 80219c4:	011b      	lsls	r3, r3, #4
 80219c6:	1a9b      	subs	r3, r3, r2
 80219c8:	009b      	lsls	r3, r3, #2
 80219ca:	440b      	add	r3, r1
 80219cc:	331b      	adds	r3, #27
 80219ce:	2200      	movs	r2, #0
 80219d0:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80219d2:	78fb      	ldrb	r3, [r7, #3]
 80219d4:	015a      	lsls	r2, r3, #5
 80219d6:	693b      	ldr	r3, [r7, #16]
 80219d8:	4413      	add	r3, r2
 80219da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80219de:	685b      	ldr	r3, [r3, #4]
 80219e0:	78fa      	ldrb	r2, [r7, #3]
 80219e2:	0151      	lsls	r1, r2, #5
 80219e4:	693a      	ldr	r2, [r7, #16]
 80219e6:	440a      	add	r2, r1
 80219e8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80219ec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80219f0:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 80219f2:	78fb      	ldrb	r3, [r7, #3]
 80219f4:	015a      	lsls	r2, r3, #5
 80219f6:	693b      	ldr	r3, [r7, #16]
 80219f8:	4413      	add	r3, r2
 80219fa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80219fe:	68db      	ldr	r3, [r3, #12]
 8021a00:	78fa      	ldrb	r2, [r7, #3]
 8021a02:	0151      	lsls	r1, r2, #5
 8021a04:	693a      	ldr	r2, [r7, #16]
 8021a06:	440a      	add	r2, r1
 8021a08:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8021a0c:	f043 0320 	orr.w	r3, r3, #32
 8021a10:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8021a12:	78fb      	ldrb	r3, [r7, #3]
 8021a14:	015a      	lsls	r2, r3, #5
 8021a16:	693b      	ldr	r3, [r7, #16]
 8021a18:	4413      	add	r3, r2
 8021a1a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8021a1e:	461a      	mov	r2, r3
 8021a20:	2310      	movs	r3, #16
 8021a22:	6093      	str	r3, [r2, #8]
 8021a24:	e000      	b.n	8021a28 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8021a26:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8021a28:	3718      	adds	r7, #24
 8021a2a:	46bd      	mov	sp, r7
 8021a2c:	bd80      	pop	{r7, pc}

08021a2e <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8021a2e:	b580      	push	{r7, lr}
 8021a30:	b086      	sub	sp, #24
 8021a32:	af00      	add	r7, sp, #0
 8021a34:	6078      	str	r0, [r7, #4]
 8021a36:	460b      	mov	r3, r1
 8021a38:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8021a3a:	687b      	ldr	r3, [r7, #4]
 8021a3c:	681b      	ldr	r3, [r3, #0]
 8021a3e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8021a40:	697b      	ldr	r3, [r7, #20]
 8021a42:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8021a44:	687b      	ldr	r3, [r7, #4]
 8021a46:	681b      	ldr	r3, [r3, #0]
 8021a48:	78fa      	ldrb	r2, [r7, #3]
 8021a4a:	4611      	mov	r1, r2
 8021a4c:	4618      	mov	r0, r3
 8021a4e:	f000 feec 	bl	802282a <USB_ReadChInterrupts>
 8021a52:	4603      	mov	r3, r0
 8021a54:	f003 0304 	and.w	r3, r3, #4
 8021a58:	2b04      	cmp	r3, #4
 8021a5a:	d11b      	bne.n	8021a94 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8021a5c:	78fb      	ldrb	r3, [r7, #3]
 8021a5e:	015a      	lsls	r2, r3, #5
 8021a60:	693b      	ldr	r3, [r7, #16]
 8021a62:	4413      	add	r3, r2
 8021a64:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8021a68:	461a      	mov	r2, r3
 8021a6a:	2304      	movs	r3, #4
 8021a6c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8021a6e:	78fa      	ldrb	r2, [r7, #3]
 8021a70:	6879      	ldr	r1, [r7, #4]
 8021a72:	4613      	mov	r3, r2
 8021a74:	011b      	lsls	r3, r3, #4
 8021a76:	1a9b      	subs	r3, r3, r2
 8021a78:	009b      	lsls	r3, r3, #2
 8021a7a:	440b      	add	r3, r1
 8021a7c:	334d      	adds	r3, #77	@ 0x4d
 8021a7e:	2207      	movs	r2, #7
 8021a80:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8021a82:	687b      	ldr	r3, [r7, #4]
 8021a84:	681b      	ldr	r3, [r3, #0]
 8021a86:	78fa      	ldrb	r2, [r7, #3]
 8021a88:	4611      	mov	r1, r2
 8021a8a:	4618      	mov	r0, r3
 8021a8c:	f000 ff4a 	bl	8022924 <USB_HC_Halt>
 8021a90:	f000 bc89 	b.w	80223a6 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8021a94:	687b      	ldr	r3, [r7, #4]
 8021a96:	681b      	ldr	r3, [r3, #0]
 8021a98:	78fa      	ldrb	r2, [r7, #3]
 8021a9a:	4611      	mov	r1, r2
 8021a9c:	4618      	mov	r0, r3
 8021a9e:	f000 fec4 	bl	802282a <USB_ReadChInterrupts>
 8021aa2:	4603      	mov	r3, r0
 8021aa4:	f003 0320 	and.w	r3, r3, #32
 8021aa8:	2b20      	cmp	r3, #32
 8021aaa:	f040 8082 	bne.w	8021bb2 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8021aae:	78fb      	ldrb	r3, [r7, #3]
 8021ab0:	015a      	lsls	r2, r3, #5
 8021ab2:	693b      	ldr	r3, [r7, #16]
 8021ab4:	4413      	add	r3, r2
 8021ab6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8021aba:	461a      	mov	r2, r3
 8021abc:	2320      	movs	r3, #32
 8021abe:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8021ac0:	78fa      	ldrb	r2, [r7, #3]
 8021ac2:	6879      	ldr	r1, [r7, #4]
 8021ac4:	4613      	mov	r3, r2
 8021ac6:	011b      	lsls	r3, r3, #4
 8021ac8:	1a9b      	subs	r3, r3, r2
 8021aca:	009b      	lsls	r3, r3, #2
 8021acc:	440b      	add	r3, r1
 8021ace:	3319      	adds	r3, #25
 8021ad0:	781b      	ldrb	r3, [r3, #0]
 8021ad2:	2b01      	cmp	r3, #1
 8021ad4:	d124      	bne.n	8021b20 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8021ad6:	78fa      	ldrb	r2, [r7, #3]
 8021ad8:	6879      	ldr	r1, [r7, #4]
 8021ada:	4613      	mov	r3, r2
 8021adc:	011b      	lsls	r3, r3, #4
 8021ade:	1a9b      	subs	r3, r3, r2
 8021ae0:	009b      	lsls	r3, r3, #2
 8021ae2:	440b      	add	r3, r1
 8021ae4:	3319      	adds	r3, #25
 8021ae6:	2200      	movs	r2, #0
 8021ae8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8021aea:	78fa      	ldrb	r2, [r7, #3]
 8021aec:	6879      	ldr	r1, [r7, #4]
 8021aee:	4613      	mov	r3, r2
 8021af0:	011b      	lsls	r3, r3, #4
 8021af2:	1a9b      	subs	r3, r3, r2
 8021af4:	009b      	lsls	r3, r3, #2
 8021af6:	440b      	add	r3, r1
 8021af8:	334c      	adds	r3, #76	@ 0x4c
 8021afa:	2202      	movs	r2, #2
 8021afc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8021afe:	78fa      	ldrb	r2, [r7, #3]
 8021b00:	6879      	ldr	r1, [r7, #4]
 8021b02:	4613      	mov	r3, r2
 8021b04:	011b      	lsls	r3, r3, #4
 8021b06:	1a9b      	subs	r3, r3, r2
 8021b08:	009b      	lsls	r3, r3, #2
 8021b0a:	440b      	add	r3, r1
 8021b0c:	334d      	adds	r3, #77	@ 0x4d
 8021b0e:	2203      	movs	r2, #3
 8021b10:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8021b12:	687b      	ldr	r3, [r7, #4]
 8021b14:	681b      	ldr	r3, [r3, #0]
 8021b16:	78fa      	ldrb	r2, [r7, #3]
 8021b18:	4611      	mov	r1, r2
 8021b1a:	4618      	mov	r0, r3
 8021b1c:	f000 ff02 	bl	8022924 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8021b20:	78fa      	ldrb	r2, [r7, #3]
 8021b22:	6879      	ldr	r1, [r7, #4]
 8021b24:	4613      	mov	r3, r2
 8021b26:	011b      	lsls	r3, r3, #4
 8021b28:	1a9b      	subs	r3, r3, r2
 8021b2a:	009b      	lsls	r3, r3, #2
 8021b2c:	440b      	add	r3, r1
 8021b2e:	331a      	adds	r3, #26
 8021b30:	781b      	ldrb	r3, [r3, #0]
 8021b32:	2b01      	cmp	r3, #1
 8021b34:	f040 8437 	bne.w	80223a6 <HCD_HC_OUT_IRQHandler+0x978>
 8021b38:	78fa      	ldrb	r2, [r7, #3]
 8021b3a:	6879      	ldr	r1, [r7, #4]
 8021b3c:	4613      	mov	r3, r2
 8021b3e:	011b      	lsls	r3, r3, #4
 8021b40:	1a9b      	subs	r3, r3, r2
 8021b42:	009b      	lsls	r3, r3, #2
 8021b44:	440b      	add	r3, r1
 8021b46:	331b      	adds	r3, #27
 8021b48:	781b      	ldrb	r3, [r3, #0]
 8021b4a:	2b00      	cmp	r3, #0
 8021b4c:	f040 842b 	bne.w	80223a6 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8021b50:	78fa      	ldrb	r2, [r7, #3]
 8021b52:	6879      	ldr	r1, [r7, #4]
 8021b54:	4613      	mov	r3, r2
 8021b56:	011b      	lsls	r3, r3, #4
 8021b58:	1a9b      	subs	r3, r3, r2
 8021b5a:	009b      	lsls	r3, r3, #2
 8021b5c:	440b      	add	r3, r1
 8021b5e:	3326      	adds	r3, #38	@ 0x26
 8021b60:	781b      	ldrb	r3, [r3, #0]
 8021b62:	2b01      	cmp	r3, #1
 8021b64:	d009      	beq.n	8021b7a <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8021b66:	78fa      	ldrb	r2, [r7, #3]
 8021b68:	6879      	ldr	r1, [r7, #4]
 8021b6a:	4613      	mov	r3, r2
 8021b6c:	011b      	lsls	r3, r3, #4
 8021b6e:	1a9b      	subs	r3, r3, r2
 8021b70:	009b      	lsls	r3, r3, #2
 8021b72:	440b      	add	r3, r1
 8021b74:	331b      	adds	r3, #27
 8021b76:	2201      	movs	r2, #1
 8021b78:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8021b7a:	78fa      	ldrb	r2, [r7, #3]
 8021b7c:	6879      	ldr	r1, [r7, #4]
 8021b7e:	4613      	mov	r3, r2
 8021b80:	011b      	lsls	r3, r3, #4
 8021b82:	1a9b      	subs	r3, r3, r2
 8021b84:	009b      	lsls	r3, r3, #2
 8021b86:	440b      	add	r3, r1
 8021b88:	334d      	adds	r3, #77	@ 0x4d
 8021b8a:	2203      	movs	r2, #3
 8021b8c:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8021b8e:	687b      	ldr	r3, [r7, #4]
 8021b90:	681b      	ldr	r3, [r3, #0]
 8021b92:	78fa      	ldrb	r2, [r7, #3]
 8021b94:	4611      	mov	r1, r2
 8021b96:	4618      	mov	r0, r3
 8021b98:	f000 fec4 	bl	8022924 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8021b9c:	78fa      	ldrb	r2, [r7, #3]
 8021b9e:	6879      	ldr	r1, [r7, #4]
 8021ba0:	4613      	mov	r3, r2
 8021ba2:	011b      	lsls	r3, r3, #4
 8021ba4:	1a9b      	subs	r3, r3, r2
 8021ba6:	009b      	lsls	r3, r3, #2
 8021ba8:	440b      	add	r3, r1
 8021baa:	3344      	adds	r3, #68	@ 0x44
 8021bac:	2200      	movs	r2, #0
 8021bae:	601a      	str	r2, [r3, #0]
 8021bb0:	e3f9      	b.n	80223a6 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8021bb2:	687b      	ldr	r3, [r7, #4]
 8021bb4:	681b      	ldr	r3, [r3, #0]
 8021bb6:	78fa      	ldrb	r2, [r7, #3]
 8021bb8:	4611      	mov	r1, r2
 8021bba:	4618      	mov	r0, r3
 8021bbc:	f000 fe35 	bl	802282a <USB_ReadChInterrupts>
 8021bc0:	4603      	mov	r3, r0
 8021bc2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8021bc6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8021bca:	d111      	bne.n	8021bf0 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8021bcc:	78fb      	ldrb	r3, [r7, #3]
 8021bce:	015a      	lsls	r2, r3, #5
 8021bd0:	693b      	ldr	r3, [r7, #16]
 8021bd2:	4413      	add	r3, r2
 8021bd4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8021bd8:	461a      	mov	r2, r3
 8021bda:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8021bde:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8021be0:	687b      	ldr	r3, [r7, #4]
 8021be2:	681b      	ldr	r3, [r3, #0]
 8021be4:	78fa      	ldrb	r2, [r7, #3]
 8021be6:	4611      	mov	r1, r2
 8021be8:	4618      	mov	r0, r3
 8021bea:	f000 fe9b 	bl	8022924 <USB_HC_Halt>
 8021bee:	e3da      	b.n	80223a6 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8021bf0:	687b      	ldr	r3, [r7, #4]
 8021bf2:	681b      	ldr	r3, [r3, #0]
 8021bf4:	78fa      	ldrb	r2, [r7, #3]
 8021bf6:	4611      	mov	r1, r2
 8021bf8:	4618      	mov	r0, r3
 8021bfa:	f000 fe16 	bl	802282a <USB_ReadChInterrupts>
 8021bfe:	4603      	mov	r3, r0
 8021c00:	f003 0301 	and.w	r3, r3, #1
 8021c04:	2b01      	cmp	r3, #1
 8021c06:	d168      	bne.n	8021cda <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8021c08:	78fa      	ldrb	r2, [r7, #3]
 8021c0a:	6879      	ldr	r1, [r7, #4]
 8021c0c:	4613      	mov	r3, r2
 8021c0e:	011b      	lsls	r3, r3, #4
 8021c10:	1a9b      	subs	r3, r3, r2
 8021c12:	009b      	lsls	r3, r3, #2
 8021c14:	440b      	add	r3, r1
 8021c16:	3344      	adds	r3, #68	@ 0x44
 8021c18:	2200      	movs	r2, #0
 8021c1a:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8021c1c:	687b      	ldr	r3, [r7, #4]
 8021c1e:	681b      	ldr	r3, [r3, #0]
 8021c20:	78fa      	ldrb	r2, [r7, #3]
 8021c22:	4611      	mov	r1, r2
 8021c24:	4618      	mov	r0, r3
 8021c26:	f000 fe00 	bl	802282a <USB_ReadChInterrupts>
 8021c2a:	4603      	mov	r3, r0
 8021c2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8021c30:	2b40      	cmp	r3, #64	@ 0x40
 8021c32:	d112      	bne.n	8021c5a <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8021c34:	78fa      	ldrb	r2, [r7, #3]
 8021c36:	6879      	ldr	r1, [r7, #4]
 8021c38:	4613      	mov	r3, r2
 8021c3a:	011b      	lsls	r3, r3, #4
 8021c3c:	1a9b      	subs	r3, r3, r2
 8021c3e:	009b      	lsls	r3, r3, #2
 8021c40:	440b      	add	r3, r1
 8021c42:	3319      	adds	r3, #25
 8021c44:	2201      	movs	r2, #1
 8021c46:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8021c48:	78fb      	ldrb	r3, [r7, #3]
 8021c4a:	015a      	lsls	r2, r3, #5
 8021c4c:	693b      	ldr	r3, [r7, #16]
 8021c4e:	4413      	add	r3, r2
 8021c50:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8021c54:	461a      	mov	r2, r3
 8021c56:	2340      	movs	r3, #64	@ 0x40
 8021c58:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8021c5a:	78fa      	ldrb	r2, [r7, #3]
 8021c5c:	6879      	ldr	r1, [r7, #4]
 8021c5e:	4613      	mov	r3, r2
 8021c60:	011b      	lsls	r3, r3, #4
 8021c62:	1a9b      	subs	r3, r3, r2
 8021c64:	009b      	lsls	r3, r3, #2
 8021c66:	440b      	add	r3, r1
 8021c68:	331b      	adds	r3, #27
 8021c6a:	781b      	ldrb	r3, [r3, #0]
 8021c6c:	2b00      	cmp	r3, #0
 8021c6e:	d019      	beq.n	8021ca4 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8021c70:	78fa      	ldrb	r2, [r7, #3]
 8021c72:	6879      	ldr	r1, [r7, #4]
 8021c74:	4613      	mov	r3, r2
 8021c76:	011b      	lsls	r3, r3, #4
 8021c78:	1a9b      	subs	r3, r3, r2
 8021c7a:	009b      	lsls	r3, r3, #2
 8021c7c:	440b      	add	r3, r1
 8021c7e:	331b      	adds	r3, #27
 8021c80:	2200      	movs	r2, #0
 8021c82:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8021c84:	78fb      	ldrb	r3, [r7, #3]
 8021c86:	015a      	lsls	r2, r3, #5
 8021c88:	693b      	ldr	r3, [r7, #16]
 8021c8a:	4413      	add	r3, r2
 8021c8c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8021c90:	685b      	ldr	r3, [r3, #4]
 8021c92:	78fa      	ldrb	r2, [r7, #3]
 8021c94:	0151      	lsls	r1, r2, #5
 8021c96:	693a      	ldr	r2, [r7, #16]
 8021c98:	440a      	add	r2, r1
 8021c9a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8021c9e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8021ca2:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8021ca4:	78fb      	ldrb	r3, [r7, #3]
 8021ca6:	015a      	lsls	r2, r3, #5
 8021ca8:	693b      	ldr	r3, [r7, #16]
 8021caa:	4413      	add	r3, r2
 8021cac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8021cb0:	461a      	mov	r2, r3
 8021cb2:	2301      	movs	r3, #1
 8021cb4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8021cb6:	78fa      	ldrb	r2, [r7, #3]
 8021cb8:	6879      	ldr	r1, [r7, #4]
 8021cba:	4613      	mov	r3, r2
 8021cbc:	011b      	lsls	r3, r3, #4
 8021cbe:	1a9b      	subs	r3, r3, r2
 8021cc0:	009b      	lsls	r3, r3, #2
 8021cc2:	440b      	add	r3, r1
 8021cc4:	334d      	adds	r3, #77	@ 0x4d
 8021cc6:	2201      	movs	r2, #1
 8021cc8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8021cca:	687b      	ldr	r3, [r7, #4]
 8021ccc:	681b      	ldr	r3, [r3, #0]
 8021cce:	78fa      	ldrb	r2, [r7, #3]
 8021cd0:	4611      	mov	r1, r2
 8021cd2:	4618      	mov	r0, r3
 8021cd4:	f000 fe26 	bl	8022924 <USB_HC_Halt>
 8021cd8:	e365      	b.n	80223a6 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8021cda:	687b      	ldr	r3, [r7, #4]
 8021cdc:	681b      	ldr	r3, [r3, #0]
 8021cde:	78fa      	ldrb	r2, [r7, #3]
 8021ce0:	4611      	mov	r1, r2
 8021ce2:	4618      	mov	r0, r3
 8021ce4:	f000 fda1 	bl	802282a <USB_ReadChInterrupts>
 8021ce8:	4603      	mov	r3, r0
 8021cea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8021cee:	2b40      	cmp	r3, #64	@ 0x40
 8021cf0:	d139      	bne.n	8021d66 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8021cf2:	78fa      	ldrb	r2, [r7, #3]
 8021cf4:	6879      	ldr	r1, [r7, #4]
 8021cf6:	4613      	mov	r3, r2
 8021cf8:	011b      	lsls	r3, r3, #4
 8021cfa:	1a9b      	subs	r3, r3, r2
 8021cfc:	009b      	lsls	r3, r3, #2
 8021cfe:	440b      	add	r3, r1
 8021d00:	334d      	adds	r3, #77	@ 0x4d
 8021d02:	2205      	movs	r2, #5
 8021d04:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8021d06:	78fa      	ldrb	r2, [r7, #3]
 8021d08:	6879      	ldr	r1, [r7, #4]
 8021d0a:	4613      	mov	r3, r2
 8021d0c:	011b      	lsls	r3, r3, #4
 8021d0e:	1a9b      	subs	r3, r3, r2
 8021d10:	009b      	lsls	r3, r3, #2
 8021d12:	440b      	add	r3, r1
 8021d14:	331a      	adds	r3, #26
 8021d16:	781b      	ldrb	r3, [r3, #0]
 8021d18:	2b00      	cmp	r3, #0
 8021d1a:	d109      	bne.n	8021d30 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8021d1c:	78fa      	ldrb	r2, [r7, #3]
 8021d1e:	6879      	ldr	r1, [r7, #4]
 8021d20:	4613      	mov	r3, r2
 8021d22:	011b      	lsls	r3, r3, #4
 8021d24:	1a9b      	subs	r3, r3, r2
 8021d26:	009b      	lsls	r3, r3, #2
 8021d28:	440b      	add	r3, r1
 8021d2a:	3319      	adds	r3, #25
 8021d2c:	2201      	movs	r2, #1
 8021d2e:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8021d30:	78fa      	ldrb	r2, [r7, #3]
 8021d32:	6879      	ldr	r1, [r7, #4]
 8021d34:	4613      	mov	r3, r2
 8021d36:	011b      	lsls	r3, r3, #4
 8021d38:	1a9b      	subs	r3, r3, r2
 8021d3a:	009b      	lsls	r3, r3, #2
 8021d3c:	440b      	add	r3, r1
 8021d3e:	3344      	adds	r3, #68	@ 0x44
 8021d40:	2200      	movs	r2, #0
 8021d42:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8021d44:	687b      	ldr	r3, [r7, #4]
 8021d46:	681b      	ldr	r3, [r3, #0]
 8021d48:	78fa      	ldrb	r2, [r7, #3]
 8021d4a:	4611      	mov	r1, r2
 8021d4c:	4618      	mov	r0, r3
 8021d4e:	f000 fde9 	bl	8022924 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8021d52:	78fb      	ldrb	r3, [r7, #3]
 8021d54:	015a      	lsls	r2, r3, #5
 8021d56:	693b      	ldr	r3, [r7, #16]
 8021d58:	4413      	add	r3, r2
 8021d5a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8021d5e:	461a      	mov	r2, r3
 8021d60:	2340      	movs	r3, #64	@ 0x40
 8021d62:	6093      	str	r3, [r2, #8]
 8021d64:	e31f      	b.n	80223a6 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8021d66:	687b      	ldr	r3, [r7, #4]
 8021d68:	681b      	ldr	r3, [r3, #0]
 8021d6a:	78fa      	ldrb	r2, [r7, #3]
 8021d6c:	4611      	mov	r1, r2
 8021d6e:	4618      	mov	r0, r3
 8021d70:	f000 fd5b 	bl	802282a <USB_ReadChInterrupts>
 8021d74:	4603      	mov	r3, r0
 8021d76:	f003 0308 	and.w	r3, r3, #8
 8021d7a:	2b08      	cmp	r3, #8
 8021d7c:	d11a      	bne.n	8021db4 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8021d7e:	78fb      	ldrb	r3, [r7, #3]
 8021d80:	015a      	lsls	r2, r3, #5
 8021d82:	693b      	ldr	r3, [r7, #16]
 8021d84:	4413      	add	r3, r2
 8021d86:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8021d8a:	461a      	mov	r2, r3
 8021d8c:	2308      	movs	r3, #8
 8021d8e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8021d90:	78fa      	ldrb	r2, [r7, #3]
 8021d92:	6879      	ldr	r1, [r7, #4]
 8021d94:	4613      	mov	r3, r2
 8021d96:	011b      	lsls	r3, r3, #4
 8021d98:	1a9b      	subs	r3, r3, r2
 8021d9a:	009b      	lsls	r3, r3, #2
 8021d9c:	440b      	add	r3, r1
 8021d9e:	334d      	adds	r3, #77	@ 0x4d
 8021da0:	2206      	movs	r2, #6
 8021da2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8021da4:	687b      	ldr	r3, [r7, #4]
 8021da6:	681b      	ldr	r3, [r3, #0]
 8021da8:	78fa      	ldrb	r2, [r7, #3]
 8021daa:	4611      	mov	r1, r2
 8021dac:	4618      	mov	r0, r3
 8021dae:	f000 fdb9 	bl	8022924 <USB_HC_Halt>
 8021db2:	e2f8      	b.n	80223a6 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8021db4:	687b      	ldr	r3, [r7, #4]
 8021db6:	681b      	ldr	r3, [r3, #0]
 8021db8:	78fa      	ldrb	r2, [r7, #3]
 8021dba:	4611      	mov	r1, r2
 8021dbc:	4618      	mov	r0, r3
 8021dbe:	f000 fd34 	bl	802282a <USB_ReadChInterrupts>
 8021dc2:	4603      	mov	r3, r0
 8021dc4:	f003 0310 	and.w	r3, r3, #16
 8021dc8:	2b10      	cmp	r3, #16
 8021dca:	d144      	bne.n	8021e56 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8021dcc:	78fa      	ldrb	r2, [r7, #3]
 8021dce:	6879      	ldr	r1, [r7, #4]
 8021dd0:	4613      	mov	r3, r2
 8021dd2:	011b      	lsls	r3, r3, #4
 8021dd4:	1a9b      	subs	r3, r3, r2
 8021dd6:	009b      	lsls	r3, r3, #2
 8021dd8:	440b      	add	r3, r1
 8021dda:	3344      	adds	r3, #68	@ 0x44
 8021ddc:	2200      	movs	r2, #0
 8021dde:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8021de0:	78fa      	ldrb	r2, [r7, #3]
 8021de2:	6879      	ldr	r1, [r7, #4]
 8021de4:	4613      	mov	r3, r2
 8021de6:	011b      	lsls	r3, r3, #4
 8021de8:	1a9b      	subs	r3, r3, r2
 8021dea:	009b      	lsls	r3, r3, #2
 8021dec:	440b      	add	r3, r1
 8021dee:	334d      	adds	r3, #77	@ 0x4d
 8021df0:	2204      	movs	r2, #4
 8021df2:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8021df4:	78fa      	ldrb	r2, [r7, #3]
 8021df6:	6879      	ldr	r1, [r7, #4]
 8021df8:	4613      	mov	r3, r2
 8021dfa:	011b      	lsls	r3, r3, #4
 8021dfc:	1a9b      	subs	r3, r3, r2
 8021dfe:	009b      	lsls	r3, r3, #2
 8021e00:	440b      	add	r3, r1
 8021e02:	3319      	adds	r3, #25
 8021e04:	781b      	ldrb	r3, [r3, #0]
 8021e06:	2b00      	cmp	r3, #0
 8021e08:	d114      	bne.n	8021e34 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8021e0a:	78fa      	ldrb	r2, [r7, #3]
 8021e0c:	6879      	ldr	r1, [r7, #4]
 8021e0e:	4613      	mov	r3, r2
 8021e10:	011b      	lsls	r3, r3, #4
 8021e12:	1a9b      	subs	r3, r3, r2
 8021e14:	009b      	lsls	r3, r3, #2
 8021e16:	440b      	add	r3, r1
 8021e18:	3318      	adds	r3, #24
 8021e1a:	781b      	ldrb	r3, [r3, #0]
 8021e1c:	2b00      	cmp	r3, #0
 8021e1e:	d109      	bne.n	8021e34 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8021e20:	78fa      	ldrb	r2, [r7, #3]
 8021e22:	6879      	ldr	r1, [r7, #4]
 8021e24:	4613      	mov	r3, r2
 8021e26:	011b      	lsls	r3, r3, #4
 8021e28:	1a9b      	subs	r3, r3, r2
 8021e2a:	009b      	lsls	r3, r3, #2
 8021e2c:	440b      	add	r3, r1
 8021e2e:	3319      	adds	r3, #25
 8021e30:	2201      	movs	r2, #1
 8021e32:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8021e34:	687b      	ldr	r3, [r7, #4]
 8021e36:	681b      	ldr	r3, [r3, #0]
 8021e38:	78fa      	ldrb	r2, [r7, #3]
 8021e3a:	4611      	mov	r1, r2
 8021e3c:	4618      	mov	r0, r3
 8021e3e:	f000 fd71 	bl	8022924 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8021e42:	78fb      	ldrb	r3, [r7, #3]
 8021e44:	015a      	lsls	r2, r3, #5
 8021e46:	693b      	ldr	r3, [r7, #16]
 8021e48:	4413      	add	r3, r2
 8021e4a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8021e4e:	461a      	mov	r2, r3
 8021e50:	2310      	movs	r3, #16
 8021e52:	6093      	str	r3, [r2, #8]
 8021e54:	e2a7      	b.n	80223a6 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8021e56:	687b      	ldr	r3, [r7, #4]
 8021e58:	681b      	ldr	r3, [r3, #0]
 8021e5a:	78fa      	ldrb	r2, [r7, #3]
 8021e5c:	4611      	mov	r1, r2
 8021e5e:	4618      	mov	r0, r3
 8021e60:	f000 fce3 	bl	802282a <USB_ReadChInterrupts>
 8021e64:	4603      	mov	r3, r0
 8021e66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8021e6a:	2b80      	cmp	r3, #128	@ 0x80
 8021e6c:	f040 8083 	bne.w	8021f76 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 8021e70:	687b      	ldr	r3, [r7, #4]
 8021e72:	799b      	ldrb	r3, [r3, #6]
 8021e74:	2b00      	cmp	r3, #0
 8021e76:	d111      	bne.n	8021e9c <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8021e78:	78fa      	ldrb	r2, [r7, #3]
 8021e7a:	6879      	ldr	r1, [r7, #4]
 8021e7c:	4613      	mov	r3, r2
 8021e7e:	011b      	lsls	r3, r3, #4
 8021e80:	1a9b      	subs	r3, r3, r2
 8021e82:	009b      	lsls	r3, r3, #2
 8021e84:	440b      	add	r3, r1
 8021e86:	334d      	adds	r3, #77	@ 0x4d
 8021e88:	2207      	movs	r2, #7
 8021e8a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8021e8c:	687b      	ldr	r3, [r7, #4]
 8021e8e:	681b      	ldr	r3, [r3, #0]
 8021e90:	78fa      	ldrb	r2, [r7, #3]
 8021e92:	4611      	mov	r1, r2
 8021e94:	4618      	mov	r0, r3
 8021e96:	f000 fd45 	bl	8022924 <USB_HC_Halt>
 8021e9a:	e062      	b.n	8021f62 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8021e9c:	78fa      	ldrb	r2, [r7, #3]
 8021e9e:	6879      	ldr	r1, [r7, #4]
 8021ea0:	4613      	mov	r3, r2
 8021ea2:	011b      	lsls	r3, r3, #4
 8021ea4:	1a9b      	subs	r3, r3, r2
 8021ea6:	009b      	lsls	r3, r3, #2
 8021ea8:	440b      	add	r3, r1
 8021eaa:	3344      	adds	r3, #68	@ 0x44
 8021eac:	681b      	ldr	r3, [r3, #0]
 8021eae:	1c59      	adds	r1, r3, #1
 8021eb0:	6878      	ldr	r0, [r7, #4]
 8021eb2:	4613      	mov	r3, r2
 8021eb4:	011b      	lsls	r3, r3, #4
 8021eb6:	1a9b      	subs	r3, r3, r2
 8021eb8:	009b      	lsls	r3, r3, #2
 8021eba:	4403      	add	r3, r0
 8021ebc:	3344      	adds	r3, #68	@ 0x44
 8021ebe:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8021ec0:	78fa      	ldrb	r2, [r7, #3]
 8021ec2:	6879      	ldr	r1, [r7, #4]
 8021ec4:	4613      	mov	r3, r2
 8021ec6:	011b      	lsls	r3, r3, #4
 8021ec8:	1a9b      	subs	r3, r3, r2
 8021eca:	009b      	lsls	r3, r3, #2
 8021ecc:	440b      	add	r3, r1
 8021ece:	3344      	adds	r3, #68	@ 0x44
 8021ed0:	681b      	ldr	r3, [r3, #0]
 8021ed2:	2b02      	cmp	r3, #2
 8021ed4:	d922      	bls.n	8021f1c <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8021ed6:	78fa      	ldrb	r2, [r7, #3]
 8021ed8:	6879      	ldr	r1, [r7, #4]
 8021eda:	4613      	mov	r3, r2
 8021edc:	011b      	lsls	r3, r3, #4
 8021ede:	1a9b      	subs	r3, r3, r2
 8021ee0:	009b      	lsls	r3, r3, #2
 8021ee2:	440b      	add	r3, r1
 8021ee4:	3344      	adds	r3, #68	@ 0x44
 8021ee6:	2200      	movs	r2, #0
 8021ee8:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8021eea:	78fa      	ldrb	r2, [r7, #3]
 8021eec:	6879      	ldr	r1, [r7, #4]
 8021eee:	4613      	mov	r3, r2
 8021ef0:	011b      	lsls	r3, r3, #4
 8021ef2:	1a9b      	subs	r3, r3, r2
 8021ef4:	009b      	lsls	r3, r3, #2
 8021ef6:	440b      	add	r3, r1
 8021ef8:	334c      	adds	r3, #76	@ 0x4c
 8021efa:	2204      	movs	r2, #4
 8021efc:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8021efe:	78fa      	ldrb	r2, [r7, #3]
 8021f00:	6879      	ldr	r1, [r7, #4]
 8021f02:	4613      	mov	r3, r2
 8021f04:	011b      	lsls	r3, r3, #4
 8021f06:	1a9b      	subs	r3, r3, r2
 8021f08:	009b      	lsls	r3, r3, #2
 8021f0a:	440b      	add	r3, r1
 8021f0c:	334c      	adds	r3, #76	@ 0x4c
 8021f0e:	781a      	ldrb	r2, [r3, #0]
 8021f10:	78fb      	ldrb	r3, [r7, #3]
 8021f12:	4619      	mov	r1, r3
 8021f14:	6878      	ldr	r0, [r7, #4]
 8021f16:	f000 ff80 	bl	8022e1a <HAL_HCD_HC_NotifyURBChange_Callback>
 8021f1a:	e022      	b.n	8021f62 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8021f1c:	78fa      	ldrb	r2, [r7, #3]
 8021f1e:	6879      	ldr	r1, [r7, #4]
 8021f20:	4613      	mov	r3, r2
 8021f22:	011b      	lsls	r3, r3, #4
 8021f24:	1a9b      	subs	r3, r3, r2
 8021f26:	009b      	lsls	r3, r3, #2
 8021f28:	440b      	add	r3, r1
 8021f2a:	334c      	adds	r3, #76	@ 0x4c
 8021f2c:	2202      	movs	r2, #2
 8021f2e:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8021f30:	78fb      	ldrb	r3, [r7, #3]
 8021f32:	015a      	lsls	r2, r3, #5
 8021f34:	693b      	ldr	r3, [r7, #16]
 8021f36:	4413      	add	r3, r2
 8021f38:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8021f3c:	681b      	ldr	r3, [r3, #0]
 8021f3e:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8021f40:	68fb      	ldr	r3, [r7, #12]
 8021f42:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8021f46:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8021f48:	68fb      	ldr	r3, [r7, #12]
 8021f4a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8021f4e:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8021f50:	78fb      	ldrb	r3, [r7, #3]
 8021f52:	015a      	lsls	r2, r3, #5
 8021f54:	693b      	ldr	r3, [r7, #16]
 8021f56:	4413      	add	r3, r2
 8021f58:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8021f5c:	461a      	mov	r2, r3
 8021f5e:	68fb      	ldr	r3, [r7, #12]
 8021f60:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8021f62:	78fb      	ldrb	r3, [r7, #3]
 8021f64:	015a      	lsls	r2, r3, #5
 8021f66:	693b      	ldr	r3, [r7, #16]
 8021f68:	4413      	add	r3, r2
 8021f6a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8021f6e:	461a      	mov	r2, r3
 8021f70:	2380      	movs	r3, #128	@ 0x80
 8021f72:	6093      	str	r3, [r2, #8]
 8021f74:	e217      	b.n	80223a6 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8021f76:	687b      	ldr	r3, [r7, #4]
 8021f78:	681b      	ldr	r3, [r3, #0]
 8021f7a:	78fa      	ldrb	r2, [r7, #3]
 8021f7c:	4611      	mov	r1, r2
 8021f7e:	4618      	mov	r0, r3
 8021f80:	f000 fc53 	bl	802282a <USB_ReadChInterrupts>
 8021f84:	4603      	mov	r3, r0
 8021f86:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8021f8a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8021f8e:	d11b      	bne.n	8021fc8 <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8021f90:	78fa      	ldrb	r2, [r7, #3]
 8021f92:	6879      	ldr	r1, [r7, #4]
 8021f94:	4613      	mov	r3, r2
 8021f96:	011b      	lsls	r3, r3, #4
 8021f98:	1a9b      	subs	r3, r3, r2
 8021f9a:	009b      	lsls	r3, r3, #2
 8021f9c:	440b      	add	r3, r1
 8021f9e:	334d      	adds	r3, #77	@ 0x4d
 8021fa0:	2209      	movs	r2, #9
 8021fa2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8021fa4:	687b      	ldr	r3, [r7, #4]
 8021fa6:	681b      	ldr	r3, [r3, #0]
 8021fa8:	78fa      	ldrb	r2, [r7, #3]
 8021faa:	4611      	mov	r1, r2
 8021fac:	4618      	mov	r0, r3
 8021fae:	f000 fcb9 	bl	8022924 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8021fb2:	78fb      	ldrb	r3, [r7, #3]
 8021fb4:	015a      	lsls	r2, r3, #5
 8021fb6:	693b      	ldr	r3, [r7, #16]
 8021fb8:	4413      	add	r3, r2
 8021fba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8021fbe:	461a      	mov	r2, r3
 8021fc0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8021fc4:	6093      	str	r3, [r2, #8]
 8021fc6:	e1ee      	b.n	80223a6 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8021fc8:	687b      	ldr	r3, [r7, #4]
 8021fca:	681b      	ldr	r3, [r3, #0]
 8021fcc:	78fa      	ldrb	r2, [r7, #3]
 8021fce:	4611      	mov	r1, r2
 8021fd0:	4618      	mov	r0, r3
 8021fd2:	f000 fc2a 	bl	802282a <USB_ReadChInterrupts>
 8021fd6:	4603      	mov	r3, r0
 8021fd8:	f003 0302 	and.w	r3, r3, #2
 8021fdc:	2b02      	cmp	r3, #2
 8021fde:	f040 81df 	bne.w	80223a0 <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8021fe2:	78fb      	ldrb	r3, [r7, #3]
 8021fe4:	015a      	lsls	r2, r3, #5
 8021fe6:	693b      	ldr	r3, [r7, #16]
 8021fe8:	4413      	add	r3, r2
 8021fea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8021fee:	461a      	mov	r2, r3
 8021ff0:	2302      	movs	r3, #2
 8021ff2:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8021ff4:	78fa      	ldrb	r2, [r7, #3]
 8021ff6:	6879      	ldr	r1, [r7, #4]
 8021ff8:	4613      	mov	r3, r2
 8021ffa:	011b      	lsls	r3, r3, #4
 8021ffc:	1a9b      	subs	r3, r3, r2
 8021ffe:	009b      	lsls	r3, r3, #2
 8022000:	440b      	add	r3, r1
 8022002:	334d      	adds	r3, #77	@ 0x4d
 8022004:	781b      	ldrb	r3, [r3, #0]
 8022006:	2b01      	cmp	r3, #1
 8022008:	f040 8093 	bne.w	8022132 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 802200c:	78fa      	ldrb	r2, [r7, #3]
 802200e:	6879      	ldr	r1, [r7, #4]
 8022010:	4613      	mov	r3, r2
 8022012:	011b      	lsls	r3, r3, #4
 8022014:	1a9b      	subs	r3, r3, r2
 8022016:	009b      	lsls	r3, r3, #2
 8022018:	440b      	add	r3, r1
 802201a:	334d      	adds	r3, #77	@ 0x4d
 802201c:	2202      	movs	r2, #2
 802201e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8022020:	78fa      	ldrb	r2, [r7, #3]
 8022022:	6879      	ldr	r1, [r7, #4]
 8022024:	4613      	mov	r3, r2
 8022026:	011b      	lsls	r3, r3, #4
 8022028:	1a9b      	subs	r3, r3, r2
 802202a:	009b      	lsls	r3, r3, #2
 802202c:	440b      	add	r3, r1
 802202e:	334c      	adds	r3, #76	@ 0x4c
 8022030:	2201      	movs	r2, #1
 8022032:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8022034:	78fa      	ldrb	r2, [r7, #3]
 8022036:	6879      	ldr	r1, [r7, #4]
 8022038:	4613      	mov	r3, r2
 802203a:	011b      	lsls	r3, r3, #4
 802203c:	1a9b      	subs	r3, r3, r2
 802203e:	009b      	lsls	r3, r3, #2
 8022040:	440b      	add	r3, r1
 8022042:	3326      	adds	r3, #38	@ 0x26
 8022044:	781b      	ldrb	r3, [r3, #0]
 8022046:	2b02      	cmp	r3, #2
 8022048:	d00b      	beq.n	8022062 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 802204a:	78fa      	ldrb	r2, [r7, #3]
 802204c:	6879      	ldr	r1, [r7, #4]
 802204e:	4613      	mov	r3, r2
 8022050:	011b      	lsls	r3, r3, #4
 8022052:	1a9b      	subs	r3, r3, r2
 8022054:	009b      	lsls	r3, r3, #2
 8022056:	440b      	add	r3, r1
 8022058:	3326      	adds	r3, #38	@ 0x26
 802205a:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 802205c:	2b03      	cmp	r3, #3
 802205e:	f040 8190 	bne.w	8022382 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 8022062:	687b      	ldr	r3, [r7, #4]
 8022064:	799b      	ldrb	r3, [r3, #6]
 8022066:	2b00      	cmp	r3, #0
 8022068:	d115      	bne.n	8022096 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 802206a:	78fa      	ldrb	r2, [r7, #3]
 802206c:	6879      	ldr	r1, [r7, #4]
 802206e:	4613      	mov	r3, r2
 8022070:	011b      	lsls	r3, r3, #4
 8022072:	1a9b      	subs	r3, r3, r2
 8022074:	009b      	lsls	r3, r3, #2
 8022076:	440b      	add	r3, r1
 8022078:	333d      	adds	r3, #61	@ 0x3d
 802207a:	781b      	ldrb	r3, [r3, #0]
 802207c:	78fa      	ldrb	r2, [r7, #3]
 802207e:	f083 0301 	eor.w	r3, r3, #1
 8022082:	b2d8      	uxtb	r0, r3
 8022084:	6879      	ldr	r1, [r7, #4]
 8022086:	4613      	mov	r3, r2
 8022088:	011b      	lsls	r3, r3, #4
 802208a:	1a9b      	subs	r3, r3, r2
 802208c:	009b      	lsls	r3, r3, #2
 802208e:	440b      	add	r3, r1
 8022090:	333d      	adds	r3, #61	@ 0x3d
 8022092:	4602      	mov	r2, r0
 8022094:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8022096:	687b      	ldr	r3, [r7, #4]
 8022098:	799b      	ldrb	r3, [r3, #6]
 802209a:	2b01      	cmp	r3, #1
 802209c:	f040 8171 	bne.w	8022382 <HCD_HC_OUT_IRQHandler+0x954>
 80220a0:	78fa      	ldrb	r2, [r7, #3]
 80220a2:	6879      	ldr	r1, [r7, #4]
 80220a4:	4613      	mov	r3, r2
 80220a6:	011b      	lsls	r3, r3, #4
 80220a8:	1a9b      	subs	r3, r3, r2
 80220aa:	009b      	lsls	r3, r3, #2
 80220ac:	440b      	add	r3, r1
 80220ae:	3334      	adds	r3, #52	@ 0x34
 80220b0:	681b      	ldr	r3, [r3, #0]
 80220b2:	2b00      	cmp	r3, #0
 80220b4:	f000 8165 	beq.w	8022382 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 80220b8:	78fa      	ldrb	r2, [r7, #3]
 80220ba:	6879      	ldr	r1, [r7, #4]
 80220bc:	4613      	mov	r3, r2
 80220be:	011b      	lsls	r3, r3, #4
 80220c0:	1a9b      	subs	r3, r3, r2
 80220c2:	009b      	lsls	r3, r3, #2
 80220c4:	440b      	add	r3, r1
 80220c6:	3334      	adds	r3, #52	@ 0x34
 80220c8:	6819      	ldr	r1, [r3, #0]
 80220ca:	78fa      	ldrb	r2, [r7, #3]
 80220cc:	6878      	ldr	r0, [r7, #4]
 80220ce:	4613      	mov	r3, r2
 80220d0:	011b      	lsls	r3, r3, #4
 80220d2:	1a9b      	subs	r3, r3, r2
 80220d4:	009b      	lsls	r3, r3, #2
 80220d6:	4403      	add	r3, r0
 80220d8:	3328      	adds	r3, #40	@ 0x28
 80220da:	881b      	ldrh	r3, [r3, #0]
 80220dc:	440b      	add	r3, r1
 80220de:	1e59      	subs	r1, r3, #1
 80220e0:	78fa      	ldrb	r2, [r7, #3]
 80220e2:	6878      	ldr	r0, [r7, #4]
 80220e4:	4613      	mov	r3, r2
 80220e6:	011b      	lsls	r3, r3, #4
 80220e8:	1a9b      	subs	r3, r3, r2
 80220ea:	009b      	lsls	r3, r3, #2
 80220ec:	4403      	add	r3, r0
 80220ee:	3328      	adds	r3, #40	@ 0x28
 80220f0:	881b      	ldrh	r3, [r3, #0]
 80220f2:	fbb1 f3f3 	udiv	r3, r1, r3
 80220f6:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 80220f8:	68bb      	ldr	r3, [r7, #8]
 80220fa:	f003 0301 	and.w	r3, r3, #1
 80220fe:	2b00      	cmp	r3, #0
 8022100:	f000 813f 	beq.w	8022382 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8022104:	78fa      	ldrb	r2, [r7, #3]
 8022106:	6879      	ldr	r1, [r7, #4]
 8022108:	4613      	mov	r3, r2
 802210a:	011b      	lsls	r3, r3, #4
 802210c:	1a9b      	subs	r3, r3, r2
 802210e:	009b      	lsls	r3, r3, #2
 8022110:	440b      	add	r3, r1
 8022112:	333d      	adds	r3, #61	@ 0x3d
 8022114:	781b      	ldrb	r3, [r3, #0]
 8022116:	78fa      	ldrb	r2, [r7, #3]
 8022118:	f083 0301 	eor.w	r3, r3, #1
 802211c:	b2d8      	uxtb	r0, r3
 802211e:	6879      	ldr	r1, [r7, #4]
 8022120:	4613      	mov	r3, r2
 8022122:	011b      	lsls	r3, r3, #4
 8022124:	1a9b      	subs	r3, r3, r2
 8022126:	009b      	lsls	r3, r3, #2
 8022128:	440b      	add	r3, r1
 802212a:	333d      	adds	r3, #61	@ 0x3d
 802212c:	4602      	mov	r2, r0
 802212e:	701a      	strb	r2, [r3, #0]
 8022130:	e127      	b.n	8022382 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8022132:	78fa      	ldrb	r2, [r7, #3]
 8022134:	6879      	ldr	r1, [r7, #4]
 8022136:	4613      	mov	r3, r2
 8022138:	011b      	lsls	r3, r3, #4
 802213a:	1a9b      	subs	r3, r3, r2
 802213c:	009b      	lsls	r3, r3, #2
 802213e:	440b      	add	r3, r1
 8022140:	334d      	adds	r3, #77	@ 0x4d
 8022142:	781b      	ldrb	r3, [r3, #0]
 8022144:	2b03      	cmp	r3, #3
 8022146:	d120      	bne.n	802218a <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8022148:	78fa      	ldrb	r2, [r7, #3]
 802214a:	6879      	ldr	r1, [r7, #4]
 802214c:	4613      	mov	r3, r2
 802214e:	011b      	lsls	r3, r3, #4
 8022150:	1a9b      	subs	r3, r3, r2
 8022152:	009b      	lsls	r3, r3, #2
 8022154:	440b      	add	r3, r1
 8022156:	334d      	adds	r3, #77	@ 0x4d
 8022158:	2202      	movs	r2, #2
 802215a:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 802215c:	78fa      	ldrb	r2, [r7, #3]
 802215e:	6879      	ldr	r1, [r7, #4]
 8022160:	4613      	mov	r3, r2
 8022162:	011b      	lsls	r3, r3, #4
 8022164:	1a9b      	subs	r3, r3, r2
 8022166:	009b      	lsls	r3, r3, #2
 8022168:	440b      	add	r3, r1
 802216a:	331b      	adds	r3, #27
 802216c:	781b      	ldrb	r3, [r3, #0]
 802216e:	2b01      	cmp	r3, #1
 8022170:	f040 8107 	bne.w	8022382 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8022174:	78fa      	ldrb	r2, [r7, #3]
 8022176:	6879      	ldr	r1, [r7, #4]
 8022178:	4613      	mov	r3, r2
 802217a:	011b      	lsls	r3, r3, #4
 802217c:	1a9b      	subs	r3, r3, r2
 802217e:	009b      	lsls	r3, r3, #2
 8022180:	440b      	add	r3, r1
 8022182:	334c      	adds	r3, #76	@ 0x4c
 8022184:	2202      	movs	r2, #2
 8022186:	701a      	strb	r2, [r3, #0]
 8022188:	e0fb      	b.n	8022382 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 802218a:	78fa      	ldrb	r2, [r7, #3]
 802218c:	6879      	ldr	r1, [r7, #4]
 802218e:	4613      	mov	r3, r2
 8022190:	011b      	lsls	r3, r3, #4
 8022192:	1a9b      	subs	r3, r3, r2
 8022194:	009b      	lsls	r3, r3, #2
 8022196:	440b      	add	r3, r1
 8022198:	334d      	adds	r3, #77	@ 0x4d
 802219a:	781b      	ldrb	r3, [r3, #0]
 802219c:	2b04      	cmp	r3, #4
 802219e:	d13a      	bne.n	8022216 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80221a0:	78fa      	ldrb	r2, [r7, #3]
 80221a2:	6879      	ldr	r1, [r7, #4]
 80221a4:	4613      	mov	r3, r2
 80221a6:	011b      	lsls	r3, r3, #4
 80221a8:	1a9b      	subs	r3, r3, r2
 80221aa:	009b      	lsls	r3, r3, #2
 80221ac:	440b      	add	r3, r1
 80221ae:	334d      	adds	r3, #77	@ 0x4d
 80221b0:	2202      	movs	r2, #2
 80221b2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80221b4:	78fa      	ldrb	r2, [r7, #3]
 80221b6:	6879      	ldr	r1, [r7, #4]
 80221b8:	4613      	mov	r3, r2
 80221ba:	011b      	lsls	r3, r3, #4
 80221bc:	1a9b      	subs	r3, r3, r2
 80221be:	009b      	lsls	r3, r3, #2
 80221c0:	440b      	add	r3, r1
 80221c2:	334c      	adds	r3, #76	@ 0x4c
 80221c4:	2202      	movs	r2, #2
 80221c6:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80221c8:	78fa      	ldrb	r2, [r7, #3]
 80221ca:	6879      	ldr	r1, [r7, #4]
 80221cc:	4613      	mov	r3, r2
 80221ce:	011b      	lsls	r3, r3, #4
 80221d0:	1a9b      	subs	r3, r3, r2
 80221d2:	009b      	lsls	r3, r3, #2
 80221d4:	440b      	add	r3, r1
 80221d6:	331b      	adds	r3, #27
 80221d8:	781b      	ldrb	r3, [r3, #0]
 80221da:	2b01      	cmp	r3, #1
 80221dc:	f040 80d1 	bne.w	8022382 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 80221e0:	78fa      	ldrb	r2, [r7, #3]
 80221e2:	6879      	ldr	r1, [r7, #4]
 80221e4:	4613      	mov	r3, r2
 80221e6:	011b      	lsls	r3, r3, #4
 80221e8:	1a9b      	subs	r3, r3, r2
 80221ea:	009b      	lsls	r3, r3, #2
 80221ec:	440b      	add	r3, r1
 80221ee:	331b      	adds	r3, #27
 80221f0:	2200      	movs	r2, #0
 80221f2:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80221f4:	78fb      	ldrb	r3, [r7, #3]
 80221f6:	015a      	lsls	r2, r3, #5
 80221f8:	693b      	ldr	r3, [r7, #16]
 80221fa:	4413      	add	r3, r2
 80221fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8022200:	685b      	ldr	r3, [r3, #4]
 8022202:	78fa      	ldrb	r2, [r7, #3]
 8022204:	0151      	lsls	r1, r2, #5
 8022206:	693a      	ldr	r2, [r7, #16]
 8022208:	440a      	add	r2, r1
 802220a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 802220e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8022212:	6053      	str	r3, [r2, #4]
 8022214:	e0b5      	b.n	8022382 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8022216:	78fa      	ldrb	r2, [r7, #3]
 8022218:	6879      	ldr	r1, [r7, #4]
 802221a:	4613      	mov	r3, r2
 802221c:	011b      	lsls	r3, r3, #4
 802221e:	1a9b      	subs	r3, r3, r2
 8022220:	009b      	lsls	r3, r3, #2
 8022222:	440b      	add	r3, r1
 8022224:	334d      	adds	r3, #77	@ 0x4d
 8022226:	781b      	ldrb	r3, [r3, #0]
 8022228:	2b05      	cmp	r3, #5
 802222a:	d114      	bne.n	8022256 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 802222c:	78fa      	ldrb	r2, [r7, #3]
 802222e:	6879      	ldr	r1, [r7, #4]
 8022230:	4613      	mov	r3, r2
 8022232:	011b      	lsls	r3, r3, #4
 8022234:	1a9b      	subs	r3, r3, r2
 8022236:	009b      	lsls	r3, r3, #2
 8022238:	440b      	add	r3, r1
 802223a:	334d      	adds	r3, #77	@ 0x4d
 802223c:	2202      	movs	r2, #2
 802223e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8022240:	78fa      	ldrb	r2, [r7, #3]
 8022242:	6879      	ldr	r1, [r7, #4]
 8022244:	4613      	mov	r3, r2
 8022246:	011b      	lsls	r3, r3, #4
 8022248:	1a9b      	subs	r3, r3, r2
 802224a:	009b      	lsls	r3, r3, #2
 802224c:	440b      	add	r3, r1
 802224e:	334c      	adds	r3, #76	@ 0x4c
 8022250:	2202      	movs	r2, #2
 8022252:	701a      	strb	r2, [r3, #0]
 8022254:	e095      	b.n	8022382 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8022256:	78fa      	ldrb	r2, [r7, #3]
 8022258:	6879      	ldr	r1, [r7, #4]
 802225a:	4613      	mov	r3, r2
 802225c:	011b      	lsls	r3, r3, #4
 802225e:	1a9b      	subs	r3, r3, r2
 8022260:	009b      	lsls	r3, r3, #2
 8022262:	440b      	add	r3, r1
 8022264:	334d      	adds	r3, #77	@ 0x4d
 8022266:	781b      	ldrb	r3, [r3, #0]
 8022268:	2b06      	cmp	r3, #6
 802226a:	d114      	bne.n	8022296 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 802226c:	78fa      	ldrb	r2, [r7, #3]
 802226e:	6879      	ldr	r1, [r7, #4]
 8022270:	4613      	mov	r3, r2
 8022272:	011b      	lsls	r3, r3, #4
 8022274:	1a9b      	subs	r3, r3, r2
 8022276:	009b      	lsls	r3, r3, #2
 8022278:	440b      	add	r3, r1
 802227a:	334d      	adds	r3, #77	@ 0x4d
 802227c:	2202      	movs	r2, #2
 802227e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8022280:	78fa      	ldrb	r2, [r7, #3]
 8022282:	6879      	ldr	r1, [r7, #4]
 8022284:	4613      	mov	r3, r2
 8022286:	011b      	lsls	r3, r3, #4
 8022288:	1a9b      	subs	r3, r3, r2
 802228a:	009b      	lsls	r3, r3, #2
 802228c:	440b      	add	r3, r1
 802228e:	334c      	adds	r3, #76	@ 0x4c
 8022290:	2205      	movs	r2, #5
 8022292:	701a      	strb	r2, [r3, #0]
 8022294:	e075      	b.n	8022382 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8022296:	78fa      	ldrb	r2, [r7, #3]
 8022298:	6879      	ldr	r1, [r7, #4]
 802229a:	4613      	mov	r3, r2
 802229c:	011b      	lsls	r3, r3, #4
 802229e:	1a9b      	subs	r3, r3, r2
 80222a0:	009b      	lsls	r3, r3, #2
 80222a2:	440b      	add	r3, r1
 80222a4:	334d      	adds	r3, #77	@ 0x4d
 80222a6:	781b      	ldrb	r3, [r3, #0]
 80222a8:	2b07      	cmp	r3, #7
 80222aa:	d00a      	beq.n	80222c2 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80222ac:	78fa      	ldrb	r2, [r7, #3]
 80222ae:	6879      	ldr	r1, [r7, #4]
 80222b0:	4613      	mov	r3, r2
 80222b2:	011b      	lsls	r3, r3, #4
 80222b4:	1a9b      	subs	r3, r3, r2
 80222b6:	009b      	lsls	r3, r3, #2
 80222b8:	440b      	add	r3, r1
 80222ba:	334d      	adds	r3, #77	@ 0x4d
 80222bc:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80222be:	2b09      	cmp	r3, #9
 80222c0:	d170      	bne.n	80223a4 <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80222c2:	78fa      	ldrb	r2, [r7, #3]
 80222c4:	6879      	ldr	r1, [r7, #4]
 80222c6:	4613      	mov	r3, r2
 80222c8:	011b      	lsls	r3, r3, #4
 80222ca:	1a9b      	subs	r3, r3, r2
 80222cc:	009b      	lsls	r3, r3, #2
 80222ce:	440b      	add	r3, r1
 80222d0:	334d      	adds	r3, #77	@ 0x4d
 80222d2:	2202      	movs	r2, #2
 80222d4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80222d6:	78fa      	ldrb	r2, [r7, #3]
 80222d8:	6879      	ldr	r1, [r7, #4]
 80222da:	4613      	mov	r3, r2
 80222dc:	011b      	lsls	r3, r3, #4
 80222de:	1a9b      	subs	r3, r3, r2
 80222e0:	009b      	lsls	r3, r3, #2
 80222e2:	440b      	add	r3, r1
 80222e4:	3344      	adds	r3, #68	@ 0x44
 80222e6:	681b      	ldr	r3, [r3, #0]
 80222e8:	1c59      	adds	r1, r3, #1
 80222ea:	6878      	ldr	r0, [r7, #4]
 80222ec:	4613      	mov	r3, r2
 80222ee:	011b      	lsls	r3, r3, #4
 80222f0:	1a9b      	subs	r3, r3, r2
 80222f2:	009b      	lsls	r3, r3, #2
 80222f4:	4403      	add	r3, r0
 80222f6:	3344      	adds	r3, #68	@ 0x44
 80222f8:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80222fa:	78fa      	ldrb	r2, [r7, #3]
 80222fc:	6879      	ldr	r1, [r7, #4]
 80222fe:	4613      	mov	r3, r2
 8022300:	011b      	lsls	r3, r3, #4
 8022302:	1a9b      	subs	r3, r3, r2
 8022304:	009b      	lsls	r3, r3, #2
 8022306:	440b      	add	r3, r1
 8022308:	3344      	adds	r3, #68	@ 0x44
 802230a:	681b      	ldr	r3, [r3, #0]
 802230c:	2b02      	cmp	r3, #2
 802230e:	d914      	bls.n	802233a <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8022310:	78fa      	ldrb	r2, [r7, #3]
 8022312:	6879      	ldr	r1, [r7, #4]
 8022314:	4613      	mov	r3, r2
 8022316:	011b      	lsls	r3, r3, #4
 8022318:	1a9b      	subs	r3, r3, r2
 802231a:	009b      	lsls	r3, r3, #2
 802231c:	440b      	add	r3, r1
 802231e:	3344      	adds	r3, #68	@ 0x44
 8022320:	2200      	movs	r2, #0
 8022322:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8022324:	78fa      	ldrb	r2, [r7, #3]
 8022326:	6879      	ldr	r1, [r7, #4]
 8022328:	4613      	mov	r3, r2
 802232a:	011b      	lsls	r3, r3, #4
 802232c:	1a9b      	subs	r3, r3, r2
 802232e:	009b      	lsls	r3, r3, #2
 8022330:	440b      	add	r3, r1
 8022332:	334c      	adds	r3, #76	@ 0x4c
 8022334:	2204      	movs	r2, #4
 8022336:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8022338:	e022      	b.n	8022380 <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 802233a:	78fa      	ldrb	r2, [r7, #3]
 802233c:	6879      	ldr	r1, [r7, #4]
 802233e:	4613      	mov	r3, r2
 8022340:	011b      	lsls	r3, r3, #4
 8022342:	1a9b      	subs	r3, r3, r2
 8022344:	009b      	lsls	r3, r3, #2
 8022346:	440b      	add	r3, r1
 8022348:	334c      	adds	r3, #76	@ 0x4c
 802234a:	2202      	movs	r2, #2
 802234c:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 802234e:	78fb      	ldrb	r3, [r7, #3]
 8022350:	015a      	lsls	r2, r3, #5
 8022352:	693b      	ldr	r3, [r7, #16]
 8022354:	4413      	add	r3, r2
 8022356:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 802235a:	681b      	ldr	r3, [r3, #0]
 802235c:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 802235e:	68fb      	ldr	r3, [r7, #12]
 8022360:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8022364:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8022366:	68fb      	ldr	r3, [r7, #12]
 8022368:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 802236c:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 802236e:	78fb      	ldrb	r3, [r7, #3]
 8022370:	015a      	lsls	r2, r3, #5
 8022372:	693b      	ldr	r3, [r7, #16]
 8022374:	4413      	add	r3, r2
 8022376:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 802237a:	461a      	mov	r2, r3
 802237c:	68fb      	ldr	r3, [r7, #12]
 802237e:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8022380:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8022382:	78fa      	ldrb	r2, [r7, #3]
 8022384:	6879      	ldr	r1, [r7, #4]
 8022386:	4613      	mov	r3, r2
 8022388:	011b      	lsls	r3, r3, #4
 802238a:	1a9b      	subs	r3, r3, r2
 802238c:	009b      	lsls	r3, r3, #2
 802238e:	440b      	add	r3, r1
 8022390:	334c      	adds	r3, #76	@ 0x4c
 8022392:	781a      	ldrb	r2, [r3, #0]
 8022394:	78fb      	ldrb	r3, [r7, #3]
 8022396:	4619      	mov	r1, r3
 8022398:	6878      	ldr	r0, [r7, #4]
 802239a:	f000 fd3e 	bl	8022e1a <HAL_HCD_HC_NotifyURBChange_Callback>
 802239e:	e002      	b.n	80223a6 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 80223a0:	bf00      	nop
 80223a2:	e000      	b.n	80223a6 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 80223a4:	bf00      	nop
  }
}
 80223a6:	3718      	adds	r7, #24
 80223a8:	46bd      	mov	sp, r7
 80223aa:	bd80      	pop	{r7, pc}

080223ac <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80223ac:	b580      	push	{r7, lr}
 80223ae:	b08a      	sub	sp, #40	@ 0x28
 80223b0:	af00      	add	r7, sp, #0
 80223b2:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80223b4:	687b      	ldr	r3, [r7, #4]
 80223b6:	681b      	ldr	r3, [r3, #0]
 80223b8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80223ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80223bc:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80223be:	687b      	ldr	r3, [r7, #4]
 80223c0:	681b      	ldr	r3, [r3, #0]
 80223c2:	6a1b      	ldr	r3, [r3, #32]
 80223c4:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80223c6:	69fb      	ldr	r3, [r7, #28]
 80223c8:	f003 030f 	and.w	r3, r3, #15
 80223cc:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80223ce:	69fb      	ldr	r3, [r7, #28]
 80223d0:	0c5b      	lsrs	r3, r3, #17
 80223d2:	f003 030f 	and.w	r3, r3, #15
 80223d6:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80223d8:	69fb      	ldr	r3, [r7, #28]
 80223da:	091b      	lsrs	r3, r3, #4
 80223dc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80223e0:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80223e2:	697b      	ldr	r3, [r7, #20]
 80223e4:	2b02      	cmp	r3, #2
 80223e6:	d004      	beq.n	80223f2 <HCD_RXQLVL_IRQHandler+0x46>
 80223e8:	697b      	ldr	r3, [r7, #20]
 80223ea:	2b05      	cmp	r3, #5
 80223ec:	f000 80b6 	beq.w	802255c <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80223f0:	e0b7      	b.n	8022562 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 80223f2:	693b      	ldr	r3, [r7, #16]
 80223f4:	2b00      	cmp	r3, #0
 80223f6:	f000 80b3 	beq.w	8022560 <HCD_RXQLVL_IRQHandler+0x1b4>
 80223fa:	6879      	ldr	r1, [r7, #4]
 80223fc:	69ba      	ldr	r2, [r7, #24]
 80223fe:	4613      	mov	r3, r2
 8022400:	011b      	lsls	r3, r3, #4
 8022402:	1a9b      	subs	r3, r3, r2
 8022404:	009b      	lsls	r3, r3, #2
 8022406:	440b      	add	r3, r1
 8022408:	332c      	adds	r3, #44	@ 0x2c
 802240a:	681b      	ldr	r3, [r3, #0]
 802240c:	2b00      	cmp	r3, #0
 802240e:	f000 80a7 	beq.w	8022560 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8022412:	6879      	ldr	r1, [r7, #4]
 8022414:	69ba      	ldr	r2, [r7, #24]
 8022416:	4613      	mov	r3, r2
 8022418:	011b      	lsls	r3, r3, #4
 802241a:	1a9b      	subs	r3, r3, r2
 802241c:	009b      	lsls	r3, r3, #2
 802241e:	440b      	add	r3, r1
 8022420:	3338      	adds	r3, #56	@ 0x38
 8022422:	681a      	ldr	r2, [r3, #0]
 8022424:	693b      	ldr	r3, [r7, #16]
 8022426:	18d1      	adds	r1, r2, r3
 8022428:	6878      	ldr	r0, [r7, #4]
 802242a:	69ba      	ldr	r2, [r7, #24]
 802242c:	4613      	mov	r3, r2
 802242e:	011b      	lsls	r3, r3, #4
 8022430:	1a9b      	subs	r3, r3, r2
 8022432:	009b      	lsls	r3, r3, #2
 8022434:	4403      	add	r3, r0
 8022436:	3334      	adds	r3, #52	@ 0x34
 8022438:	681b      	ldr	r3, [r3, #0]
 802243a:	4299      	cmp	r1, r3
 802243c:	f200 8083 	bhi.w	8022546 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8022440:	687b      	ldr	r3, [r7, #4]
 8022442:	6818      	ldr	r0, [r3, #0]
 8022444:	6879      	ldr	r1, [r7, #4]
 8022446:	69ba      	ldr	r2, [r7, #24]
 8022448:	4613      	mov	r3, r2
 802244a:	011b      	lsls	r3, r3, #4
 802244c:	1a9b      	subs	r3, r3, r2
 802244e:	009b      	lsls	r3, r3, #2
 8022450:	440b      	add	r3, r1
 8022452:	332c      	adds	r3, #44	@ 0x2c
 8022454:	681b      	ldr	r3, [r3, #0]
 8022456:	693a      	ldr	r2, [r7, #16]
 8022458:	b292      	uxth	r2, r2
 802245a:	4619      	mov	r1, r3
 802245c:	f000 f97a 	bl	8022754 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8022460:	6879      	ldr	r1, [r7, #4]
 8022462:	69ba      	ldr	r2, [r7, #24]
 8022464:	4613      	mov	r3, r2
 8022466:	011b      	lsls	r3, r3, #4
 8022468:	1a9b      	subs	r3, r3, r2
 802246a:	009b      	lsls	r3, r3, #2
 802246c:	440b      	add	r3, r1
 802246e:	332c      	adds	r3, #44	@ 0x2c
 8022470:	681a      	ldr	r2, [r3, #0]
 8022472:	693b      	ldr	r3, [r7, #16]
 8022474:	18d1      	adds	r1, r2, r3
 8022476:	6878      	ldr	r0, [r7, #4]
 8022478:	69ba      	ldr	r2, [r7, #24]
 802247a:	4613      	mov	r3, r2
 802247c:	011b      	lsls	r3, r3, #4
 802247e:	1a9b      	subs	r3, r3, r2
 8022480:	009b      	lsls	r3, r3, #2
 8022482:	4403      	add	r3, r0
 8022484:	332c      	adds	r3, #44	@ 0x2c
 8022486:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8022488:	6879      	ldr	r1, [r7, #4]
 802248a:	69ba      	ldr	r2, [r7, #24]
 802248c:	4613      	mov	r3, r2
 802248e:	011b      	lsls	r3, r3, #4
 8022490:	1a9b      	subs	r3, r3, r2
 8022492:	009b      	lsls	r3, r3, #2
 8022494:	440b      	add	r3, r1
 8022496:	3338      	adds	r3, #56	@ 0x38
 8022498:	681a      	ldr	r2, [r3, #0]
 802249a:	693b      	ldr	r3, [r7, #16]
 802249c:	18d1      	adds	r1, r2, r3
 802249e:	6878      	ldr	r0, [r7, #4]
 80224a0:	69ba      	ldr	r2, [r7, #24]
 80224a2:	4613      	mov	r3, r2
 80224a4:	011b      	lsls	r3, r3, #4
 80224a6:	1a9b      	subs	r3, r3, r2
 80224a8:	009b      	lsls	r3, r3, #2
 80224aa:	4403      	add	r3, r0
 80224ac:	3338      	adds	r3, #56	@ 0x38
 80224ae:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80224b0:	69bb      	ldr	r3, [r7, #24]
 80224b2:	015a      	lsls	r2, r3, #5
 80224b4:	6a3b      	ldr	r3, [r7, #32]
 80224b6:	4413      	add	r3, r2
 80224b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80224bc:	691b      	ldr	r3, [r3, #16]
 80224be:	0cdb      	lsrs	r3, r3, #19
 80224c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80224c4:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80224c6:	6879      	ldr	r1, [r7, #4]
 80224c8:	69ba      	ldr	r2, [r7, #24]
 80224ca:	4613      	mov	r3, r2
 80224cc:	011b      	lsls	r3, r3, #4
 80224ce:	1a9b      	subs	r3, r3, r2
 80224d0:	009b      	lsls	r3, r3, #2
 80224d2:	440b      	add	r3, r1
 80224d4:	3328      	adds	r3, #40	@ 0x28
 80224d6:	881b      	ldrh	r3, [r3, #0]
 80224d8:	461a      	mov	r2, r3
 80224da:	693b      	ldr	r3, [r7, #16]
 80224dc:	4293      	cmp	r3, r2
 80224de:	d13f      	bne.n	8022560 <HCD_RXQLVL_IRQHandler+0x1b4>
 80224e0:	68fb      	ldr	r3, [r7, #12]
 80224e2:	2b00      	cmp	r3, #0
 80224e4:	d03c      	beq.n	8022560 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 80224e6:	69bb      	ldr	r3, [r7, #24]
 80224e8:	015a      	lsls	r2, r3, #5
 80224ea:	6a3b      	ldr	r3, [r7, #32]
 80224ec:	4413      	add	r3, r2
 80224ee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80224f2:	681b      	ldr	r3, [r3, #0]
 80224f4:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80224f6:	68bb      	ldr	r3, [r7, #8]
 80224f8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80224fc:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80224fe:	68bb      	ldr	r3, [r7, #8]
 8022500:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8022504:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8022506:	69bb      	ldr	r3, [r7, #24]
 8022508:	015a      	lsls	r2, r3, #5
 802250a:	6a3b      	ldr	r3, [r7, #32]
 802250c:	4413      	add	r3, r2
 802250e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8022512:	461a      	mov	r2, r3
 8022514:	68bb      	ldr	r3, [r7, #8]
 8022516:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8022518:	6879      	ldr	r1, [r7, #4]
 802251a:	69ba      	ldr	r2, [r7, #24]
 802251c:	4613      	mov	r3, r2
 802251e:	011b      	lsls	r3, r3, #4
 8022520:	1a9b      	subs	r3, r3, r2
 8022522:	009b      	lsls	r3, r3, #2
 8022524:	440b      	add	r3, r1
 8022526:	333c      	adds	r3, #60	@ 0x3c
 8022528:	781b      	ldrb	r3, [r3, #0]
 802252a:	f083 0301 	eor.w	r3, r3, #1
 802252e:	b2d8      	uxtb	r0, r3
 8022530:	6879      	ldr	r1, [r7, #4]
 8022532:	69ba      	ldr	r2, [r7, #24]
 8022534:	4613      	mov	r3, r2
 8022536:	011b      	lsls	r3, r3, #4
 8022538:	1a9b      	subs	r3, r3, r2
 802253a:	009b      	lsls	r3, r3, #2
 802253c:	440b      	add	r3, r1
 802253e:	333c      	adds	r3, #60	@ 0x3c
 8022540:	4602      	mov	r2, r0
 8022542:	701a      	strb	r2, [r3, #0]
      break;
 8022544:	e00c      	b.n	8022560 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8022546:	6879      	ldr	r1, [r7, #4]
 8022548:	69ba      	ldr	r2, [r7, #24]
 802254a:	4613      	mov	r3, r2
 802254c:	011b      	lsls	r3, r3, #4
 802254e:	1a9b      	subs	r3, r3, r2
 8022550:	009b      	lsls	r3, r3, #2
 8022552:	440b      	add	r3, r1
 8022554:	334c      	adds	r3, #76	@ 0x4c
 8022556:	2204      	movs	r2, #4
 8022558:	701a      	strb	r2, [r3, #0]
      break;
 802255a:	e001      	b.n	8022560 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 802255c:	bf00      	nop
 802255e:	e000      	b.n	8022562 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8022560:	bf00      	nop
  }
}
 8022562:	bf00      	nop
 8022564:	3728      	adds	r7, #40	@ 0x28
 8022566:	46bd      	mov	sp, r7
 8022568:	bd80      	pop	{r7, pc}

0802256a <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 802256a:	b580      	push	{r7, lr}
 802256c:	b086      	sub	sp, #24
 802256e:	af00      	add	r7, sp, #0
 8022570:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8022572:	687b      	ldr	r3, [r7, #4]
 8022574:	681b      	ldr	r3, [r3, #0]
 8022576:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8022578:	697b      	ldr	r3, [r7, #20]
 802257a:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 802257c:	693b      	ldr	r3, [r7, #16]
 802257e:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8022582:	681b      	ldr	r3, [r3, #0]
 8022584:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8022586:	693b      	ldr	r3, [r7, #16]
 8022588:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 802258c:	681b      	ldr	r3, [r3, #0]
 802258e:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8022590:	68bb      	ldr	r3, [r7, #8]
 8022592:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8022596:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8022598:	68fb      	ldr	r3, [r7, #12]
 802259a:	f003 0302 	and.w	r3, r3, #2
 802259e:	2b02      	cmp	r3, #2
 80225a0:	d10b      	bne.n	80225ba <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80225a2:	68fb      	ldr	r3, [r7, #12]
 80225a4:	f003 0301 	and.w	r3, r3, #1
 80225a8:	2b01      	cmp	r3, #1
 80225aa:	d102      	bne.n	80225b2 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80225ac:	6878      	ldr	r0, [r7, #4]
 80225ae:	f000 fc18 	bl	8022de2 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80225b2:	68bb      	ldr	r3, [r7, #8]
 80225b4:	f043 0302 	orr.w	r3, r3, #2
 80225b8:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80225ba:	68fb      	ldr	r3, [r7, #12]
 80225bc:	f003 0308 	and.w	r3, r3, #8
 80225c0:	2b08      	cmp	r3, #8
 80225c2:	d132      	bne.n	802262a <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80225c4:	68bb      	ldr	r3, [r7, #8]
 80225c6:	f043 0308 	orr.w	r3, r3, #8
 80225ca:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80225cc:	68fb      	ldr	r3, [r7, #12]
 80225ce:	f003 0304 	and.w	r3, r3, #4
 80225d2:	2b04      	cmp	r3, #4
 80225d4:	d126      	bne.n	8022624 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 80225d6:	687b      	ldr	r3, [r7, #4]
 80225d8:	7a5b      	ldrb	r3, [r3, #9]
 80225da:	2b02      	cmp	r3, #2
 80225dc:	d113      	bne.n	8022606 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80225de:	68fb      	ldr	r3, [r7, #12]
 80225e0:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 80225e4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80225e8:	d106      	bne.n	80225f8 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80225ea:	687b      	ldr	r3, [r7, #4]
 80225ec:	681b      	ldr	r3, [r3, #0]
 80225ee:	2102      	movs	r1, #2
 80225f0:	4618      	mov	r0, r3
 80225f2:	f000 f949 	bl	8022888 <USB_InitFSLSPClkSel>
 80225f6:	e011      	b.n	802261c <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80225f8:	687b      	ldr	r3, [r7, #4]
 80225fa:	681b      	ldr	r3, [r3, #0]
 80225fc:	2101      	movs	r1, #1
 80225fe:	4618      	mov	r0, r3
 8022600:	f000 f942 	bl	8022888 <USB_InitFSLSPClkSel>
 8022604:	e00a      	b.n	802261c <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8022606:	687b      	ldr	r3, [r7, #4]
 8022608:	79db      	ldrb	r3, [r3, #7]
 802260a:	2b01      	cmp	r3, #1
 802260c:	d106      	bne.n	802261c <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 802260e:	693b      	ldr	r3, [r7, #16]
 8022610:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8022614:	461a      	mov	r2, r3
 8022616:	f64e 2360 	movw	r3, #60000	@ 0xea60
 802261a:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 802261c:	6878      	ldr	r0, [r7, #4]
 802261e:	f000 fc0a 	bl	8022e36 <HAL_HCD_PortEnabled_Callback>
 8022622:	e002      	b.n	802262a <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8022624:	6878      	ldr	r0, [r7, #4]
 8022626:	f000 fc14 	bl	8022e52 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 802262a:	68fb      	ldr	r3, [r7, #12]
 802262c:	f003 0320 	and.w	r3, r3, #32
 8022630:	2b20      	cmp	r3, #32
 8022632:	d103      	bne.n	802263c <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8022634:	68bb      	ldr	r3, [r7, #8]
 8022636:	f043 0320 	orr.w	r3, r3, #32
 802263a:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 802263c:	693b      	ldr	r3, [r7, #16]
 802263e:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8022642:	461a      	mov	r2, r3
 8022644:	68bb      	ldr	r3, [r7, #8]
 8022646:	6013      	str	r3, [r2, #0]
}
 8022648:	bf00      	nop
 802264a:	3718      	adds	r7, #24
 802264c:	46bd      	mov	sp, r7
 802264e:	bd80      	pop	{r7, pc}

08022650 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8022650:	b480      	push	{r7}
 8022652:	b083      	sub	sp, #12
 8022654:	af00      	add	r7, sp, #0
 8022656:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8022658:	687b      	ldr	r3, [r7, #4]
 802265a:	689b      	ldr	r3, [r3, #8]
 802265c:	f043 0201 	orr.w	r2, r3, #1
 8022660:	687b      	ldr	r3, [r7, #4]
 8022662:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8022664:	2300      	movs	r3, #0
}
 8022666:	4618      	mov	r0, r3
 8022668:	370c      	adds	r7, #12
 802266a:	46bd      	mov	sp, r7
 802266c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022670:	4770      	bx	lr

08022672 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8022672:	b480      	push	{r7}
 8022674:	b083      	sub	sp, #12
 8022676:	af00      	add	r7, sp, #0
 8022678:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 802267a:	687b      	ldr	r3, [r7, #4]
 802267c:	689b      	ldr	r3, [r3, #8]
 802267e:	f023 0201 	bic.w	r2, r3, #1
 8022682:	687b      	ldr	r3, [r7, #4]
 8022684:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8022686:	2300      	movs	r3, #0
}
 8022688:	4618      	mov	r0, r3
 802268a:	370c      	adds	r7, #12
 802268c:	46bd      	mov	sp, r7
 802268e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022692:	4770      	bx	lr

08022694 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8022694:	b480      	push	{r7}
 8022696:	b085      	sub	sp, #20
 8022698:	af00      	add	r7, sp, #0
 802269a:	6078      	str	r0, [r7, #4]
 802269c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 802269e:	2300      	movs	r3, #0
 80226a0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80226a2:	68fb      	ldr	r3, [r7, #12]
 80226a4:	3301      	adds	r3, #1
 80226a6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80226a8:	68fb      	ldr	r3, [r7, #12]
 80226aa:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80226ae:	d901      	bls.n	80226b4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80226b0:	2303      	movs	r3, #3
 80226b2:	e01b      	b.n	80226ec <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80226b4:	687b      	ldr	r3, [r7, #4]
 80226b6:	691b      	ldr	r3, [r3, #16]
 80226b8:	2b00      	cmp	r3, #0
 80226ba:	daf2      	bge.n	80226a2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80226bc:	2300      	movs	r3, #0
 80226be:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80226c0:	683b      	ldr	r3, [r7, #0]
 80226c2:	019b      	lsls	r3, r3, #6
 80226c4:	f043 0220 	orr.w	r2, r3, #32
 80226c8:	687b      	ldr	r3, [r7, #4]
 80226ca:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80226cc:	68fb      	ldr	r3, [r7, #12]
 80226ce:	3301      	adds	r3, #1
 80226d0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80226d2:	68fb      	ldr	r3, [r7, #12]
 80226d4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80226d8:	d901      	bls.n	80226de <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80226da:	2303      	movs	r3, #3
 80226dc:	e006      	b.n	80226ec <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80226de:	687b      	ldr	r3, [r7, #4]
 80226e0:	691b      	ldr	r3, [r3, #16]
 80226e2:	f003 0320 	and.w	r3, r3, #32
 80226e6:	2b20      	cmp	r3, #32
 80226e8:	d0f0      	beq.n	80226cc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80226ea:	2300      	movs	r3, #0
}
 80226ec:	4618      	mov	r0, r3
 80226ee:	3714      	adds	r7, #20
 80226f0:	46bd      	mov	sp, r7
 80226f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80226f6:	4770      	bx	lr

080226f8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80226f8:	b480      	push	{r7}
 80226fa:	b085      	sub	sp, #20
 80226fc:	af00      	add	r7, sp, #0
 80226fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8022700:	2300      	movs	r3, #0
 8022702:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8022704:	68fb      	ldr	r3, [r7, #12]
 8022706:	3301      	adds	r3, #1
 8022708:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 802270a:	68fb      	ldr	r3, [r7, #12]
 802270c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8022710:	d901      	bls.n	8022716 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8022712:	2303      	movs	r3, #3
 8022714:	e018      	b.n	8022748 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8022716:	687b      	ldr	r3, [r7, #4]
 8022718:	691b      	ldr	r3, [r3, #16]
 802271a:	2b00      	cmp	r3, #0
 802271c:	daf2      	bge.n	8022704 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 802271e:	2300      	movs	r3, #0
 8022720:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8022722:	687b      	ldr	r3, [r7, #4]
 8022724:	2210      	movs	r2, #16
 8022726:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8022728:	68fb      	ldr	r3, [r7, #12]
 802272a:	3301      	adds	r3, #1
 802272c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 802272e:	68fb      	ldr	r3, [r7, #12]
 8022730:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8022734:	d901      	bls.n	802273a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8022736:	2303      	movs	r3, #3
 8022738:	e006      	b.n	8022748 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 802273a:	687b      	ldr	r3, [r7, #4]
 802273c:	691b      	ldr	r3, [r3, #16]
 802273e:	f003 0310 	and.w	r3, r3, #16
 8022742:	2b10      	cmp	r3, #16
 8022744:	d0f0      	beq.n	8022728 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8022746:	2300      	movs	r3, #0
}
 8022748:	4618      	mov	r0, r3
 802274a:	3714      	adds	r7, #20
 802274c:	46bd      	mov	sp, r7
 802274e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022752:	4770      	bx	lr

08022754 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8022754:	b480      	push	{r7}
 8022756:	b08b      	sub	sp, #44	@ 0x2c
 8022758:	af00      	add	r7, sp, #0
 802275a:	60f8      	str	r0, [r7, #12]
 802275c:	60b9      	str	r1, [r7, #8]
 802275e:	4613      	mov	r3, r2
 8022760:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8022762:	68fb      	ldr	r3, [r7, #12]
 8022764:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8022766:	68bb      	ldr	r3, [r7, #8]
 8022768:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 802276a:	88fb      	ldrh	r3, [r7, #6]
 802276c:	089b      	lsrs	r3, r3, #2
 802276e:	b29b      	uxth	r3, r3
 8022770:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8022772:	88fb      	ldrh	r3, [r7, #6]
 8022774:	f003 0303 	and.w	r3, r3, #3
 8022778:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 802277a:	2300      	movs	r3, #0
 802277c:	623b      	str	r3, [r7, #32]
 802277e:	e014      	b.n	80227aa <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8022780:	69bb      	ldr	r3, [r7, #24]
 8022782:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8022786:	681a      	ldr	r2, [r3, #0]
 8022788:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802278a:	601a      	str	r2, [r3, #0]
    pDest++;
 802278c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802278e:	3301      	adds	r3, #1
 8022790:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8022792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8022794:	3301      	adds	r3, #1
 8022796:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8022798:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802279a:	3301      	adds	r3, #1
 802279c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 802279e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80227a0:	3301      	adds	r3, #1
 80227a2:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80227a4:	6a3b      	ldr	r3, [r7, #32]
 80227a6:	3301      	adds	r3, #1
 80227a8:	623b      	str	r3, [r7, #32]
 80227aa:	6a3a      	ldr	r2, [r7, #32]
 80227ac:	697b      	ldr	r3, [r7, #20]
 80227ae:	429a      	cmp	r2, r3
 80227b0:	d3e6      	bcc.n	8022780 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80227b2:	8bfb      	ldrh	r3, [r7, #30]
 80227b4:	2b00      	cmp	r3, #0
 80227b6:	d01e      	beq.n	80227f6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80227b8:	2300      	movs	r3, #0
 80227ba:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80227bc:	69bb      	ldr	r3, [r7, #24]
 80227be:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80227c2:	461a      	mov	r2, r3
 80227c4:	f107 0310 	add.w	r3, r7, #16
 80227c8:	6812      	ldr	r2, [r2, #0]
 80227ca:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80227cc:	693a      	ldr	r2, [r7, #16]
 80227ce:	6a3b      	ldr	r3, [r7, #32]
 80227d0:	b2db      	uxtb	r3, r3
 80227d2:	00db      	lsls	r3, r3, #3
 80227d4:	fa22 f303 	lsr.w	r3, r2, r3
 80227d8:	b2da      	uxtb	r2, r3
 80227da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80227dc:	701a      	strb	r2, [r3, #0]
      i++;
 80227de:	6a3b      	ldr	r3, [r7, #32]
 80227e0:	3301      	adds	r3, #1
 80227e2:	623b      	str	r3, [r7, #32]
      pDest++;
 80227e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80227e6:	3301      	adds	r3, #1
 80227e8:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80227ea:	8bfb      	ldrh	r3, [r7, #30]
 80227ec:	3b01      	subs	r3, #1
 80227ee:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80227f0:	8bfb      	ldrh	r3, [r7, #30]
 80227f2:	2b00      	cmp	r3, #0
 80227f4:	d1ea      	bne.n	80227cc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80227f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80227f8:	4618      	mov	r0, r3
 80227fa:	372c      	adds	r7, #44	@ 0x2c
 80227fc:	46bd      	mov	sp, r7
 80227fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022802:	4770      	bx	lr

08022804 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8022804:	b480      	push	{r7}
 8022806:	b085      	sub	sp, #20
 8022808:	af00      	add	r7, sp, #0
 802280a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 802280c:	687b      	ldr	r3, [r7, #4]
 802280e:	695b      	ldr	r3, [r3, #20]
 8022810:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8022812:	687b      	ldr	r3, [r7, #4]
 8022814:	699b      	ldr	r3, [r3, #24]
 8022816:	68fa      	ldr	r2, [r7, #12]
 8022818:	4013      	ands	r3, r2
 802281a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 802281c:	68fb      	ldr	r3, [r7, #12]
}
 802281e:	4618      	mov	r0, r3
 8022820:	3714      	adds	r7, #20
 8022822:	46bd      	mov	sp, r7
 8022824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022828:	4770      	bx	lr

0802282a <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 802282a:	b480      	push	{r7}
 802282c:	b085      	sub	sp, #20
 802282e:	af00      	add	r7, sp, #0
 8022830:	6078      	str	r0, [r7, #4]
 8022832:	460b      	mov	r3, r1
 8022834:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8022836:	687b      	ldr	r3, [r7, #4]
 8022838:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 802283a:	78fb      	ldrb	r3, [r7, #3]
 802283c:	015a      	lsls	r2, r3, #5
 802283e:	68fb      	ldr	r3, [r7, #12]
 8022840:	4413      	add	r3, r2
 8022842:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8022846:	689b      	ldr	r3, [r3, #8]
 8022848:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 802284a:	78fb      	ldrb	r3, [r7, #3]
 802284c:	015a      	lsls	r2, r3, #5
 802284e:	68fb      	ldr	r3, [r7, #12]
 8022850:	4413      	add	r3, r2
 8022852:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8022856:	68db      	ldr	r3, [r3, #12]
 8022858:	68ba      	ldr	r2, [r7, #8]
 802285a:	4013      	ands	r3, r2
 802285c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 802285e:	68bb      	ldr	r3, [r7, #8]
}
 8022860:	4618      	mov	r0, r3
 8022862:	3714      	adds	r7, #20
 8022864:	46bd      	mov	sp, r7
 8022866:	f85d 7b04 	ldr.w	r7, [sp], #4
 802286a:	4770      	bx	lr

0802286c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 802286c:	b480      	push	{r7}
 802286e:	b083      	sub	sp, #12
 8022870:	af00      	add	r7, sp, #0
 8022872:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8022874:	687b      	ldr	r3, [r7, #4]
 8022876:	695b      	ldr	r3, [r3, #20]
 8022878:	f003 0301 	and.w	r3, r3, #1
}
 802287c:	4618      	mov	r0, r3
 802287e:	370c      	adds	r7, #12
 8022880:	46bd      	mov	sp, r7
 8022882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022886:	4770      	bx	lr

08022888 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8022888:	b480      	push	{r7}
 802288a:	b085      	sub	sp, #20
 802288c:	af00      	add	r7, sp, #0
 802288e:	6078      	str	r0, [r7, #4]
 8022890:	460b      	mov	r3, r1
 8022892:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8022894:	687b      	ldr	r3, [r7, #4]
 8022896:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8022898:	68fb      	ldr	r3, [r7, #12]
 802289a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 802289e:	681b      	ldr	r3, [r3, #0]
 80228a0:	68fa      	ldr	r2, [r7, #12]
 80228a2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80228a6:	f023 0303 	bic.w	r3, r3, #3
 80228aa:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80228ac:	68fb      	ldr	r3, [r7, #12]
 80228ae:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80228b2:	681a      	ldr	r2, [r3, #0]
 80228b4:	78fb      	ldrb	r3, [r7, #3]
 80228b6:	f003 0303 	and.w	r3, r3, #3
 80228ba:	68f9      	ldr	r1, [r7, #12]
 80228bc:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80228c0:	4313      	orrs	r3, r2
 80228c2:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80228c4:	78fb      	ldrb	r3, [r7, #3]
 80228c6:	2b01      	cmp	r3, #1
 80228c8:	d107      	bne.n	80228da <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 80228ca:	68fb      	ldr	r3, [r7, #12]
 80228cc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80228d0:	461a      	mov	r2, r3
 80228d2:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80228d6:	6053      	str	r3, [r2, #4]
 80228d8:	e00c      	b.n	80228f4 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 80228da:	78fb      	ldrb	r3, [r7, #3]
 80228dc:	2b02      	cmp	r3, #2
 80228de:	d107      	bne.n	80228f0 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 80228e0:	68fb      	ldr	r3, [r7, #12]
 80228e2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80228e6:	461a      	mov	r2, r3
 80228e8:	f241 7370 	movw	r3, #6000	@ 0x1770
 80228ec:	6053      	str	r3, [r2, #4]
 80228ee:	e001      	b.n	80228f4 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 80228f0:	2301      	movs	r3, #1
 80228f2:	e000      	b.n	80228f6 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 80228f4:	2300      	movs	r3, #0
}
 80228f6:	4618      	mov	r0, r3
 80228f8:	3714      	adds	r7, #20
 80228fa:	46bd      	mov	sp, r7
 80228fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022900:	4770      	bx	lr

08022902 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8022902:	b480      	push	{r7}
 8022904:	b085      	sub	sp, #20
 8022906:	af00      	add	r7, sp, #0
 8022908:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802290a:	687b      	ldr	r3, [r7, #4]
 802290c:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 802290e:	68fb      	ldr	r3, [r7, #12]
 8022910:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8022914:	695b      	ldr	r3, [r3, #20]
 8022916:	b29b      	uxth	r3, r3
}
 8022918:	4618      	mov	r0, r3
 802291a:	3714      	adds	r7, #20
 802291c:	46bd      	mov	sp, r7
 802291e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022922:	4770      	bx	lr

08022924 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8022924:	b480      	push	{r7}
 8022926:	b089      	sub	sp, #36	@ 0x24
 8022928:	af00      	add	r7, sp, #0
 802292a:	6078      	str	r0, [r7, #4]
 802292c:	460b      	mov	r3, r1
 802292e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8022930:	687b      	ldr	r3, [r7, #4]
 8022932:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8022934:	78fb      	ldrb	r3, [r7, #3]
 8022936:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8022938:	2300      	movs	r3, #0
 802293a:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 802293c:	69bb      	ldr	r3, [r7, #24]
 802293e:	015a      	lsls	r2, r3, #5
 8022940:	69fb      	ldr	r3, [r7, #28]
 8022942:	4413      	add	r3, r2
 8022944:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8022948:	681b      	ldr	r3, [r3, #0]
 802294a:	0c9b      	lsrs	r3, r3, #18
 802294c:	f003 0303 	and.w	r3, r3, #3
 8022950:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8022952:	69bb      	ldr	r3, [r7, #24]
 8022954:	015a      	lsls	r2, r3, #5
 8022956:	69fb      	ldr	r3, [r7, #28]
 8022958:	4413      	add	r3, r2
 802295a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 802295e:	681b      	ldr	r3, [r3, #0]
 8022960:	0fdb      	lsrs	r3, r3, #31
 8022962:	f003 0301 	and.w	r3, r3, #1
 8022966:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8022968:	69bb      	ldr	r3, [r7, #24]
 802296a:	015a      	lsls	r2, r3, #5
 802296c:	69fb      	ldr	r3, [r7, #28]
 802296e:	4413      	add	r3, r2
 8022970:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8022974:	685b      	ldr	r3, [r3, #4]
 8022976:	0fdb      	lsrs	r3, r3, #31
 8022978:	f003 0301 	and.w	r3, r3, #1
 802297c:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 802297e:	687b      	ldr	r3, [r7, #4]
 8022980:	689b      	ldr	r3, [r3, #8]
 8022982:	f003 0320 	and.w	r3, r3, #32
 8022986:	2b20      	cmp	r3, #32
 8022988:	d10d      	bne.n	80229a6 <USB_HC_Halt+0x82>
 802298a:	68fb      	ldr	r3, [r7, #12]
 802298c:	2b00      	cmp	r3, #0
 802298e:	d10a      	bne.n	80229a6 <USB_HC_Halt+0x82>
 8022990:	693b      	ldr	r3, [r7, #16]
 8022992:	2b00      	cmp	r3, #0
 8022994:	d005      	beq.n	80229a2 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8022996:	697b      	ldr	r3, [r7, #20]
 8022998:	2b01      	cmp	r3, #1
 802299a:	d002      	beq.n	80229a2 <USB_HC_Halt+0x7e>
 802299c:	697b      	ldr	r3, [r7, #20]
 802299e:	2b03      	cmp	r3, #3
 80229a0:	d101      	bne.n	80229a6 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 80229a2:	2300      	movs	r3, #0
 80229a4:	e0d8      	b.n	8022b58 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80229a6:	697b      	ldr	r3, [r7, #20]
 80229a8:	2b00      	cmp	r3, #0
 80229aa:	d002      	beq.n	80229b2 <USB_HC_Halt+0x8e>
 80229ac:	697b      	ldr	r3, [r7, #20]
 80229ae:	2b02      	cmp	r3, #2
 80229b0:	d173      	bne.n	8022a9a <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80229b2:	69bb      	ldr	r3, [r7, #24]
 80229b4:	015a      	lsls	r2, r3, #5
 80229b6:	69fb      	ldr	r3, [r7, #28]
 80229b8:	4413      	add	r3, r2
 80229ba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80229be:	681b      	ldr	r3, [r3, #0]
 80229c0:	69ba      	ldr	r2, [r7, #24]
 80229c2:	0151      	lsls	r1, r2, #5
 80229c4:	69fa      	ldr	r2, [r7, #28]
 80229c6:	440a      	add	r2, r1
 80229c8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80229cc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80229d0:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80229d2:	687b      	ldr	r3, [r7, #4]
 80229d4:	689b      	ldr	r3, [r3, #8]
 80229d6:	f003 0320 	and.w	r3, r3, #32
 80229da:	2b00      	cmp	r3, #0
 80229dc:	d14a      	bne.n	8022a74 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80229de:	687b      	ldr	r3, [r7, #4]
 80229e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80229e2:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80229e6:	2b00      	cmp	r3, #0
 80229e8:	d133      	bne.n	8022a52 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80229ea:	69bb      	ldr	r3, [r7, #24]
 80229ec:	015a      	lsls	r2, r3, #5
 80229ee:	69fb      	ldr	r3, [r7, #28]
 80229f0:	4413      	add	r3, r2
 80229f2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80229f6:	681b      	ldr	r3, [r3, #0]
 80229f8:	69ba      	ldr	r2, [r7, #24]
 80229fa:	0151      	lsls	r1, r2, #5
 80229fc:	69fa      	ldr	r2, [r7, #28]
 80229fe:	440a      	add	r2, r1
 8022a00:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8022a04:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8022a08:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8022a0a:	69bb      	ldr	r3, [r7, #24]
 8022a0c:	015a      	lsls	r2, r3, #5
 8022a0e:	69fb      	ldr	r3, [r7, #28]
 8022a10:	4413      	add	r3, r2
 8022a12:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8022a16:	681b      	ldr	r3, [r3, #0]
 8022a18:	69ba      	ldr	r2, [r7, #24]
 8022a1a:	0151      	lsls	r1, r2, #5
 8022a1c:	69fa      	ldr	r2, [r7, #28]
 8022a1e:	440a      	add	r2, r1
 8022a20:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8022a24:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8022a28:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8022a2a:	68bb      	ldr	r3, [r7, #8]
 8022a2c:	3301      	adds	r3, #1
 8022a2e:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8022a30:	68bb      	ldr	r3, [r7, #8]
 8022a32:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8022a36:	d82e      	bhi.n	8022a96 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8022a38:	69bb      	ldr	r3, [r7, #24]
 8022a3a:	015a      	lsls	r2, r3, #5
 8022a3c:	69fb      	ldr	r3, [r7, #28]
 8022a3e:	4413      	add	r3, r2
 8022a40:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8022a44:	681b      	ldr	r3, [r3, #0]
 8022a46:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8022a4a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8022a4e:	d0ec      	beq.n	8022a2a <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8022a50:	e081      	b.n	8022b56 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8022a52:	69bb      	ldr	r3, [r7, #24]
 8022a54:	015a      	lsls	r2, r3, #5
 8022a56:	69fb      	ldr	r3, [r7, #28]
 8022a58:	4413      	add	r3, r2
 8022a5a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8022a5e:	681b      	ldr	r3, [r3, #0]
 8022a60:	69ba      	ldr	r2, [r7, #24]
 8022a62:	0151      	lsls	r1, r2, #5
 8022a64:	69fa      	ldr	r2, [r7, #28]
 8022a66:	440a      	add	r2, r1
 8022a68:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8022a6c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8022a70:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8022a72:	e070      	b.n	8022b56 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8022a74:	69bb      	ldr	r3, [r7, #24]
 8022a76:	015a      	lsls	r2, r3, #5
 8022a78:	69fb      	ldr	r3, [r7, #28]
 8022a7a:	4413      	add	r3, r2
 8022a7c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8022a80:	681b      	ldr	r3, [r3, #0]
 8022a82:	69ba      	ldr	r2, [r7, #24]
 8022a84:	0151      	lsls	r1, r2, #5
 8022a86:	69fa      	ldr	r2, [r7, #28]
 8022a88:	440a      	add	r2, r1
 8022a8a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8022a8e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8022a92:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8022a94:	e05f      	b.n	8022b56 <USB_HC_Halt+0x232>
            break;
 8022a96:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8022a98:	e05d      	b.n	8022b56 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8022a9a:	69bb      	ldr	r3, [r7, #24]
 8022a9c:	015a      	lsls	r2, r3, #5
 8022a9e:	69fb      	ldr	r3, [r7, #28]
 8022aa0:	4413      	add	r3, r2
 8022aa2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8022aa6:	681b      	ldr	r3, [r3, #0]
 8022aa8:	69ba      	ldr	r2, [r7, #24]
 8022aaa:	0151      	lsls	r1, r2, #5
 8022aac:	69fa      	ldr	r2, [r7, #28]
 8022aae:	440a      	add	r2, r1
 8022ab0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8022ab4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8022ab8:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8022aba:	69fb      	ldr	r3, [r7, #28]
 8022abc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8022ac0:	691b      	ldr	r3, [r3, #16]
 8022ac2:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8022ac6:	2b00      	cmp	r3, #0
 8022ac8:	d133      	bne.n	8022b32 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8022aca:	69bb      	ldr	r3, [r7, #24]
 8022acc:	015a      	lsls	r2, r3, #5
 8022ace:	69fb      	ldr	r3, [r7, #28]
 8022ad0:	4413      	add	r3, r2
 8022ad2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8022ad6:	681b      	ldr	r3, [r3, #0]
 8022ad8:	69ba      	ldr	r2, [r7, #24]
 8022ada:	0151      	lsls	r1, r2, #5
 8022adc:	69fa      	ldr	r2, [r7, #28]
 8022ade:	440a      	add	r2, r1
 8022ae0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8022ae4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8022ae8:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8022aea:	69bb      	ldr	r3, [r7, #24]
 8022aec:	015a      	lsls	r2, r3, #5
 8022aee:	69fb      	ldr	r3, [r7, #28]
 8022af0:	4413      	add	r3, r2
 8022af2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8022af6:	681b      	ldr	r3, [r3, #0]
 8022af8:	69ba      	ldr	r2, [r7, #24]
 8022afa:	0151      	lsls	r1, r2, #5
 8022afc:	69fa      	ldr	r2, [r7, #28]
 8022afe:	440a      	add	r2, r1
 8022b00:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8022b04:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8022b08:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8022b0a:	68bb      	ldr	r3, [r7, #8]
 8022b0c:	3301      	adds	r3, #1
 8022b0e:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8022b10:	68bb      	ldr	r3, [r7, #8]
 8022b12:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8022b16:	d81d      	bhi.n	8022b54 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8022b18:	69bb      	ldr	r3, [r7, #24]
 8022b1a:	015a      	lsls	r2, r3, #5
 8022b1c:	69fb      	ldr	r3, [r7, #28]
 8022b1e:	4413      	add	r3, r2
 8022b20:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8022b24:	681b      	ldr	r3, [r3, #0]
 8022b26:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8022b2a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8022b2e:	d0ec      	beq.n	8022b0a <USB_HC_Halt+0x1e6>
 8022b30:	e011      	b.n	8022b56 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8022b32:	69bb      	ldr	r3, [r7, #24]
 8022b34:	015a      	lsls	r2, r3, #5
 8022b36:	69fb      	ldr	r3, [r7, #28]
 8022b38:	4413      	add	r3, r2
 8022b3a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8022b3e:	681b      	ldr	r3, [r3, #0]
 8022b40:	69ba      	ldr	r2, [r7, #24]
 8022b42:	0151      	lsls	r1, r2, #5
 8022b44:	69fa      	ldr	r2, [r7, #28]
 8022b46:	440a      	add	r2, r1
 8022b48:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8022b4c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8022b50:	6013      	str	r3, [r2, #0]
 8022b52:	e000      	b.n	8022b56 <USB_HC_Halt+0x232>
          break;
 8022b54:	bf00      	nop
    }
  }

  return HAL_OK;
 8022b56:	2300      	movs	r3, #0
}
 8022b58:	4618      	mov	r0, r3
 8022b5a:	3724      	adds	r7, #36	@ 0x24
 8022b5c:	46bd      	mov	sp, r7
 8022b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022b62:	4770      	bx	lr

08022b64 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8022b64:	b580      	push	{r7, lr}
 8022b66:	b088      	sub	sp, #32
 8022b68:	af00      	add	r7, sp, #0
 8022b6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8022b6c:	2300      	movs	r3, #0
 8022b6e:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8022b70:	687b      	ldr	r3, [r7, #4]
 8022b72:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8022b74:	2300      	movs	r3, #0
 8022b76:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8022b78:	6878      	ldr	r0, [r7, #4]
 8022b7a:	f7ff fd7a 	bl	8022672 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8022b7e:	2110      	movs	r1, #16
 8022b80:	6878      	ldr	r0, [r7, #4]
 8022b82:	f7ff fd87 	bl	8022694 <USB_FlushTxFifo>
 8022b86:	4603      	mov	r3, r0
 8022b88:	2b00      	cmp	r3, #0
 8022b8a:	d001      	beq.n	8022b90 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8022b8c:	2301      	movs	r3, #1
 8022b8e:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8022b90:	6878      	ldr	r0, [r7, #4]
 8022b92:	f7ff fdb1 	bl	80226f8 <USB_FlushRxFifo>
 8022b96:	4603      	mov	r3, r0
 8022b98:	2b00      	cmp	r3, #0
 8022b9a:	d001      	beq.n	8022ba0 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8022b9c:	2301      	movs	r3, #1
 8022b9e:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8022ba0:	2300      	movs	r3, #0
 8022ba2:	61bb      	str	r3, [r7, #24]
 8022ba4:	e01f      	b.n	8022be6 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8022ba6:	69bb      	ldr	r3, [r7, #24]
 8022ba8:	015a      	lsls	r2, r3, #5
 8022baa:	697b      	ldr	r3, [r7, #20]
 8022bac:	4413      	add	r3, r2
 8022bae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8022bb2:	681b      	ldr	r3, [r3, #0]
 8022bb4:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8022bb6:	693b      	ldr	r3, [r7, #16]
 8022bb8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8022bbc:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8022bbe:	693b      	ldr	r3, [r7, #16]
 8022bc0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8022bc4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8022bc6:	693b      	ldr	r3, [r7, #16]
 8022bc8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8022bcc:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8022bce:	69bb      	ldr	r3, [r7, #24]
 8022bd0:	015a      	lsls	r2, r3, #5
 8022bd2:	697b      	ldr	r3, [r7, #20]
 8022bd4:	4413      	add	r3, r2
 8022bd6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8022bda:	461a      	mov	r2, r3
 8022bdc:	693b      	ldr	r3, [r7, #16]
 8022bde:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8022be0:	69bb      	ldr	r3, [r7, #24]
 8022be2:	3301      	adds	r3, #1
 8022be4:	61bb      	str	r3, [r7, #24]
 8022be6:	69bb      	ldr	r3, [r7, #24]
 8022be8:	2b0f      	cmp	r3, #15
 8022bea:	d9dc      	bls.n	8022ba6 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8022bec:	2300      	movs	r3, #0
 8022bee:	61bb      	str	r3, [r7, #24]
 8022bf0:	e034      	b.n	8022c5c <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8022bf2:	69bb      	ldr	r3, [r7, #24]
 8022bf4:	015a      	lsls	r2, r3, #5
 8022bf6:	697b      	ldr	r3, [r7, #20]
 8022bf8:	4413      	add	r3, r2
 8022bfa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8022bfe:	681b      	ldr	r3, [r3, #0]
 8022c00:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8022c02:	693b      	ldr	r3, [r7, #16]
 8022c04:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8022c08:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8022c0a:	693b      	ldr	r3, [r7, #16]
 8022c0c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8022c10:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8022c12:	693b      	ldr	r3, [r7, #16]
 8022c14:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8022c18:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8022c1a:	69bb      	ldr	r3, [r7, #24]
 8022c1c:	015a      	lsls	r2, r3, #5
 8022c1e:	697b      	ldr	r3, [r7, #20]
 8022c20:	4413      	add	r3, r2
 8022c22:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8022c26:	461a      	mov	r2, r3
 8022c28:	693b      	ldr	r3, [r7, #16]
 8022c2a:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8022c2c:	68fb      	ldr	r3, [r7, #12]
 8022c2e:	3301      	adds	r3, #1
 8022c30:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8022c32:	68fb      	ldr	r3, [r7, #12]
 8022c34:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8022c38:	d80c      	bhi.n	8022c54 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8022c3a:	69bb      	ldr	r3, [r7, #24]
 8022c3c:	015a      	lsls	r2, r3, #5
 8022c3e:	697b      	ldr	r3, [r7, #20]
 8022c40:	4413      	add	r3, r2
 8022c42:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8022c46:	681b      	ldr	r3, [r3, #0]
 8022c48:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8022c4c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8022c50:	d0ec      	beq.n	8022c2c <USB_StopHost+0xc8>
 8022c52:	e000      	b.n	8022c56 <USB_StopHost+0xf2>
        break;
 8022c54:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8022c56:	69bb      	ldr	r3, [r7, #24]
 8022c58:	3301      	adds	r3, #1
 8022c5a:	61bb      	str	r3, [r7, #24]
 8022c5c:	69bb      	ldr	r3, [r7, #24]
 8022c5e:	2b0f      	cmp	r3, #15
 8022c60:	d9c7      	bls.n	8022bf2 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8022c62:	697b      	ldr	r3, [r7, #20]
 8022c64:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8022c68:	461a      	mov	r2, r3
 8022c6a:	f04f 33ff 	mov.w	r3, #4294967295
 8022c6e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8022c70:	687b      	ldr	r3, [r7, #4]
 8022c72:	f04f 32ff 	mov.w	r2, #4294967295
 8022c76:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8022c78:	6878      	ldr	r0, [r7, #4]
 8022c7a:	f7ff fce9 	bl	8022650 <USB_EnableGlobalInt>

  return ret;
 8022c7e:	7ffb      	ldrb	r3, [r7, #31]
}
 8022c80:	4618      	mov	r0, r3
 8022c82:	3720      	adds	r7, #32
 8022c84:	46bd      	mov	sp, r7
 8022c86:	bd80      	pop	{r7, pc}

08022c88 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8022c88:	b580      	push	{r7, lr}
 8022c8a:	b082      	sub	sp, #8
 8022c8c:	af00      	add	r7, sp, #0
 8022c8e:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8022c90:	687b      	ldr	r3, [r7, #4]
 8022c92:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8022c96:	1c5a      	adds	r2, r3, #1
 8022c98:	687b      	ldr	r3, [r7, #4]
 8022c9a:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 8022c9e:	6878      	ldr	r0, [r7, #4]
 8022ca0:	f000 f804 	bl	8022cac <USBH_HandleSof>
}
 8022ca4:	bf00      	nop
 8022ca6:	3708      	adds	r7, #8
 8022ca8:	46bd      	mov	sp, r7
 8022caa:	bd80      	pop	{r7, pc}

08022cac <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8022cac:	b580      	push	{r7, lr}
 8022cae:	b082      	sub	sp, #8
 8022cb0:	af00      	add	r7, sp, #0
 8022cb2:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8022cb4:	687b      	ldr	r3, [r7, #4]
 8022cb6:	781b      	ldrb	r3, [r3, #0]
 8022cb8:	b2db      	uxtb	r3, r3
 8022cba:	2b0b      	cmp	r3, #11
 8022cbc:	d10a      	bne.n	8022cd4 <USBH_HandleSof+0x28>
 8022cbe:	687b      	ldr	r3, [r7, #4]
 8022cc0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8022cc4:	2b00      	cmp	r3, #0
 8022cc6:	d005      	beq.n	8022cd4 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8022cc8:	687b      	ldr	r3, [r7, #4]
 8022cca:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8022cce:	699b      	ldr	r3, [r3, #24]
 8022cd0:	6878      	ldr	r0, [r7, #4]
 8022cd2:	4798      	blx	r3
  }
}
 8022cd4:	bf00      	nop
 8022cd6:	3708      	adds	r7, #8
 8022cd8:	46bd      	mov	sp, r7
 8022cda:	bd80      	pop	{r7, pc}

08022cdc <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8022cdc:	b480      	push	{r7}
 8022cde:	b083      	sub	sp, #12
 8022ce0:	af00      	add	r7, sp, #0
 8022ce2:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8022ce4:	687b      	ldr	r3, [r7, #4]
 8022ce6:	2201      	movs	r2, #1
 8022ce8:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8022cec:	bf00      	nop
}
 8022cee:	370c      	adds	r7, #12
 8022cf0:	46bd      	mov	sp, r7
 8022cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022cf6:	4770      	bx	lr

08022cf8 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8022cf8:	b480      	push	{r7}
 8022cfa:	b083      	sub	sp, #12
 8022cfc:	af00      	add	r7, sp, #0
 8022cfe:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8022d00:	687b      	ldr	r3, [r7, #4]
 8022d02:	2200      	movs	r2, #0
 8022d04:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 8022d08:	bf00      	nop
}
 8022d0a:	370c      	adds	r7, #12
 8022d0c:	46bd      	mov	sp, r7
 8022d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022d12:	4770      	bx	lr

08022d14 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8022d14:	b480      	push	{r7}
 8022d16:	b083      	sub	sp, #12
 8022d18:	af00      	add	r7, sp, #0
 8022d1a:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8022d1c:	687b      	ldr	r3, [r7, #4]
 8022d1e:	2201      	movs	r2, #1
 8022d20:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8022d24:	687b      	ldr	r3, [r7, #4]
 8022d26:	2200      	movs	r2, #0
 8022d28:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8022d2c:	687b      	ldr	r3, [r7, #4]
 8022d2e:	2200      	movs	r2, #0
 8022d30:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8022d34:	2300      	movs	r3, #0
}
 8022d36:	4618      	mov	r0, r3
 8022d38:	370c      	adds	r7, #12
 8022d3a:	46bd      	mov	sp, r7
 8022d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022d40:	4770      	bx	lr

08022d42 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8022d42:	b580      	push	{r7, lr}
 8022d44:	b082      	sub	sp, #8
 8022d46:	af00      	add	r7, sp, #0
 8022d48:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8022d4a:	687b      	ldr	r3, [r7, #4]
 8022d4c:	2201      	movs	r2, #1
 8022d4e:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 8022d52:	687b      	ldr	r3, [r7, #4]
 8022d54:	2200      	movs	r2, #0
 8022d56:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 8022d5a:	687b      	ldr	r3, [r7, #4]
 8022d5c:	2200      	movs	r2, #0
 8022d5e:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8022d62:	6878      	ldr	r0, [r7, #4]
 8022d64:	f000 f883 	bl	8022e6e <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8022d68:	687b      	ldr	r3, [r7, #4]
 8022d6a:	791b      	ldrb	r3, [r3, #4]
 8022d6c:	4619      	mov	r1, r3
 8022d6e:	6878      	ldr	r0, [r7, #4]
 8022d70:	f000 f80b 	bl	8022d8a <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8022d74:	687b      	ldr	r3, [r7, #4]
 8022d76:	795b      	ldrb	r3, [r3, #5]
 8022d78:	4619      	mov	r1, r3
 8022d7a:	6878      	ldr	r0, [r7, #4]
 8022d7c:	f000 f805 	bl	8022d8a <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8022d80:	2300      	movs	r3, #0
}
 8022d82:	4618      	mov	r0, r3
 8022d84:	3708      	adds	r7, #8
 8022d86:	46bd      	mov	sp, r7
 8022d88:	bd80      	pop	{r7, pc}

08022d8a <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8022d8a:	b480      	push	{r7}
 8022d8c:	b083      	sub	sp, #12
 8022d8e:	af00      	add	r7, sp, #0
 8022d90:	6078      	str	r0, [r7, #4]
 8022d92:	460b      	mov	r3, r1
 8022d94:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8022d96:	78fb      	ldrb	r3, [r7, #3]
 8022d98:	2b0f      	cmp	r3, #15
 8022d9a:	d80d      	bhi.n	8022db8 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8022d9c:	78fb      	ldrb	r3, [r7, #3]
 8022d9e:	687a      	ldr	r2, [r7, #4]
 8022da0:	33e0      	adds	r3, #224	@ 0xe0
 8022da2:	009b      	lsls	r3, r3, #2
 8022da4:	4413      	add	r3, r2
 8022da6:	685a      	ldr	r2, [r3, #4]
 8022da8:	78fb      	ldrb	r3, [r7, #3]
 8022daa:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8022dae:	6879      	ldr	r1, [r7, #4]
 8022db0:	33e0      	adds	r3, #224	@ 0xe0
 8022db2:	009b      	lsls	r3, r3, #2
 8022db4:	440b      	add	r3, r1
 8022db6:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8022db8:	2300      	movs	r3, #0
}
 8022dba:	4618      	mov	r0, r3
 8022dbc:	370c      	adds	r7, #12
 8022dbe:	46bd      	mov	sp, r7
 8022dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022dc4:	4770      	bx	lr

08022dc6 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8022dc6:	b580      	push	{r7, lr}
 8022dc8:	b082      	sub	sp, #8
 8022dca:	af00      	add	r7, sp, #0
 8022dcc:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8022dce:	687b      	ldr	r3, [r7, #4]
 8022dd0:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8022dd4:	4618      	mov	r0, r3
 8022dd6:	f7ff ff57 	bl	8022c88 <USBH_LL_IncTimer>
}
 8022dda:	bf00      	nop
 8022ddc:	3708      	adds	r7, #8
 8022dde:	46bd      	mov	sp, r7
 8022de0:	bd80      	pop	{r7, pc}

08022de2 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8022de2:	b580      	push	{r7, lr}
 8022de4:	b082      	sub	sp, #8
 8022de6:	af00      	add	r7, sp, #0
 8022de8:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8022dea:	687b      	ldr	r3, [r7, #4]
 8022dec:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8022df0:	4618      	mov	r0, r3
 8022df2:	f7ff ff8f 	bl	8022d14 <USBH_LL_Connect>
}
 8022df6:	bf00      	nop
 8022df8:	3708      	adds	r7, #8
 8022dfa:	46bd      	mov	sp, r7
 8022dfc:	bd80      	pop	{r7, pc}

08022dfe <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8022dfe:	b580      	push	{r7, lr}
 8022e00:	b082      	sub	sp, #8
 8022e02:	af00      	add	r7, sp, #0
 8022e04:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8022e06:	687b      	ldr	r3, [r7, #4]
 8022e08:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8022e0c:	4618      	mov	r0, r3
 8022e0e:	f7ff ff98 	bl	8022d42 <USBH_LL_Disconnect>
}
 8022e12:	bf00      	nop
 8022e14:	3708      	adds	r7, #8
 8022e16:	46bd      	mov	sp, r7
 8022e18:	bd80      	pop	{r7, pc}

08022e1a <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8022e1a:	b480      	push	{r7}
 8022e1c:	b083      	sub	sp, #12
 8022e1e:	af00      	add	r7, sp, #0
 8022e20:	6078      	str	r0, [r7, #4]
 8022e22:	460b      	mov	r3, r1
 8022e24:	70fb      	strb	r3, [r7, #3]
 8022e26:	4613      	mov	r3, r2
 8022e28:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8022e2a:	bf00      	nop
 8022e2c:	370c      	adds	r7, #12
 8022e2e:	46bd      	mov	sp, r7
 8022e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022e34:	4770      	bx	lr

08022e36 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8022e36:	b580      	push	{r7, lr}
 8022e38:	b082      	sub	sp, #8
 8022e3a:	af00      	add	r7, sp, #0
 8022e3c:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8022e3e:	687b      	ldr	r3, [r7, #4]
 8022e40:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8022e44:	4618      	mov	r0, r3
 8022e46:	f7ff ff49 	bl	8022cdc <USBH_LL_PortEnabled>
}
 8022e4a:	bf00      	nop
 8022e4c:	3708      	adds	r7, #8
 8022e4e:	46bd      	mov	sp, r7
 8022e50:	bd80      	pop	{r7, pc}

08022e52 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8022e52:	b580      	push	{r7, lr}
 8022e54:	b082      	sub	sp, #8
 8022e56:	af00      	add	r7, sp, #0
 8022e58:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8022e5a:	687b      	ldr	r3, [r7, #4]
 8022e5c:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8022e60:	4618      	mov	r0, r3
 8022e62:	f7ff ff49 	bl	8022cf8 <USBH_LL_PortDisabled>
}
 8022e66:	bf00      	nop
 8022e68:	3708      	adds	r7, #8
 8022e6a:	46bd      	mov	sp, r7
 8022e6c:	bd80      	pop	{r7, pc}

08022e6e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8022e6e:	b580      	push	{r7, lr}
 8022e70:	b084      	sub	sp, #16
 8022e72:	af00      	add	r7, sp, #0
 8022e74:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8022e76:	2300      	movs	r3, #0
 8022e78:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8022e7a:	2300      	movs	r3, #0
 8022e7c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8022e7e:	687b      	ldr	r3, [r7, #4]
 8022e80:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8022e84:	4618      	mov	r0, r3
 8022e86:	f7fd ff4c 	bl	8020d22 <HAL_HCD_Stop>
 8022e8a:	4603      	mov	r3, r0
 8022e8c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8022e8e:	7bfb      	ldrb	r3, [r7, #15]
 8022e90:	4618      	mov	r0, r3
 8022e92:	f000 f807 	bl	8022ea4 <USBH_Get_USB_Status>
 8022e96:	4603      	mov	r3, r0
 8022e98:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8022e9a:	7bbb      	ldrb	r3, [r7, #14]
}
 8022e9c:	4618      	mov	r0, r3
 8022e9e:	3710      	adds	r7, #16
 8022ea0:	46bd      	mov	sp, r7
 8022ea2:	bd80      	pop	{r7, pc}

08022ea4 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8022ea4:	b480      	push	{r7}
 8022ea6:	b085      	sub	sp, #20
 8022ea8:	af00      	add	r7, sp, #0
 8022eaa:	4603      	mov	r3, r0
 8022eac:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8022eae:	2300      	movs	r3, #0
 8022eb0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8022eb2:	79fb      	ldrb	r3, [r7, #7]
 8022eb4:	2b03      	cmp	r3, #3
 8022eb6:	d817      	bhi.n	8022ee8 <USBH_Get_USB_Status+0x44>
 8022eb8:	a201      	add	r2, pc, #4	@ (adr r2, 8022ec0 <USBH_Get_USB_Status+0x1c>)
 8022eba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8022ebe:	bf00      	nop
 8022ec0:	08022ed1 	.word	0x08022ed1
 8022ec4:	08022ed7 	.word	0x08022ed7
 8022ec8:	08022edd 	.word	0x08022edd
 8022ecc:	08022ee3 	.word	0x08022ee3
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8022ed0:	2300      	movs	r3, #0
 8022ed2:	73fb      	strb	r3, [r7, #15]
    break;
 8022ed4:	e00b      	b.n	8022eee <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8022ed6:	2302      	movs	r3, #2
 8022ed8:	73fb      	strb	r3, [r7, #15]
    break;
 8022eda:	e008      	b.n	8022eee <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8022edc:	2301      	movs	r3, #1
 8022ede:	73fb      	strb	r3, [r7, #15]
    break;
 8022ee0:	e005      	b.n	8022eee <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8022ee2:	2302      	movs	r3, #2
 8022ee4:	73fb      	strb	r3, [r7, #15]
    break;
 8022ee6:	e002      	b.n	8022eee <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8022ee8:	2302      	movs	r3, #2
 8022eea:	73fb      	strb	r3, [r7, #15]
    break;
 8022eec:	bf00      	nop
  }
  return usb_status;
 8022eee:	7bfb      	ldrb	r3, [r7, #15]
}
 8022ef0:	4618      	mov	r0, r3
 8022ef2:	3714      	adds	r7, #20
 8022ef4:	46bd      	mov	sp, r7
 8022ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022efa:	4770      	bx	lr

08022efc <__libc_init_array>:
 8022efc:	b570      	push	{r4, r5, r6, lr}
 8022efe:	4d0d      	ldr	r5, [pc, #52]	@ (8022f34 <__libc_init_array+0x38>)
 8022f00:	4c0d      	ldr	r4, [pc, #52]	@ (8022f38 <__libc_init_array+0x3c>)
 8022f02:	1b64      	subs	r4, r4, r5
 8022f04:	10a4      	asrs	r4, r4, #2
 8022f06:	2600      	movs	r6, #0
 8022f08:	42a6      	cmp	r6, r4
 8022f0a:	d109      	bne.n	8022f20 <__libc_init_array+0x24>
 8022f0c:	4d0b      	ldr	r5, [pc, #44]	@ (8022f3c <__libc_init_array+0x40>)
 8022f0e:	4c0c      	ldr	r4, [pc, #48]	@ (8022f40 <__libc_init_array+0x44>)
 8022f10:	f000 f818 	bl	8022f44 <_init>
 8022f14:	1b64      	subs	r4, r4, r5
 8022f16:	10a4      	asrs	r4, r4, #2
 8022f18:	2600      	movs	r6, #0
 8022f1a:	42a6      	cmp	r6, r4
 8022f1c:	d105      	bne.n	8022f2a <__libc_init_array+0x2e>
 8022f1e:	bd70      	pop	{r4, r5, r6, pc}
 8022f20:	f855 3b04 	ldr.w	r3, [r5], #4
 8022f24:	4798      	blx	r3
 8022f26:	3601      	adds	r6, #1
 8022f28:	e7ee      	b.n	8022f08 <__libc_init_array+0xc>
 8022f2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8022f2e:	4798      	blx	r3
 8022f30:	3601      	adds	r6, #1
 8022f32:	e7f2      	b.n	8022f1a <__libc_init_array+0x1e>
 8022f34:	08022fb4 	.word	0x08022fb4
 8022f38:	08022fb4 	.word	0x08022fb4
 8022f3c:	08022fb4 	.word	0x08022fb4
 8022f40:	08022fb8 	.word	0x08022fb8

08022f44 <_init>:
 8022f44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022f46:	bf00      	nop
 8022f48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8022f4a:	bc08      	pop	{r3}
 8022f4c:	469e      	mov	lr, r3
 8022f4e:	4770      	bx	lr

08022f50 <_fini>:
 8022f50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022f52:	bf00      	nop
 8022f54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8022f56:	bc08      	pop	{r3}
 8022f58:	469e      	mov	lr, r3
 8022f5a:	4770      	bx	lr
