#include "main.h"
#include <string.h>
// 1 - Config button
/*
    PA0 -> PA15 are controlled by GPIOA

    From schematic, we know PA0 is USER & Wake-up Button

    From data sheet, we know GPIOA_BASE_ADDR is at 0x40020000

    From ref manual - stm32, we know 
        GPIOA_MODER 
            -- offset addr is 0
            -- 00 is input mode
*/


#define GPIOA_BASE_ADDR 0x40020000 

void Button_Init() {

    // 1. Enable GPIO_A clock
    __HAL_RCC_GPIOA_CLK_ENABLE();

    // 2. Set PA0 as input
    uint32_t* GPIOA_MODER = (uint32_t*)(GPIOA_BASE_ADDR + 0x00);
    *GPIOA_MODER &= ~(0b11 << 0); 
}

// 2 - Config LED
/*
    PA0 -> PA15 are controlled by GPIOA

    From schematic, we know PD12, PD13, PD14, and PD15 are LED_GREEN, ORANGE_GREEN, RED_GREEN, and BLUE_GREEN respectively

    From data sheet, we know GPIOD_BASE_ADDR is at 0x40020C00

    From ref manual - stm32, we know 
        GPIOD_MODER 
            -- offset addr is 0
            -- 01 is output mode
*/
#define GPIOD_BASE_ADDR 0x40020C00 // Get addr from  Data sheet <- Memory mapping

void Led_Init() {
    // 1. Enable GPIO_D clock
    __HAL_RCC_GPIOD_CLK_ENABLE();

    // 2. Set PD12, PD13, PD14 and PD15 as outputs - Get PD numbers from schematic
    uint32_t* GPIOD_MODER = (uint32_t*)(GPIOD_BASE_ADDR + 0x00);
    *GPIOD_MODER &= (0b11111111 << 24); // Clear
    *GPIOD_MODER |= (0b01010101 << 24); // Set
}

// 3 - Control LED
/*
    From ref manual - stm32, we know 
        GPIOD_ODR 
            -- offset addr is 14
            -- Output data register  
*/
int GREEN_LED   = 12;
int ORANGE_LED  = 13;
int RED_LED     = 14;
int BLUE_LED    = 15;
int ON          = 1;
int OFF         = 0;

void Led_Ctrl(int LED, int OnOff) {
    uint32_t* GPIOD_ODR = (uint32_t*)(GPIOD_BASE_ADDR + 0x14);

    if (OnOff == 1)
        *GPIOD_ODR |=  (0b1 << LED);
    else
        *GPIOD_ODR &= ~(0b1 << LED);
}

// 4 - Check if the button is pressed or not
int Button_Status() {
    uint32_t* GPIOA_IDR = (uint32_t*)(GPIOA_BASE_ADDR + 0x10);
    return (*GPIOA_IDR >> 0) & 1;
}

// 5 - Config button interrupt
/*
  EXTI - External Interrupt

  From data sheet, we know GPIOA_BASE_ADDR is at 0x40013C0

  From ref manual - stm32, we know 

  Why EXTI0????

*/
#define EXTI_BASE_ADDR 0x40013C00
#define ISER_BASE_ADDR 0xE000E100 // From ref manual - M4 

void Button_Interrupt_Int() {

  // Config EXTI to send interrupt to NVIC when detect rising of failling edge

  // select trigger for EXTI0 is rising
  uint32_t* EXTI_RTSR = (uint32_t*)(EXTI_BASE_ADDR + 0x08);
  *EXTI_RTSR |= (0b1 << 0);

  // select trigger for EXTI0 is falling
  uint32_t* EXTI_FTSR = (uint32_t*)(EXTI_BASE_ADDR + 0x0C);
  *EXTI_FTSR |= (0b1 << 0);

  // masking
  uint32_t* EXTI_IMR = (uint32_t*)(EXTI_BASE_ADDR + 0x00);
  *EXTI_IMR |= (0b1 << 0);

  // NVIC accepts interrupt from EXTI0
  /*
    From vectore table in ref manual - stm32, we know position of EXTI0 interrupt is 6
  */
  uint32_t* ISER0 = (uint32_t*)(ISER_BASE_ADDR + 0x00);
  *ISER0 |= (0b1 << 6);
  
}

void EXTI0_IRQHandler() {

  Led_Ctrl(RED_LED, Button_Status());

  // Clear interrupt flag to exit handler function
  uint32_t* EXTI_PR = (uint32_t*)(EXTI_BASE_ADDR + 0x14);
  *EXTI_PR |= (0b1 << 0);
}

// 6. Config UART
#define GPIOB_BASE_ADDR 0x40020400
#define USART1_BASE_ADDR 0x40011000

void Uart_Init()
{
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_USART1_CLK_ENABLE();
  uint32_t* GPIOB_MODER = (uint32_t*)(GPIOB_BASE_ADDR + 0x00);
  uint32_t* GPIOB_AFRL  = (uint32_t*)(GPIOB_BASE_ADDR + 0x20);
  uint32_t* USART_BRR  = (uint32_t*)(USART1_BASE_ADDR + 0x08);
  uint32_t* USART_CR1  = (uint32_t*)(USART1_BASE_ADDR + 0x0C);


  *GPIOB_MODER &= ~(0b1111 << 12); // CLEAR
  *GPIOB_MODER |= (0b1010 << 12);

  *GPIOB_AFRL	&= ~(0xff << 24);
  *GPIOB_AFRL	|= (0b01110111 << 24);

  // set baud rate ~ 9600 -> UARTDIV = 104.16667 -> mantissa = 104 & fraction = 0.16667 * 16 = 3
  *USART_BRR &= ~(0xffff << 0);
  *USART_BRR |= (3 << 0);
  *USART_BRR |= (104 << 4);

  // data frame
  *USART_CR1 |= (0b1 << 10); // Enable parity
  *USART_CR1 |= (0b1 << 12); // 9 bits length

  // enable UART
  *USART_CR1 |= (0b1 << 13);

  // transmiter, receiver
  *USART_CR1 |= (0b11 << 2);
}

void uart_send_one_byte(char data)
{
  uint32_t* USART_SR = (uint32_t*)(USART1_BASE_ADDR + 0x00);
  uint32_t* USART_DR = (uint32_t*)(USART1_BASE_ADDR + 0x04);
  // wait for TXE == 1
  while (((*USART_SR >> 7) & 1) == 0);

  *USART_DR = data;

  while (((*USART_SR >> 6) & 1) == 0);
}

void uart_send_string(char* str)
{

  // Get size of string
  int size;
  size = strlen(str);

  for (int i = 0; i < size; i++)
    uart_send_one_byte(str[i]);
}

char uart_receive_one_byte()
{
  uint32_t* USART_SR = (uint32_t*)(USART1_BASE_ADDR + 0x00);
  uint32_t* USART_DR = (uint32_t*)(USART1_BASE_ADDR + 0x04);
  // wait for RxNE == 1
  while (((*USART_SR >> 5) & 1) == 0);
  return *USART_DR;
}

/* 7. UART Interrupt
khi nhận được uart rx thì UART tại ra interrupt signal để giử xuống NVIC
NVIC chấp nhận interrupt signal của UART

    + Set bit RXNEIE (Enable bit 5 của CR1)
    + UART RX interrupt ở position bao nhiêu? -> Xem vector table -> REFERENCE MANUAL
        --> position 37
    + Mở ARM lên xem NESTED VECTOR INTERRUPT TABLE
        --> bit 5 của ISER1 (0xE000E100 + 4) 
*/

void Uart_Interrupt_Init() {

  uint32_t* USART_CR1 = (uint32_t*)(USART1_BASE_ADDR + 0x0C);
  *USART_CR1 |= (0b1 << 5);

  uint32_t* ISER1 = (uint32_t*)(ISER_BASE_ADDR + 0x04);
  *ISER1 |= (0b1 << 5);
  
}

char cmd[32];
int cmd_index;

void USART1_IRQHandler() {
  // char data = uart_receive_one_byte();
  // if(data == 'x')
  //   Led_Ctrl(ORANGE_LED, ON);
  // else if(data == 'o')
  //   Led_Ctrl(ORANGE_LED, OFF);

  cmd[cmd_index] = uart_receive_one_byte();
  cmd_index++;
  if (strstr(cmd, "\n")) {
    if (strstr(cmd, "led red on")) {
      Led_Ctrl(RED_LED, ON);
      uart_send_string("Da bat led DO\n");
    } else if (strstr(cmd, "led red off")) {
      Led_Ctrl(RED_LED, OFF);
      uart_send_string("Da tat led DO\n");
    } else if (strstr(cmd, "led blue on")) {
      Led_Ctrl(BLUE_LED, ON);
      uart_send_string("Da bat led XANH\n");
    } else if (strstr(cmd, "led red off")) {
      Led_Ctrl(BLUE_LED, OFF);
      uart_send_string("Da tat led XANH\n");
    } else
      uart_send_string("Khong tiem thay command\n");

    memset(cmd, 0, 32);
    cmd_index = 0;
  }
}

/*

  GOOD UNTIL THIS PART

*/

/* 8. DMA
--------------------DMA------------------------
DMA controller

Look into ref manual
cần phải xác định là xử dụng DMA nào?

    -> DMA2 -> Stream2 & Channel 4
    -> DMA_SxCR
DMA sẽ lấy dữ liệu ở địa chỉ nào để vận chuyển?

    -> DMA_SxPAR
DMA sẽ vận chuyển dẽ liệu đến địa chỉ nào?

    -> DMA_SxM0AR
    -> DMA_SxCR ---> Set memory increment mode ON
Kích thước của dữ liệu là bao nhiêu?

    -> DMA_SxNDRT 

Enable DMAR in UART1_CR3

*/

char rx_buf[32];
#define DMA2_BASE_ADDR 0x40026400

void DMA_Interrupt_Init() {

  // Interrupt enable
  uint32_t* DMA_S2CR = (uint32_t*) (DMA2_BASE_ADDR + 0x10 + 0x18 * 2);
  *DMA_S2CR |= 1 << 4;

  // NVIC
  uint32_t* ISER1 = (uint32_t*)(ISER_BASE_ADDR + 0x04);
  *ISER1 |= (1 << 26); //58-32
}

void DMA_Uart1_RX_Init() {

  uint32_t* USART_CR3  = (uint32_t*)(USART1_BASE_ADDR + 0x14);
  *USART_CR3 |= 1 << 6;

  __HAL_RCC_DMA2_CLK_ENABLE();

  uint32_t* DMA_S2M0AR = (uint32_t*) (DMA2_BASE_ADDR + 0x1C + 0x18 * 2);
  *DMA_S2M0AR = (uint32_t)rx_buf;

  uint32_t* DMA_S2PAR = (uint32_t*) (DMA2_BASE_ADDR + 0x18 + 0x18 * 2);
  *DMA_S2PAR = 0x40011004;

  uint32_t* DMA_S2NDTR = (uint32_t*) (DMA2_BASE_ADDR + 0x14 + 0x18 * 2);
  *DMA_S2NDTR = sizeof(rx_buf);

  uint32_t* DMA_S2CR = (uint32_t*) (DMA2_BASE_ADDR + 0x10 + 0x18 * 2);
  *DMA_S2CR |= 4 << 25;

  // Enable increment mode
  *DMA_S2CR |= 1 << 10;

  // Enable interrupt
  DMA_Interrupt_Init();

  // ENABLE DMA
  *DMA_S2CR |= 1;
}

volatile char recv_completed = 0;

void DMA2_Stream2_IRQHandler() {
  uart_send_string("\nDMA Interrupt\n");
  recv_completed = 1;

  // Clear buffer
  memset(rx_buf, 0, sizeof(rx_buf));

  // Clear interrupt flag
  uint32_t* DMA_LIFCR = (uint32_t*)(DMA2_BASE_ADDR + 0x08);
  *DMA_LIFCR |= (1<<21);

  // Re-enable DMA
  uint32_t* DMA_S2CR = (uint32_t*) (DMA2_BASE_ADDR + 0x10 + 0x18 * 2);
  *DMA_S2CR |= 1;
}

/* 8. Memory

  Use Embedded Flash memory

  Flash is composed of 8 sectors (0~7)

    Erase data before write!!!! <- MUST (Unlike Ram allows overwrite)

  Tasks:
    1. ERASE opeartion
      ** Cannot erase in byte -> ERASE WHOLE SECTOR or WHOLE!!!
      input:  
        int sector_number
      output: NONE

    2. PROGRAM operation
      ** Can write in byte
      Input:
        char* addr 
        char* data
        int size
      Output: NONE  
*/

#define FLASH_BASE_ADDR 0x40023C00
#define KEY1            0x45670123
#define KEY2            0xCDEF89AB

void Flash_Erase(int sector_number) {

  // 0. Check to see if FLASH_CR is locked or not
  uint32_t* FL_CR = (uint32_t*)(FLASH_BASE_ADDR + 0x10);
  if (((*FL_CR >> 31) & 1) == 1) {
    // unlock FLASH_CR by unlock sequence
    uint32_t* FL_KEYR = (uint32_t*)(FLASH_BASE_ADDR + 0x4);
    *FL_KEYR = 0x45670123;
    *FL_KEYR = 0xCDEF89AB;
  }

  // 1. Check to see if any onging opeartion on Flash
  uint32_t* FL_SR = (uint32_t*)(FLASH_BASE_ADDR + 0x0C);
  
  while (((*FL_SR >> 16) & 1) == 1);
  

  // 2. Set SER bit and select the sector in FLASH_CR regiser
  *FL_CR &= ~(0b1111 << 3);
  *FL_CR |= (sector_number << 3);
  *FL_CR |= (0b1 << 1);

  // 3. Set the STRT bit in the FLASH_CR register
  *FL_CR |= (0b1 << 16);

  // 4. Wait for the BSY bit to be cleared
  while (((*FL_SR >> 16 ) & 1) == 1);
}

void Flash_Program(char* flash_addr, char* data_addr, int size) {

  // 0. Check to see if FLASH_CR is locked or not
  uint32_t* FL_CR = (uint32_t*)(FLASH_BASE_ADDR + 0x10);
  if (((*FL_CR >> 31) & 1) == 1) {
    // unlock FLASH_CR by unlock sequence
    uint32_t* FL_KEYR = (uint32_t*)(FLASH_BASE_ADDR + 0x4);
    *FL_KEYR = KEY1;
    *FL_KEYR = KEY2;
  }

  // 1. Check BSY bit to see if any ongoing operation
  uint32_t* FL_SR = (uint32_t*)(FLASH_BASE_ADDR + 0x0C);
  
  while (((*FL_SR >> 16) & 1) == 1);

  // 2. Set the PG bit in the FLASH_CR register
  *FL_CR |= (0b1 << 0);

  // 3. Perform the data write operation(s)
  for (int i = 0; i < size; i++) {
    //flash_addr[i] = data_addr[i];
    *(flash_addr+i) = *(data_addr+i);
  }

  // 4. Wait for the BSY bit to be cleared
  while (((*FL_SR >> 16 ) & 1) == 1);
}

void Flash_Read(uint8_t* data, int sector_number) {
  volatile uint32_t read_data_buffer;
  volatile uint32_t read_cnt = 0;
  volatile char* flash_addr;
 
  switch (sector_number) {
    case 0:
      flash_addr = (char*)0x08000000;
      break;
 
    case 1:
      flash_addr = (char*)0x08004000;
      break;
 
    case 2:
      flash_addr = (char*)0x08008000;
      break;
 
    case 3:
      flash_addr = (char*)0x0800C000;
      break;
 
    case 4:
      flash_addr = (char*)0x08010000;
      break;
 
    case 5:
      flash_addr = (char*)0x08020000;
      break;
 
    case 6:
      flash_addr = (char*)0x08040000;
      break;
 
    case 7:
      flash_addr = (char*)0x08060000;
      break;
 
    default:
      flash_addr = (char*)0x08000000;
  }
 
  do {
    read_data_buffer = *(uint32_t*)(flash_addr + read_cnt);
 
    if (read_data_buffer != 0xFFFFFFFF) {
      data[read_cnt] 		  = (uint8_t)read_data_buffer;
      data[read_cnt+1] 		= (uint8_t)(read_data_buffer >> 8);
      data[read_cnt+2] 		= (uint8_t)(read_data_buffer >> 16);
      data[read_cnt+3] 		= (uint8_t)(read_data_buffer >> 24);
    }
  } while(read_data_buffer != 0xFFFFFFFF);
}

// bootloader
void current_firmware_init(uint32_t* firmware_addr) {
 uint32_t* reset_hander_address_pointer;
 reset_hander_address_pointer = (uint32_t*)(0x08020004);

 uint32_t reset_hander_address = *reset_hander_address_pointer;

 void (*hander)();
 hander = reset_hander_address;

 uint32_t* VTOR = (uint32_t*)0xE000ED08;
 *VTOR = firmware_addr;
 hander();
}

void swap_fw_func() {

  char swap_fw[128000];
  memset(swap_fw, 0 , sizeof(swap_fw));
  Flash_Read((uint8_t*)swap_fw, 5);

  Flash_Erase(7);
  Flash_Program((char*)0x08060000, swap_fw, sizeof(swap_fw));

  memset(swap_fw, 0 , sizeof(swap_fw));
  Flash_Read((uint8_t*)swap_fw, 6);
  Flash_Erase(5);
  Flash_Program((char*)0x08020000, swap_fw, sizeof(swap_fw));

  uart_send_string("Firmwares SWAPPED!\n");

}


char msg_rec[64];
int check_info(char* msg_check) {
 int status = 0;
//char msg_rec[sizeof(msg_check)];

 memset(msg_rec, 0 , sizeof(msg_rec));
 Flash_Read((uint8_t*)msg_rec, 4);

 if (strstr(msg_rec, "\n")) {
   if (strstr((char*)msg_rec, msg_check)) {
     status = 1;
     uart_send_string("Da nhan du firmware\n");
   } else {
     uart_send_string("Firmware COOKED!\n");
   }
 }

//memset(msg_rec, 0, sizeof(msg_rec));
  return status;
}


//char new_fw[10516];
int fw_status = 0;
char fw_msg[] = "New firmware received!\n";

int main() {

 HAL_Init();
  Button_Init();
  Led_Init();
  Button_Interrupt_Int();
  Uart_Init();
//Uart_Interrupt_Init();
//DMA_Uart1_RX_Init();
//Flash_Erase(1);
//char msg[] = "Hello World!\n";
//Flash_Program((char*)0x08004000, msg, sizeof(msg));

  // uart_send_string("Vui long gui firmware...\n");

  // for (int i = 0; i < sizeof(new_fw); i++) {
  //   new_fw[i] = uart_receive_one_byte();
  //   count = i;
  // }

  // uart_send_string("Da nhan duoc firmware...\n");
  // Flash_Erase(6);
  // Flash_Program((char*)0x08040000, new_fw, sizeof(new_fw));
  

  while(1) {
     Led_Ctrl(BLUE_LED, ON);
     HAL_Delay(1000);
     Led_Ctrl(BLUE_LED, OFF);
     HAL_Delay(1000);
     uart_send_string("HELLO\n");


// 	if (check_info(fw_msg))
// 		current_firmware_init((uint32_t*)0x08040004);
// 	else
// 		current_firmware_init((uint32_t*)0x08020004);

//   if (check_info(fw_msg))
//     swap_fw_func();

//  current_firmware_init((uint32_t*)0x08020000);


  }

  return 0;
}
