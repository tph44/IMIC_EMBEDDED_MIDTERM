
Midterm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b24  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  08002cbc  08002cbc  00003cbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002d8c  08002d8c  00004010  2**0
                  CONTENTS
  4 .ARM          00000008  08002d8c  08002d8c  00003d8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002d94  08002d94  00004010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002d94  08002d94  00003d94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002d98  08002d98  00003d98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08002d9c  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000302c  20000010  08002dac  00004010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000303c  08002dac  0000403c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00004010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007edf  00000000  00000000  00004040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001699  00000000  00000000  0000bf1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006d0  00000000  00000000  0000d5b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000512  00000000  00000000  0000dc88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00005660  00000000  00000000  0000e19a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00002ae5  00000000  00000000  000137fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  000162df  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00001c28  00000000  00000000  00016324  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 0000006e  00000000  00000000  00017f4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000010 	.word	0x20000010
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08002ca4 	.word	0x08002ca4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000014 	.word	0x20000014
 80001d4:	08002ca4 	.word	0x08002ca4

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <Button_Init>:
*/


#define GPIOA_BASE_ADDR 0x40020000 

void Button_Init() {
 80001e8:	b480      	push	{r7}
 80001ea:	b083      	sub	sp, #12
 80001ec:	af00      	add	r7, sp, #0

    // 1. Enable GPIO_A clock
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80001ee:	2300      	movs	r3, #0
 80001f0:	603b      	str	r3, [r7, #0]
 80001f2:	4b0d      	ldr	r3, [pc, #52]	@ (8000228 <Button_Init+0x40>)
 80001f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80001f6:	4a0c      	ldr	r2, [pc, #48]	@ (8000228 <Button_Init+0x40>)
 80001f8:	f043 0301 	orr.w	r3, r3, #1
 80001fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80001fe:	4b0a      	ldr	r3, [pc, #40]	@ (8000228 <Button_Init+0x40>)
 8000200:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000202:	f003 0301 	and.w	r3, r3, #1
 8000206:	603b      	str	r3, [r7, #0]
 8000208:	683b      	ldr	r3, [r7, #0]

    // 2. Set PA0 as input
    uint32_t* GPIOA_MODER = (uint32_t*)(GPIOA_BASE_ADDR + 0x00);
 800020a:	4b08      	ldr	r3, [pc, #32]	@ (800022c <Button_Init+0x44>)
 800020c:	607b      	str	r3, [r7, #4]
    *GPIOA_MODER &= ~(0b11 << 0); 
 800020e:	687b      	ldr	r3, [r7, #4]
 8000210:	681b      	ldr	r3, [r3, #0]
 8000212:	f023 0203 	bic.w	r2, r3, #3
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	601a      	str	r2, [r3, #0]
}
 800021a:	bf00      	nop
 800021c:	370c      	adds	r7, #12
 800021e:	46bd      	mov	sp, r7
 8000220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000224:	4770      	bx	lr
 8000226:	bf00      	nop
 8000228:	40023800 	.word	0x40023800
 800022c:	40020000 	.word	0x40020000

08000230 <Led_Init>:
            -- offset addr is 0
            -- 01 is output mode
*/
#define GPIOD_BASE_ADDR 0x40020C00 // Get addr from  Data sheet <- Memory mapping

void Led_Init() {
 8000230:	b480      	push	{r7}
 8000232:	b083      	sub	sp, #12
 8000234:	af00      	add	r7, sp, #0
    // 1. Enable GPIO_D clock
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000236:	2300      	movs	r3, #0
 8000238:	603b      	str	r3, [r7, #0]
 800023a:	4b10      	ldr	r3, [pc, #64]	@ (800027c <Led_Init+0x4c>)
 800023c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800023e:	4a0f      	ldr	r2, [pc, #60]	@ (800027c <Led_Init+0x4c>)
 8000240:	f043 0308 	orr.w	r3, r3, #8
 8000244:	6313      	str	r3, [r2, #48]	@ 0x30
 8000246:	4b0d      	ldr	r3, [pc, #52]	@ (800027c <Led_Init+0x4c>)
 8000248:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800024a:	f003 0308 	and.w	r3, r3, #8
 800024e:	603b      	str	r3, [r7, #0]
 8000250:	683b      	ldr	r3, [r7, #0]

    // 2. Set PD12, PD13, PD14 and PD15 as outputs - Get PD numbers from schematic
    uint32_t* GPIOD_MODER = (uint32_t*)(GPIOD_BASE_ADDR + 0x00); 
 8000252:	4b0b      	ldr	r3, [pc, #44]	@ (8000280 <Led_Init+0x50>)
 8000254:	607b      	str	r3, [r7, #4]
    *GPIOD_MODER &= (0b11111111 << 24); // Clear
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	681b      	ldr	r3, [r3, #0]
 800025a:	f003 427f 	and.w	r2, r3, #4278190080	@ 0xff000000
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	601a      	str	r2, [r3, #0]
    *GPIOD_MODER |= (0b01010101 << 24); // Set
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	681b      	ldr	r3, [r3, #0]
 8000266:	f043 42aa 	orr.w	r2, r3, #1426063360	@ 0x55000000
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	601a      	str	r2, [r3, #0]
}
 800026e:	bf00      	nop
 8000270:	370c      	adds	r7, #12
 8000272:	46bd      	mov	sp, r7
 8000274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000278:	4770      	bx	lr
 800027a:	bf00      	nop
 800027c:	40023800 	.word	0x40023800
 8000280:	40020c00 	.word	0x40020c00

08000284 <Led_Ctrl>:
int RED_LED     = 14;
int BLUE_LED    = 15;
int ON          = 1;
int OFF         = 0;

void Led_Ctrl(int LED, int OnOff) {
 8000284:	b480      	push	{r7}
 8000286:	b085      	sub	sp, #20
 8000288:	af00      	add	r7, sp, #0
 800028a:	6078      	str	r0, [r7, #4]
 800028c:	6039      	str	r1, [r7, #0]
    uint32_t* GPIOD_ODR = (uint32_t*)(GPIOD_BASE_ADDR + 0x14); 
 800028e:	4b0f      	ldr	r3, [pc, #60]	@ (80002cc <Led_Ctrl+0x48>)
 8000290:	60fb      	str	r3, [r7, #12]

    if (OnOff == 1)
 8000292:	683b      	ldr	r3, [r7, #0]
 8000294:	2b01      	cmp	r3, #1
 8000296:	d109      	bne.n	80002ac <Led_Ctrl+0x28>
        *GPIOD_ODR |=  (0b1 << LED);
 8000298:	68fb      	ldr	r3, [r7, #12]
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	2101      	movs	r1, #1
 800029e:	687a      	ldr	r2, [r7, #4]
 80002a0:	fa01 f202 	lsl.w	r2, r1, r2
 80002a4:	431a      	orrs	r2, r3
 80002a6:	68fb      	ldr	r3, [r7, #12]
 80002a8:	601a      	str	r2, [r3, #0]
    else 
        *GPIOD_ODR &= ~(0b1 << LED);
}
 80002aa:	e009      	b.n	80002c0 <Led_Ctrl+0x3c>
        *GPIOD_ODR &= ~(0b1 << LED);
 80002ac:	68fb      	ldr	r3, [r7, #12]
 80002ae:	681b      	ldr	r3, [r3, #0]
 80002b0:	2101      	movs	r1, #1
 80002b2:	687a      	ldr	r2, [r7, #4]
 80002b4:	fa01 f202 	lsl.w	r2, r1, r2
 80002b8:	43d2      	mvns	r2, r2
 80002ba:	401a      	ands	r2, r3
 80002bc:	68fb      	ldr	r3, [r7, #12]
 80002be:	601a      	str	r2, [r3, #0]
}
 80002c0:	bf00      	nop
 80002c2:	3714      	adds	r7, #20
 80002c4:	46bd      	mov	sp, r7
 80002c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ca:	4770      	bx	lr
 80002cc:	40020c14 	.word	0x40020c14

080002d0 <Button_Status>:

// 4 - Check if the button is pressed or not
int Button_Status() {
 80002d0:	b480      	push	{r7}
 80002d2:	b083      	sub	sp, #12
 80002d4:	af00      	add	r7, sp, #0
    uint32_t* GPIOA_IDR = (uint32_t*)(GPIOA_BASE_ADDR + 0x10);
 80002d6:	4b06      	ldr	r3, [pc, #24]	@ (80002f0 <Button_Status+0x20>)
 80002d8:	607b      	str	r3, [r7, #4]
    return (*GPIOA_IDR >> 0) & 1;
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	681b      	ldr	r3, [r3, #0]
 80002de:	f003 0301 	and.w	r3, r3, #1
}
 80002e2:	4618      	mov	r0, r3
 80002e4:	370c      	adds	r7, #12
 80002e6:	46bd      	mov	sp, r7
 80002e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop
 80002f0:	40020010 	.word	0x40020010

080002f4 <EXTI0_IRQHandler>:
  uint32_t* ISER0 = (uint32_t*)(ISER_BASE_ADDR + 0x00);
  *ISER0 |= (0b1 << 6);
  
}

void EXTI0_IRQHandler() {
 80002f4:	b590      	push	{r4, r7, lr}
 80002f6:	b083      	sub	sp, #12
 80002f8:	af00      	add	r7, sp, #0

  Led_Ctrl(RED_LED, Button_Status());
 80002fa:	4b0a      	ldr	r3, [pc, #40]	@ (8000324 <EXTI0_IRQHandler+0x30>)
 80002fc:	681c      	ldr	r4, [r3, #0]
 80002fe:	f7ff ffe7 	bl	80002d0 <Button_Status>
 8000302:	4603      	mov	r3, r0
 8000304:	4619      	mov	r1, r3
 8000306:	4620      	mov	r0, r4
 8000308:	f7ff ffbc 	bl	8000284 <Led_Ctrl>

  // Clear interrupt flag to exit handler function
  uint32_t* EXTI_PR = (uint32_t*)(EXTI_BASE_ADDR + 0x14);
 800030c:	4b06      	ldr	r3, [pc, #24]	@ (8000328 <EXTI0_IRQHandler+0x34>)
 800030e:	607b      	str	r3, [r7, #4]
  *EXTI_PR |= (0b1 << 0);
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	681b      	ldr	r3, [r3, #0]
 8000314:	f043 0201 	orr.w	r2, r3, #1
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	601a      	str	r2, [r3, #0]
}
 800031c:	bf00      	nop
 800031e:	370c      	adds	r7, #12
 8000320:	46bd      	mov	sp, r7
 8000322:	bd90      	pop	{r4, r7, pc}
 8000324:	20000000 	.word	0x20000000
 8000328:	40013c14 	.word	0x40013c14

0800032c <Uart_Init>:
// 6. Config UART
#define GPIOB_BASE_ADDR 0x40020400
#define USART1_BASE_ADDR 0x40011000

void Uart_Init()
{
 800032c:	b480      	push	{r7}
 800032e:	b087      	sub	sp, #28
 8000330:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000332:	2300      	movs	r3, #0
 8000334:	607b      	str	r3, [r7, #4]
 8000336:	4b35      	ldr	r3, [pc, #212]	@ (800040c <Uart_Init+0xe0>)
 8000338:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800033a:	4a34      	ldr	r2, [pc, #208]	@ (800040c <Uart_Init+0xe0>)
 800033c:	f043 0302 	orr.w	r3, r3, #2
 8000340:	6313      	str	r3, [r2, #48]	@ 0x30
 8000342:	4b32      	ldr	r3, [pc, #200]	@ (800040c <Uart_Init+0xe0>)
 8000344:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000346:	f003 0302 	and.w	r3, r3, #2
 800034a:	607b      	str	r3, [r7, #4]
 800034c:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_USART1_CLK_ENABLE();
 800034e:	2300      	movs	r3, #0
 8000350:	603b      	str	r3, [r7, #0]
 8000352:	4b2e      	ldr	r3, [pc, #184]	@ (800040c <Uart_Init+0xe0>)
 8000354:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000356:	4a2d      	ldr	r2, [pc, #180]	@ (800040c <Uart_Init+0xe0>)
 8000358:	f043 0310 	orr.w	r3, r3, #16
 800035c:	6453      	str	r3, [r2, #68]	@ 0x44
 800035e:	4b2b      	ldr	r3, [pc, #172]	@ (800040c <Uart_Init+0xe0>)
 8000360:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000362:	f003 0310 	and.w	r3, r3, #16
 8000366:	603b      	str	r3, [r7, #0]
 8000368:	683b      	ldr	r3, [r7, #0]
	uint32_t* GPIOB_MODER = (uint32_t*)(GPIOB_BASE_ADDR + 0x00);
 800036a:	4b29      	ldr	r3, [pc, #164]	@ (8000410 <Uart_Init+0xe4>)
 800036c:	617b      	str	r3, [r7, #20]
	uint32_t* GPIOB_AFRL  = (uint32_t*)(GPIOB_BASE_ADDR + 0x20);
 800036e:	4b29      	ldr	r3, [pc, #164]	@ (8000414 <Uart_Init+0xe8>)
 8000370:	613b      	str	r3, [r7, #16]
	uint32_t* USART_BRR  = (uint32_t*)(USART1_BASE_ADDR + 0x08);
 8000372:	4b29      	ldr	r3, [pc, #164]	@ (8000418 <Uart_Init+0xec>)
 8000374:	60fb      	str	r3, [r7, #12]
	uint32_t* USART_CR1  = (uint32_t*)(USART1_BASE_ADDR + 0x0C);
 8000376:	4b29      	ldr	r3, [pc, #164]	@ (800041c <Uart_Init+0xf0>)
 8000378:	60bb      	str	r3, [r7, #8]


	*GPIOB_MODER &= ~(0b1111 << 12); // CLEAR
 800037a:	697b      	ldr	r3, [r7, #20]
 800037c:	681b      	ldr	r3, [r3, #0]
 800037e:	f423 4270 	bic.w	r2, r3, #61440	@ 0xf000
 8000382:	697b      	ldr	r3, [r7, #20]
 8000384:	601a      	str	r2, [r3, #0]
	*GPIOB_MODER |= (0b1010 << 12);
 8000386:	697b      	ldr	r3, [r7, #20]
 8000388:	681b      	ldr	r3, [r3, #0]
 800038a:	f443 4220 	orr.w	r2, r3, #40960	@ 0xa000
 800038e:	697b      	ldr	r3, [r7, #20]
 8000390:	601a      	str	r2, [r3, #0]

	*GPIOB_AFRL	&= ~(0xff << 24);
 8000392:	693b      	ldr	r3, [r7, #16]
 8000394:	681b      	ldr	r3, [r3, #0]
 8000396:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 800039a:	693b      	ldr	r3, [r7, #16]
 800039c:	601a      	str	r2, [r3, #0]
	*GPIOB_AFRL	|= (0b01110111 << 24);
 800039e:	693b      	ldr	r3, [r7, #16]
 80003a0:	681b      	ldr	r3, [r3, #0]
 80003a2:	f043 42ee 	orr.w	r2, r3, #1996488704	@ 0x77000000
 80003a6:	693b      	ldr	r3, [r7, #16]
 80003a8:	601a      	str	r2, [r3, #0]

	// set baud rate ~ 9600 -> UARTDIV = 104.16667 -> mantissa = 104 & fraction = 0.16667 * 16 = 3
	*USART_BRR &= ~(0xffff << 0);
 80003aa:	68fb      	ldr	r3, [r7, #12]
 80003ac:	681b      	ldr	r3, [r3, #0]
 80003ae:	0c1b      	lsrs	r3, r3, #16
 80003b0:	041b      	lsls	r3, r3, #16
 80003b2:	68fa      	ldr	r2, [r7, #12]
 80003b4:	6013      	str	r3, [r2, #0]
	*USART_BRR |= (3 << 0);
 80003b6:	68fb      	ldr	r3, [r7, #12]
 80003b8:	681b      	ldr	r3, [r3, #0]
 80003ba:	f043 0203 	orr.w	r2, r3, #3
 80003be:	68fb      	ldr	r3, [r7, #12]
 80003c0:	601a      	str	r2, [r3, #0]
	*USART_BRR |= (104 << 4);
 80003c2:	68fb      	ldr	r3, [r7, #12]
 80003c4:	681b      	ldr	r3, [r3, #0]
 80003c6:	f443 62d0 	orr.w	r2, r3, #1664	@ 0x680
 80003ca:	68fb      	ldr	r3, [r7, #12]
 80003cc:	601a      	str	r2, [r3, #0]

	// data frame
	*USART_CR1 |= (0b1 << 10); // Enable parity
 80003ce:	68bb      	ldr	r3, [r7, #8]
 80003d0:	681b      	ldr	r3, [r3, #0]
 80003d2:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 80003d6:	68bb      	ldr	r3, [r7, #8]
 80003d8:	601a      	str	r2, [r3, #0]
	*USART_CR1 |= (0b1 << 12); // 9 bits length
 80003da:	68bb      	ldr	r3, [r7, #8]
 80003dc:	681b      	ldr	r3, [r3, #0]
 80003de:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80003e2:	68bb      	ldr	r3, [r7, #8]
 80003e4:	601a      	str	r2, [r3, #0]

	// enable UART
	*USART_CR1 |= (0b1 << 13);
 80003e6:	68bb      	ldr	r3, [r7, #8]
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80003ee:	68bb      	ldr	r3, [r7, #8]
 80003f0:	601a      	str	r2, [r3, #0]

  // transmiter, receiver
	*USART_CR1 |= (0b11 << 2);
 80003f2:	68bb      	ldr	r3, [r7, #8]
 80003f4:	681b      	ldr	r3, [r3, #0]
 80003f6:	f043 020c 	orr.w	r2, r3, #12
 80003fa:	68bb      	ldr	r3, [r7, #8]
 80003fc:	601a      	str	r2, [r3, #0]
}
 80003fe:	bf00      	nop
 8000400:	371c      	adds	r7, #28
 8000402:	46bd      	mov	sp, r7
 8000404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000408:	4770      	bx	lr
 800040a:	bf00      	nop
 800040c:	40023800 	.word	0x40023800
 8000410:	40020400 	.word	0x40020400
 8000414:	40020420 	.word	0x40020420
 8000418:	40011008 	.word	0x40011008
 800041c:	4001100c 	.word	0x4001100c

08000420 <uart_send_one_byte>:

void uart_send_one_byte(char data)
{
 8000420:	b480      	push	{r7}
 8000422:	b085      	sub	sp, #20
 8000424:	af00      	add	r7, sp, #0
 8000426:	4603      	mov	r3, r0
 8000428:	71fb      	strb	r3, [r7, #7]
	uint32_t* USART_SR = (uint32_t*)(USART1_BASE_ADDR + 0x00);
 800042a:	4b0e      	ldr	r3, [pc, #56]	@ (8000464 <uart_send_one_byte+0x44>)
 800042c:	60fb      	str	r3, [r7, #12]
	uint32_t* USART_DR = (uint32_t*)(USART1_BASE_ADDR + 0x04);
 800042e:	4b0e      	ldr	r3, [pc, #56]	@ (8000468 <uart_send_one_byte+0x48>)
 8000430:	60bb      	str	r3, [r7, #8]
	// wait for TXE == 1
	while (((*USART_SR >> 7) & 1) == 0);
 8000432:	bf00      	nop
 8000434:	68fb      	ldr	r3, [r7, #12]
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800043c:	2b00      	cmp	r3, #0
 800043e:	d0f9      	beq.n	8000434 <uart_send_one_byte+0x14>

	*USART_DR = data;
 8000440:	79fa      	ldrb	r2, [r7, #7]
 8000442:	68bb      	ldr	r3, [r7, #8]
 8000444:	601a      	str	r2, [r3, #0]

	while (((*USART_SR >> 6) & 1) == 0);
 8000446:	bf00      	nop
 8000448:	68fb      	ldr	r3, [r7, #12]
 800044a:	681b      	ldr	r3, [r3, #0]
 800044c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000450:	2b00      	cmp	r3, #0
 8000452:	d0f9      	beq.n	8000448 <uart_send_one_byte+0x28>
}
 8000454:	bf00      	nop
 8000456:	bf00      	nop
 8000458:	3714      	adds	r7, #20
 800045a:	46bd      	mov	sp, r7
 800045c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000460:	4770      	bx	lr
 8000462:	bf00      	nop
 8000464:	40011000 	.word	0x40011000
 8000468:	40011004 	.word	0x40011004

0800046c <uart_send_string>:

void uart_send_string(char* str)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	b084      	sub	sp, #16
 8000470:	af00      	add	r7, sp, #0
 8000472:	6078      	str	r0, [r7, #4]

	// Get size of string
	int size;
	size = strlen(str);
 8000474:	6878      	ldr	r0, [r7, #4]
 8000476:	f7ff feaf 	bl	80001d8 <strlen>
 800047a:	4603      	mov	r3, r0
 800047c:	60bb      	str	r3, [r7, #8]

	for (int i = 0; i < size; i++)
 800047e:	2300      	movs	r3, #0
 8000480:	60fb      	str	r3, [r7, #12]
 8000482:	e009      	b.n	8000498 <uart_send_string+0x2c>
		uart_send_one_byte(str[i]);
 8000484:	68fb      	ldr	r3, [r7, #12]
 8000486:	687a      	ldr	r2, [r7, #4]
 8000488:	4413      	add	r3, r2
 800048a:	781b      	ldrb	r3, [r3, #0]
 800048c:	4618      	mov	r0, r3
 800048e:	f7ff ffc7 	bl	8000420 <uart_send_one_byte>
	for (int i = 0; i < size; i++)
 8000492:	68fb      	ldr	r3, [r7, #12]
 8000494:	3301      	adds	r3, #1
 8000496:	60fb      	str	r3, [r7, #12]
 8000498:	68fa      	ldr	r2, [r7, #12]
 800049a:	68bb      	ldr	r3, [r7, #8]
 800049c:	429a      	cmp	r2, r3
 800049e:	dbf1      	blt.n	8000484 <uart_send_string+0x18>
}
 80004a0:	bf00      	nop
 80004a2:	bf00      	nop
 80004a4:	3710      	adds	r7, #16
 80004a6:	46bd      	mov	sp, r7
 80004a8:	bd80      	pop	{r7, pc}
	...

080004ac <uart_receive_one_byte>:

char uart_receive_one_byte()
{
 80004ac:	b480      	push	{r7}
 80004ae:	b083      	sub	sp, #12
 80004b0:	af00      	add	r7, sp, #0
	uint32_t* USART_SR = (uint32_t*)(USART1_BASE_ADDR + 0x00);
 80004b2:	4b0a      	ldr	r3, [pc, #40]	@ (80004dc <uart_receive_one_byte+0x30>)
 80004b4:	607b      	str	r3, [r7, #4]
	uint32_t* USART_DR = (uint32_t*)(USART1_BASE_ADDR + 0x04);
 80004b6:	4b0a      	ldr	r3, [pc, #40]	@ (80004e0 <uart_receive_one_byte+0x34>)
 80004b8:	603b      	str	r3, [r7, #0]
	// wait for RxNE == 1
	while (((*USART_SR >> 5) & 1) == 0);
 80004ba:	bf00      	nop
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	f003 0320 	and.w	r3, r3, #32
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	d0f9      	beq.n	80004bc <uart_receive_one_byte+0x10>
	return *USART_DR;
 80004c8:	683b      	ldr	r3, [r7, #0]
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	b2db      	uxtb	r3, r3
}
 80004ce:	4618      	mov	r0, r3
 80004d0:	370c      	adds	r7, #12
 80004d2:	46bd      	mov	sp, r7
 80004d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop
 80004dc:	40011000 	.word	0x40011000
 80004e0:	40011004 	.word	0x40011004

080004e4 <Uart_Interrupt_Init>:
        --> position 37
    + Mở ARM lên xem NESTED VECTOR INTERRUPT TABLE
        --> bit 5 của ISER1 (0xE000E100 + 4) 
*/

void Uart_Interrupt_Init() {
 80004e4:	b480      	push	{r7}
 80004e6:	b083      	sub	sp, #12
 80004e8:	af00      	add	r7, sp, #0

  uint32_t* USART_CR1 = (uint32_t*)(USART1_BASE_ADDR + 0x0C);
 80004ea:	4b0b      	ldr	r3, [pc, #44]	@ (8000518 <Uart_Interrupt_Init+0x34>)
 80004ec:	607b      	str	r3, [r7, #4]
  *USART_CR1 |= (0b1 << 5);
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	f043 0220 	orr.w	r2, r3, #32
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	601a      	str	r2, [r3, #0]

  uint32_t* ISER1 = (uint32_t*)(ISER_BASE_ADDR + 0x04);
 80004fa:	4b08      	ldr	r3, [pc, #32]	@ (800051c <Uart_Interrupt_Init+0x38>)
 80004fc:	603b      	str	r3, [r7, #0]
  *ISER1 |= (0b1 << 5);
 80004fe:	683b      	ldr	r3, [r7, #0]
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	f043 0220 	orr.w	r2, r3, #32
 8000506:	683b      	ldr	r3, [r7, #0]
 8000508:	601a      	str	r2, [r3, #0]
  
}
 800050a:	bf00      	nop
 800050c:	370c      	adds	r7, #12
 800050e:	46bd      	mov	sp, r7
 8000510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop
 8000518:	4001100c 	.word	0x4001100c
 800051c:	e000e104 	.word	0xe000e104

08000520 <USART1_IRQHandler>:

char cmd[32];
int cmd_index;

void USART1_IRQHandler() {
 8000520:	b598      	push	{r3, r4, r7, lr}
 8000522:	af00      	add	r7, sp, #0
	// else if(data == 'o')
  //   Led_Ctrl(ORANGE_LED, OFF);

  // $0a

  cmd[cmd_index] = uart_receive_one_byte();
 8000524:	4b36      	ldr	r3, [pc, #216]	@ (8000600 <USART1_IRQHandler+0xe0>)
 8000526:	681c      	ldr	r4, [r3, #0]
 8000528:	f7ff ffc0 	bl	80004ac <uart_receive_one_byte>
 800052c:	4603      	mov	r3, r0
 800052e:	461a      	mov	r2, r3
 8000530:	4b34      	ldr	r3, [pc, #208]	@ (8000604 <USART1_IRQHandler+0xe4>)
 8000532:	551a      	strb	r2, [r3, r4]
  cmd_index++;
 8000534:	4b32      	ldr	r3, [pc, #200]	@ (8000600 <USART1_IRQHandler+0xe0>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	3301      	adds	r3, #1
 800053a:	4a31      	ldr	r2, [pc, #196]	@ (8000600 <USART1_IRQHandler+0xe0>)
 800053c:	6013      	str	r3, [r2, #0]
  if (strstr(cmd, "\n")) {
 800053e:	210a      	movs	r1, #10
 8000540:	4830      	ldr	r0, [pc, #192]	@ (8000604 <USART1_IRQHandler+0xe4>)
 8000542:	f002 fb67 	bl	8002c14 <strchr>
 8000546:	4603      	mov	r3, r0
 8000548:	2b00      	cmp	r3, #0
 800054a:	d056      	beq.n	80005fa <USART1_IRQHandler+0xda>
    if (strstr(cmd, "led red on")) {
 800054c:	492e      	ldr	r1, [pc, #184]	@ (8000608 <USART1_IRQHandler+0xe8>)
 800054e:	482d      	ldr	r0, [pc, #180]	@ (8000604 <USART1_IRQHandler+0xe4>)
 8000550:	f002 fb6d 	bl	8002c2e <strstr>
 8000554:	4603      	mov	r3, r0
 8000556:	2b00      	cmp	r3, #0
 8000558:	d00b      	beq.n	8000572 <USART1_IRQHandler+0x52>
      Led_Ctrl(RED_LED, ON);
 800055a:	4b2c      	ldr	r3, [pc, #176]	@ (800060c <USART1_IRQHandler+0xec>)
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	4a2c      	ldr	r2, [pc, #176]	@ (8000610 <USART1_IRQHandler+0xf0>)
 8000560:	6812      	ldr	r2, [r2, #0]
 8000562:	4611      	mov	r1, r2
 8000564:	4618      	mov	r0, r3
 8000566:	f7ff fe8d 	bl	8000284 <Led_Ctrl>
      uart_send_string("Da bat led DO\n");
 800056a:	482a      	ldr	r0, [pc, #168]	@ (8000614 <USART1_IRQHandler+0xf4>)
 800056c:	f7ff ff7e 	bl	800046c <uart_send_string>
 8000570:	e03b      	b.n	80005ea <USART1_IRQHandler+0xca>
    } else if (strstr(cmd, "led red off")) {
 8000572:	4929      	ldr	r1, [pc, #164]	@ (8000618 <USART1_IRQHandler+0xf8>)
 8000574:	4823      	ldr	r0, [pc, #140]	@ (8000604 <USART1_IRQHandler+0xe4>)
 8000576:	f002 fb5a 	bl	8002c2e <strstr>
 800057a:	4603      	mov	r3, r0
 800057c:	2b00      	cmp	r3, #0
 800057e:	d00b      	beq.n	8000598 <USART1_IRQHandler+0x78>
      Led_Ctrl(RED_LED, OFF);
 8000580:	4b22      	ldr	r3, [pc, #136]	@ (800060c <USART1_IRQHandler+0xec>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	4a25      	ldr	r2, [pc, #148]	@ (800061c <USART1_IRQHandler+0xfc>)
 8000586:	6812      	ldr	r2, [r2, #0]
 8000588:	4611      	mov	r1, r2
 800058a:	4618      	mov	r0, r3
 800058c:	f7ff fe7a 	bl	8000284 <Led_Ctrl>
      uart_send_string("Da tat led DO\n");
 8000590:	4823      	ldr	r0, [pc, #140]	@ (8000620 <USART1_IRQHandler+0x100>)
 8000592:	f7ff ff6b 	bl	800046c <uart_send_string>
 8000596:	e028      	b.n	80005ea <USART1_IRQHandler+0xca>
    } else if (strstr(cmd, "led blue on")) {
 8000598:	4922      	ldr	r1, [pc, #136]	@ (8000624 <USART1_IRQHandler+0x104>)
 800059a:	481a      	ldr	r0, [pc, #104]	@ (8000604 <USART1_IRQHandler+0xe4>)
 800059c:	f002 fb47 	bl	8002c2e <strstr>
 80005a0:	4603      	mov	r3, r0
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d00b      	beq.n	80005be <USART1_IRQHandler+0x9e>
      Led_Ctrl(BLUE_LED, ON);
 80005a6:	4b20      	ldr	r3, [pc, #128]	@ (8000628 <USART1_IRQHandler+0x108>)
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	4a19      	ldr	r2, [pc, #100]	@ (8000610 <USART1_IRQHandler+0xf0>)
 80005ac:	6812      	ldr	r2, [r2, #0]
 80005ae:	4611      	mov	r1, r2
 80005b0:	4618      	mov	r0, r3
 80005b2:	f7ff fe67 	bl	8000284 <Led_Ctrl>
      uart_send_string("Da bat led XANH\n");
 80005b6:	481d      	ldr	r0, [pc, #116]	@ (800062c <USART1_IRQHandler+0x10c>)
 80005b8:	f7ff ff58 	bl	800046c <uart_send_string>
 80005bc:	e015      	b.n	80005ea <USART1_IRQHandler+0xca>
    } else if (strstr(cmd, "led red off")) {
 80005be:	4916      	ldr	r1, [pc, #88]	@ (8000618 <USART1_IRQHandler+0xf8>)
 80005c0:	4810      	ldr	r0, [pc, #64]	@ (8000604 <USART1_IRQHandler+0xe4>)
 80005c2:	f002 fb34 	bl	8002c2e <strstr>
 80005c6:	4603      	mov	r3, r0
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d00b      	beq.n	80005e4 <USART1_IRQHandler+0xc4>
      Led_Ctrl(BLUE_LED, OFF);
 80005cc:	4b16      	ldr	r3, [pc, #88]	@ (8000628 <USART1_IRQHandler+0x108>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	4a12      	ldr	r2, [pc, #72]	@ (800061c <USART1_IRQHandler+0xfc>)
 80005d2:	6812      	ldr	r2, [r2, #0]
 80005d4:	4611      	mov	r1, r2
 80005d6:	4618      	mov	r0, r3
 80005d8:	f7ff fe54 	bl	8000284 <Led_Ctrl>
      uart_send_string("Da tat led XANH\n");
 80005dc:	4814      	ldr	r0, [pc, #80]	@ (8000630 <USART1_IRQHandler+0x110>)
 80005de:	f7ff ff45 	bl	800046c <uart_send_string>
 80005e2:	e002      	b.n	80005ea <USART1_IRQHandler+0xca>
    } else
      uart_send_string("Khong tiem thay command\n");
 80005e4:	4813      	ldr	r0, [pc, #76]	@ (8000634 <USART1_IRQHandler+0x114>)
 80005e6:	f7ff ff41 	bl	800046c <uart_send_string>

    memset(cmd, 0, 32);
 80005ea:	2220      	movs	r2, #32
 80005ec:	2100      	movs	r1, #0
 80005ee:	4805      	ldr	r0, [pc, #20]	@ (8000604 <USART1_IRQHandler+0xe4>)
 80005f0:	f002 fb08 	bl	8002c04 <memset>
    cmd_index = 0;
 80005f4:	4b02      	ldr	r3, [pc, #8]	@ (8000600 <USART1_IRQHandler+0xe0>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	601a      	str	r2, [r3, #0]
  }
}
 80005fa:	bf00      	nop
 80005fc:	bd98      	pop	{r3, r4, r7, pc}
 80005fe:	bf00      	nop
 8000600:	20000050 	.word	0x20000050
 8000604:	20000030 	.word	0x20000030
 8000608:	08002cbc 	.word	0x08002cbc
 800060c:	20000000 	.word	0x20000000
 8000610:	20000008 	.word	0x20000008
 8000614:	08002cc8 	.word	0x08002cc8
 8000618:	08002cd8 	.word	0x08002cd8
 800061c:	2000002c 	.word	0x2000002c
 8000620:	08002ce4 	.word	0x08002ce4
 8000624:	08002cf4 	.word	0x08002cf4
 8000628:	20000004 	.word	0x20000004
 800062c:	08002d00 	.word	0x08002d00
 8000630:	08002d14 	.word	0x08002d14
 8000634:	08002d28 	.word	0x08002d28

08000638 <DMA2_Stream2_IRQHandler>:
	*DMA_S2CR |= 1;
}

volatile char recv_completed = 0;

void DMA2_Stream2_IRQHandler() {
 8000638:	b580      	push	{r7, lr}
 800063a:	b082      	sub	sp, #8
 800063c:	af00      	add	r7, sp, #0
  uart_send_string("\nDMA Interrupt\n");
 800063e:	480f      	ldr	r0, [pc, #60]	@ (800067c <DMA2_Stream2_IRQHandler+0x44>)
 8000640:	f7ff ff14 	bl	800046c <uart_send_string>
  recv_completed = 1;
 8000644:	4b0e      	ldr	r3, [pc, #56]	@ (8000680 <DMA2_Stream2_IRQHandler+0x48>)
 8000646:	2201      	movs	r2, #1
 8000648:	701a      	strb	r2, [r3, #0]

  // Clear buffer
  memset(rx_buf, 0, sizeof(rx_buf));
 800064a:	2220      	movs	r2, #32
 800064c:	2100      	movs	r1, #0
 800064e:	480d      	ldr	r0, [pc, #52]	@ (8000684 <DMA2_Stream2_IRQHandler+0x4c>)
 8000650:	f002 fad8 	bl	8002c04 <memset>

  // Clear interrupt flag
  uint32_t* DMA_LIFCR = (uint32_t*)(DMA2_BASE_ADDR + 0x08);
 8000654:	4b0c      	ldr	r3, [pc, #48]	@ (8000688 <DMA2_Stream2_IRQHandler+0x50>)
 8000656:	607b      	str	r3, [r7, #4]
  *DMA_LIFCR |= (1<<21);
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	601a      	str	r2, [r3, #0]

  // Re-enable DMA
  uint32_t* DMA_S2CR = (uint32_t*) (DMA2_BASE_ADDR + 0x10 + 0x18 * 2);
 8000664:	4b09      	ldr	r3, [pc, #36]	@ (800068c <DMA2_Stream2_IRQHandler+0x54>)
 8000666:	603b      	str	r3, [r7, #0]
  *DMA_S2CR |= 1;
 8000668:	683b      	ldr	r3, [r7, #0]
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	f043 0201 	orr.w	r2, r3, #1
 8000670:	683b      	ldr	r3, [r7, #0]
 8000672:	601a      	str	r2, [r3, #0]
}
 8000674:	bf00      	nop
 8000676:	3708      	adds	r7, #8
 8000678:	46bd      	mov	sp, r7
 800067a:	bd80      	pop	{r7, pc}
 800067c:	08002d44 	.word	0x08002d44
 8000680:	20000074 	.word	0x20000074
 8000684:	20000054 	.word	0x20000054
 8000688:	40026408 	.word	0x40026408
 800068c:	40026440 	.word	0x40026440

08000690 <main>:
//}

char new_fw[11228];
int count;

int main() {
 8000690:	b580      	push	{r7, lr}
 8000692:	b082      	sub	sp, #8
 8000694:	af00      	add	r7, sp, #0

//HAL_Init();
  Button_Init();
 8000696:	f7ff fda7 	bl	80001e8 <Button_Init>
  Led_Init();
 800069a:	f7ff fdc9 	bl	8000230 <Led_Init>
//Button_Interrupt_Int();
  Uart_Init();
 800069e:	f7ff fe45 	bl	800032c <Uart_Init>
  Uart_Interrupt_Init();
 80006a2:	f7ff ff1f 	bl	80004e4 <Uart_Interrupt_Init>
//DMA_Uart1_RX_Init();

  uart_send_string("Vui long gui firmware...\n");
 80006a6:	480f      	ldr	r0, [pc, #60]	@ (80006e4 <main+0x54>)
 80006a8:	f7ff fee0 	bl	800046c <uart_send_string>

for (int i = 0; i < sizeof(new_fw); i++) {
 80006ac:	2300      	movs	r3, #0
 80006ae:	607b      	str	r3, [r7, #4]
 80006b0:	e00e      	b.n	80006d0 <main+0x40>
  new_fw[i] = uart_receive_one_byte();
 80006b2:	f7ff fefb 	bl	80004ac <uart_receive_one_byte>
 80006b6:	4603      	mov	r3, r0
 80006b8:	4619      	mov	r1, r3
 80006ba:	4a0b      	ldr	r2, [pc, #44]	@ (80006e8 <main+0x58>)
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	4413      	add	r3, r2
 80006c0:	460a      	mov	r2, r1
 80006c2:	701a      	strb	r2, [r3, #0]
  count = i;
 80006c4:	4a09      	ldr	r2, [pc, #36]	@ (80006ec <main+0x5c>)
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	6013      	str	r3, [r2, #0]
for (int i = 0; i < sizeof(new_fw); i++) {
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	3301      	adds	r3, #1
 80006ce:	607b      	str	r3, [r7, #4]
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	f642 32db 	movw	r2, #11227	@ 0x2bdb
 80006d6:	4293      	cmp	r3, r2
 80006d8:	d9eb      	bls.n	80006b2 <main+0x22>
}

uart_send_string("Da nhan duoc firmware...\n");
 80006da:	4805      	ldr	r0, [pc, #20]	@ (80006f0 <main+0x60>)
 80006dc:	f7ff fec6 	bl	800046c <uart_send_string>

  // 

  

  while(1) {
 80006e0:	bf00      	nop
 80006e2:	e7fd      	b.n	80006e0 <main+0x50>
 80006e4:	08002d54 	.word	0x08002d54
 80006e8:	20000078 	.word	0x20000078
 80006ec:	20002c54 	.word	0x20002c54
 80006f0:	08002d70 	.word	0x08002d70

080006f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006f4:	b480      	push	{r7}
 80006f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80006f8:	bf00      	nop
 80006fa:	e7fd      	b.n	80006f8 <NMI_Handler+0x4>

080006fc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006fc:	b480      	push	{r7}
 80006fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000700:	bf00      	nop
 8000702:	e7fd      	b.n	8000700 <HardFault_Handler+0x4>

08000704 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000704:	b480      	push	{r7}
 8000706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000708:	bf00      	nop
 800070a:	e7fd      	b.n	8000708 <MemManage_Handler+0x4>

0800070c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800070c:	b480      	push	{r7}
 800070e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000710:	bf00      	nop
 8000712:	e7fd      	b.n	8000710 <BusFault_Handler+0x4>

08000714 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000714:	b480      	push	{r7}
 8000716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000718:	bf00      	nop
 800071a:	e7fd      	b.n	8000718 <UsageFault_Handler+0x4>

0800071c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800071c:	b480      	push	{r7}
 800071e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000720:	bf00      	nop
 8000722:	46bd      	mov	sp, r7
 8000724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000728:	4770      	bx	lr

0800072a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800072a:	b480      	push	{r7}
 800072c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800072e:	bf00      	nop
 8000730:	46bd      	mov	sp, r7
 8000732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000736:	4770      	bx	lr

08000738 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000738:	b480      	push	{r7}
 800073a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800073c:	bf00      	nop
 800073e:	46bd      	mov	sp, r7
 8000740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000744:	4770      	bx	lr

08000746 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000746:	b580      	push	{r7, lr}
 8000748:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800074a:	f000 f849 	bl	80007e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800074e:	bf00      	nop
 8000750:	bd80      	pop	{r7, pc}
	...

08000754 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000758:	4802      	ldr	r0, [pc, #8]	@ (8000764 <OTG_FS_IRQHandler+0x10>)
 800075a:	f000 f855 	bl	8000808 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800075e:	bf00      	nop
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	20002c5c 	.word	0x20002c5c

08000768 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000768:	b480      	push	{r7}
 800076a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800076c:	4b06      	ldr	r3, [pc, #24]	@ (8000788 <SystemInit+0x20>)
 800076e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000772:	4a05      	ldr	r2, [pc, #20]	@ (8000788 <SystemInit+0x20>)
 8000774:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000778:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800077c:	bf00      	nop
 800077e:	46bd      	mov	sp, r7
 8000780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000784:	4770      	bx	lr
 8000786:	bf00      	nop
 8000788:	e000ed00 	.word	0xe000ed00

0800078c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800078c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80007c4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000790:	f7ff ffea 	bl	8000768 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000794:	480c      	ldr	r0, [pc, #48]	@ (80007c8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000796:	490d      	ldr	r1, [pc, #52]	@ (80007cc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000798:	4a0d      	ldr	r2, [pc, #52]	@ (80007d0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800079a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800079c:	e002      	b.n	80007a4 <LoopCopyDataInit>

0800079e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800079e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007a2:	3304      	adds	r3, #4

080007a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007a8:	d3f9      	bcc.n	800079e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007aa:	4a0a      	ldr	r2, [pc, #40]	@ (80007d4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80007ac:	4c0a      	ldr	r4, [pc, #40]	@ (80007d8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80007ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007b0:	e001      	b.n	80007b6 <LoopFillZerobss>

080007b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007b4:	3204      	adds	r2, #4

080007b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007b8:	d3fb      	bcc.n	80007b2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80007ba:	f002 fa4f 	bl	8002c5c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80007be:	f7ff ff67 	bl	8000690 <main>
  bx  lr    
 80007c2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80007c4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80007c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007cc:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80007d0:	08002d9c 	.word	0x08002d9c
  ldr r2, =_sbss
 80007d4:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80007d8:	2000303c 	.word	0x2000303c

080007dc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80007dc:	e7fe      	b.n	80007dc <ADC_IRQHandler>
	...

080007e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007e4:	4b06      	ldr	r3, [pc, #24]	@ (8000800 <HAL_IncTick+0x20>)
 80007e6:	781b      	ldrb	r3, [r3, #0]
 80007e8:	461a      	mov	r2, r3
 80007ea:	4b06      	ldr	r3, [pc, #24]	@ (8000804 <HAL_IncTick+0x24>)
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	4413      	add	r3, r2
 80007f0:	4a04      	ldr	r2, [pc, #16]	@ (8000804 <HAL_IncTick+0x24>)
 80007f2:	6013      	str	r3, [r2, #0]
}
 80007f4:	bf00      	nop
 80007f6:	46bd      	mov	sp, r7
 80007f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fc:	4770      	bx	lr
 80007fe:	bf00      	nop
 8000800:	2000000c 	.word	0x2000000c
 8000804:	20002c58 	.word	0x20002c58

08000808 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b086      	sub	sp, #24
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8000816:	693b      	ldr	r3, [r7, #16]
 8000818:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	4618      	mov	r0, r3
 8000820:	f001 fea7 	bl	8002572 <USB_GetMode>
 8000824:	4603      	mov	r3, r0
 8000826:	2b01      	cmp	r3, #1
 8000828:	f040 80fb 	bne.w	8000a22 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	4618      	mov	r0, r3
 8000832:	f001 fe6a 	bl	800250a <USB_ReadInterrupts>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	f000 80f1 	beq.w	8000a20 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	4618      	mov	r0, r3
 8000844:	f001 fe61 	bl	800250a <USB_ReadInterrupts>
 8000848:	4603      	mov	r3, r0
 800084a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800084e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8000852:	d104      	bne.n	800085e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 800085c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	4618      	mov	r0, r3
 8000864:	f001 fe51 	bl	800250a <USB_ReadInterrupts>
 8000868:	4603      	mov	r3, r0
 800086a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800086e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8000872:	d104      	bne.n	800087e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800087c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	4618      	mov	r0, r3
 8000884:	f001 fe41 	bl	800250a <USB_ReadInterrupts>
 8000888:	4603      	mov	r3, r0
 800088a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800088e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8000892:	d104      	bne.n	800089e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800089c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	4618      	mov	r0, r3
 80008a4:	f001 fe31 	bl	800250a <USB_ReadInterrupts>
 80008a8:	4603      	mov	r3, r0
 80008aa:	f003 0302 	and.w	r3, r3, #2
 80008ae:	2b02      	cmp	r3, #2
 80008b0:	d103      	bne.n	80008ba <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	2202      	movs	r2, #2
 80008b8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	4618      	mov	r0, r3
 80008c0:	f001 fe23 	bl	800250a <USB_ReadInterrupts>
 80008c4:	4603      	mov	r3, r0
 80008c6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80008ca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80008ce:	d120      	bne.n	8000912 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80008d8:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80008da:	68fb      	ldr	r3, [r7, #12]
 80008dc:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	f003 0301 	and.w	r3, r3, #1
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d113      	bne.n	8000912 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80008ea:	2110      	movs	r1, #16
 80008ec:	6938      	ldr	r0, [r7, #16]
 80008ee:	f001 fd54 	bl	800239a <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80008f2:	6938      	ldr	r0, [r7, #16]
 80008f4:	f001 fd83 	bl	80023fe <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	7a5b      	ldrb	r3, [r3, #9]
 80008fc:	2b02      	cmp	r3, #2
 80008fe:	d105      	bne.n	800090c <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	2101      	movs	r1, #1
 8000906:	4618      	mov	r0, r3
 8000908:	f001 fe41 	bl	800258e <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 800090c:	6878      	ldr	r0, [r7, #4]
 800090e:	f002 f8f9 	bl	8002b04 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	4618      	mov	r0, r3
 8000918:	f001 fdf7 	bl	800250a <USB_ReadInterrupts>
 800091c:	4603      	mov	r3, r0
 800091e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8000922:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000926:	d102      	bne.n	800092e <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8000928:	6878      	ldr	r0, [r7, #4]
 800092a:	f001 fca1 	bl	8002270 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	4618      	mov	r0, r3
 8000934:	f001 fde9 	bl	800250a <USB_ReadInterrupts>
 8000938:	4603      	mov	r3, r0
 800093a:	f003 0308 	and.w	r3, r3, #8
 800093e:	2b08      	cmp	r3, #8
 8000940:	d106      	bne.n	8000950 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8000942:	6878      	ldr	r0, [r7, #4]
 8000944:	f002 f8c2 	bl	8002acc <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	2208      	movs	r2, #8
 800094e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	4618      	mov	r0, r3
 8000956:	f001 fdd8 	bl	800250a <USB_ReadInterrupts>
 800095a:	4603      	mov	r3, r0
 800095c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000960:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8000964:	d139      	bne.n	80009da <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	4618      	mov	r0, r3
 800096c:	f001 fe4c 	bl	8002608 <USB_HC_ReadInterrupt>
 8000970:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8000972:	2300      	movs	r3, #0
 8000974:	617b      	str	r3, [r7, #20]
 8000976:	e025      	b.n	80009c4 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8000978:	697b      	ldr	r3, [r7, #20]
 800097a:	f003 030f 	and.w	r3, r3, #15
 800097e:	68ba      	ldr	r2, [r7, #8]
 8000980:	fa22 f303 	lsr.w	r3, r2, r3
 8000984:	f003 0301 	and.w	r3, r3, #1
 8000988:	2b00      	cmp	r3, #0
 800098a:	d018      	beq.n	80009be <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800098c:	697b      	ldr	r3, [r7, #20]
 800098e:	015a      	lsls	r2, r3, #5
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	4413      	add	r3, r2
 8000994:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800099e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80009a2:	d106      	bne.n	80009b2 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80009a4:	697b      	ldr	r3, [r7, #20]
 80009a6:	b2db      	uxtb	r3, r3
 80009a8:	4619      	mov	r1, r3
 80009aa:	6878      	ldr	r0, [r7, #4]
 80009ac:	f000 f859 	bl	8000a62 <HCD_HC_IN_IRQHandler>
 80009b0:	e005      	b.n	80009be <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80009b2:	697b      	ldr	r3, [r7, #20]
 80009b4:	b2db      	uxtb	r3, r3
 80009b6:	4619      	mov	r1, r3
 80009b8:	6878      	ldr	r0, [r7, #4]
 80009ba:	f000 febb 	bl	8001734 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80009be:	697b      	ldr	r3, [r7, #20]
 80009c0:	3301      	adds	r3, #1
 80009c2:	617b      	str	r3, [r7, #20]
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	795b      	ldrb	r3, [r3, #5]
 80009c8:	461a      	mov	r2, r3
 80009ca:	697b      	ldr	r3, [r7, #20]
 80009cc:	4293      	cmp	r3, r2
 80009ce:	d3d3      	bcc.n	8000978 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80009d8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	4618      	mov	r0, r3
 80009e0:	f001 fd93 	bl	800250a <USB_ReadInterrupts>
 80009e4:	4603      	mov	r3, r0
 80009e6:	f003 0310 	and.w	r3, r3, #16
 80009ea:	2b10      	cmp	r3, #16
 80009ec:	d101      	bne.n	80009f2 <HAL_HCD_IRQHandler+0x1ea>
 80009ee:	2301      	movs	r3, #1
 80009f0:	e000      	b.n	80009f4 <HAL_HCD_IRQHandler+0x1ec>
 80009f2:	2300      	movs	r3, #0
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d014      	beq.n	8000a22 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	699a      	ldr	r2, [r3, #24]
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	f022 0210 	bic.w	r2, r2, #16
 8000a06:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8000a08:	6878      	ldr	r0, [r7, #4]
 8000a0a:	f001 fb52 	bl	80020b2 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	699a      	ldr	r2, [r3, #24]
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	f042 0210 	orr.w	r2, r2, #16
 8000a1c:	619a      	str	r2, [r3, #24]
 8000a1e:	e000      	b.n	8000a22 <HAL_HCD_IRQHandler+0x21a>
      return;
 8000a20:	bf00      	nop
    }
  }
}
 8000a22:	3718      	adds	r7, #24
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}

08000a28 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b082      	sub	sp, #8
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8000a36:	2b01      	cmp	r3, #1
 8000a38:	d101      	bne.n	8000a3e <HAL_HCD_Stop+0x16>
 8000a3a:	2302      	movs	r3, #2
 8000a3c:	e00d      	b.n	8000a5a <HAL_HCD_Stop+0x32>
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	2201      	movs	r2, #1
 8000a42:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f001 ff0d 	bl	800286a <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	2200      	movs	r2, #0
 8000a54:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8000a58:	2300      	movs	r3, #0
}
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	3708      	adds	r7, #8
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}

08000a62 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8000a62:	b580      	push	{r7, lr}
 8000a64:	b086      	sub	sp, #24
 8000a66:	af00      	add	r7, sp, #0
 8000a68:	6078      	str	r0, [r7, #4]
 8000a6a:	460b      	mov	r3, r1
 8000a6c:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8000a74:	697b      	ldr	r3, [r7, #20]
 8000a76:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	78fa      	ldrb	r2, [r7, #3]
 8000a7e:	4611      	mov	r1, r2
 8000a80:	4618      	mov	r0, r3
 8000a82:	f001 fd55 	bl	8002530 <USB_ReadChInterrupts>
 8000a86:	4603      	mov	r3, r0
 8000a88:	f003 0304 	and.w	r3, r3, #4
 8000a8c:	2b04      	cmp	r3, #4
 8000a8e:	d11a      	bne.n	8000ac6 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8000a90:	78fb      	ldrb	r3, [r7, #3]
 8000a92:	015a      	lsls	r2, r3, #5
 8000a94:	693b      	ldr	r3, [r7, #16]
 8000a96:	4413      	add	r3, r2
 8000a98:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8000a9c:	461a      	mov	r2, r3
 8000a9e:	2304      	movs	r3, #4
 8000aa0:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8000aa2:	78fa      	ldrb	r2, [r7, #3]
 8000aa4:	6879      	ldr	r1, [r7, #4]
 8000aa6:	4613      	mov	r3, r2
 8000aa8:	011b      	lsls	r3, r3, #4
 8000aaa:	1a9b      	subs	r3, r3, r2
 8000aac:	009b      	lsls	r3, r3, #2
 8000aae:	440b      	add	r3, r1
 8000ab0:	334d      	adds	r3, #77	@ 0x4d
 8000ab2:	2207      	movs	r2, #7
 8000ab4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	78fa      	ldrb	r2, [r7, #3]
 8000abc:	4611      	mov	r1, r2
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f001 fdb3 	bl	800262a <USB_HC_Halt>
 8000ac4:	e09e      	b.n	8000c04 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	78fa      	ldrb	r2, [r7, #3]
 8000acc:	4611      	mov	r1, r2
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f001 fd2e 	bl	8002530 <USB_ReadChInterrupts>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000ada:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000ade:	d11b      	bne.n	8000b18 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8000ae0:	78fb      	ldrb	r3, [r7, #3]
 8000ae2:	015a      	lsls	r2, r3, #5
 8000ae4:	693b      	ldr	r3, [r7, #16]
 8000ae6:	4413      	add	r3, r2
 8000ae8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8000aec:	461a      	mov	r2, r3
 8000aee:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000af2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8000af4:	78fa      	ldrb	r2, [r7, #3]
 8000af6:	6879      	ldr	r1, [r7, #4]
 8000af8:	4613      	mov	r3, r2
 8000afa:	011b      	lsls	r3, r3, #4
 8000afc:	1a9b      	subs	r3, r3, r2
 8000afe:	009b      	lsls	r3, r3, #2
 8000b00:	440b      	add	r3, r1
 8000b02:	334d      	adds	r3, #77	@ 0x4d
 8000b04:	2208      	movs	r2, #8
 8000b06:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	78fa      	ldrb	r2, [r7, #3]
 8000b0e:	4611      	mov	r1, r2
 8000b10:	4618      	mov	r0, r3
 8000b12:	f001 fd8a 	bl	800262a <USB_HC_Halt>
 8000b16:	e075      	b.n	8000c04 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	78fa      	ldrb	r2, [r7, #3]
 8000b1e:	4611      	mov	r1, r2
 8000b20:	4618      	mov	r0, r3
 8000b22:	f001 fd05 	bl	8002530 <USB_ReadChInterrupts>
 8000b26:	4603      	mov	r3, r0
 8000b28:	f003 0308 	and.w	r3, r3, #8
 8000b2c:	2b08      	cmp	r3, #8
 8000b2e:	d11a      	bne.n	8000b66 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8000b30:	78fb      	ldrb	r3, [r7, #3]
 8000b32:	015a      	lsls	r2, r3, #5
 8000b34:	693b      	ldr	r3, [r7, #16]
 8000b36:	4413      	add	r3, r2
 8000b38:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8000b3c:	461a      	mov	r2, r3
 8000b3e:	2308      	movs	r3, #8
 8000b40:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8000b42:	78fa      	ldrb	r2, [r7, #3]
 8000b44:	6879      	ldr	r1, [r7, #4]
 8000b46:	4613      	mov	r3, r2
 8000b48:	011b      	lsls	r3, r3, #4
 8000b4a:	1a9b      	subs	r3, r3, r2
 8000b4c:	009b      	lsls	r3, r3, #2
 8000b4e:	440b      	add	r3, r1
 8000b50:	334d      	adds	r3, #77	@ 0x4d
 8000b52:	2206      	movs	r2, #6
 8000b54:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	78fa      	ldrb	r2, [r7, #3]
 8000b5c:	4611      	mov	r1, r2
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f001 fd63 	bl	800262a <USB_HC_Halt>
 8000b64:	e04e      	b.n	8000c04 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	78fa      	ldrb	r2, [r7, #3]
 8000b6c:	4611      	mov	r1, r2
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f001 fcde 	bl	8002530 <USB_ReadChInterrupts>
 8000b74:	4603      	mov	r3, r0
 8000b76:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000b7a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000b7e:	d11b      	bne.n	8000bb8 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8000b80:	78fb      	ldrb	r3, [r7, #3]
 8000b82:	015a      	lsls	r2, r3, #5
 8000b84:	693b      	ldr	r3, [r7, #16]
 8000b86:	4413      	add	r3, r2
 8000b88:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8000b8c:	461a      	mov	r2, r3
 8000b8e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b92:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8000b94:	78fa      	ldrb	r2, [r7, #3]
 8000b96:	6879      	ldr	r1, [r7, #4]
 8000b98:	4613      	mov	r3, r2
 8000b9a:	011b      	lsls	r3, r3, #4
 8000b9c:	1a9b      	subs	r3, r3, r2
 8000b9e:	009b      	lsls	r3, r3, #2
 8000ba0:	440b      	add	r3, r1
 8000ba2:	334d      	adds	r3, #77	@ 0x4d
 8000ba4:	2209      	movs	r2, #9
 8000ba6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	78fa      	ldrb	r2, [r7, #3]
 8000bae:	4611      	mov	r1, r2
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f001 fd3a 	bl	800262a <USB_HC_Halt>
 8000bb6:	e025      	b.n	8000c04 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	78fa      	ldrb	r2, [r7, #3]
 8000bbe:	4611      	mov	r1, r2
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f001 fcb5 	bl	8002530 <USB_ReadChInterrupts>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000bcc:	2b80      	cmp	r3, #128	@ 0x80
 8000bce:	d119      	bne.n	8000c04 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8000bd0:	78fb      	ldrb	r3, [r7, #3]
 8000bd2:	015a      	lsls	r2, r3, #5
 8000bd4:	693b      	ldr	r3, [r7, #16]
 8000bd6:	4413      	add	r3, r2
 8000bd8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8000bdc:	461a      	mov	r2, r3
 8000bde:	2380      	movs	r3, #128	@ 0x80
 8000be0:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8000be2:	78fa      	ldrb	r2, [r7, #3]
 8000be4:	6879      	ldr	r1, [r7, #4]
 8000be6:	4613      	mov	r3, r2
 8000be8:	011b      	lsls	r3, r3, #4
 8000bea:	1a9b      	subs	r3, r3, r2
 8000bec:	009b      	lsls	r3, r3, #2
 8000bee:	440b      	add	r3, r1
 8000bf0:	334d      	adds	r3, #77	@ 0x4d
 8000bf2:	2207      	movs	r2, #7
 8000bf4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	78fa      	ldrb	r2, [r7, #3]
 8000bfc:	4611      	mov	r1, r2
 8000bfe:	4618      	mov	r0, r3
 8000c00:	f001 fd13 	bl	800262a <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	78fa      	ldrb	r2, [r7, #3]
 8000c0a:	4611      	mov	r1, r2
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f001 fc8f 	bl	8002530 <USB_ReadChInterrupts>
 8000c12:	4603      	mov	r3, r0
 8000c14:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000c18:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000c1c:	d112      	bne.n	8000c44 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	78fa      	ldrb	r2, [r7, #3]
 8000c24:	4611      	mov	r1, r2
 8000c26:	4618      	mov	r0, r3
 8000c28:	f001 fcff 	bl	800262a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8000c2c:	78fb      	ldrb	r3, [r7, #3]
 8000c2e:	015a      	lsls	r2, r3, #5
 8000c30:	693b      	ldr	r3, [r7, #16]
 8000c32:	4413      	add	r3, r2
 8000c34:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8000c38:	461a      	mov	r2, r3
 8000c3a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000c3e:	6093      	str	r3, [r2, #8]
 8000c40:	f000 bd75 	b.w	800172e <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	78fa      	ldrb	r2, [r7, #3]
 8000c4a:	4611      	mov	r1, r2
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f001 fc6f 	bl	8002530 <USB_ReadChInterrupts>
 8000c52:	4603      	mov	r3, r0
 8000c54:	f003 0301 	and.w	r3, r3, #1
 8000c58:	2b01      	cmp	r3, #1
 8000c5a:	f040 8128 	bne.w	8000eae <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8000c5e:	78fb      	ldrb	r3, [r7, #3]
 8000c60:	015a      	lsls	r2, r3, #5
 8000c62:	693b      	ldr	r3, [r7, #16]
 8000c64:	4413      	add	r3, r2
 8000c66:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8000c6a:	461a      	mov	r2, r3
 8000c6c:	2320      	movs	r3, #32
 8000c6e:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8000c70:	78fa      	ldrb	r2, [r7, #3]
 8000c72:	6879      	ldr	r1, [r7, #4]
 8000c74:	4613      	mov	r3, r2
 8000c76:	011b      	lsls	r3, r3, #4
 8000c78:	1a9b      	subs	r3, r3, r2
 8000c7a:	009b      	lsls	r3, r3, #2
 8000c7c:	440b      	add	r3, r1
 8000c7e:	331b      	adds	r3, #27
 8000c80:	781b      	ldrb	r3, [r3, #0]
 8000c82:	2b01      	cmp	r3, #1
 8000c84:	d119      	bne.n	8000cba <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8000c86:	78fa      	ldrb	r2, [r7, #3]
 8000c88:	6879      	ldr	r1, [r7, #4]
 8000c8a:	4613      	mov	r3, r2
 8000c8c:	011b      	lsls	r3, r3, #4
 8000c8e:	1a9b      	subs	r3, r3, r2
 8000c90:	009b      	lsls	r3, r3, #2
 8000c92:	440b      	add	r3, r1
 8000c94:	331b      	adds	r3, #27
 8000c96:	2200      	movs	r2, #0
 8000c98:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8000c9a:	78fb      	ldrb	r3, [r7, #3]
 8000c9c:	015a      	lsls	r2, r3, #5
 8000c9e:	693b      	ldr	r3, [r7, #16]
 8000ca0:	4413      	add	r3, r2
 8000ca2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8000ca6:	685b      	ldr	r3, [r3, #4]
 8000ca8:	78fa      	ldrb	r2, [r7, #3]
 8000caa:	0151      	lsls	r1, r2, #5
 8000cac:	693a      	ldr	r2, [r7, #16]
 8000cae:	440a      	add	r2, r1
 8000cb0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8000cb4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000cb8:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	799b      	ldrb	r3, [r3, #6]
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d01b      	beq.n	8000cfa <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8000cc2:	78fa      	ldrb	r2, [r7, #3]
 8000cc4:	6879      	ldr	r1, [r7, #4]
 8000cc6:	4613      	mov	r3, r2
 8000cc8:	011b      	lsls	r3, r3, #4
 8000cca:	1a9b      	subs	r3, r3, r2
 8000ccc:	009b      	lsls	r3, r3, #2
 8000cce:	440b      	add	r3, r1
 8000cd0:	3330      	adds	r3, #48	@ 0x30
 8000cd2:	6819      	ldr	r1, [r3, #0]
 8000cd4:	78fb      	ldrb	r3, [r7, #3]
 8000cd6:	015a      	lsls	r2, r3, #5
 8000cd8:	693b      	ldr	r3, [r7, #16]
 8000cda:	4413      	add	r3, r2
 8000cdc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8000ce0:	691b      	ldr	r3, [r3, #16]
 8000ce2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000ce6:	78fa      	ldrb	r2, [r7, #3]
 8000ce8:	1ac9      	subs	r1, r1, r3
 8000cea:	6878      	ldr	r0, [r7, #4]
 8000cec:	4613      	mov	r3, r2
 8000cee:	011b      	lsls	r3, r3, #4
 8000cf0:	1a9b      	subs	r3, r3, r2
 8000cf2:	009b      	lsls	r3, r3, #2
 8000cf4:	4403      	add	r3, r0
 8000cf6:	3338      	adds	r3, #56	@ 0x38
 8000cf8:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8000cfa:	78fa      	ldrb	r2, [r7, #3]
 8000cfc:	6879      	ldr	r1, [r7, #4]
 8000cfe:	4613      	mov	r3, r2
 8000d00:	011b      	lsls	r3, r3, #4
 8000d02:	1a9b      	subs	r3, r3, r2
 8000d04:	009b      	lsls	r3, r3, #2
 8000d06:	440b      	add	r3, r1
 8000d08:	334d      	adds	r3, #77	@ 0x4d
 8000d0a:	2201      	movs	r2, #1
 8000d0c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8000d0e:	78fa      	ldrb	r2, [r7, #3]
 8000d10:	6879      	ldr	r1, [r7, #4]
 8000d12:	4613      	mov	r3, r2
 8000d14:	011b      	lsls	r3, r3, #4
 8000d16:	1a9b      	subs	r3, r3, r2
 8000d18:	009b      	lsls	r3, r3, #2
 8000d1a:	440b      	add	r3, r1
 8000d1c:	3344      	adds	r3, #68	@ 0x44
 8000d1e:	2200      	movs	r2, #0
 8000d20:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8000d22:	78fb      	ldrb	r3, [r7, #3]
 8000d24:	015a      	lsls	r2, r3, #5
 8000d26:	693b      	ldr	r3, [r7, #16]
 8000d28:	4413      	add	r3, r2
 8000d2a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8000d2e:	461a      	mov	r2, r3
 8000d30:	2301      	movs	r3, #1
 8000d32:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8000d34:	78fa      	ldrb	r2, [r7, #3]
 8000d36:	6879      	ldr	r1, [r7, #4]
 8000d38:	4613      	mov	r3, r2
 8000d3a:	011b      	lsls	r3, r3, #4
 8000d3c:	1a9b      	subs	r3, r3, r2
 8000d3e:	009b      	lsls	r3, r3, #2
 8000d40:	440b      	add	r3, r1
 8000d42:	3326      	adds	r3, #38	@ 0x26
 8000d44:	781b      	ldrb	r3, [r3, #0]
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d00a      	beq.n	8000d60 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8000d4a:	78fa      	ldrb	r2, [r7, #3]
 8000d4c:	6879      	ldr	r1, [r7, #4]
 8000d4e:	4613      	mov	r3, r2
 8000d50:	011b      	lsls	r3, r3, #4
 8000d52:	1a9b      	subs	r3, r3, r2
 8000d54:	009b      	lsls	r3, r3, #2
 8000d56:	440b      	add	r3, r1
 8000d58:	3326      	adds	r3, #38	@ 0x26
 8000d5a:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8000d5c:	2b02      	cmp	r3, #2
 8000d5e:	d110      	bne.n	8000d82 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	78fa      	ldrb	r2, [r7, #3]
 8000d66:	4611      	mov	r1, r2
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f001 fc5e 	bl	800262a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8000d6e:	78fb      	ldrb	r3, [r7, #3]
 8000d70:	015a      	lsls	r2, r3, #5
 8000d72:	693b      	ldr	r3, [r7, #16]
 8000d74:	4413      	add	r3, r2
 8000d76:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8000d7a:	461a      	mov	r2, r3
 8000d7c:	2310      	movs	r3, #16
 8000d7e:	6093      	str	r3, [r2, #8]
 8000d80:	e03d      	b.n	8000dfe <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8000d82:	78fa      	ldrb	r2, [r7, #3]
 8000d84:	6879      	ldr	r1, [r7, #4]
 8000d86:	4613      	mov	r3, r2
 8000d88:	011b      	lsls	r3, r3, #4
 8000d8a:	1a9b      	subs	r3, r3, r2
 8000d8c:	009b      	lsls	r3, r3, #2
 8000d8e:	440b      	add	r3, r1
 8000d90:	3326      	adds	r3, #38	@ 0x26
 8000d92:	781b      	ldrb	r3, [r3, #0]
 8000d94:	2b03      	cmp	r3, #3
 8000d96:	d00a      	beq.n	8000dae <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8000d98:	78fa      	ldrb	r2, [r7, #3]
 8000d9a:	6879      	ldr	r1, [r7, #4]
 8000d9c:	4613      	mov	r3, r2
 8000d9e:	011b      	lsls	r3, r3, #4
 8000da0:	1a9b      	subs	r3, r3, r2
 8000da2:	009b      	lsls	r3, r3, #2
 8000da4:	440b      	add	r3, r1
 8000da6:	3326      	adds	r3, #38	@ 0x26
 8000da8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8000daa:	2b01      	cmp	r3, #1
 8000dac:	d127      	bne.n	8000dfe <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8000dae:	78fb      	ldrb	r3, [r7, #3]
 8000db0:	015a      	lsls	r2, r3, #5
 8000db2:	693b      	ldr	r3, [r7, #16]
 8000db4:	4413      	add	r3, r2
 8000db6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	78fa      	ldrb	r2, [r7, #3]
 8000dbe:	0151      	lsls	r1, r2, #5
 8000dc0:	693a      	ldr	r2, [r7, #16]
 8000dc2:	440a      	add	r2, r1
 8000dc4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8000dc8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8000dcc:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8000dce:	78fa      	ldrb	r2, [r7, #3]
 8000dd0:	6879      	ldr	r1, [r7, #4]
 8000dd2:	4613      	mov	r3, r2
 8000dd4:	011b      	lsls	r3, r3, #4
 8000dd6:	1a9b      	subs	r3, r3, r2
 8000dd8:	009b      	lsls	r3, r3, #2
 8000dda:	440b      	add	r3, r1
 8000ddc:	334c      	adds	r3, #76	@ 0x4c
 8000dde:	2201      	movs	r2, #1
 8000de0:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8000de2:	78fa      	ldrb	r2, [r7, #3]
 8000de4:	6879      	ldr	r1, [r7, #4]
 8000de6:	4613      	mov	r3, r2
 8000de8:	011b      	lsls	r3, r3, #4
 8000dea:	1a9b      	subs	r3, r3, r2
 8000dec:	009b      	lsls	r3, r3, #2
 8000dee:	440b      	add	r3, r1
 8000df0:	334c      	adds	r3, #76	@ 0x4c
 8000df2:	781a      	ldrb	r2, [r3, #0]
 8000df4:	78fb      	ldrb	r3, [r7, #3]
 8000df6:	4619      	mov	r1, r3
 8000df8:	6878      	ldr	r0, [r7, #4]
 8000dfa:	f001 fe91 	bl	8002b20 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	799b      	ldrb	r3, [r3, #6]
 8000e02:	2b01      	cmp	r3, #1
 8000e04:	d13b      	bne.n	8000e7e <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8000e06:	78fa      	ldrb	r2, [r7, #3]
 8000e08:	6879      	ldr	r1, [r7, #4]
 8000e0a:	4613      	mov	r3, r2
 8000e0c:	011b      	lsls	r3, r3, #4
 8000e0e:	1a9b      	subs	r3, r3, r2
 8000e10:	009b      	lsls	r3, r3, #2
 8000e12:	440b      	add	r3, r1
 8000e14:	3338      	adds	r3, #56	@ 0x38
 8000e16:	6819      	ldr	r1, [r3, #0]
 8000e18:	78fa      	ldrb	r2, [r7, #3]
 8000e1a:	6878      	ldr	r0, [r7, #4]
 8000e1c:	4613      	mov	r3, r2
 8000e1e:	011b      	lsls	r3, r3, #4
 8000e20:	1a9b      	subs	r3, r3, r2
 8000e22:	009b      	lsls	r3, r3, #2
 8000e24:	4403      	add	r3, r0
 8000e26:	3328      	adds	r3, #40	@ 0x28
 8000e28:	881b      	ldrh	r3, [r3, #0]
 8000e2a:	440b      	add	r3, r1
 8000e2c:	1e59      	subs	r1, r3, #1
 8000e2e:	78fa      	ldrb	r2, [r7, #3]
 8000e30:	6878      	ldr	r0, [r7, #4]
 8000e32:	4613      	mov	r3, r2
 8000e34:	011b      	lsls	r3, r3, #4
 8000e36:	1a9b      	subs	r3, r3, r2
 8000e38:	009b      	lsls	r3, r3, #2
 8000e3a:	4403      	add	r3, r0
 8000e3c:	3328      	adds	r3, #40	@ 0x28
 8000e3e:	881b      	ldrh	r3, [r3, #0]
 8000e40:	fbb1 f3f3 	udiv	r3, r1, r3
 8000e44:	f003 0301 	and.w	r3, r3, #1
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	f000 8470 	beq.w	800172e <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8000e4e:	78fa      	ldrb	r2, [r7, #3]
 8000e50:	6879      	ldr	r1, [r7, #4]
 8000e52:	4613      	mov	r3, r2
 8000e54:	011b      	lsls	r3, r3, #4
 8000e56:	1a9b      	subs	r3, r3, r2
 8000e58:	009b      	lsls	r3, r3, #2
 8000e5a:	440b      	add	r3, r1
 8000e5c:	333c      	adds	r3, #60	@ 0x3c
 8000e5e:	781b      	ldrb	r3, [r3, #0]
 8000e60:	78fa      	ldrb	r2, [r7, #3]
 8000e62:	f083 0301 	eor.w	r3, r3, #1
 8000e66:	b2d8      	uxtb	r0, r3
 8000e68:	6879      	ldr	r1, [r7, #4]
 8000e6a:	4613      	mov	r3, r2
 8000e6c:	011b      	lsls	r3, r3, #4
 8000e6e:	1a9b      	subs	r3, r3, r2
 8000e70:	009b      	lsls	r3, r3, #2
 8000e72:	440b      	add	r3, r1
 8000e74:	333c      	adds	r3, #60	@ 0x3c
 8000e76:	4602      	mov	r2, r0
 8000e78:	701a      	strb	r2, [r3, #0]
 8000e7a:	f000 bc58 	b.w	800172e <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8000e7e:	78fa      	ldrb	r2, [r7, #3]
 8000e80:	6879      	ldr	r1, [r7, #4]
 8000e82:	4613      	mov	r3, r2
 8000e84:	011b      	lsls	r3, r3, #4
 8000e86:	1a9b      	subs	r3, r3, r2
 8000e88:	009b      	lsls	r3, r3, #2
 8000e8a:	440b      	add	r3, r1
 8000e8c:	333c      	adds	r3, #60	@ 0x3c
 8000e8e:	781b      	ldrb	r3, [r3, #0]
 8000e90:	78fa      	ldrb	r2, [r7, #3]
 8000e92:	f083 0301 	eor.w	r3, r3, #1
 8000e96:	b2d8      	uxtb	r0, r3
 8000e98:	6879      	ldr	r1, [r7, #4]
 8000e9a:	4613      	mov	r3, r2
 8000e9c:	011b      	lsls	r3, r3, #4
 8000e9e:	1a9b      	subs	r3, r3, r2
 8000ea0:	009b      	lsls	r3, r3, #2
 8000ea2:	440b      	add	r3, r1
 8000ea4:	333c      	adds	r3, #60	@ 0x3c
 8000ea6:	4602      	mov	r2, r0
 8000ea8:	701a      	strb	r2, [r3, #0]
 8000eaa:	f000 bc40 	b.w	800172e <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	78fa      	ldrb	r2, [r7, #3]
 8000eb4:	4611      	mov	r1, r2
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f001 fb3a 	bl	8002530 <USB_ReadChInterrupts>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	f003 0320 	and.w	r3, r3, #32
 8000ec2:	2b20      	cmp	r3, #32
 8000ec4:	d131      	bne.n	8000f2a <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8000ec6:	78fb      	ldrb	r3, [r7, #3]
 8000ec8:	015a      	lsls	r2, r3, #5
 8000eca:	693b      	ldr	r3, [r7, #16]
 8000ecc:	4413      	add	r3, r2
 8000ece:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8000ed2:	461a      	mov	r2, r3
 8000ed4:	2320      	movs	r3, #32
 8000ed6:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8000ed8:	78fa      	ldrb	r2, [r7, #3]
 8000eda:	6879      	ldr	r1, [r7, #4]
 8000edc:	4613      	mov	r3, r2
 8000ede:	011b      	lsls	r3, r3, #4
 8000ee0:	1a9b      	subs	r3, r3, r2
 8000ee2:	009b      	lsls	r3, r3, #2
 8000ee4:	440b      	add	r3, r1
 8000ee6:	331a      	adds	r3, #26
 8000ee8:	781b      	ldrb	r3, [r3, #0]
 8000eea:	2b01      	cmp	r3, #1
 8000eec:	f040 841f 	bne.w	800172e <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8000ef0:	78fa      	ldrb	r2, [r7, #3]
 8000ef2:	6879      	ldr	r1, [r7, #4]
 8000ef4:	4613      	mov	r3, r2
 8000ef6:	011b      	lsls	r3, r3, #4
 8000ef8:	1a9b      	subs	r3, r3, r2
 8000efa:	009b      	lsls	r3, r3, #2
 8000efc:	440b      	add	r3, r1
 8000efe:	331b      	adds	r3, #27
 8000f00:	2201      	movs	r2, #1
 8000f02:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8000f04:	78fa      	ldrb	r2, [r7, #3]
 8000f06:	6879      	ldr	r1, [r7, #4]
 8000f08:	4613      	mov	r3, r2
 8000f0a:	011b      	lsls	r3, r3, #4
 8000f0c:	1a9b      	subs	r3, r3, r2
 8000f0e:	009b      	lsls	r3, r3, #2
 8000f10:	440b      	add	r3, r1
 8000f12:	334d      	adds	r3, #77	@ 0x4d
 8000f14:	2203      	movs	r2, #3
 8000f16:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	78fa      	ldrb	r2, [r7, #3]
 8000f1e:	4611      	mov	r1, r2
 8000f20:	4618      	mov	r0, r3
 8000f22:	f001 fb82 	bl	800262a <USB_HC_Halt>
 8000f26:	f000 bc02 	b.w	800172e <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	78fa      	ldrb	r2, [r7, #3]
 8000f30:	4611      	mov	r1, r2
 8000f32:	4618      	mov	r0, r3
 8000f34:	f001 fafc 	bl	8002530 <USB_ReadChInterrupts>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	f003 0302 	and.w	r3, r3, #2
 8000f3e:	2b02      	cmp	r3, #2
 8000f40:	f040 8305 	bne.w	800154e <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8000f44:	78fb      	ldrb	r3, [r7, #3]
 8000f46:	015a      	lsls	r2, r3, #5
 8000f48:	693b      	ldr	r3, [r7, #16]
 8000f4a:	4413      	add	r3, r2
 8000f4c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8000f50:	461a      	mov	r2, r3
 8000f52:	2302      	movs	r3, #2
 8000f54:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8000f56:	78fa      	ldrb	r2, [r7, #3]
 8000f58:	6879      	ldr	r1, [r7, #4]
 8000f5a:	4613      	mov	r3, r2
 8000f5c:	011b      	lsls	r3, r3, #4
 8000f5e:	1a9b      	subs	r3, r3, r2
 8000f60:	009b      	lsls	r3, r3, #2
 8000f62:	440b      	add	r3, r1
 8000f64:	334d      	adds	r3, #77	@ 0x4d
 8000f66:	781b      	ldrb	r3, [r3, #0]
 8000f68:	2b01      	cmp	r3, #1
 8000f6a:	d114      	bne.n	8000f96 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8000f6c:	78fa      	ldrb	r2, [r7, #3]
 8000f6e:	6879      	ldr	r1, [r7, #4]
 8000f70:	4613      	mov	r3, r2
 8000f72:	011b      	lsls	r3, r3, #4
 8000f74:	1a9b      	subs	r3, r3, r2
 8000f76:	009b      	lsls	r3, r3, #2
 8000f78:	440b      	add	r3, r1
 8000f7a:	334d      	adds	r3, #77	@ 0x4d
 8000f7c:	2202      	movs	r2, #2
 8000f7e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8000f80:	78fa      	ldrb	r2, [r7, #3]
 8000f82:	6879      	ldr	r1, [r7, #4]
 8000f84:	4613      	mov	r3, r2
 8000f86:	011b      	lsls	r3, r3, #4
 8000f88:	1a9b      	subs	r3, r3, r2
 8000f8a:	009b      	lsls	r3, r3, #2
 8000f8c:	440b      	add	r3, r1
 8000f8e:	334c      	adds	r3, #76	@ 0x4c
 8000f90:	2201      	movs	r2, #1
 8000f92:	701a      	strb	r2, [r3, #0]
 8000f94:	e2cc      	b.n	8001530 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8000f96:	78fa      	ldrb	r2, [r7, #3]
 8000f98:	6879      	ldr	r1, [r7, #4]
 8000f9a:	4613      	mov	r3, r2
 8000f9c:	011b      	lsls	r3, r3, #4
 8000f9e:	1a9b      	subs	r3, r3, r2
 8000fa0:	009b      	lsls	r3, r3, #2
 8000fa2:	440b      	add	r3, r1
 8000fa4:	334d      	adds	r3, #77	@ 0x4d
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	2b06      	cmp	r3, #6
 8000faa:	d114      	bne.n	8000fd6 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8000fac:	78fa      	ldrb	r2, [r7, #3]
 8000fae:	6879      	ldr	r1, [r7, #4]
 8000fb0:	4613      	mov	r3, r2
 8000fb2:	011b      	lsls	r3, r3, #4
 8000fb4:	1a9b      	subs	r3, r3, r2
 8000fb6:	009b      	lsls	r3, r3, #2
 8000fb8:	440b      	add	r3, r1
 8000fba:	334d      	adds	r3, #77	@ 0x4d
 8000fbc:	2202      	movs	r2, #2
 8000fbe:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8000fc0:	78fa      	ldrb	r2, [r7, #3]
 8000fc2:	6879      	ldr	r1, [r7, #4]
 8000fc4:	4613      	mov	r3, r2
 8000fc6:	011b      	lsls	r3, r3, #4
 8000fc8:	1a9b      	subs	r3, r3, r2
 8000fca:	009b      	lsls	r3, r3, #2
 8000fcc:	440b      	add	r3, r1
 8000fce:	334c      	adds	r3, #76	@ 0x4c
 8000fd0:	2205      	movs	r2, #5
 8000fd2:	701a      	strb	r2, [r3, #0]
 8000fd4:	e2ac      	b.n	8001530 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8000fd6:	78fa      	ldrb	r2, [r7, #3]
 8000fd8:	6879      	ldr	r1, [r7, #4]
 8000fda:	4613      	mov	r3, r2
 8000fdc:	011b      	lsls	r3, r3, #4
 8000fde:	1a9b      	subs	r3, r3, r2
 8000fe0:	009b      	lsls	r3, r3, #2
 8000fe2:	440b      	add	r3, r1
 8000fe4:	334d      	adds	r3, #77	@ 0x4d
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	2b07      	cmp	r3, #7
 8000fea:	d00b      	beq.n	8001004 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8000fec:	78fa      	ldrb	r2, [r7, #3]
 8000fee:	6879      	ldr	r1, [r7, #4]
 8000ff0:	4613      	mov	r3, r2
 8000ff2:	011b      	lsls	r3, r3, #4
 8000ff4:	1a9b      	subs	r3, r3, r2
 8000ff6:	009b      	lsls	r3, r3, #2
 8000ff8:	440b      	add	r3, r1
 8000ffa:	334d      	adds	r3, #77	@ 0x4d
 8000ffc:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8000ffe:	2b09      	cmp	r3, #9
 8001000:	f040 80a6 	bne.w	8001150 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8001004:	78fa      	ldrb	r2, [r7, #3]
 8001006:	6879      	ldr	r1, [r7, #4]
 8001008:	4613      	mov	r3, r2
 800100a:	011b      	lsls	r3, r3, #4
 800100c:	1a9b      	subs	r3, r3, r2
 800100e:	009b      	lsls	r3, r3, #2
 8001010:	440b      	add	r3, r1
 8001012:	334d      	adds	r3, #77	@ 0x4d
 8001014:	2202      	movs	r2, #2
 8001016:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8001018:	78fa      	ldrb	r2, [r7, #3]
 800101a:	6879      	ldr	r1, [r7, #4]
 800101c:	4613      	mov	r3, r2
 800101e:	011b      	lsls	r3, r3, #4
 8001020:	1a9b      	subs	r3, r3, r2
 8001022:	009b      	lsls	r3, r3, #2
 8001024:	440b      	add	r3, r1
 8001026:	3344      	adds	r3, #68	@ 0x44
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	1c59      	adds	r1, r3, #1
 800102c:	6878      	ldr	r0, [r7, #4]
 800102e:	4613      	mov	r3, r2
 8001030:	011b      	lsls	r3, r3, #4
 8001032:	1a9b      	subs	r3, r3, r2
 8001034:	009b      	lsls	r3, r3, #2
 8001036:	4403      	add	r3, r0
 8001038:	3344      	adds	r3, #68	@ 0x44
 800103a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800103c:	78fa      	ldrb	r2, [r7, #3]
 800103e:	6879      	ldr	r1, [r7, #4]
 8001040:	4613      	mov	r3, r2
 8001042:	011b      	lsls	r3, r3, #4
 8001044:	1a9b      	subs	r3, r3, r2
 8001046:	009b      	lsls	r3, r3, #2
 8001048:	440b      	add	r3, r1
 800104a:	3344      	adds	r3, #68	@ 0x44
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	2b02      	cmp	r3, #2
 8001050:	d943      	bls.n	80010da <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8001052:	78fa      	ldrb	r2, [r7, #3]
 8001054:	6879      	ldr	r1, [r7, #4]
 8001056:	4613      	mov	r3, r2
 8001058:	011b      	lsls	r3, r3, #4
 800105a:	1a9b      	subs	r3, r3, r2
 800105c:	009b      	lsls	r3, r3, #2
 800105e:	440b      	add	r3, r1
 8001060:	3344      	adds	r3, #68	@ 0x44
 8001062:	2200      	movs	r2, #0
 8001064:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8001066:	78fa      	ldrb	r2, [r7, #3]
 8001068:	6879      	ldr	r1, [r7, #4]
 800106a:	4613      	mov	r3, r2
 800106c:	011b      	lsls	r3, r3, #4
 800106e:	1a9b      	subs	r3, r3, r2
 8001070:	009b      	lsls	r3, r3, #2
 8001072:	440b      	add	r3, r1
 8001074:	331a      	adds	r3, #26
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	2b01      	cmp	r3, #1
 800107a:	d123      	bne.n	80010c4 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 800107c:	78fa      	ldrb	r2, [r7, #3]
 800107e:	6879      	ldr	r1, [r7, #4]
 8001080:	4613      	mov	r3, r2
 8001082:	011b      	lsls	r3, r3, #4
 8001084:	1a9b      	subs	r3, r3, r2
 8001086:	009b      	lsls	r3, r3, #2
 8001088:	440b      	add	r3, r1
 800108a:	331b      	adds	r3, #27
 800108c:	2200      	movs	r2, #0
 800108e:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8001090:	78fa      	ldrb	r2, [r7, #3]
 8001092:	6879      	ldr	r1, [r7, #4]
 8001094:	4613      	mov	r3, r2
 8001096:	011b      	lsls	r3, r3, #4
 8001098:	1a9b      	subs	r3, r3, r2
 800109a:	009b      	lsls	r3, r3, #2
 800109c:	440b      	add	r3, r1
 800109e:	331c      	adds	r3, #28
 80010a0:	2200      	movs	r2, #0
 80010a2:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80010a4:	78fb      	ldrb	r3, [r7, #3]
 80010a6:	015a      	lsls	r2, r3, #5
 80010a8:	693b      	ldr	r3, [r7, #16]
 80010aa:	4413      	add	r3, r2
 80010ac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	78fa      	ldrb	r2, [r7, #3]
 80010b4:	0151      	lsls	r1, r2, #5
 80010b6:	693a      	ldr	r2, [r7, #16]
 80010b8:	440a      	add	r2, r1
 80010ba:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80010be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80010c2:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 80010c4:	78fa      	ldrb	r2, [r7, #3]
 80010c6:	6879      	ldr	r1, [r7, #4]
 80010c8:	4613      	mov	r3, r2
 80010ca:	011b      	lsls	r3, r3, #4
 80010cc:	1a9b      	subs	r3, r3, r2
 80010ce:	009b      	lsls	r3, r3, #2
 80010d0:	440b      	add	r3, r1
 80010d2:	334c      	adds	r3, #76	@ 0x4c
 80010d4:	2204      	movs	r2, #4
 80010d6:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80010d8:	e229      	b.n	800152e <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80010da:	78fa      	ldrb	r2, [r7, #3]
 80010dc:	6879      	ldr	r1, [r7, #4]
 80010de:	4613      	mov	r3, r2
 80010e0:	011b      	lsls	r3, r3, #4
 80010e2:	1a9b      	subs	r3, r3, r2
 80010e4:	009b      	lsls	r3, r3, #2
 80010e6:	440b      	add	r3, r1
 80010e8:	334c      	adds	r3, #76	@ 0x4c
 80010ea:	2202      	movs	r2, #2
 80010ec:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80010ee:	78fa      	ldrb	r2, [r7, #3]
 80010f0:	6879      	ldr	r1, [r7, #4]
 80010f2:	4613      	mov	r3, r2
 80010f4:	011b      	lsls	r3, r3, #4
 80010f6:	1a9b      	subs	r3, r3, r2
 80010f8:	009b      	lsls	r3, r3, #2
 80010fa:	440b      	add	r3, r1
 80010fc:	3326      	adds	r3, #38	@ 0x26
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d00b      	beq.n	800111c <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8001104:	78fa      	ldrb	r2, [r7, #3]
 8001106:	6879      	ldr	r1, [r7, #4]
 8001108:	4613      	mov	r3, r2
 800110a:	011b      	lsls	r3, r3, #4
 800110c:	1a9b      	subs	r3, r3, r2
 800110e:	009b      	lsls	r3, r3, #2
 8001110:	440b      	add	r3, r1
 8001112:	3326      	adds	r3, #38	@ 0x26
 8001114:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001116:	2b02      	cmp	r3, #2
 8001118:	f040 8209 	bne.w	800152e <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 800111c:	78fb      	ldrb	r3, [r7, #3]
 800111e:	015a      	lsls	r2, r3, #5
 8001120:	693b      	ldr	r3, [r7, #16]
 8001122:	4413      	add	r3, r2
 8001124:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8001132:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800113a:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 800113c:	78fb      	ldrb	r3, [r7, #3]
 800113e:	015a      	lsls	r2, r3, #5
 8001140:	693b      	ldr	r3, [r7, #16]
 8001142:	4413      	add	r3, r2
 8001144:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001148:	461a      	mov	r2, r3
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800114e:	e1ee      	b.n	800152e <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8001150:	78fa      	ldrb	r2, [r7, #3]
 8001152:	6879      	ldr	r1, [r7, #4]
 8001154:	4613      	mov	r3, r2
 8001156:	011b      	lsls	r3, r3, #4
 8001158:	1a9b      	subs	r3, r3, r2
 800115a:	009b      	lsls	r3, r3, #2
 800115c:	440b      	add	r3, r1
 800115e:	334d      	adds	r3, #77	@ 0x4d
 8001160:	781b      	ldrb	r3, [r3, #0]
 8001162:	2b05      	cmp	r3, #5
 8001164:	f040 80c8 	bne.w	80012f8 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8001168:	78fa      	ldrb	r2, [r7, #3]
 800116a:	6879      	ldr	r1, [r7, #4]
 800116c:	4613      	mov	r3, r2
 800116e:	011b      	lsls	r3, r3, #4
 8001170:	1a9b      	subs	r3, r3, r2
 8001172:	009b      	lsls	r3, r3, #2
 8001174:	440b      	add	r3, r1
 8001176:	334d      	adds	r3, #77	@ 0x4d
 8001178:	2202      	movs	r2, #2
 800117a:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800117c:	78fa      	ldrb	r2, [r7, #3]
 800117e:	6879      	ldr	r1, [r7, #4]
 8001180:	4613      	mov	r3, r2
 8001182:	011b      	lsls	r3, r3, #4
 8001184:	1a9b      	subs	r3, r3, r2
 8001186:	009b      	lsls	r3, r3, #2
 8001188:	440b      	add	r3, r1
 800118a:	331b      	adds	r3, #27
 800118c:	781b      	ldrb	r3, [r3, #0]
 800118e:	2b01      	cmp	r3, #1
 8001190:	f040 81ce 	bne.w	8001530 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8001194:	78fa      	ldrb	r2, [r7, #3]
 8001196:	6879      	ldr	r1, [r7, #4]
 8001198:	4613      	mov	r3, r2
 800119a:	011b      	lsls	r3, r3, #4
 800119c:	1a9b      	subs	r3, r3, r2
 800119e:	009b      	lsls	r3, r3, #2
 80011a0:	440b      	add	r3, r1
 80011a2:	3326      	adds	r3, #38	@ 0x26
 80011a4:	781b      	ldrb	r3, [r3, #0]
 80011a6:	2b03      	cmp	r3, #3
 80011a8:	d16b      	bne.n	8001282 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 80011aa:	78fa      	ldrb	r2, [r7, #3]
 80011ac:	6879      	ldr	r1, [r7, #4]
 80011ae:	4613      	mov	r3, r2
 80011b0:	011b      	lsls	r3, r3, #4
 80011b2:	1a9b      	subs	r3, r3, r2
 80011b4:	009b      	lsls	r3, r3, #2
 80011b6:	440b      	add	r3, r1
 80011b8:	3348      	adds	r3, #72	@ 0x48
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	1c59      	adds	r1, r3, #1
 80011be:	6878      	ldr	r0, [r7, #4]
 80011c0:	4613      	mov	r3, r2
 80011c2:	011b      	lsls	r3, r3, #4
 80011c4:	1a9b      	subs	r3, r3, r2
 80011c6:	009b      	lsls	r3, r3, #2
 80011c8:	4403      	add	r3, r0
 80011ca:	3348      	adds	r3, #72	@ 0x48
 80011cc:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 80011ce:	78fa      	ldrb	r2, [r7, #3]
 80011d0:	6879      	ldr	r1, [r7, #4]
 80011d2:	4613      	mov	r3, r2
 80011d4:	011b      	lsls	r3, r3, #4
 80011d6:	1a9b      	subs	r3, r3, r2
 80011d8:	009b      	lsls	r3, r3, #2
 80011da:	440b      	add	r3, r1
 80011dc:	3348      	adds	r3, #72	@ 0x48
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	2b02      	cmp	r3, #2
 80011e2:	d943      	bls.n	800126c <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 80011e4:	78fa      	ldrb	r2, [r7, #3]
 80011e6:	6879      	ldr	r1, [r7, #4]
 80011e8:	4613      	mov	r3, r2
 80011ea:	011b      	lsls	r3, r3, #4
 80011ec:	1a9b      	subs	r3, r3, r2
 80011ee:	009b      	lsls	r3, r3, #2
 80011f0:	440b      	add	r3, r1
 80011f2:	3348      	adds	r3, #72	@ 0x48
 80011f4:	2200      	movs	r2, #0
 80011f6:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 80011f8:	78fa      	ldrb	r2, [r7, #3]
 80011fa:	6879      	ldr	r1, [r7, #4]
 80011fc:	4613      	mov	r3, r2
 80011fe:	011b      	lsls	r3, r3, #4
 8001200:	1a9b      	subs	r3, r3, r2
 8001202:	009b      	lsls	r3, r3, #2
 8001204:	440b      	add	r3, r1
 8001206:	331b      	adds	r3, #27
 8001208:	2200      	movs	r2, #0
 800120a:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 800120c:	78fa      	ldrb	r2, [r7, #3]
 800120e:	6879      	ldr	r1, [r7, #4]
 8001210:	4613      	mov	r3, r2
 8001212:	011b      	lsls	r3, r3, #4
 8001214:	1a9b      	subs	r3, r3, r2
 8001216:	009b      	lsls	r3, r3, #2
 8001218:	440b      	add	r3, r1
 800121a:	3344      	adds	r3, #68	@ 0x44
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	2b02      	cmp	r3, #2
 8001220:	d809      	bhi.n	8001236 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8001222:	78fa      	ldrb	r2, [r7, #3]
 8001224:	6879      	ldr	r1, [r7, #4]
 8001226:	4613      	mov	r3, r2
 8001228:	011b      	lsls	r3, r3, #4
 800122a:	1a9b      	subs	r3, r3, r2
 800122c:	009b      	lsls	r3, r3, #2
 800122e:	440b      	add	r3, r1
 8001230:	331c      	adds	r3, #28
 8001232:	2201      	movs	r2, #1
 8001234:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8001236:	78fb      	ldrb	r3, [r7, #3]
 8001238:	015a      	lsls	r2, r3, #5
 800123a:	693b      	ldr	r3, [r7, #16]
 800123c:	4413      	add	r3, r2
 800123e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	78fa      	ldrb	r2, [r7, #3]
 8001246:	0151      	lsls	r1, r2, #5
 8001248:	693a      	ldr	r2, [r7, #16]
 800124a:	440a      	add	r2, r1
 800124c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8001250:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001254:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8001256:	78fa      	ldrb	r2, [r7, #3]
 8001258:	6879      	ldr	r1, [r7, #4]
 800125a:	4613      	mov	r3, r2
 800125c:	011b      	lsls	r3, r3, #4
 800125e:	1a9b      	subs	r3, r3, r2
 8001260:	009b      	lsls	r3, r3, #2
 8001262:	440b      	add	r3, r1
 8001264:	334c      	adds	r3, #76	@ 0x4c
 8001266:	2204      	movs	r2, #4
 8001268:	701a      	strb	r2, [r3, #0]
 800126a:	e014      	b.n	8001296 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800126c:	78fa      	ldrb	r2, [r7, #3]
 800126e:	6879      	ldr	r1, [r7, #4]
 8001270:	4613      	mov	r3, r2
 8001272:	011b      	lsls	r3, r3, #4
 8001274:	1a9b      	subs	r3, r3, r2
 8001276:	009b      	lsls	r3, r3, #2
 8001278:	440b      	add	r3, r1
 800127a:	334c      	adds	r3, #76	@ 0x4c
 800127c:	2202      	movs	r2, #2
 800127e:	701a      	strb	r2, [r3, #0]
 8001280:	e009      	b.n	8001296 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8001282:	78fa      	ldrb	r2, [r7, #3]
 8001284:	6879      	ldr	r1, [r7, #4]
 8001286:	4613      	mov	r3, r2
 8001288:	011b      	lsls	r3, r3, #4
 800128a:	1a9b      	subs	r3, r3, r2
 800128c:	009b      	lsls	r3, r3, #2
 800128e:	440b      	add	r3, r1
 8001290:	334c      	adds	r3, #76	@ 0x4c
 8001292:	2202      	movs	r2, #2
 8001294:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001296:	78fa      	ldrb	r2, [r7, #3]
 8001298:	6879      	ldr	r1, [r7, #4]
 800129a:	4613      	mov	r3, r2
 800129c:	011b      	lsls	r3, r3, #4
 800129e:	1a9b      	subs	r3, r3, r2
 80012a0:	009b      	lsls	r3, r3, #2
 80012a2:	440b      	add	r3, r1
 80012a4:	3326      	adds	r3, #38	@ 0x26
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d00b      	beq.n	80012c4 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80012ac:	78fa      	ldrb	r2, [r7, #3]
 80012ae:	6879      	ldr	r1, [r7, #4]
 80012b0:	4613      	mov	r3, r2
 80012b2:	011b      	lsls	r3, r3, #4
 80012b4:	1a9b      	subs	r3, r3, r2
 80012b6:	009b      	lsls	r3, r3, #2
 80012b8:	440b      	add	r3, r1
 80012ba:	3326      	adds	r3, #38	@ 0x26
 80012bc:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80012be:	2b02      	cmp	r3, #2
 80012c0:	f040 8136 	bne.w	8001530 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80012c4:	78fb      	ldrb	r3, [r7, #3]
 80012c6:	015a      	lsls	r2, r3, #5
 80012c8:	693b      	ldr	r3, [r7, #16]
 80012ca:	4413      	add	r3, r2
 80012cc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80012da:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80012e2:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80012e4:	78fb      	ldrb	r3, [r7, #3]
 80012e6:	015a      	lsls	r2, r3, #5
 80012e8:	693b      	ldr	r3, [r7, #16]
 80012ea:	4413      	add	r3, r2
 80012ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80012f0:	461a      	mov	r2, r3
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	6013      	str	r3, [r2, #0]
 80012f6:	e11b      	b.n	8001530 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80012f8:	78fa      	ldrb	r2, [r7, #3]
 80012fa:	6879      	ldr	r1, [r7, #4]
 80012fc:	4613      	mov	r3, r2
 80012fe:	011b      	lsls	r3, r3, #4
 8001300:	1a9b      	subs	r3, r3, r2
 8001302:	009b      	lsls	r3, r3, #2
 8001304:	440b      	add	r3, r1
 8001306:	334d      	adds	r3, #77	@ 0x4d
 8001308:	781b      	ldrb	r3, [r3, #0]
 800130a:	2b03      	cmp	r3, #3
 800130c:	f040 8081 	bne.w	8001412 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8001310:	78fa      	ldrb	r2, [r7, #3]
 8001312:	6879      	ldr	r1, [r7, #4]
 8001314:	4613      	mov	r3, r2
 8001316:	011b      	lsls	r3, r3, #4
 8001318:	1a9b      	subs	r3, r3, r2
 800131a:	009b      	lsls	r3, r3, #2
 800131c:	440b      	add	r3, r1
 800131e:	334d      	adds	r3, #77	@ 0x4d
 8001320:	2202      	movs	r2, #2
 8001322:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8001324:	78fa      	ldrb	r2, [r7, #3]
 8001326:	6879      	ldr	r1, [r7, #4]
 8001328:	4613      	mov	r3, r2
 800132a:	011b      	lsls	r3, r3, #4
 800132c:	1a9b      	subs	r3, r3, r2
 800132e:	009b      	lsls	r3, r3, #2
 8001330:	440b      	add	r3, r1
 8001332:	331b      	adds	r3, #27
 8001334:	781b      	ldrb	r3, [r3, #0]
 8001336:	2b01      	cmp	r3, #1
 8001338:	f040 80fa 	bne.w	8001530 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800133c:	78fa      	ldrb	r2, [r7, #3]
 800133e:	6879      	ldr	r1, [r7, #4]
 8001340:	4613      	mov	r3, r2
 8001342:	011b      	lsls	r3, r3, #4
 8001344:	1a9b      	subs	r3, r3, r2
 8001346:	009b      	lsls	r3, r3, #2
 8001348:	440b      	add	r3, r1
 800134a:	334c      	adds	r3, #76	@ 0x4c
 800134c:	2202      	movs	r2, #2
 800134e:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8001350:	78fb      	ldrb	r3, [r7, #3]
 8001352:	015a      	lsls	r2, r3, #5
 8001354:	693b      	ldr	r3, [r7, #16]
 8001356:	4413      	add	r3, r2
 8001358:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	78fa      	ldrb	r2, [r7, #3]
 8001360:	0151      	lsls	r1, r2, #5
 8001362:	693a      	ldr	r2, [r7, #16]
 8001364:	440a      	add	r2, r1
 8001366:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800136a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800136e:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8001370:	78fb      	ldrb	r3, [r7, #3]
 8001372:	015a      	lsls	r2, r3, #5
 8001374:	693b      	ldr	r3, [r7, #16]
 8001376:	4413      	add	r3, r2
 8001378:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800137c:	68db      	ldr	r3, [r3, #12]
 800137e:	78fa      	ldrb	r2, [r7, #3]
 8001380:	0151      	lsls	r1, r2, #5
 8001382:	693a      	ldr	r2, [r7, #16]
 8001384:	440a      	add	r2, r1
 8001386:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800138a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800138e:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8001390:	78fb      	ldrb	r3, [r7, #3]
 8001392:	015a      	lsls	r2, r3, #5
 8001394:	693b      	ldr	r3, [r7, #16]
 8001396:	4413      	add	r3, r2
 8001398:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800139c:	68db      	ldr	r3, [r3, #12]
 800139e:	78fa      	ldrb	r2, [r7, #3]
 80013a0:	0151      	lsls	r1, r2, #5
 80013a2:	693a      	ldr	r2, [r7, #16]
 80013a4:	440a      	add	r2, r1
 80013a6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80013aa:	f023 0320 	bic.w	r3, r3, #32
 80013ae:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80013b0:	78fa      	ldrb	r2, [r7, #3]
 80013b2:	6879      	ldr	r1, [r7, #4]
 80013b4:	4613      	mov	r3, r2
 80013b6:	011b      	lsls	r3, r3, #4
 80013b8:	1a9b      	subs	r3, r3, r2
 80013ba:	009b      	lsls	r3, r3, #2
 80013bc:	440b      	add	r3, r1
 80013be:	3326      	adds	r3, #38	@ 0x26
 80013c0:	781b      	ldrb	r3, [r3, #0]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d00b      	beq.n	80013de <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80013c6:	78fa      	ldrb	r2, [r7, #3]
 80013c8:	6879      	ldr	r1, [r7, #4]
 80013ca:	4613      	mov	r3, r2
 80013cc:	011b      	lsls	r3, r3, #4
 80013ce:	1a9b      	subs	r3, r3, r2
 80013d0:	009b      	lsls	r3, r3, #2
 80013d2:	440b      	add	r3, r1
 80013d4:	3326      	adds	r3, #38	@ 0x26
 80013d6:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80013d8:	2b02      	cmp	r3, #2
 80013da:	f040 80a9 	bne.w	8001530 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80013de:	78fb      	ldrb	r3, [r7, #3]
 80013e0:	015a      	lsls	r2, r3, #5
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	4413      	add	r3, r2
 80013e6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80013f4:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80013fc:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80013fe:	78fb      	ldrb	r3, [r7, #3]
 8001400:	015a      	lsls	r2, r3, #5
 8001402:	693b      	ldr	r3, [r7, #16]
 8001404:	4413      	add	r3, r2
 8001406:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800140a:	461a      	mov	r2, r3
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	6013      	str	r3, [r2, #0]
 8001410:	e08e      	b.n	8001530 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8001412:	78fa      	ldrb	r2, [r7, #3]
 8001414:	6879      	ldr	r1, [r7, #4]
 8001416:	4613      	mov	r3, r2
 8001418:	011b      	lsls	r3, r3, #4
 800141a:	1a9b      	subs	r3, r3, r2
 800141c:	009b      	lsls	r3, r3, #2
 800141e:	440b      	add	r3, r1
 8001420:	334d      	adds	r3, #77	@ 0x4d
 8001422:	781b      	ldrb	r3, [r3, #0]
 8001424:	2b04      	cmp	r3, #4
 8001426:	d143      	bne.n	80014b0 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8001428:	78fa      	ldrb	r2, [r7, #3]
 800142a:	6879      	ldr	r1, [r7, #4]
 800142c:	4613      	mov	r3, r2
 800142e:	011b      	lsls	r3, r3, #4
 8001430:	1a9b      	subs	r3, r3, r2
 8001432:	009b      	lsls	r3, r3, #2
 8001434:	440b      	add	r3, r1
 8001436:	334d      	adds	r3, #77	@ 0x4d
 8001438:	2202      	movs	r2, #2
 800143a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800143c:	78fa      	ldrb	r2, [r7, #3]
 800143e:	6879      	ldr	r1, [r7, #4]
 8001440:	4613      	mov	r3, r2
 8001442:	011b      	lsls	r3, r3, #4
 8001444:	1a9b      	subs	r3, r3, r2
 8001446:	009b      	lsls	r3, r3, #2
 8001448:	440b      	add	r3, r1
 800144a:	334c      	adds	r3, #76	@ 0x4c
 800144c:	2202      	movs	r2, #2
 800144e:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001450:	78fa      	ldrb	r2, [r7, #3]
 8001452:	6879      	ldr	r1, [r7, #4]
 8001454:	4613      	mov	r3, r2
 8001456:	011b      	lsls	r3, r3, #4
 8001458:	1a9b      	subs	r3, r3, r2
 800145a:	009b      	lsls	r3, r3, #2
 800145c:	440b      	add	r3, r1
 800145e:	3326      	adds	r3, #38	@ 0x26
 8001460:	781b      	ldrb	r3, [r3, #0]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d00a      	beq.n	800147c <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8001466:	78fa      	ldrb	r2, [r7, #3]
 8001468:	6879      	ldr	r1, [r7, #4]
 800146a:	4613      	mov	r3, r2
 800146c:	011b      	lsls	r3, r3, #4
 800146e:	1a9b      	subs	r3, r3, r2
 8001470:	009b      	lsls	r3, r3, #2
 8001472:	440b      	add	r3, r1
 8001474:	3326      	adds	r3, #38	@ 0x26
 8001476:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001478:	2b02      	cmp	r3, #2
 800147a:	d159      	bne.n	8001530 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800147c:	78fb      	ldrb	r3, [r7, #3]
 800147e:	015a      	lsls	r2, r3, #5
 8001480:	693b      	ldr	r3, [r7, #16]
 8001482:	4413      	add	r3, r2
 8001484:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8001492:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800149a:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800149c:	78fb      	ldrb	r3, [r7, #3]
 800149e:	015a      	lsls	r2, r3, #5
 80014a0:	693b      	ldr	r3, [r7, #16]
 80014a2:	4413      	add	r3, r2
 80014a4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80014a8:	461a      	mov	r2, r3
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	6013      	str	r3, [r2, #0]
 80014ae:	e03f      	b.n	8001530 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 80014b0:	78fa      	ldrb	r2, [r7, #3]
 80014b2:	6879      	ldr	r1, [r7, #4]
 80014b4:	4613      	mov	r3, r2
 80014b6:	011b      	lsls	r3, r3, #4
 80014b8:	1a9b      	subs	r3, r3, r2
 80014ba:	009b      	lsls	r3, r3, #2
 80014bc:	440b      	add	r3, r1
 80014be:	334d      	adds	r3, #77	@ 0x4d
 80014c0:	781b      	ldrb	r3, [r3, #0]
 80014c2:	2b08      	cmp	r3, #8
 80014c4:	d126      	bne.n	8001514 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80014c6:	78fa      	ldrb	r2, [r7, #3]
 80014c8:	6879      	ldr	r1, [r7, #4]
 80014ca:	4613      	mov	r3, r2
 80014cc:	011b      	lsls	r3, r3, #4
 80014ce:	1a9b      	subs	r3, r3, r2
 80014d0:	009b      	lsls	r3, r3, #2
 80014d2:	440b      	add	r3, r1
 80014d4:	334d      	adds	r3, #77	@ 0x4d
 80014d6:	2202      	movs	r2, #2
 80014d8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80014da:	78fa      	ldrb	r2, [r7, #3]
 80014dc:	6879      	ldr	r1, [r7, #4]
 80014de:	4613      	mov	r3, r2
 80014e0:	011b      	lsls	r3, r3, #4
 80014e2:	1a9b      	subs	r3, r3, r2
 80014e4:	009b      	lsls	r3, r3, #2
 80014e6:	440b      	add	r3, r1
 80014e8:	3344      	adds	r3, #68	@ 0x44
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	1c59      	adds	r1, r3, #1
 80014ee:	6878      	ldr	r0, [r7, #4]
 80014f0:	4613      	mov	r3, r2
 80014f2:	011b      	lsls	r3, r3, #4
 80014f4:	1a9b      	subs	r3, r3, r2
 80014f6:	009b      	lsls	r3, r3, #2
 80014f8:	4403      	add	r3, r0
 80014fa:	3344      	adds	r3, #68	@ 0x44
 80014fc:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 80014fe:	78fa      	ldrb	r2, [r7, #3]
 8001500:	6879      	ldr	r1, [r7, #4]
 8001502:	4613      	mov	r3, r2
 8001504:	011b      	lsls	r3, r3, #4
 8001506:	1a9b      	subs	r3, r3, r2
 8001508:	009b      	lsls	r3, r3, #2
 800150a:	440b      	add	r3, r1
 800150c:	334c      	adds	r3, #76	@ 0x4c
 800150e:	2204      	movs	r2, #4
 8001510:	701a      	strb	r2, [r3, #0]
 8001512:	e00d      	b.n	8001530 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8001514:	78fa      	ldrb	r2, [r7, #3]
 8001516:	6879      	ldr	r1, [r7, #4]
 8001518:	4613      	mov	r3, r2
 800151a:	011b      	lsls	r3, r3, #4
 800151c:	1a9b      	subs	r3, r3, r2
 800151e:	009b      	lsls	r3, r3, #2
 8001520:	440b      	add	r3, r1
 8001522:	334d      	adds	r3, #77	@ 0x4d
 8001524:	781b      	ldrb	r3, [r3, #0]
 8001526:	2b02      	cmp	r3, #2
 8001528:	f000 8100 	beq.w	800172c <HCD_HC_IN_IRQHandler+0xcca>
 800152c:	e000      	b.n	8001530 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800152e:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8001530:	78fa      	ldrb	r2, [r7, #3]
 8001532:	6879      	ldr	r1, [r7, #4]
 8001534:	4613      	mov	r3, r2
 8001536:	011b      	lsls	r3, r3, #4
 8001538:	1a9b      	subs	r3, r3, r2
 800153a:	009b      	lsls	r3, r3, #2
 800153c:	440b      	add	r3, r1
 800153e:	334c      	adds	r3, #76	@ 0x4c
 8001540:	781a      	ldrb	r2, [r3, #0]
 8001542:	78fb      	ldrb	r3, [r7, #3]
 8001544:	4619      	mov	r1, r3
 8001546:	6878      	ldr	r0, [r7, #4]
 8001548:	f001 faea 	bl	8002b20 <HAL_HCD_HC_NotifyURBChange_Callback>
 800154c:	e0ef      	b.n	800172e <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	78fa      	ldrb	r2, [r7, #3]
 8001554:	4611      	mov	r1, r2
 8001556:	4618      	mov	r0, r3
 8001558:	f000 ffea 	bl	8002530 <USB_ReadChInterrupts>
 800155c:	4603      	mov	r3, r0
 800155e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001562:	2b40      	cmp	r3, #64	@ 0x40
 8001564:	d12f      	bne.n	80015c6 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8001566:	78fb      	ldrb	r3, [r7, #3]
 8001568:	015a      	lsls	r2, r3, #5
 800156a:	693b      	ldr	r3, [r7, #16]
 800156c:	4413      	add	r3, r2
 800156e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001572:	461a      	mov	r2, r3
 8001574:	2340      	movs	r3, #64	@ 0x40
 8001576:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8001578:	78fa      	ldrb	r2, [r7, #3]
 800157a:	6879      	ldr	r1, [r7, #4]
 800157c:	4613      	mov	r3, r2
 800157e:	011b      	lsls	r3, r3, #4
 8001580:	1a9b      	subs	r3, r3, r2
 8001582:	009b      	lsls	r3, r3, #2
 8001584:	440b      	add	r3, r1
 8001586:	334d      	adds	r3, #77	@ 0x4d
 8001588:	2205      	movs	r2, #5
 800158a:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 800158c:	78fa      	ldrb	r2, [r7, #3]
 800158e:	6879      	ldr	r1, [r7, #4]
 8001590:	4613      	mov	r3, r2
 8001592:	011b      	lsls	r3, r3, #4
 8001594:	1a9b      	subs	r3, r3, r2
 8001596:	009b      	lsls	r3, r3, #2
 8001598:	440b      	add	r3, r1
 800159a:	331a      	adds	r3, #26
 800159c:	781b      	ldrb	r3, [r3, #0]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d109      	bne.n	80015b6 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80015a2:	78fa      	ldrb	r2, [r7, #3]
 80015a4:	6879      	ldr	r1, [r7, #4]
 80015a6:	4613      	mov	r3, r2
 80015a8:	011b      	lsls	r3, r3, #4
 80015aa:	1a9b      	subs	r3, r3, r2
 80015ac:	009b      	lsls	r3, r3, #2
 80015ae:	440b      	add	r3, r1
 80015b0:	3344      	adds	r3, #68	@ 0x44
 80015b2:	2200      	movs	r2, #0
 80015b4:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	78fa      	ldrb	r2, [r7, #3]
 80015bc:	4611      	mov	r1, r2
 80015be:	4618      	mov	r0, r3
 80015c0:	f001 f833 	bl	800262a <USB_HC_Halt>
 80015c4:	e0b3      	b.n	800172e <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	78fa      	ldrb	r2, [r7, #3]
 80015cc:	4611      	mov	r1, r2
 80015ce:	4618      	mov	r0, r3
 80015d0:	f000 ffae 	bl	8002530 <USB_ReadChInterrupts>
 80015d4:	4603      	mov	r3, r0
 80015d6:	f003 0310 	and.w	r3, r3, #16
 80015da:	2b10      	cmp	r3, #16
 80015dc:	f040 80a7 	bne.w	800172e <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80015e0:	78fa      	ldrb	r2, [r7, #3]
 80015e2:	6879      	ldr	r1, [r7, #4]
 80015e4:	4613      	mov	r3, r2
 80015e6:	011b      	lsls	r3, r3, #4
 80015e8:	1a9b      	subs	r3, r3, r2
 80015ea:	009b      	lsls	r3, r3, #2
 80015ec:	440b      	add	r3, r1
 80015ee:	3326      	adds	r3, #38	@ 0x26
 80015f0:	781b      	ldrb	r3, [r3, #0]
 80015f2:	2b03      	cmp	r3, #3
 80015f4:	d11b      	bne.n	800162e <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80015f6:	78fa      	ldrb	r2, [r7, #3]
 80015f8:	6879      	ldr	r1, [r7, #4]
 80015fa:	4613      	mov	r3, r2
 80015fc:	011b      	lsls	r3, r3, #4
 80015fe:	1a9b      	subs	r3, r3, r2
 8001600:	009b      	lsls	r3, r3, #2
 8001602:	440b      	add	r3, r1
 8001604:	3344      	adds	r3, #68	@ 0x44
 8001606:	2200      	movs	r2, #0
 8001608:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 800160a:	78fa      	ldrb	r2, [r7, #3]
 800160c:	6879      	ldr	r1, [r7, #4]
 800160e:	4613      	mov	r3, r2
 8001610:	011b      	lsls	r3, r3, #4
 8001612:	1a9b      	subs	r3, r3, r2
 8001614:	009b      	lsls	r3, r3, #2
 8001616:	440b      	add	r3, r1
 8001618:	334d      	adds	r3, #77	@ 0x4d
 800161a:	2204      	movs	r2, #4
 800161c:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	78fa      	ldrb	r2, [r7, #3]
 8001624:	4611      	mov	r1, r2
 8001626:	4618      	mov	r0, r3
 8001628:	f000 ffff 	bl	800262a <USB_HC_Halt>
 800162c:	e03f      	b.n	80016ae <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800162e:	78fa      	ldrb	r2, [r7, #3]
 8001630:	6879      	ldr	r1, [r7, #4]
 8001632:	4613      	mov	r3, r2
 8001634:	011b      	lsls	r3, r3, #4
 8001636:	1a9b      	subs	r3, r3, r2
 8001638:	009b      	lsls	r3, r3, #2
 800163a:	440b      	add	r3, r1
 800163c:	3326      	adds	r3, #38	@ 0x26
 800163e:	781b      	ldrb	r3, [r3, #0]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d00a      	beq.n	800165a <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8001644:	78fa      	ldrb	r2, [r7, #3]
 8001646:	6879      	ldr	r1, [r7, #4]
 8001648:	4613      	mov	r3, r2
 800164a:	011b      	lsls	r3, r3, #4
 800164c:	1a9b      	subs	r3, r3, r2
 800164e:	009b      	lsls	r3, r3, #2
 8001650:	440b      	add	r3, r1
 8001652:	3326      	adds	r3, #38	@ 0x26
 8001654:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001656:	2b02      	cmp	r3, #2
 8001658:	d129      	bne.n	80016ae <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800165a:	78fa      	ldrb	r2, [r7, #3]
 800165c:	6879      	ldr	r1, [r7, #4]
 800165e:	4613      	mov	r3, r2
 8001660:	011b      	lsls	r3, r3, #4
 8001662:	1a9b      	subs	r3, r3, r2
 8001664:	009b      	lsls	r3, r3, #2
 8001666:	440b      	add	r3, r1
 8001668:	3344      	adds	r3, #68	@ 0x44
 800166a:	2200      	movs	r2, #0
 800166c:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	799b      	ldrb	r3, [r3, #6]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d00a      	beq.n	800168c <HCD_HC_IN_IRQHandler+0xc2a>
 8001676:	78fa      	ldrb	r2, [r7, #3]
 8001678:	6879      	ldr	r1, [r7, #4]
 800167a:	4613      	mov	r3, r2
 800167c:	011b      	lsls	r3, r3, #4
 800167e:	1a9b      	subs	r3, r3, r2
 8001680:	009b      	lsls	r3, r3, #2
 8001682:	440b      	add	r3, r1
 8001684:	331b      	adds	r3, #27
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	2b01      	cmp	r3, #1
 800168a:	d110      	bne.n	80016ae <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 800168c:	78fa      	ldrb	r2, [r7, #3]
 800168e:	6879      	ldr	r1, [r7, #4]
 8001690:	4613      	mov	r3, r2
 8001692:	011b      	lsls	r3, r3, #4
 8001694:	1a9b      	subs	r3, r3, r2
 8001696:	009b      	lsls	r3, r3, #2
 8001698:	440b      	add	r3, r1
 800169a:	334d      	adds	r3, #77	@ 0x4d
 800169c:	2204      	movs	r2, #4
 800169e:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	78fa      	ldrb	r2, [r7, #3]
 80016a6:	4611      	mov	r1, r2
 80016a8:	4618      	mov	r0, r3
 80016aa:	f000 ffbe 	bl	800262a <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 80016ae:	78fa      	ldrb	r2, [r7, #3]
 80016b0:	6879      	ldr	r1, [r7, #4]
 80016b2:	4613      	mov	r3, r2
 80016b4:	011b      	lsls	r3, r3, #4
 80016b6:	1a9b      	subs	r3, r3, r2
 80016b8:	009b      	lsls	r3, r3, #2
 80016ba:	440b      	add	r3, r1
 80016bc:	331b      	adds	r3, #27
 80016be:	781b      	ldrb	r3, [r3, #0]
 80016c0:	2b01      	cmp	r3, #1
 80016c2:	d129      	bne.n	8001718 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80016c4:	78fa      	ldrb	r2, [r7, #3]
 80016c6:	6879      	ldr	r1, [r7, #4]
 80016c8:	4613      	mov	r3, r2
 80016ca:	011b      	lsls	r3, r3, #4
 80016cc:	1a9b      	subs	r3, r3, r2
 80016ce:	009b      	lsls	r3, r3, #2
 80016d0:	440b      	add	r3, r1
 80016d2:	331b      	adds	r3, #27
 80016d4:	2200      	movs	r2, #0
 80016d6:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80016d8:	78fb      	ldrb	r3, [r7, #3]
 80016da:	015a      	lsls	r2, r3, #5
 80016dc:	693b      	ldr	r3, [r7, #16]
 80016de:	4413      	add	r3, r2
 80016e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	78fa      	ldrb	r2, [r7, #3]
 80016e8:	0151      	lsls	r1, r2, #5
 80016ea:	693a      	ldr	r2, [r7, #16]
 80016ec:	440a      	add	r2, r1
 80016ee:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80016f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80016f6:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 80016f8:	78fb      	ldrb	r3, [r7, #3]
 80016fa:	015a      	lsls	r2, r3, #5
 80016fc:	693b      	ldr	r3, [r7, #16]
 80016fe:	4413      	add	r3, r2
 8001700:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001704:	68db      	ldr	r3, [r3, #12]
 8001706:	78fa      	ldrb	r2, [r7, #3]
 8001708:	0151      	lsls	r1, r2, #5
 800170a:	693a      	ldr	r2, [r7, #16]
 800170c:	440a      	add	r2, r1
 800170e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8001712:	f043 0320 	orr.w	r3, r3, #32
 8001716:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8001718:	78fb      	ldrb	r3, [r7, #3]
 800171a:	015a      	lsls	r2, r3, #5
 800171c:	693b      	ldr	r3, [r7, #16]
 800171e:	4413      	add	r3, r2
 8001720:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001724:	461a      	mov	r2, r3
 8001726:	2310      	movs	r3, #16
 8001728:	6093      	str	r3, [r2, #8]
 800172a:	e000      	b.n	800172e <HCD_HC_IN_IRQHandler+0xccc>
        return;
 800172c:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 800172e:	3718      	adds	r7, #24
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}

08001734 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b086      	sub	sp, #24
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
 800173c:	460b      	mov	r3, r1
 800173e:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001746:	697b      	ldr	r3, [r7, #20]
 8001748:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	78fa      	ldrb	r2, [r7, #3]
 8001750:	4611      	mov	r1, r2
 8001752:	4618      	mov	r0, r3
 8001754:	f000 feec 	bl	8002530 <USB_ReadChInterrupts>
 8001758:	4603      	mov	r3, r0
 800175a:	f003 0304 	and.w	r3, r3, #4
 800175e:	2b04      	cmp	r3, #4
 8001760:	d11b      	bne.n	800179a <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8001762:	78fb      	ldrb	r3, [r7, #3]
 8001764:	015a      	lsls	r2, r3, #5
 8001766:	693b      	ldr	r3, [r7, #16]
 8001768:	4413      	add	r3, r2
 800176a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800176e:	461a      	mov	r2, r3
 8001770:	2304      	movs	r3, #4
 8001772:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8001774:	78fa      	ldrb	r2, [r7, #3]
 8001776:	6879      	ldr	r1, [r7, #4]
 8001778:	4613      	mov	r3, r2
 800177a:	011b      	lsls	r3, r3, #4
 800177c:	1a9b      	subs	r3, r3, r2
 800177e:	009b      	lsls	r3, r3, #2
 8001780:	440b      	add	r3, r1
 8001782:	334d      	adds	r3, #77	@ 0x4d
 8001784:	2207      	movs	r2, #7
 8001786:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	78fa      	ldrb	r2, [r7, #3]
 800178e:	4611      	mov	r1, r2
 8001790:	4618      	mov	r0, r3
 8001792:	f000 ff4a 	bl	800262a <USB_HC_Halt>
 8001796:	f000 bc89 	b.w	80020ac <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	78fa      	ldrb	r2, [r7, #3]
 80017a0:	4611      	mov	r1, r2
 80017a2:	4618      	mov	r0, r3
 80017a4:	f000 fec4 	bl	8002530 <USB_ReadChInterrupts>
 80017a8:	4603      	mov	r3, r0
 80017aa:	f003 0320 	and.w	r3, r3, #32
 80017ae:	2b20      	cmp	r3, #32
 80017b0:	f040 8082 	bne.w	80018b8 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80017b4:	78fb      	ldrb	r3, [r7, #3]
 80017b6:	015a      	lsls	r2, r3, #5
 80017b8:	693b      	ldr	r3, [r7, #16]
 80017ba:	4413      	add	r3, r2
 80017bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80017c0:	461a      	mov	r2, r3
 80017c2:	2320      	movs	r3, #32
 80017c4:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 80017c6:	78fa      	ldrb	r2, [r7, #3]
 80017c8:	6879      	ldr	r1, [r7, #4]
 80017ca:	4613      	mov	r3, r2
 80017cc:	011b      	lsls	r3, r3, #4
 80017ce:	1a9b      	subs	r3, r3, r2
 80017d0:	009b      	lsls	r3, r3, #2
 80017d2:	440b      	add	r3, r1
 80017d4:	3319      	adds	r3, #25
 80017d6:	781b      	ldrb	r3, [r3, #0]
 80017d8:	2b01      	cmp	r3, #1
 80017da:	d124      	bne.n	8001826 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 80017dc:	78fa      	ldrb	r2, [r7, #3]
 80017de:	6879      	ldr	r1, [r7, #4]
 80017e0:	4613      	mov	r3, r2
 80017e2:	011b      	lsls	r3, r3, #4
 80017e4:	1a9b      	subs	r3, r3, r2
 80017e6:	009b      	lsls	r3, r3, #2
 80017e8:	440b      	add	r3, r1
 80017ea:	3319      	adds	r3, #25
 80017ec:	2200      	movs	r2, #0
 80017ee:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80017f0:	78fa      	ldrb	r2, [r7, #3]
 80017f2:	6879      	ldr	r1, [r7, #4]
 80017f4:	4613      	mov	r3, r2
 80017f6:	011b      	lsls	r3, r3, #4
 80017f8:	1a9b      	subs	r3, r3, r2
 80017fa:	009b      	lsls	r3, r3, #2
 80017fc:	440b      	add	r3, r1
 80017fe:	334c      	adds	r3, #76	@ 0x4c
 8001800:	2202      	movs	r2, #2
 8001802:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8001804:	78fa      	ldrb	r2, [r7, #3]
 8001806:	6879      	ldr	r1, [r7, #4]
 8001808:	4613      	mov	r3, r2
 800180a:	011b      	lsls	r3, r3, #4
 800180c:	1a9b      	subs	r3, r3, r2
 800180e:	009b      	lsls	r3, r3, #2
 8001810:	440b      	add	r3, r1
 8001812:	334d      	adds	r3, #77	@ 0x4d
 8001814:	2203      	movs	r2, #3
 8001816:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	78fa      	ldrb	r2, [r7, #3]
 800181e:	4611      	mov	r1, r2
 8001820:	4618      	mov	r0, r3
 8001822:	f000 ff02 	bl	800262a <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8001826:	78fa      	ldrb	r2, [r7, #3]
 8001828:	6879      	ldr	r1, [r7, #4]
 800182a:	4613      	mov	r3, r2
 800182c:	011b      	lsls	r3, r3, #4
 800182e:	1a9b      	subs	r3, r3, r2
 8001830:	009b      	lsls	r3, r3, #2
 8001832:	440b      	add	r3, r1
 8001834:	331a      	adds	r3, #26
 8001836:	781b      	ldrb	r3, [r3, #0]
 8001838:	2b01      	cmp	r3, #1
 800183a:	f040 8437 	bne.w	80020ac <HCD_HC_OUT_IRQHandler+0x978>
 800183e:	78fa      	ldrb	r2, [r7, #3]
 8001840:	6879      	ldr	r1, [r7, #4]
 8001842:	4613      	mov	r3, r2
 8001844:	011b      	lsls	r3, r3, #4
 8001846:	1a9b      	subs	r3, r3, r2
 8001848:	009b      	lsls	r3, r3, #2
 800184a:	440b      	add	r3, r1
 800184c:	331b      	adds	r3, #27
 800184e:	781b      	ldrb	r3, [r3, #0]
 8001850:	2b00      	cmp	r3, #0
 8001852:	f040 842b 	bne.w	80020ac <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8001856:	78fa      	ldrb	r2, [r7, #3]
 8001858:	6879      	ldr	r1, [r7, #4]
 800185a:	4613      	mov	r3, r2
 800185c:	011b      	lsls	r3, r3, #4
 800185e:	1a9b      	subs	r3, r3, r2
 8001860:	009b      	lsls	r3, r3, #2
 8001862:	440b      	add	r3, r1
 8001864:	3326      	adds	r3, #38	@ 0x26
 8001866:	781b      	ldrb	r3, [r3, #0]
 8001868:	2b01      	cmp	r3, #1
 800186a:	d009      	beq.n	8001880 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 800186c:	78fa      	ldrb	r2, [r7, #3]
 800186e:	6879      	ldr	r1, [r7, #4]
 8001870:	4613      	mov	r3, r2
 8001872:	011b      	lsls	r3, r3, #4
 8001874:	1a9b      	subs	r3, r3, r2
 8001876:	009b      	lsls	r3, r3, #2
 8001878:	440b      	add	r3, r1
 800187a:	331b      	adds	r3, #27
 800187c:	2201      	movs	r2, #1
 800187e:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8001880:	78fa      	ldrb	r2, [r7, #3]
 8001882:	6879      	ldr	r1, [r7, #4]
 8001884:	4613      	mov	r3, r2
 8001886:	011b      	lsls	r3, r3, #4
 8001888:	1a9b      	subs	r3, r3, r2
 800188a:	009b      	lsls	r3, r3, #2
 800188c:	440b      	add	r3, r1
 800188e:	334d      	adds	r3, #77	@ 0x4d
 8001890:	2203      	movs	r2, #3
 8001892:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	78fa      	ldrb	r2, [r7, #3]
 800189a:	4611      	mov	r1, r2
 800189c:	4618      	mov	r0, r3
 800189e:	f000 fec4 	bl	800262a <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 80018a2:	78fa      	ldrb	r2, [r7, #3]
 80018a4:	6879      	ldr	r1, [r7, #4]
 80018a6:	4613      	mov	r3, r2
 80018a8:	011b      	lsls	r3, r3, #4
 80018aa:	1a9b      	subs	r3, r3, r2
 80018ac:	009b      	lsls	r3, r3, #2
 80018ae:	440b      	add	r3, r1
 80018b0:	3344      	adds	r3, #68	@ 0x44
 80018b2:	2200      	movs	r2, #0
 80018b4:	601a      	str	r2, [r3, #0]
 80018b6:	e3f9      	b.n	80020ac <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	78fa      	ldrb	r2, [r7, #3]
 80018be:	4611      	mov	r1, r2
 80018c0:	4618      	mov	r0, r3
 80018c2:	f000 fe35 	bl	8002530 <USB_ReadChInterrupts>
 80018c6:	4603      	mov	r3, r0
 80018c8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80018cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80018d0:	d111      	bne.n	80018f6 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80018d2:	78fb      	ldrb	r3, [r7, #3]
 80018d4:	015a      	lsls	r2, r3, #5
 80018d6:	693b      	ldr	r3, [r7, #16]
 80018d8:	4413      	add	r3, r2
 80018da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80018de:	461a      	mov	r2, r3
 80018e0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80018e4:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	78fa      	ldrb	r2, [r7, #3]
 80018ec:	4611      	mov	r1, r2
 80018ee:	4618      	mov	r0, r3
 80018f0:	f000 fe9b 	bl	800262a <USB_HC_Halt>
 80018f4:	e3da      	b.n	80020ac <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	78fa      	ldrb	r2, [r7, #3]
 80018fc:	4611      	mov	r1, r2
 80018fe:	4618      	mov	r0, r3
 8001900:	f000 fe16 	bl	8002530 <USB_ReadChInterrupts>
 8001904:	4603      	mov	r3, r0
 8001906:	f003 0301 	and.w	r3, r3, #1
 800190a:	2b01      	cmp	r3, #1
 800190c:	d168      	bne.n	80019e0 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 800190e:	78fa      	ldrb	r2, [r7, #3]
 8001910:	6879      	ldr	r1, [r7, #4]
 8001912:	4613      	mov	r3, r2
 8001914:	011b      	lsls	r3, r3, #4
 8001916:	1a9b      	subs	r3, r3, r2
 8001918:	009b      	lsls	r3, r3, #2
 800191a:	440b      	add	r3, r1
 800191c:	3344      	adds	r3, #68	@ 0x44
 800191e:	2200      	movs	r2, #0
 8001920:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	78fa      	ldrb	r2, [r7, #3]
 8001928:	4611      	mov	r1, r2
 800192a:	4618      	mov	r0, r3
 800192c:	f000 fe00 	bl	8002530 <USB_ReadChInterrupts>
 8001930:	4603      	mov	r3, r0
 8001932:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001936:	2b40      	cmp	r3, #64	@ 0x40
 8001938:	d112      	bne.n	8001960 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 800193a:	78fa      	ldrb	r2, [r7, #3]
 800193c:	6879      	ldr	r1, [r7, #4]
 800193e:	4613      	mov	r3, r2
 8001940:	011b      	lsls	r3, r3, #4
 8001942:	1a9b      	subs	r3, r3, r2
 8001944:	009b      	lsls	r3, r3, #2
 8001946:	440b      	add	r3, r1
 8001948:	3319      	adds	r3, #25
 800194a:	2201      	movs	r2, #1
 800194c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800194e:	78fb      	ldrb	r3, [r7, #3]
 8001950:	015a      	lsls	r2, r3, #5
 8001952:	693b      	ldr	r3, [r7, #16]
 8001954:	4413      	add	r3, r2
 8001956:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800195a:	461a      	mov	r2, r3
 800195c:	2340      	movs	r3, #64	@ 0x40
 800195e:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8001960:	78fa      	ldrb	r2, [r7, #3]
 8001962:	6879      	ldr	r1, [r7, #4]
 8001964:	4613      	mov	r3, r2
 8001966:	011b      	lsls	r3, r3, #4
 8001968:	1a9b      	subs	r3, r3, r2
 800196a:	009b      	lsls	r3, r3, #2
 800196c:	440b      	add	r3, r1
 800196e:	331b      	adds	r3, #27
 8001970:	781b      	ldrb	r3, [r3, #0]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d019      	beq.n	80019aa <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8001976:	78fa      	ldrb	r2, [r7, #3]
 8001978:	6879      	ldr	r1, [r7, #4]
 800197a:	4613      	mov	r3, r2
 800197c:	011b      	lsls	r3, r3, #4
 800197e:	1a9b      	subs	r3, r3, r2
 8001980:	009b      	lsls	r3, r3, #2
 8001982:	440b      	add	r3, r1
 8001984:	331b      	adds	r3, #27
 8001986:	2200      	movs	r2, #0
 8001988:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800198a:	78fb      	ldrb	r3, [r7, #3]
 800198c:	015a      	lsls	r2, r3, #5
 800198e:	693b      	ldr	r3, [r7, #16]
 8001990:	4413      	add	r3, r2
 8001992:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	78fa      	ldrb	r2, [r7, #3]
 800199a:	0151      	lsls	r1, r2, #5
 800199c:	693a      	ldr	r2, [r7, #16]
 800199e:	440a      	add	r2, r1
 80019a0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80019a4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80019a8:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80019aa:	78fb      	ldrb	r3, [r7, #3]
 80019ac:	015a      	lsls	r2, r3, #5
 80019ae:	693b      	ldr	r3, [r7, #16]
 80019b0:	4413      	add	r3, r2
 80019b2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80019b6:	461a      	mov	r2, r3
 80019b8:	2301      	movs	r3, #1
 80019ba:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 80019bc:	78fa      	ldrb	r2, [r7, #3]
 80019be:	6879      	ldr	r1, [r7, #4]
 80019c0:	4613      	mov	r3, r2
 80019c2:	011b      	lsls	r3, r3, #4
 80019c4:	1a9b      	subs	r3, r3, r2
 80019c6:	009b      	lsls	r3, r3, #2
 80019c8:	440b      	add	r3, r1
 80019ca:	334d      	adds	r3, #77	@ 0x4d
 80019cc:	2201      	movs	r2, #1
 80019ce:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	78fa      	ldrb	r2, [r7, #3]
 80019d6:	4611      	mov	r1, r2
 80019d8:	4618      	mov	r0, r3
 80019da:	f000 fe26 	bl	800262a <USB_HC_Halt>
 80019de:	e365      	b.n	80020ac <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	78fa      	ldrb	r2, [r7, #3]
 80019e6:	4611      	mov	r1, r2
 80019e8:	4618      	mov	r0, r3
 80019ea:	f000 fda1 	bl	8002530 <USB_ReadChInterrupts>
 80019ee:	4603      	mov	r3, r0
 80019f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80019f4:	2b40      	cmp	r3, #64	@ 0x40
 80019f6:	d139      	bne.n	8001a6c <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 80019f8:	78fa      	ldrb	r2, [r7, #3]
 80019fa:	6879      	ldr	r1, [r7, #4]
 80019fc:	4613      	mov	r3, r2
 80019fe:	011b      	lsls	r3, r3, #4
 8001a00:	1a9b      	subs	r3, r3, r2
 8001a02:	009b      	lsls	r3, r3, #2
 8001a04:	440b      	add	r3, r1
 8001a06:	334d      	adds	r3, #77	@ 0x4d
 8001a08:	2205      	movs	r2, #5
 8001a0a:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8001a0c:	78fa      	ldrb	r2, [r7, #3]
 8001a0e:	6879      	ldr	r1, [r7, #4]
 8001a10:	4613      	mov	r3, r2
 8001a12:	011b      	lsls	r3, r3, #4
 8001a14:	1a9b      	subs	r3, r3, r2
 8001a16:	009b      	lsls	r3, r3, #2
 8001a18:	440b      	add	r3, r1
 8001a1a:	331a      	adds	r3, #26
 8001a1c:	781b      	ldrb	r3, [r3, #0]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d109      	bne.n	8001a36 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8001a22:	78fa      	ldrb	r2, [r7, #3]
 8001a24:	6879      	ldr	r1, [r7, #4]
 8001a26:	4613      	mov	r3, r2
 8001a28:	011b      	lsls	r3, r3, #4
 8001a2a:	1a9b      	subs	r3, r3, r2
 8001a2c:	009b      	lsls	r3, r3, #2
 8001a2e:	440b      	add	r3, r1
 8001a30:	3319      	adds	r3, #25
 8001a32:	2201      	movs	r2, #1
 8001a34:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8001a36:	78fa      	ldrb	r2, [r7, #3]
 8001a38:	6879      	ldr	r1, [r7, #4]
 8001a3a:	4613      	mov	r3, r2
 8001a3c:	011b      	lsls	r3, r3, #4
 8001a3e:	1a9b      	subs	r3, r3, r2
 8001a40:	009b      	lsls	r3, r3, #2
 8001a42:	440b      	add	r3, r1
 8001a44:	3344      	adds	r3, #68	@ 0x44
 8001a46:	2200      	movs	r2, #0
 8001a48:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	78fa      	ldrb	r2, [r7, #3]
 8001a50:	4611      	mov	r1, r2
 8001a52:	4618      	mov	r0, r3
 8001a54:	f000 fde9 	bl	800262a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8001a58:	78fb      	ldrb	r3, [r7, #3]
 8001a5a:	015a      	lsls	r2, r3, #5
 8001a5c:	693b      	ldr	r3, [r7, #16]
 8001a5e:	4413      	add	r3, r2
 8001a60:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001a64:	461a      	mov	r2, r3
 8001a66:	2340      	movs	r3, #64	@ 0x40
 8001a68:	6093      	str	r3, [r2, #8]
 8001a6a:	e31f      	b.n	80020ac <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	78fa      	ldrb	r2, [r7, #3]
 8001a72:	4611      	mov	r1, r2
 8001a74:	4618      	mov	r0, r3
 8001a76:	f000 fd5b 	bl	8002530 <USB_ReadChInterrupts>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	f003 0308 	and.w	r3, r3, #8
 8001a80:	2b08      	cmp	r3, #8
 8001a82:	d11a      	bne.n	8001aba <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8001a84:	78fb      	ldrb	r3, [r7, #3]
 8001a86:	015a      	lsls	r2, r3, #5
 8001a88:	693b      	ldr	r3, [r7, #16]
 8001a8a:	4413      	add	r3, r2
 8001a8c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001a90:	461a      	mov	r2, r3
 8001a92:	2308      	movs	r3, #8
 8001a94:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8001a96:	78fa      	ldrb	r2, [r7, #3]
 8001a98:	6879      	ldr	r1, [r7, #4]
 8001a9a:	4613      	mov	r3, r2
 8001a9c:	011b      	lsls	r3, r3, #4
 8001a9e:	1a9b      	subs	r3, r3, r2
 8001aa0:	009b      	lsls	r3, r3, #2
 8001aa2:	440b      	add	r3, r1
 8001aa4:	334d      	adds	r3, #77	@ 0x4d
 8001aa6:	2206      	movs	r2, #6
 8001aa8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	78fa      	ldrb	r2, [r7, #3]
 8001ab0:	4611      	mov	r1, r2
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f000 fdb9 	bl	800262a <USB_HC_Halt>
 8001ab8:	e2f8      	b.n	80020ac <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	78fa      	ldrb	r2, [r7, #3]
 8001ac0:	4611      	mov	r1, r2
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f000 fd34 	bl	8002530 <USB_ReadChInterrupts>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	f003 0310 	and.w	r3, r3, #16
 8001ace:	2b10      	cmp	r3, #16
 8001ad0:	d144      	bne.n	8001b5c <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8001ad2:	78fa      	ldrb	r2, [r7, #3]
 8001ad4:	6879      	ldr	r1, [r7, #4]
 8001ad6:	4613      	mov	r3, r2
 8001ad8:	011b      	lsls	r3, r3, #4
 8001ada:	1a9b      	subs	r3, r3, r2
 8001adc:	009b      	lsls	r3, r3, #2
 8001ade:	440b      	add	r3, r1
 8001ae0:	3344      	adds	r3, #68	@ 0x44
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8001ae6:	78fa      	ldrb	r2, [r7, #3]
 8001ae8:	6879      	ldr	r1, [r7, #4]
 8001aea:	4613      	mov	r3, r2
 8001aec:	011b      	lsls	r3, r3, #4
 8001aee:	1a9b      	subs	r3, r3, r2
 8001af0:	009b      	lsls	r3, r3, #2
 8001af2:	440b      	add	r3, r1
 8001af4:	334d      	adds	r3, #77	@ 0x4d
 8001af6:	2204      	movs	r2, #4
 8001af8:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8001afa:	78fa      	ldrb	r2, [r7, #3]
 8001afc:	6879      	ldr	r1, [r7, #4]
 8001afe:	4613      	mov	r3, r2
 8001b00:	011b      	lsls	r3, r3, #4
 8001b02:	1a9b      	subs	r3, r3, r2
 8001b04:	009b      	lsls	r3, r3, #2
 8001b06:	440b      	add	r3, r1
 8001b08:	3319      	adds	r3, #25
 8001b0a:	781b      	ldrb	r3, [r3, #0]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d114      	bne.n	8001b3a <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8001b10:	78fa      	ldrb	r2, [r7, #3]
 8001b12:	6879      	ldr	r1, [r7, #4]
 8001b14:	4613      	mov	r3, r2
 8001b16:	011b      	lsls	r3, r3, #4
 8001b18:	1a9b      	subs	r3, r3, r2
 8001b1a:	009b      	lsls	r3, r3, #2
 8001b1c:	440b      	add	r3, r1
 8001b1e:	3318      	adds	r3, #24
 8001b20:	781b      	ldrb	r3, [r3, #0]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d109      	bne.n	8001b3a <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8001b26:	78fa      	ldrb	r2, [r7, #3]
 8001b28:	6879      	ldr	r1, [r7, #4]
 8001b2a:	4613      	mov	r3, r2
 8001b2c:	011b      	lsls	r3, r3, #4
 8001b2e:	1a9b      	subs	r3, r3, r2
 8001b30:	009b      	lsls	r3, r3, #2
 8001b32:	440b      	add	r3, r1
 8001b34:	3319      	adds	r3, #25
 8001b36:	2201      	movs	r2, #1
 8001b38:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	78fa      	ldrb	r2, [r7, #3]
 8001b40:	4611      	mov	r1, r2
 8001b42:	4618      	mov	r0, r3
 8001b44:	f000 fd71 	bl	800262a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8001b48:	78fb      	ldrb	r3, [r7, #3]
 8001b4a:	015a      	lsls	r2, r3, #5
 8001b4c:	693b      	ldr	r3, [r7, #16]
 8001b4e:	4413      	add	r3, r2
 8001b50:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001b54:	461a      	mov	r2, r3
 8001b56:	2310      	movs	r3, #16
 8001b58:	6093      	str	r3, [r2, #8]
 8001b5a:	e2a7      	b.n	80020ac <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	78fa      	ldrb	r2, [r7, #3]
 8001b62:	4611      	mov	r1, r2
 8001b64:	4618      	mov	r0, r3
 8001b66:	f000 fce3 	bl	8002530 <USB_ReadChInterrupts>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b70:	2b80      	cmp	r3, #128	@ 0x80
 8001b72:	f040 8083 	bne.w	8001c7c <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	799b      	ldrb	r3, [r3, #6]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d111      	bne.n	8001ba2 <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8001b7e:	78fa      	ldrb	r2, [r7, #3]
 8001b80:	6879      	ldr	r1, [r7, #4]
 8001b82:	4613      	mov	r3, r2
 8001b84:	011b      	lsls	r3, r3, #4
 8001b86:	1a9b      	subs	r3, r3, r2
 8001b88:	009b      	lsls	r3, r3, #2
 8001b8a:	440b      	add	r3, r1
 8001b8c:	334d      	adds	r3, #77	@ 0x4d
 8001b8e:	2207      	movs	r2, #7
 8001b90:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	78fa      	ldrb	r2, [r7, #3]
 8001b98:	4611      	mov	r1, r2
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f000 fd45 	bl	800262a <USB_HC_Halt>
 8001ba0:	e062      	b.n	8001c68 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8001ba2:	78fa      	ldrb	r2, [r7, #3]
 8001ba4:	6879      	ldr	r1, [r7, #4]
 8001ba6:	4613      	mov	r3, r2
 8001ba8:	011b      	lsls	r3, r3, #4
 8001baa:	1a9b      	subs	r3, r3, r2
 8001bac:	009b      	lsls	r3, r3, #2
 8001bae:	440b      	add	r3, r1
 8001bb0:	3344      	adds	r3, #68	@ 0x44
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	1c59      	adds	r1, r3, #1
 8001bb6:	6878      	ldr	r0, [r7, #4]
 8001bb8:	4613      	mov	r3, r2
 8001bba:	011b      	lsls	r3, r3, #4
 8001bbc:	1a9b      	subs	r3, r3, r2
 8001bbe:	009b      	lsls	r3, r3, #2
 8001bc0:	4403      	add	r3, r0
 8001bc2:	3344      	adds	r3, #68	@ 0x44
 8001bc4:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8001bc6:	78fa      	ldrb	r2, [r7, #3]
 8001bc8:	6879      	ldr	r1, [r7, #4]
 8001bca:	4613      	mov	r3, r2
 8001bcc:	011b      	lsls	r3, r3, #4
 8001bce:	1a9b      	subs	r3, r3, r2
 8001bd0:	009b      	lsls	r3, r3, #2
 8001bd2:	440b      	add	r3, r1
 8001bd4:	3344      	adds	r3, #68	@ 0x44
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	2b02      	cmp	r3, #2
 8001bda:	d922      	bls.n	8001c22 <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8001bdc:	78fa      	ldrb	r2, [r7, #3]
 8001bde:	6879      	ldr	r1, [r7, #4]
 8001be0:	4613      	mov	r3, r2
 8001be2:	011b      	lsls	r3, r3, #4
 8001be4:	1a9b      	subs	r3, r3, r2
 8001be6:	009b      	lsls	r3, r3, #2
 8001be8:	440b      	add	r3, r1
 8001bea:	3344      	adds	r3, #68	@ 0x44
 8001bec:	2200      	movs	r2, #0
 8001bee:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8001bf0:	78fa      	ldrb	r2, [r7, #3]
 8001bf2:	6879      	ldr	r1, [r7, #4]
 8001bf4:	4613      	mov	r3, r2
 8001bf6:	011b      	lsls	r3, r3, #4
 8001bf8:	1a9b      	subs	r3, r3, r2
 8001bfa:	009b      	lsls	r3, r3, #2
 8001bfc:	440b      	add	r3, r1
 8001bfe:	334c      	adds	r3, #76	@ 0x4c
 8001c00:	2204      	movs	r2, #4
 8001c02:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8001c04:	78fa      	ldrb	r2, [r7, #3]
 8001c06:	6879      	ldr	r1, [r7, #4]
 8001c08:	4613      	mov	r3, r2
 8001c0a:	011b      	lsls	r3, r3, #4
 8001c0c:	1a9b      	subs	r3, r3, r2
 8001c0e:	009b      	lsls	r3, r3, #2
 8001c10:	440b      	add	r3, r1
 8001c12:	334c      	adds	r3, #76	@ 0x4c
 8001c14:	781a      	ldrb	r2, [r3, #0]
 8001c16:	78fb      	ldrb	r3, [r7, #3]
 8001c18:	4619      	mov	r1, r3
 8001c1a:	6878      	ldr	r0, [r7, #4]
 8001c1c:	f000 ff80 	bl	8002b20 <HAL_HCD_HC_NotifyURBChange_Callback>
 8001c20:	e022      	b.n	8001c68 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8001c22:	78fa      	ldrb	r2, [r7, #3]
 8001c24:	6879      	ldr	r1, [r7, #4]
 8001c26:	4613      	mov	r3, r2
 8001c28:	011b      	lsls	r3, r3, #4
 8001c2a:	1a9b      	subs	r3, r3, r2
 8001c2c:	009b      	lsls	r3, r3, #2
 8001c2e:	440b      	add	r3, r1
 8001c30:	334c      	adds	r3, #76	@ 0x4c
 8001c32:	2202      	movs	r2, #2
 8001c34:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8001c36:	78fb      	ldrb	r3, [r7, #3]
 8001c38:	015a      	lsls	r2, r3, #5
 8001c3a:	693b      	ldr	r3, [r7, #16]
 8001c3c:	4413      	add	r3, r2
 8001c3e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8001c4c:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001c54:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8001c56:	78fb      	ldrb	r3, [r7, #3]
 8001c58:	015a      	lsls	r2, r3, #5
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	4413      	add	r3, r2
 8001c5e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001c62:	461a      	mov	r2, r3
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8001c68:	78fb      	ldrb	r3, [r7, #3]
 8001c6a:	015a      	lsls	r2, r3, #5
 8001c6c:	693b      	ldr	r3, [r7, #16]
 8001c6e:	4413      	add	r3, r2
 8001c70:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001c74:	461a      	mov	r2, r3
 8001c76:	2380      	movs	r3, #128	@ 0x80
 8001c78:	6093      	str	r3, [r2, #8]
 8001c7a:	e217      	b.n	80020ac <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	78fa      	ldrb	r2, [r7, #3]
 8001c82:	4611      	mov	r1, r2
 8001c84:	4618      	mov	r0, r3
 8001c86:	f000 fc53 	bl	8002530 <USB_ReadChInterrupts>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c90:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001c94:	d11b      	bne.n	8001cce <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8001c96:	78fa      	ldrb	r2, [r7, #3]
 8001c98:	6879      	ldr	r1, [r7, #4]
 8001c9a:	4613      	mov	r3, r2
 8001c9c:	011b      	lsls	r3, r3, #4
 8001c9e:	1a9b      	subs	r3, r3, r2
 8001ca0:	009b      	lsls	r3, r3, #2
 8001ca2:	440b      	add	r3, r1
 8001ca4:	334d      	adds	r3, #77	@ 0x4d
 8001ca6:	2209      	movs	r2, #9
 8001ca8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	78fa      	ldrb	r2, [r7, #3]
 8001cb0:	4611      	mov	r1, r2
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f000 fcb9 	bl	800262a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8001cb8:	78fb      	ldrb	r3, [r7, #3]
 8001cba:	015a      	lsls	r2, r3, #5
 8001cbc:	693b      	ldr	r3, [r7, #16]
 8001cbe:	4413      	add	r3, r2
 8001cc0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001cc4:	461a      	mov	r2, r3
 8001cc6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001cca:	6093      	str	r3, [r2, #8]
 8001ccc:	e1ee      	b.n	80020ac <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	78fa      	ldrb	r2, [r7, #3]
 8001cd4:	4611      	mov	r1, r2
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f000 fc2a 	bl	8002530 <USB_ReadChInterrupts>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	f003 0302 	and.w	r3, r3, #2
 8001ce2:	2b02      	cmp	r3, #2
 8001ce4:	f040 81df 	bne.w	80020a6 <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8001ce8:	78fb      	ldrb	r3, [r7, #3]
 8001cea:	015a      	lsls	r2, r3, #5
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	4413      	add	r3, r2
 8001cf0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001cf4:	461a      	mov	r2, r3
 8001cf6:	2302      	movs	r3, #2
 8001cf8:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8001cfa:	78fa      	ldrb	r2, [r7, #3]
 8001cfc:	6879      	ldr	r1, [r7, #4]
 8001cfe:	4613      	mov	r3, r2
 8001d00:	011b      	lsls	r3, r3, #4
 8001d02:	1a9b      	subs	r3, r3, r2
 8001d04:	009b      	lsls	r3, r3, #2
 8001d06:	440b      	add	r3, r1
 8001d08:	334d      	adds	r3, #77	@ 0x4d
 8001d0a:	781b      	ldrb	r3, [r3, #0]
 8001d0c:	2b01      	cmp	r3, #1
 8001d0e:	f040 8093 	bne.w	8001e38 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8001d12:	78fa      	ldrb	r2, [r7, #3]
 8001d14:	6879      	ldr	r1, [r7, #4]
 8001d16:	4613      	mov	r3, r2
 8001d18:	011b      	lsls	r3, r3, #4
 8001d1a:	1a9b      	subs	r3, r3, r2
 8001d1c:	009b      	lsls	r3, r3, #2
 8001d1e:	440b      	add	r3, r1
 8001d20:	334d      	adds	r3, #77	@ 0x4d
 8001d22:	2202      	movs	r2, #2
 8001d24:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8001d26:	78fa      	ldrb	r2, [r7, #3]
 8001d28:	6879      	ldr	r1, [r7, #4]
 8001d2a:	4613      	mov	r3, r2
 8001d2c:	011b      	lsls	r3, r3, #4
 8001d2e:	1a9b      	subs	r3, r3, r2
 8001d30:	009b      	lsls	r3, r3, #2
 8001d32:	440b      	add	r3, r1
 8001d34:	334c      	adds	r3, #76	@ 0x4c
 8001d36:	2201      	movs	r2, #1
 8001d38:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8001d3a:	78fa      	ldrb	r2, [r7, #3]
 8001d3c:	6879      	ldr	r1, [r7, #4]
 8001d3e:	4613      	mov	r3, r2
 8001d40:	011b      	lsls	r3, r3, #4
 8001d42:	1a9b      	subs	r3, r3, r2
 8001d44:	009b      	lsls	r3, r3, #2
 8001d46:	440b      	add	r3, r1
 8001d48:	3326      	adds	r3, #38	@ 0x26
 8001d4a:	781b      	ldrb	r3, [r3, #0]
 8001d4c:	2b02      	cmp	r3, #2
 8001d4e:	d00b      	beq.n	8001d68 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8001d50:	78fa      	ldrb	r2, [r7, #3]
 8001d52:	6879      	ldr	r1, [r7, #4]
 8001d54:	4613      	mov	r3, r2
 8001d56:	011b      	lsls	r3, r3, #4
 8001d58:	1a9b      	subs	r3, r3, r2
 8001d5a:	009b      	lsls	r3, r3, #2
 8001d5c:	440b      	add	r3, r1
 8001d5e:	3326      	adds	r3, #38	@ 0x26
 8001d60:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8001d62:	2b03      	cmp	r3, #3
 8001d64:	f040 8190 	bne.w	8002088 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	799b      	ldrb	r3, [r3, #6]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d115      	bne.n	8001d9c <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8001d70:	78fa      	ldrb	r2, [r7, #3]
 8001d72:	6879      	ldr	r1, [r7, #4]
 8001d74:	4613      	mov	r3, r2
 8001d76:	011b      	lsls	r3, r3, #4
 8001d78:	1a9b      	subs	r3, r3, r2
 8001d7a:	009b      	lsls	r3, r3, #2
 8001d7c:	440b      	add	r3, r1
 8001d7e:	333d      	adds	r3, #61	@ 0x3d
 8001d80:	781b      	ldrb	r3, [r3, #0]
 8001d82:	78fa      	ldrb	r2, [r7, #3]
 8001d84:	f083 0301 	eor.w	r3, r3, #1
 8001d88:	b2d8      	uxtb	r0, r3
 8001d8a:	6879      	ldr	r1, [r7, #4]
 8001d8c:	4613      	mov	r3, r2
 8001d8e:	011b      	lsls	r3, r3, #4
 8001d90:	1a9b      	subs	r3, r3, r2
 8001d92:	009b      	lsls	r3, r3, #2
 8001d94:	440b      	add	r3, r1
 8001d96:	333d      	adds	r3, #61	@ 0x3d
 8001d98:	4602      	mov	r2, r0
 8001d9a:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	799b      	ldrb	r3, [r3, #6]
 8001da0:	2b01      	cmp	r3, #1
 8001da2:	f040 8171 	bne.w	8002088 <HCD_HC_OUT_IRQHandler+0x954>
 8001da6:	78fa      	ldrb	r2, [r7, #3]
 8001da8:	6879      	ldr	r1, [r7, #4]
 8001daa:	4613      	mov	r3, r2
 8001dac:	011b      	lsls	r3, r3, #4
 8001dae:	1a9b      	subs	r3, r3, r2
 8001db0:	009b      	lsls	r3, r3, #2
 8001db2:	440b      	add	r3, r1
 8001db4:	3334      	adds	r3, #52	@ 0x34
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	f000 8165 	beq.w	8002088 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8001dbe:	78fa      	ldrb	r2, [r7, #3]
 8001dc0:	6879      	ldr	r1, [r7, #4]
 8001dc2:	4613      	mov	r3, r2
 8001dc4:	011b      	lsls	r3, r3, #4
 8001dc6:	1a9b      	subs	r3, r3, r2
 8001dc8:	009b      	lsls	r3, r3, #2
 8001dca:	440b      	add	r3, r1
 8001dcc:	3334      	adds	r3, #52	@ 0x34
 8001dce:	6819      	ldr	r1, [r3, #0]
 8001dd0:	78fa      	ldrb	r2, [r7, #3]
 8001dd2:	6878      	ldr	r0, [r7, #4]
 8001dd4:	4613      	mov	r3, r2
 8001dd6:	011b      	lsls	r3, r3, #4
 8001dd8:	1a9b      	subs	r3, r3, r2
 8001dda:	009b      	lsls	r3, r3, #2
 8001ddc:	4403      	add	r3, r0
 8001dde:	3328      	adds	r3, #40	@ 0x28
 8001de0:	881b      	ldrh	r3, [r3, #0]
 8001de2:	440b      	add	r3, r1
 8001de4:	1e59      	subs	r1, r3, #1
 8001de6:	78fa      	ldrb	r2, [r7, #3]
 8001de8:	6878      	ldr	r0, [r7, #4]
 8001dea:	4613      	mov	r3, r2
 8001dec:	011b      	lsls	r3, r3, #4
 8001dee:	1a9b      	subs	r3, r3, r2
 8001df0:	009b      	lsls	r3, r3, #2
 8001df2:	4403      	add	r3, r0
 8001df4:	3328      	adds	r3, #40	@ 0x28
 8001df6:	881b      	ldrh	r3, [r3, #0]
 8001df8:	fbb1 f3f3 	udiv	r3, r1, r3
 8001dfc:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8001dfe:	68bb      	ldr	r3, [r7, #8]
 8001e00:	f003 0301 	and.w	r3, r3, #1
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	f000 813f 	beq.w	8002088 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8001e0a:	78fa      	ldrb	r2, [r7, #3]
 8001e0c:	6879      	ldr	r1, [r7, #4]
 8001e0e:	4613      	mov	r3, r2
 8001e10:	011b      	lsls	r3, r3, #4
 8001e12:	1a9b      	subs	r3, r3, r2
 8001e14:	009b      	lsls	r3, r3, #2
 8001e16:	440b      	add	r3, r1
 8001e18:	333d      	adds	r3, #61	@ 0x3d
 8001e1a:	781b      	ldrb	r3, [r3, #0]
 8001e1c:	78fa      	ldrb	r2, [r7, #3]
 8001e1e:	f083 0301 	eor.w	r3, r3, #1
 8001e22:	b2d8      	uxtb	r0, r3
 8001e24:	6879      	ldr	r1, [r7, #4]
 8001e26:	4613      	mov	r3, r2
 8001e28:	011b      	lsls	r3, r3, #4
 8001e2a:	1a9b      	subs	r3, r3, r2
 8001e2c:	009b      	lsls	r3, r3, #2
 8001e2e:	440b      	add	r3, r1
 8001e30:	333d      	adds	r3, #61	@ 0x3d
 8001e32:	4602      	mov	r2, r0
 8001e34:	701a      	strb	r2, [r3, #0]
 8001e36:	e127      	b.n	8002088 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8001e38:	78fa      	ldrb	r2, [r7, #3]
 8001e3a:	6879      	ldr	r1, [r7, #4]
 8001e3c:	4613      	mov	r3, r2
 8001e3e:	011b      	lsls	r3, r3, #4
 8001e40:	1a9b      	subs	r3, r3, r2
 8001e42:	009b      	lsls	r3, r3, #2
 8001e44:	440b      	add	r3, r1
 8001e46:	334d      	adds	r3, #77	@ 0x4d
 8001e48:	781b      	ldrb	r3, [r3, #0]
 8001e4a:	2b03      	cmp	r3, #3
 8001e4c:	d120      	bne.n	8001e90 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8001e4e:	78fa      	ldrb	r2, [r7, #3]
 8001e50:	6879      	ldr	r1, [r7, #4]
 8001e52:	4613      	mov	r3, r2
 8001e54:	011b      	lsls	r3, r3, #4
 8001e56:	1a9b      	subs	r3, r3, r2
 8001e58:	009b      	lsls	r3, r3, #2
 8001e5a:	440b      	add	r3, r1
 8001e5c:	334d      	adds	r3, #77	@ 0x4d
 8001e5e:	2202      	movs	r2, #2
 8001e60:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8001e62:	78fa      	ldrb	r2, [r7, #3]
 8001e64:	6879      	ldr	r1, [r7, #4]
 8001e66:	4613      	mov	r3, r2
 8001e68:	011b      	lsls	r3, r3, #4
 8001e6a:	1a9b      	subs	r3, r3, r2
 8001e6c:	009b      	lsls	r3, r3, #2
 8001e6e:	440b      	add	r3, r1
 8001e70:	331b      	adds	r3, #27
 8001e72:	781b      	ldrb	r3, [r3, #0]
 8001e74:	2b01      	cmp	r3, #1
 8001e76:	f040 8107 	bne.w	8002088 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8001e7a:	78fa      	ldrb	r2, [r7, #3]
 8001e7c:	6879      	ldr	r1, [r7, #4]
 8001e7e:	4613      	mov	r3, r2
 8001e80:	011b      	lsls	r3, r3, #4
 8001e82:	1a9b      	subs	r3, r3, r2
 8001e84:	009b      	lsls	r3, r3, #2
 8001e86:	440b      	add	r3, r1
 8001e88:	334c      	adds	r3, #76	@ 0x4c
 8001e8a:	2202      	movs	r2, #2
 8001e8c:	701a      	strb	r2, [r3, #0]
 8001e8e:	e0fb      	b.n	8002088 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8001e90:	78fa      	ldrb	r2, [r7, #3]
 8001e92:	6879      	ldr	r1, [r7, #4]
 8001e94:	4613      	mov	r3, r2
 8001e96:	011b      	lsls	r3, r3, #4
 8001e98:	1a9b      	subs	r3, r3, r2
 8001e9a:	009b      	lsls	r3, r3, #2
 8001e9c:	440b      	add	r3, r1
 8001e9e:	334d      	adds	r3, #77	@ 0x4d
 8001ea0:	781b      	ldrb	r3, [r3, #0]
 8001ea2:	2b04      	cmp	r3, #4
 8001ea4:	d13a      	bne.n	8001f1c <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8001ea6:	78fa      	ldrb	r2, [r7, #3]
 8001ea8:	6879      	ldr	r1, [r7, #4]
 8001eaa:	4613      	mov	r3, r2
 8001eac:	011b      	lsls	r3, r3, #4
 8001eae:	1a9b      	subs	r3, r3, r2
 8001eb0:	009b      	lsls	r3, r3, #2
 8001eb2:	440b      	add	r3, r1
 8001eb4:	334d      	adds	r3, #77	@ 0x4d
 8001eb6:	2202      	movs	r2, #2
 8001eb8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8001eba:	78fa      	ldrb	r2, [r7, #3]
 8001ebc:	6879      	ldr	r1, [r7, #4]
 8001ebe:	4613      	mov	r3, r2
 8001ec0:	011b      	lsls	r3, r3, #4
 8001ec2:	1a9b      	subs	r3, r3, r2
 8001ec4:	009b      	lsls	r3, r3, #2
 8001ec6:	440b      	add	r3, r1
 8001ec8:	334c      	adds	r3, #76	@ 0x4c
 8001eca:	2202      	movs	r2, #2
 8001ecc:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8001ece:	78fa      	ldrb	r2, [r7, #3]
 8001ed0:	6879      	ldr	r1, [r7, #4]
 8001ed2:	4613      	mov	r3, r2
 8001ed4:	011b      	lsls	r3, r3, #4
 8001ed6:	1a9b      	subs	r3, r3, r2
 8001ed8:	009b      	lsls	r3, r3, #2
 8001eda:	440b      	add	r3, r1
 8001edc:	331b      	adds	r3, #27
 8001ede:	781b      	ldrb	r3, [r3, #0]
 8001ee0:	2b01      	cmp	r3, #1
 8001ee2:	f040 80d1 	bne.w	8002088 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8001ee6:	78fa      	ldrb	r2, [r7, #3]
 8001ee8:	6879      	ldr	r1, [r7, #4]
 8001eea:	4613      	mov	r3, r2
 8001eec:	011b      	lsls	r3, r3, #4
 8001eee:	1a9b      	subs	r3, r3, r2
 8001ef0:	009b      	lsls	r3, r3, #2
 8001ef2:	440b      	add	r3, r1
 8001ef4:	331b      	adds	r3, #27
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8001efa:	78fb      	ldrb	r3, [r7, #3]
 8001efc:	015a      	lsls	r2, r3, #5
 8001efe:	693b      	ldr	r3, [r7, #16]
 8001f00:	4413      	add	r3, r2
 8001f02:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	78fa      	ldrb	r2, [r7, #3]
 8001f0a:	0151      	lsls	r1, r2, #5
 8001f0c:	693a      	ldr	r2, [r7, #16]
 8001f0e:	440a      	add	r2, r1
 8001f10:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8001f14:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f18:	6053      	str	r3, [r2, #4]
 8001f1a:	e0b5      	b.n	8002088 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8001f1c:	78fa      	ldrb	r2, [r7, #3]
 8001f1e:	6879      	ldr	r1, [r7, #4]
 8001f20:	4613      	mov	r3, r2
 8001f22:	011b      	lsls	r3, r3, #4
 8001f24:	1a9b      	subs	r3, r3, r2
 8001f26:	009b      	lsls	r3, r3, #2
 8001f28:	440b      	add	r3, r1
 8001f2a:	334d      	adds	r3, #77	@ 0x4d
 8001f2c:	781b      	ldrb	r3, [r3, #0]
 8001f2e:	2b05      	cmp	r3, #5
 8001f30:	d114      	bne.n	8001f5c <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8001f32:	78fa      	ldrb	r2, [r7, #3]
 8001f34:	6879      	ldr	r1, [r7, #4]
 8001f36:	4613      	mov	r3, r2
 8001f38:	011b      	lsls	r3, r3, #4
 8001f3a:	1a9b      	subs	r3, r3, r2
 8001f3c:	009b      	lsls	r3, r3, #2
 8001f3e:	440b      	add	r3, r1
 8001f40:	334d      	adds	r3, #77	@ 0x4d
 8001f42:	2202      	movs	r2, #2
 8001f44:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8001f46:	78fa      	ldrb	r2, [r7, #3]
 8001f48:	6879      	ldr	r1, [r7, #4]
 8001f4a:	4613      	mov	r3, r2
 8001f4c:	011b      	lsls	r3, r3, #4
 8001f4e:	1a9b      	subs	r3, r3, r2
 8001f50:	009b      	lsls	r3, r3, #2
 8001f52:	440b      	add	r3, r1
 8001f54:	334c      	adds	r3, #76	@ 0x4c
 8001f56:	2202      	movs	r2, #2
 8001f58:	701a      	strb	r2, [r3, #0]
 8001f5a:	e095      	b.n	8002088 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8001f5c:	78fa      	ldrb	r2, [r7, #3]
 8001f5e:	6879      	ldr	r1, [r7, #4]
 8001f60:	4613      	mov	r3, r2
 8001f62:	011b      	lsls	r3, r3, #4
 8001f64:	1a9b      	subs	r3, r3, r2
 8001f66:	009b      	lsls	r3, r3, #2
 8001f68:	440b      	add	r3, r1
 8001f6a:	334d      	adds	r3, #77	@ 0x4d
 8001f6c:	781b      	ldrb	r3, [r3, #0]
 8001f6e:	2b06      	cmp	r3, #6
 8001f70:	d114      	bne.n	8001f9c <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8001f72:	78fa      	ldrb	r2, [r7, #3]
 8001f74:	6879      	ldr	r1, [r7, #4]
 8001f76:	4613      	mov	r3, r2
 8001f78:	011b      	lsls	r3, r3, #4
 8001f7a:	1a9b      	subs	r3, r3, r2
 8001f7c:	009b      	lsls	r3, r3, #2
 8001f7e:	440b      	add	r3, r1
 8001f80:	334d      	adds	r3, #77	@ 0x4d
 8001f82:	2202      	movs	r2, #2
 8001f84:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8001f86:	78fa      	ldrb	r2, [r7, #3]
 8001f88:	6879      	ldr	r1, [r7, #4]
 8001f8a:	4613      	mov	r3, r2
 8001f8c:	011b      	lsls	r3, r3, #4
 8001f8e:	1a9b      	subs	r3, r3, r2
 8001f90:	009b      	lsls	r3, r3, #2
 8001f92:	440b      	add	r3, r1
 8001f94:	334c      	adds	r3, #76	@ 0x4c
 8001f96:	2205      	movs	r2, #5
 8001f98:	701a      	strb	r2, [r3, #0]
 8001f9a:	e075      	b.n	8002088 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8001f9c:	78fa      	ldrb	r2, [r7, #3]
 8001f9e:	6879      	ldr	r1, [r7, #4]
 8001fa0:	4613      	mov	r3, r2
 8001fa2:	011b      	lsls	r3, r3, #4
 8001fa4:	1a9b      	subs	r3, r3, r2
 8001fa6:	009b      	lsls	r3, r3, #2
 8001fa8:	440b      	add	r3, r1
 8001faa:	334d      	adds	r3, #77	@ 0x4d
 8001fac:	781b      	ldrb	r3, [r3, #0]
 8001fae:	2b07      	cmp	r3, #7
 8001fb0:	d00a      	beq.n	8001fc8 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8001fb2:	78fa      	ldrb	r2, [r7, #3]
 8001fb4:	6879      	ldr	r1, [r7, #4]
 8001fb6:	4613      	mov	r3, r2
 8001fb8:	011b      	lsls	r3, r3, #4
 8001fba:	1a9b      	subs	r3, r3, r2
 8001fbc:	009b      	lsls	r3, r3, #2
 8001fbe:	440b      	add	r3, r1
 8001fc0:	334d      	adds	r3, #77	@ 0x4d
 8001fc2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8001fc4:	2b09      	cmp	r3, #9
 8001fc6:	d170      	bne.n	80020aa <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8001fc8:	78fa      	ldrb	r2, [r7, #3]
 8001fca:	6879      	ldr	r1, [r7, #4]
 8001fcc:	4613      	mov	r3, r2
 8001fce:	011b      	lsls	r3, r3, #4
 8001fd0:	1a9b      	subs	r3, r3, r2
 8001fd2:	009b      	lsls	r3, r3, #2
 8001fd4:	440b      	add	r3, r1
 8001fd6:	334d      	adds	r3, #77	@ 0x4d
 8001fd8:	2202      	movs	r2, #2
 8001fda:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8001fdc:	78fa      	ldrb	r2, [r7, #3]
 8001fde:	6879      	ldr	r1, [r7, #4]
 8001fe0:	4613      	mov	r3, r2
 8001fe2:	011b      	lsls	r3, r3, #4
 8001fe4:	1a9b      	subs	r3, r3, r2
 8001fe6:	009b      	lsls	r3, r3, #2
 8001fe8:	440b      	add	r3, r1
 8001fea:	3344      	adds	r3, #68	@ 0x44
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	1c59      	adds	r1, r3, #1
 8001ff0:	6878      	ldr	r0, [r7, #4]
 8001ff2:	4613      	mov	r3, r2
 8001ff4:	011b      	lsls	r3, r3, #4
 8001ff6:	1a9b      	subs	r3, r3, r2
 8001ff8:	009b      	lsls	r3, r3, #2
 8001ffa:	4403      	add	r3, r0
 8001ffc:	3344      	adds	r3, #68	@ 0x44
 8001ffe:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002000:	78fa      	ldrb	r2, [r7, #3]
 8002002:	6879      	ldr	r1, [r7, #4]
 8002004:	4613      	mov	r3, r2
 8002006:	011b      	lsls	r3, r3, #4
 8002008:	1a9b      	subs	r3, r3, r2
 800200a:	009b      	lsls	r3, r3, #2
 800200c:	440b      	add	r3, r1
 800200e:	3344      	adds	r3, #68	@ 0x44
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	2b02      	cmp	r3, #2
 8002014:	d914      	bls.n	8002040 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8002016:	78fa      	ldrb	r2, [r7, #3]
 8002018:	6879      	ldr	r1, [r7, #4]
 800201a:	4613      	mov	r3, r2
 800201c:	011b      	lsls	r3, r3, #4
 800201e:	1a9b      	subs	r3, r3, r2
 8002020:	009b      	lsls	r3, r3, #2
 8002022:	440b      	add	r3, r1
 8002024:	3344      	adds	r3, #68	@ 0x44
 8002026:	2200      	movs	r2, #0
 8002028:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 800202a:	78fa      	ldrb	r2, [r7, #3]
 800202c:	6879      	ldr	r1, [r7, #4]
 800202e:	4613      	mov	r3, r2
 8002030:	011b      	lsls	r3, r3, #4
 8002032:	1a9b      	subs	r3, r3, r2
 8002034:	009b      	lsls	r3, r3, #2
 8002036:	440b      	add	r3, r1
 8002038:	334c      	adds	r3, #76	@ 0x4c
 800203a:	2204      	movs	r2, #4
 800203c:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800203e:	e022      	b.n	8002086 <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002040:	78fa      	ldrb	r2, [r7, #3]
 8002042:	6879      	ldr	r1, [r7, #4]
 8002044:	4613      	mov	r3, r2
 8002046:	011b      	lsls	r3, r3, #4
 8002048:	1a9b      	subs	r3, r3, r2
 800204a:	009b      	lsls	r3, r3, #2
 800204c:	440b      	add	r3, r1
 800204e:	334c      	adds	r3, #76	@ 0x4c
 8002050:	2202      	movs	r2, #2
 8002052:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8002054:	78fb      	ldrb	r3, [r7, #3]
 8002056:	015a      	lsls	r2, r3, #5
 8002058:	693b      	ldr	r3, [r7, #16]
 800205a:	4413      	add	r3, r2
 800205c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800206a:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002072:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8002074:	78fb      	ldrb	r3, [r7, #3]
 8002076:	015a      	lsls	r2, r3, #5
 8002078:	693b      	ldr	r3, [r7, #16]
 800207a:	4413      	add	r3, r2
 800207c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002080:	461a      	mov	r2, r3
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002086:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002088:	78fa      	ldrb	r2, [r7, #3]
 800208a:	6879      	ldr	r1, [r7, #4]
 800208c:	4613      	mov	r3, r2
 800208e:	011b      	lsls	r3, r3, #4
 8002090:	1a9b      	subs	r3, r3, r2
 8002092:	009b      	lsls	r3, r3, #2
 8002094:	440b      	add	r3, r1
 8002096:	334c      	adds	r3, #76	@ 0x4c
 8002098:	781a      	ldrb	r2, [r3, #0]
 800209a:	78fb      	ldrb	r3, [r7, #3]
 800209c:	4619      	mov	r1, r3
 800209e:	6878      	ldr	r0, [r7, #4]
 80020a0:	f000 fd3e 	bl	8002b20 <HAL_HCD_HC_NotifyURBChange_Callback>
 80020a4:	e002      	b.n	80020ac <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 80020a6:	bf00      	nop
 80020a8:	e000      	b.n	80020ac <HCD_HC_OUT_IRQHandler+0x978>
      return;
 80020aa:	bf00      	nop
  }
}
 80020ac:	3718      	adds	r7, #24
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}

080020b2 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80020b2:	b580      	push	{r7, lr}
 80020b4:	b08a      	sub	sp, #40	@ 0x28
 80020b6:	af00      	add	r7, sp, #0
 80020b8:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80020c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020c2:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	6a1b      	ldr	r3, [r3, #32]
 80020ca:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80020cc:	69fb      	ldr	r3, [r7, #28]
 80020ce:	f003 030f 	and.w	r3, r3, #15
 80020d2:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80020d4:	69fb      	ldr	r3, [r7, #28]
 80020d6:	0c5b      	lsrs	r3, r3, #17
 80020d8:	f003 030f 	and.w	r3, r3, #15
 80020dc:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80020de:	69fb      	ldr	r3, [r7, #28]
 80020e0:	091b      	lsrs	r3, r3, #4
 80020e2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80020e6:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	2b02      	cmp	r3, #2
 80020ec:	d004      	beq.n	80020f8 <HCD_RXQLVL_IRQHandler+0x46>
 80020ee:	697b      	ldr	r3, [r7, #20]
 80020f0:	2b05      	cmp	r3, #5
 80020f2:	f000 80b6 	beq.w	8002262 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80020f6:	e0b7      	b.n	8002268 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 80020f8:	693b      	ldr	r3, [r7, #16]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	f000 80b3 	beq.w	8002266 <HCD_RXQLVL_IRQHandler+0x1b4>
 8002100:	6879      	ldr	r1, [r7, #4]
 8002102:	69ba      	ldr	r2, [r7, #24]
 8002104:	4613      	mov	r3, r2
 8002106:	011b      	lsls	r3, r3, #4
 8002108:	1a9b      	subs	r3, r3, r2
 800210a:	009b      	lsls	r3, r3, #2
 800210c:	440b      	add	r3, r1
 800210e:	332c      	adds	r3, #44	@ 0x2c
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	2b00      	cmp	r3, #0
 8002114:	f000 80a7 	beq.w	8002266 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8002118:	6879      	ldr	r1, [r7, #4]
 800211a:	69ba      	ldr	r2, [r7, #24]
 800211c:	4613      	mov	r3, r2
 800211e:	011b      	lsls	r3, r3, #4
 8002120:	1a9b      	subs	r3, r3, r2
 8002122:	009b      	lsls	r3, r3, #2
 8002124:	440b      	add	r3, r1
 8002126:	3338      	adds	r3, #56	@ 0x38
 8002128:	681a      	ldr	r2, [r3, #0]
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	18d1      	adds	r1, r2, r3
 800212e:	6878      	ldr	r0, [r7, #4]
 8002130:	69ba      	ldr	r2, [r7, #24]
 8002132:	4613      	mov	r3, r2
 8002134:	011b      	lsls	r3, r3, #4
 8002136:	1a9b      	subs	r3, r3, r2
 8002138:	009b      	lsls	r3, r3, #2
 800213a:	4403      	add	r3, r0
 800213c:	3334      	adds	r3, #52	@ 0x34
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4299      	cmp	r1, r3
 8002142:	f200 8083 	bhi.w	800224c <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6818      	ldr	r0, [r3, #0]
 800214a:	6879      	ldr	r1, [r7, #4]
 800214c:	69ba      	ldr	r2, [r7, #24]
 800214e:	4613      	mov	r3, r2
 8002150:	011b      	lsls	r3, r3, #4
 8002152:	1a9b      	subs	r3, r3, r2
 8002154:	009b      	lsls	r3, r3, #2
 8002156:	440b      	add	r3, r1
 8002158:	332c      	adds	r3, #44	@ 0x2c
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	693a      	ldr	r2, [r7, #16]
 800215e:	b292      	uxth	r2, r2
 8002160:	4619      	mov	r1, r3
 8002162:	f000 f97a 	bl	800245a <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8002166:	6879      	ldr	r1, [r7, #4]
 8002168:	69ba      	ldr	r2, [r7, #24]
 800216a:	4613      	mov	r3, r2
 800216c:	011b      	lsls	r3, r3, #4
 800216e:	1a9b      	subs	r3, r3, r2
 8002170:	009b      	lsls	r3, r3, #2
 8002172:	440b      	add	r3, r1
 8002174:	332c      	adds	r3, #44	@ 0x2c
 8002176:	681a      	ldr	r2, [r3, #0]
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	18d1      	adds	r1, r2, r3
 800217c:	6878      	ldr	r0, [r7, #4]
 800217e:	69ba      	ldr	r2, [r7, #24]
 8002180:	4613      	mov	r3, r2
 8002182:	011b      	lsls	r3, r3, #4
 8002184:	1a9b      	subs	r3, r3, r2
 8002186:	009b      	lsls	r3, r3, #2
 8002188:	4403      	add	r3, r0
 800218a:	332c      	adds	r3, #44	@ 0x2c
 800218c:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 800218e:	6879      	ldr	r1, [r7, #4]
 8002190:	69ba      	ldr	r2, [r7, #24]
 8002192:	4613      	mov	r3, r2
 8002194:	011b      	lsls	r3, r3, #4
 8002196:	1a9b      	subs	r3, r3, r2
 8002198:	009b      	lsls	r3, r3, #2
 800219a:	440b      	add	r3, r1
 800219c:	3338      	adds	r3, #56	@ 0x38
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	693b      	ldr	r3, [r7, #16]
 80021a2:	18d1      	adds	r1, r2, r3
 80021a4:	6878      	ldr	r0, [r7, #4]
 80021a6:	69ba      	ldr	r2, [r7, #24]
 80021a8:	4613      	mov	r3, r2
 80021aa:	011b      	lsls	r3, r3, #4
 80021ac:	1a9b      	subs	r3, r3, r2
 80021ae:	009b      	lsls	r3, r3, #2
 80021b0:	4403      	add	r3, r0
 80021b2:	3338      	adds	r3, #56	@ 0x38
 80021b4:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80021b6:	69bb      	ldr	r3, [r7, #24]
 80021b8:	015a      	lsls	r2, r3, #5
 80021ba:	6a3b      	ldr	r3, [r7, #32]
 80021bc:	4413      	add	r3, r2
 80021be:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80021c2:	691b      	ldr	r3, [r3, #16]
 80021c4:	0cdb      	lsrs	r3, r3, #19
 80021c6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80021ca:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80021cc:	6879      	ldr	r1, [r7, #4]
 80021ce:	69ba      	ldr	r2, [r7, #24]
 80021d0:	4613      	mov	r3, r2
 80021d2:	011b      	lsls	r3, r3, #4
 80021d4:	1a9b      	subs	r3, r3, r2
 80021d6:	009b      	lsls	r3, r3, #2
 80021d8:	440b      	add	r3, r1
 80021da:	3328      	adds	r3, #40	@ 0x28
 80021dc:	881b      	ldrh	r3, [r3, #0]
 80021de:	461a      	mov	r2, r3
 80021e0:	693b      	ldr	r3, [r7, #16]
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d13f      	bne.n	8002266 <HCD_RXQLVL_IRQHandler+0x1b4>
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d03c      	beq.n	8002266 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 80021ec:	69bb      	ldr	r3, [r7, #24]
 80021ee:	015a      	lsls	r2, r3, #5
 80021f0:	6a3b      	ldr	r3, [r7, #32]
 80021f2:	4413      	add	r3, r2
 80021f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80021fc:	68bb      	ldr	r3, [r7, #8]
 80021fe:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002202:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800220a:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 800220c:	69bb      	ldr	r3, [r7, #24]
 800220e:	015a      	lsls	r2, r3, #5
 8002210:	6a3b      	ldr	r3, [r7, #32]
 8002212:	4413      	add	r3, r2
 8002214:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002218:	461a      	mov	r2, r3
 800221a:	68bb      	ldr	r3, [r7, #8]
 800221c:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 800221e:	6879      	ldr	r1, [r7, #4]
 8002220:	69ba      	ldr	r2, [r7, #24]
 8002222:	4613      	mov	r3, r2
 8002224:	011b      	lsls	r3, r3, #4
 8002226:	1a9b      	subs	r3, r3, r2
 8002228:	009b      	lsls	r3, r3, #2
 800222a:	440b      	add	r3, r1
 800222c:	333c      	adds	r3, #60	@ 0x3c
 800222e:	781b      	ldrb	r3, [r3, #0]
 8002230:	f083 0301 	eor.w	r3, r3, #1
 8002234:	b2d8      	uxtb	r0, r3
 8002236:	6879      	ldr	r1, [r7, #4]
 8002238:	69ba      	ldr	r2, [r7, #24]
 800223a:	4613      	mov	r3, r2
 800223c:	011b      	lsls	r3, r3, #4
 800223e:	1a9b      	subs	r3, r3, r2
 8002240:	009b      	lsls	r3, r3, #2
 8002242:	440b      	add	r3, r1
 8002244:	333c      	adds	r3, #60	@ 0x3c
 8002246:	4602      	mov	r2, r0
 8002248:	701a      	strb	r2, [r3, #0]
      break;
 800224a:	e00c      	b.n	8002266 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 800224c:	6879      	ldr	r1, [r7, #4]
 800224e:	69ba      	ldr	r2, [r7, #24]
 8002250:	4613      	mov	r3, r2
 8002252:	011b      	lsls	r3, r3, #4
 8002254:	1a9b      	subs	r3, r3, r2
 8002256:	009b      	lsls	r3, r3, #2
 8002258:	440b      	add	r3, r1
 800225a:	334c      	adds	r3, #76	@ 0x4c
 800225c:	2204      	movs	r2, #4
 800225e:	701a      	strb	r2, [r3, #0]
      break;
 8002260:	e001      	b.n	8002266 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8002262:	bf00      	nop
 8002264:	e000      	b.n	8002268 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8002266:	bf00      	nop
  }
}
 8002268:	bf00      	nop
 800226a:	3728      	adds	r7, #40	@ 0x28
 800226c:	46bd      	mov	sp, r7
 800226e:	bd80      	pop	{r7, pc}

08002270 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b086      	sub	sp, #24
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800227e:	697b      	ldr	r3, [r7, #20]
 8002280:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800228c:	693b      	ldr	r3, [r7, #16]
 800228e:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002296:	68bb      	ldr	r3, [r7, #8]
 8002298:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800229c:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	f003 0302 	and.w	r3, r3, #2
 80022a4:	2b02      	cmp	r3, #2
 80022a6:	d10b      	bne.n	80022c0 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	f003 0301 	and.w	r3, r3, #1
 80022ae:	2b01      	cmp	r3, #1
 80022b0:	d102      	bne.n	80022b8 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80022b2:	6878      	ldr	r0, [r7, #4]
 80022b4:	f000 fc18 	bl	8002ae8 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	f043 0302 	orr.w	r3, r3, #2
 80022be:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	f003 0308 	and.w	r3, r3, #8
 80022c6:	2b08      	cmp	r3, #8
 80022c8:	d132      	bne.n	8002330 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80022ca:	68bb      	ldr	r3, [r7, #8]
 80022cc:	f043 0308 	orr.w	r3, r3, #8
 80022d0:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	f003 0304 	and.w	r3, r3, #4
 80022d8:	2b04      	cmp	r3, #4
 80022da:	d126      	bne.n	800232a <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	7a5b      	ldrb	r3, [r3, #9]
 80022e0:	2b02      	cmp	r3, #2
 80022e2:	d113      	bne.n	800230c <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 80022ea:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80022ee:	d106      	bne.n	80022fe <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	2102      	movs	r1, #2
 80022f6:	4618      	mov	r0, r3
 80022f8:	f000 f949 	bl	800258e <USB_InitFSLSPClkSel>
 80022fc:	e011      	b.n	8002322 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	2101      	movs	r1, #1
 8002304:	4618      	mov	r0, r3
 8002306:	f000 f942 	bl	800258e <USB_InitFSLSPClkSel>
 800230a:	e00a      	b.n	8002322 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	79db      	ldrb	r3, [r3, #7]
 8002310:	2b01      	cmp	r3, #1
 8002312:	d106      	bne.n	8002322 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8002314:	693b      	ldr	r3, [r7, #16]
 8002316:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800231a:	461a      	mov	r2, r3
 800231c:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8002320:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002322:	6878      	ldr	r0, [r7, #4]
 8002324:	f000 fc0a 	bl	8002b3c <HAL_HCD_PortEnabled_Callback>
 8002328:	e002      	b.n	8002330 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800232a:	6878      	ldr	r0, [r7, #4]
 800232c:	f000 fc14 	bl	8002b58 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	f003 0320 	and.w	r3, r3, #32
 8002336:	2b20      	cmp	r3, #32
 8002338:	d103      	bne.n	8002342 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800233a:	68bb      	ldr	r3, [r7, #8]
 800233c:	f043 0320 	orr.w	r3, r3, #32
 8002340:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8002348:	461a      	mov	r2, r3
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	6013      	str	r3, [r2, #0]
}
 800234e:	bf00      	nop
 8002350:	3718      	adds	r7, #24
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}

08002356 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002356:	b480      	push	{r7}
 8002358:	b083      	sub	sp, #12
 800235a:	af00      	add	r7, sp, #0
 800235c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	689b      	ldr	r3, [r3, #8]
 8002362:	f043 0201 	orr.w	r2, r3, #1
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800236a:	2300      	movs	r3, #0
}
 800236c:	4618      	mov	r0, r3
 800236e:	370c      	adds	r7, #12
 8002370:	46bd      	mov	sp, r7
 8002372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002376:	4770      	bx	lr

08002378 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002378:	b480      	push	{r7}
 800237a:	b083      	sub	sp, #12
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	689b      	ldr	r3, [r3, #8]
 8002384:	f023 0201 	bic.w	r2, r3, #1
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800238c:	2300      	movs	r3, #0
}
 800238e:	4618      	mov	r0, r3
 8002390:	370c      	adds	r7, #12
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr

0800239a <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800239a:	b480      	push	{r7}
 800239c:	b085      	sub	sp, #20
 800239e:	af00      	add	r7, sp, #0
 80023a0:	6078      	str	r0, [r7, #4]
 80023a2:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80023a4:	2300      	movs	r3, #0
 80023a6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	3301      	adds	r3, #1
 80023ac:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80023b4:	d901      	bls.n	80023ba <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80023b6:	2303      	movs	r3, #3
 80023b8:	e01b      	b.n	80023f2 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	691b      	ldr	r3, [r3, #16]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	daf2      	bge.n	80023a8 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80023c2:	2300      	movs	r3, #0
 80023c4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	019b      	lsls	r3, r3, #6
 80023ca:	f043 0220 	orr.w	r2, r3, #32
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	3301      	adds	r3, #1
 80023d6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80023de:	d901      	bls.n	80023e4 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80023e0:	2303      	movs	r3, #3
 80023e2:	e006      	b.n	80023f2 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	691b      	ldr	r3, [r3, #16]
 80023e8:	f003 0320 	and.w	r3, r3, #32
 80023ec:	2b20      	cmp	r3, #32
 80023ee:	d0f0      	beq.n	80023d2 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80023f0:	2300      	movs	r3, #0
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	3714      	adds	r7, #20
 80023f6:	46bd      	mov	sp, r7
 80023f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fc:	4770      	bx	lr

080023fe <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80023fe:	b480      	push	{r7}
 8002400:	b085      	sub	sp, #20
 8002402:	af00      	add	r7, sp, #0
 8002404:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002406:	2300      	movs	r3, #0
 8002408:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	3301      	adds	r3, #1
 800240e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8002416:	d901      	bls.n	800241c <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8002418:	2303      	movs	r3, #3
 800241a:	e018      	b.n	800244e <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	691b      	ldr	r3, [r3, #16]
 8002420:	2b00      	cmp	r3, #0
 8002422:	daf2      	bge.n	800240a <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8002424:	2300      	movs	r3, #0
 8002426:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2210      	movs	r2, #16
 800242c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	3301      	adds	r3, #1
 8002432:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800243a:	d901      	bls.n	8002440 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800243c:	2303      	movs	r3, #3
 800243e:	e006      	b.n	800244e <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	691b      	ldr	r3, [r3, #16]
 8002444:	f003 0310 	and.w	r3, r3, #16
 8002448:	2b10      	cmp	r3, #16
 800244a:	d0f0      	beq.n	800242e <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800244c:	2300      	movs	r3, #0
}
 800244e:	4618      	mov	r0, r3
 8002450:	3714      	adds	r7, #20
 8002452:	46bd      	mov	sp, r7
 8002454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002458:	4770      	bx	lr

0800245a <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800245a:	b480      	push	{r7}
 800245c:	b08b      	sub	sp, #44	@ 0x2c
 800245e:	af00      	add	r7, sp, #0
 8002460:	60f8      	str	r0, [r7, #12]
 8002462:	60b9      	str	r1, [r7, #8]
 8002464:	4613      	mov	r3, r2
 8002466:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8002470:	88fb      	ldrh	r3, [r7, #6]
 8002472:	089b      	lsrs	r3, r3, #2
 8002474:	b29b      	uxth	r3, r3
 8002476:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8002478:	88fb      	ldrh	r3, [r7, #6]
 800247a:	f003 0303 	and.w	r3, r3, #3
 800247e:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8002480:	2300      	movs	r3, #0
 8002482:	623b      	str	r3, [r7, #32]
 8002484:	e014      	b.n	80024b0 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8002486:	69bb      	ldr	r3, [r7, #24]
 8002488:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800248c:	681a      	ldr	r2, [r3, #0]
 800248e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002490:	601a      	str	r2, [r3, #0]
    pDest++;
 8002492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002494:	3301      	adds	r3, #1
 8002496:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8002498:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800249a:	3301      	adds	r3, #1
 800249c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800249e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024a0:	3301      	adds	r3, #1
 80024a2:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80024a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024a6:	3301      	adds	r3, #1
 80024a8:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80024aa:	6a3b      	ldr	r3, [r7, #32]
 80024ac:	3301      	adds	r3, #1
 80024ae:	623b      	str	r3, [r7, #32]
 80024b0:	6a3a      	ldr	r2, [r7, #32]
 80024b2:	697b      	ldr	r3, [r7, #20]
 80024b4:	429a      	cmp	r2, r3
 80024b6:	d3e6      	bcc.n	8002486 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80024b8:	8bfb      	ldrh	r3, [r7, #30]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d01e      	beq.n	80024fc <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80024be:	2300      	movs	r3, #0
 80024c0:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80024c2:	69bb      	ldr	r3, [r7, #24]
 80024c4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80024c8:	461a      	mov	r2, r3
 80024ca:	f107 0310 	add.w	r3, r7, #16
 80024ce:	6812      	ldr	r2, [r2, #0]
 80024d0:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80024d2:	693a      	ldr	r2, [r7, #16]
 80024d4:	6a3b      	ldr	r3, [r7, #32]
 80024d6:	b2db      	uxtb	r3, r3
 80024d8:	00db      	lsls	r3, r3, #3
 80024da:	fa22 f303 	lsr.w	r3, r2, r3
 80024de:	b2da      	uxtb	r2, r3
 80024e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024e2:	701a      	strb	r2, [r3, #0]
      i++;
 80024e4:	6a3b      	ldr	r3, [r7, #32]
 80024e6:	3301      	adds	r3, #1
 80024e8:	623b      	str	r3, [r7, #32]
      pDest++;
 80024ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024ec:	3301      	adds	r3, #1
 80024ee:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80024f0:	8bfb      	ldrh	r3, [r7, #30]
 80024f2:	3b01      	subs	r3, #1
 80024f4:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80024f6:	8bfb      	ldrh	r3, [r7, #30]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d1ea      	bne.n	80024d2 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80024fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80024fe:	4618      	mov	r0, r3
 8002500:	372c      	adds	r7, #44	@ 0x2c
 8002502:	46bd      	mov	sp, r7
 8002504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002508:	4770      	bx	lr

0800250a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800250a:	b480      	push	{r7}
 800250c:	b085      	sub	sp, #20
 800250e:	af00      	add	r7, sp, #0
 8002510:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	695b      	ldr	r3, [r3, #20]
 8002516:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	699b      	ldr	r3, [r3, #24]
 800251c:	68fa      	ldr	r2, [r7, #12]
 800251e:	4013      	ands	r3, r2
 8002520:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8002522:	68fb      	ldr	r3, [r7, #12]
}
 8002524:	4618      	mov	r0, r3
 8002526:	3714      	adds	r7, #20
 8002528:	46bd      	mov	sp, r7
 800252a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252e:	4770      	bx	lr

08002530 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8002530:	b480      	push	{r7}
 8002532:	b085      	sub	sp, #20
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
 8002538:	460b      	mov	r3, r1
 800253a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8002540:	78fb      	ldrb	r3, [r7, #3]
 8002542:	015a      	lsls	r2, r3, #5
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	4413      	add	r3, r2
 8002548:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800254c:	689b      	ldr	r3, [r3, #8]
 800254e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8002550:	78fb      	ldrb	r3, [r7, #3]
 8002552:	015a      	lsls	r2, r3, #5
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	4413      	add	r3, r2
 8002558:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800255c:	68db      	ldr	r3, [r3, #12]
 800255e:	68ba      	ldr	r2, [r7, #8]
 8002560:	4013      	ands	r3, r2
 8002562:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8002564:	68bb      	ldr	r3, [r7, #8]
}
 8002566:	4618      	mov	r0, r3
 8002568:	3714      	adds	r7, #20
 800256a:	46bd      	mov	sp, r7
 800256c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002570:	4770      	bx	lr

08002572 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8002572:	b480      	push	{r7}
 8002574:	b083      	sub	sp, #12
 8002576:	af00      	add	r7, sp, #0
 8002578:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	695b      	ldr	r3, [r3, #20]
 800257e:	f003 0301 	and.w	r3, r3, #1
}
 8002582:	4618      	mov	r0, r3
 8002584:	370c      	adds	r7, #12
 8002586:	46bd      	mov	sp, r7
 8002588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258c:	4770      	bx	lr

0800258e <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800258e:	b480      	push	{r7}
 8002590:	b085      	sub	sp, #20
 8002592:	af00      	add	r7, sp, #0
 8002594:	6078      	str	r0, [r7, #4]
 8002596:	460b      	mov	r3, r1
 8002598:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	68fa      	ldr	r2, [r7, #12]
 80025a8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80025ac:	f023 0303 	bic.w	r3, r3, #3
 80025b0:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80025b8:	681a      	ldr	r2, [r3, #0]
 80025ba:	78fb      	ldrb	r3, [r7, #3]
 80025bc:	f003 0303 	and.w	r3, r3, #3
 80025c0:	68f9      	ldr	r1, [r7, #12]
 80025c2:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80025c6:	4313      	orrs	r3, r2
 80025c8:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80025ca:	78fb      	ldrb	r3, [r7, #3]
 80025cc:	2b01      	cmp	r3, #1
 80025ce:	d107      	bne.n	80025e0 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80025d6:	461a      	mov	r2, r3
 80025d8:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80025dc:	6053      	str	r3, [r2, #4]
 80025de:	e00c      	b.n	80025fa <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 80025e0:	78fb      	ldrb	r3, [r7, #3]
 80025e2:	2b02      	cmp	r3, #2
 80025e4:	d107      	bne.n	80025f6 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80025ec:	461a      	mov	r2, r3
 80025ee:	f241 7370 	movw	r3, #6000	@ 0x1770
 80025f2:	6053      	str	r3, [r2, #4]
 80025f4:	e001      	b.n	80025fa <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	e000      	b.n	80025fc <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 80025fa:	2300      	movs	r3, #0
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	3714      	adds	r7, #20
 8002600:	46bd      	mov	sp, r7
 8002602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002606:	4770      	bx	lr

08002608 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8002608:	b480      	push	{r7}
 800260a:	b085      	sub	sp, #20
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800261a:	695b      	ldr	r3, [r3, #20]
 800261c:	b29b      	uxth	r3, r3
}
 800261e:	4618      	mov	r0, r3
 8002620:	3714      	adds	r7, #20
 8002622:	46bd      	mov	sp, r7
 8002624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002628:	4770      	bx	lr

0800262a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800262a:	b480      	push	{r7}
 800262c:	b089      	sub	sp, #36	@ 0x24
 800262e:	af00      	add	r7, sp, #0
 8002630:	6078      	str	r0, [r7, #4]
 8002632:	460b      	mov	r3, r1
 8002634:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800263a:	78fb      	ldrb	r3, [r7, #3]
 800263c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800263e:	2300      	movs	r3, #0
 8002640:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8002642:	69bb      	ldr	r3, [r7, #24]
 8002644:	015a      	lsls	r2, r3, #5
 8002646:	69fb      	ldr	r3, [r7, #28]
 8002648:	4413      	add	r3, r2
 800264a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	0c9b      	lsrs	r3, r3, #18
 8002652:	f003 0303 	and.w	r3, r3, #3
 8002656:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8002658:	69bb      	ldr	r3, [r7, #24]
 800265a:	015a      	lsls	r2, r3, #5
 800265c:	69fb      	ldr	r3, [r7, #28]
 800265e:	4413      	add	r3, r2
 8002660:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	0fdb      	lsrs	r3, r3, #31
 8002668:	f003 0301 	and.w	r3, r3, #1
 800266c:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 800266e:	69bb      	ldr	r3, [r7, #24]
 8002670:	015a      	lsls	r2, r3, #5
 8002672:	69fb      	ldr	r3, [r7, #28]
 8002674:	4413      	add	r3, r2
 8002676:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	0fdb      	lsrs	r3, r3, #31
 800267e:	f003 0301 	and.w	r3, r3, #1
 8002682:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	689b      	ldr	r3, [r3, #8]
 8002688:	f003 0320 	and.w	r3, r3, #32
 800268c:	2b20      	cmp	r3, #32
 800268e:	d10d      	bne.n	80026ac <USB_HC_Halt+0x82>
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d10a      	bne.n	80026ac <USB_HC_Halt+0x82>
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d005      	beq.n	80026a8 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	2b01      	cmp	r3, #1
 80026a0:	d002      	beq.n	80026a8 <USB_HC_Halt+0x7e>
 80026a2:	697b      	ldr	r3, [r7, #20]
 80026a4:	2b03      	cmp	r3, #3
 80026a6:	d101      	bne.n	80026ac <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 80026a8:	2300      	movs	r3, #0
 80026aa:	e0d8      	b.n	800285e <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d002      	beq.n	80026b8 <USB_HC_Halt+0x8e>
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	2b02      	cmp	r3, #2
 80026b6:	d173      	bne.n	80027a0 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80026b8:	69bb      	ldr	r3, [r7, #24]
 80026ba:	015a      	lsls	r2, r3, #5
 80026bc:	69fb      	ldr	r3, [r7, #28]
 80026be:	4413      	add	r3, r2
 80026c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	69ba      	ldr	r2, [r7, #24]
 80026c8:	0151      	lsls	r1, r2, #5
 80026ca:	69fa      	ldr	r2, [r7, #28]
 80026cc:	440a      	add	r2, r1
 80026ce:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80026d2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80026d6:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	689b      	ldr	r3, [r3, #8]
 80026dc:	f003 0320 	and.w	r3, r3, #32
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d14a      	bne.n	800277a <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026e8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d133      	bne.n	8002758 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80026f0:	69bb      	ldr	r3, [r7, #24]
 80026f2:	015a      	lsls	r2, r3, #5
 80026f4:	69fb      	ldr	r3, [r7, #28]
 80026f6:	4413      	add	r3, r2
 80026f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	69ba      	ldr	r2, [r7, #24]
 8002700:	0151      	lsls	r1, r2, #5
 8002702:	69fa      	ldr	r2, [r7, #28]
 8002704:	440a      	add	r2, r1
 8002706:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800270a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800270e:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8002710:	69bb      	ldr	r3, [r7, #24]
 8002712:	015a      	lsls	r2, r3, #5
 8002714:	69fb      	ldr	r3, [r7, #28]
 8002716:	4413      	add	r3, r2
 8002718:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	69ba      	ldr	r2, [r7, #24]
 8002720:	0151      	lsls	r1, r2, #5
 8002722:	69fa      	ldr	r2, [r7, #28]
 8002724:	440a      	add	r2, r1
 8002726:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800272a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800272e:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	3301      	adds	r3, #1
 8002734:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8002736:	68bb      	ldr	r3, [r7, #8]
 8002738:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800273c:	d82e      	bhi.n	800279c <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800273e:	69bb      	ldr	r3, [r7, #24]
 8002740:	015a      	lsls	r2, r3, #5
 8002742:	69fb      	ldr	r3, [r7, #28]
 8002744:	4413      	add	r3, r2
 8002746:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002750:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002754:	d0ec      	beq.n	8002730 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8002756:	e081      	b.n	800285c <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8002758:	69bb      	ldr	r3, [r7, #24]
 800275a:	015a      	lsls	r2, r3, #5
 800275c:	69fb      	ldr	r3, [r7, #28]
 800275e:	4413      	add	r3, r2
 8002760:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	69ba      	ldr	r2, [r7, #24]
 8002768:	0151      	lsls	r1, r2, #5
 800276a:	69fa      	ldr	r2, [r7, #28]
 800276c:	440a      	add	r2, r1
 800276e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002772:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002776:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8002778:	e070      	b.n	800285c <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800277a:	69bb      	ldr	r3, [r7, #24]
 800277c:	015a      	lsls	r2, r3, #5
 800277e:	69fb      	ldr	r3, [r7, #28]
 8002780:	4413      	add	r3, r2
 8002782:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	69ba      	ldr	r2, [r7, #24]
 800278a:	0151      	lsls	r1, r2, #5
 800278c:	69fa      	ldr	r2, [r7, #28]
 800278e:	440a      	add	r2, r1
 8002790:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002794:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002798:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800279a:	e05f      	b.n	800285c <USB_HC_Halt+0x232>
            break;
 800279c:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800279e:	e05d      	b.n	800285c <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80027a0:	69bb      	ldr	r3, [r7, #24]
 80027a2:	015a      	lsls	r2, r3, #5
 80027a4:	69fb      	ldr	r3, [r7, #28]
 80027a6:	4413      	add	r3, r2
 80027a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	69ba      	ldr	r2, [r7, #24]
 80027b0:	0151      	lsls	r1, r2, #5
 80027b2:	69fa      	ldr	r2, [r7, #28]
 80027b4:	440a      	add	r2, r1
 80027b6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80027ba:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80027be:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80027c0:	69fb      	ldr	r3, [r7, #28]
 80027c2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80027c6:	691b      	ldr	r3, [r3, #16]
 80027c8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d133      	bne.n	8002838 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80027d0:	69bb      	ldr	r3, [r7, #24]
 80027d2:	015a      	lsls	r2, r3, #5
 80027d4:	69fb      	ldr	r3, [r7, #28]
 80027d6:	4413      	add	r3, r2
 80027d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	69ba      	ldr	r2, [r7, #24]
 80027e0:	0151      	lsls	r1, r2, #5
 80027e2:	69fa      	ldr	r2, [r7, #28]
 80027e4:	440a      	add	r2, r1
 80027e6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80027ea:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80027ee:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80027f0:	69bb      	ldr	r3, [r7, #24]
 80027f2:	015a      	lsls	r2, r3, #5
 80027f4:	69fb      	ldr	r3, [r7, #28]
 80027f6:	4413      	add	r3, r2
 80027f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	69ba      	ldr	r2, [r7, #24]
 8002800:	0151      	lsls	r1, r2, #5
 8002802:	69fa      	ldr	r2, [r7, #28]
 8002804:	440a      	add	r2, r1
 8002806:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800280a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800280e:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8002810:	68bb      	ldr	r3, [r7, #8]
 8002812:	3301      	adds	r3, #1
 8002814:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8002816:	68bb      	ldr	r3, [r7, #8]
 8002818:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800281c:	d81d      	bhi.n	800285a <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800281e:	69bb      	ldr	r3, [r7, #24]
 8002820:	015a      	lsls	r2, r3, #5
 8002822:	69fb      	ldr	r3, [r7, #28]
 8002824:	4413      	add	r3, r2
 8002826:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002830:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002834:	d0ec      	beq.n	8002810 <USB_HC_Halt+0x1e6>
 8002836:	e011      	b.n	800285c <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8002838:	69bb      	ldr	r3, [r7, #24]
 800283a:	015a      	lsls	r2, r3, #5
 800283c:	69fb      	ldr	r3, [r7, #28]
 800283e:	4413      	add	r3, r2
 8002840:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	69ba      	ldr	r2, [r7, #24]
 8002848:	0151      	lsls	r1, r2, #5
 800284a:	69fa      	ldr	r2, [r7, #28]
 800284c:	440a      	add	r2, r1
 800284e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002852:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002856:	6013      	str	r3, [r2, #0]
 8002858:	e000      	b.n	800285c <USB_HC_Halt+0x232>
          break;
 800285a:	bf00      	nop
    }
  }

  return HAL_OK;
 800285c:	2300      	movs	r3, #0
}
 800285e:	4618      	mov	r0, r3
 8002860:	3724      	adds	r7, #36	@ 0x24
 8002862:	46bd      	mov	sp, r7
 8002864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002868:	4770      	bx	lr

0800286a <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800286a:	b580      	push	{r7, lr}
 800286c:	b088      	sub	sp, #32
 800286e:	af00      	add	r7, sp, #0
 8002870:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8002872:	2300      	movs	r3, #0
 8002874:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800287a:	2300      	movs	r3, #0
 800287c:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800287e:	6878      	ldr	r0, [r7, #4]
 8002880:	f7ff fd7a 	bl	8002378 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8002884:	2110      	movs	r1, #16
 8002886:	6878      	ldr	r0, [r7, #4]
 8002888:	f7ff fd87 	bl	800239a <USB_FlushTxFifo>
 800288c:	4603      	mov	r3, r0
 800288e:	2b00      	cmp	r3, #0
 8002890:	d001      	beq.n	8002896 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8002892:	2301      	movs	r3, #1
 8002894:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8002896:	6878      	ldr	r0, [r7, #4]
 8002898:	f7ff fdb1 	bl	80023fe <USB_FlushRxFifo>
 800289c:	4603      	mov	r3, r0
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d001      	beq.n	80028a6 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80028a6:	2300      	movs	r3, #0
 80028a8:	61bb      	str	r3, [r7, #24]
 80028aa:	e01f      	b.n	80028ec <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 80028ac:	69bb      	ldr	r3, [r7, #24]
 80028ae:	015a      	lsls	r2, r3, #5
 80028b0:	697b      	ldr	r3, [r7, #20]
 80028b2:	4413      	add	r3, r2
 80028b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80028bc:	693b      	ldr	r3, [r7, #16]
 80028be:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80028c2:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80028c4:	693b      	ldr	r3, [r7, #16]
 80028c6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80028ca:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80028cc:	693b      	ldr	r3, [r7, #16]
 80028ce:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80028d2:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80028d4:	69bb      	ldr	r3, [r7, #24]
 80028d6:	015a      	lsls	r2, r3, #5
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	4413      	add	r3, r2
 80028dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80028e0:	461a      	mov	r2, r3
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80028e6:	69bb      	ldr	r3, [r7, #24]
 80028e8:	3301      	adds	r3, #1
 80028ea:	61bb      	str	r3, [r7, #24]
 80028ec:	69bb      	ldr	r3, [r7, #24]
 80028ee:	2b0f      	cmp	r3, #15
 80028f0:	d9dc      	bls.n	80028ac <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80028f2:	2300      	movs	r3, #0
 80028f4:	61bb      	str	r3, [r7, #24]
 80028f6:	e034      	b.n	8002962 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 80028f8:	69bb      	ldr	r3, [r7, #24]
 80028fa:	015a      	lsls	r2, r3, #5
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	4413      	add	r3, r2
 8002900:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8002908:	693b      	ldr	r3, [r7, #16]
 800290a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800290e:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8002910:	693b      	ldr	r3, [r7, #16]
 8002912:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002916:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8002918:	693b      	ldr	r3, [r7, #16]
 800291a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800291e:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8002920:	69bb      	ldr	r3, [r7, #24]
 8002922:	015a      	lsls	r2, r3, #5
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	4413      	add	r3, r2
 8002928:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800292c:	461a      	mov	r2, r3
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	3301      	adds	r3, #1
 8002936:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800293e:	d80c      	bhi.n	800295a <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8002940:	69bb      	ldr	r3, [r7, #24]
 8002942:	015a      	lsls	r2, r3, #5
 8002944:	697b      	ldr	r3, [r7, #20]
 8002946:	4413      	add	r3, r2
 8002948:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002952:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002956:	d0ec      	beq.n	8002932 <USB_StopHost+0xc8>
 8002958:	e000      	b.n	800295c <USB_StopHost+0xf2>
        break;
 800295a:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800295c:	69bb      	ldr	r3, [r7, #24]
 800295e:	3301      	adds	r3, #1
 8002960:	61bb      	str	r3, [r7, #24]
 8002962:	69bb      	ldr	r3, [r7, #24]
 8002964:	2b0f      	cmp	r3, #15
 8002966:	d9c7      	bls.n	80028f8 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8002968:	697b      	ldr	r3, [r7, #20]
 800296a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800296e:	461a      	mov	r2, r3
 8002970:	f04f 33ff 	mov.w	r3, #4294967295
 8002974:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	f04f 32ff 	mov.w	r2, #4294967295
 800297c:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800297e:	6878      	ldr	r0, [r7, #4]
 8002980:	f7ff fce9 	bl	8002356 <USB_EnableGlobalInt>

  return ret;
 8002984:	7ffb      	ldrb	r3, [r7, #31]
}
 8002986:	4618      	mov	r0, r3
 8002988:	3720      	adds	r7, #32
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}

0800298e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800298e:	b580      	push	{r7, lr}
 8002990:	b082      	sub	sp, #8
 8002992:	af00      	add	r7, sp, #0
 8002994:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800299c:	1c5a      	adds	r2, r3, #1
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 80029a4:	6878      	ldr	r0, [r7, #4]
 80029a6:	f000 f804 	bl	80029b2 <USBH_HandleSof>
}
 80029aa:	bf00      	nop
 80029ac:	3708      	adds	r7, #8
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}

080029b2 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80029b2:	b580      	push	{r7, lr}
 80029b4:	b082      	sub	sp, #8
 80029b6:	af00      	add	r7, sp, #0
 80029b8:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	781b      	ldrb	r3, [r3, #0]
 80029be:	b2db      	uxtb	r3, r3
 80029c0:	2b0b      	cmp	r3, #11
 80029c2:	d10a      	bne.n	80029da <USBH_HandleSof+0x28>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d005      	beq.n	80029da <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80029d4:	699b      	ldr	r3, [r3, #24]
 80029d6:	6878      	ldr	r0, [r7, #4]
 80029d8:	4798      	blx	r3
  }
}
 80029da:	bf00      	nop
 80029dc:	3708      	adds	r7, #8
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}

080029e2 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80029e2:	b480      	push	{r7}
 80029e4:	b083      	sub	sp, #12
 80029e6:	af00      	add	r7, sp, #0
 80029e8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2201      	movs	r2, #1
 80029ee:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 80029f2:	bf00      	nop
}
 80029f4:	370c      	adds	r7, #12
 80029f6:	46bd      	mov	sp, r7
 80029f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fc:	4770      	bx	lr

080029fe <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80029fe:	b480      	push	{r7}
 8002a00:	b083      	sub	sp, #12
 8002a02:	af00      	add	r7, sp, #0
 8002a04:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 8002a0e:	bf00      	nop
}
 8002a10:	370c      	adds	r7, #12
 8002a12:	46bd      	mov	sp, r7
 8002a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a18:	4770      	bx	lr

08002a1a <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8002a1a:	b480      	push	{r7}
 8002a1c:	b083      	sub	sp, #12
 8002a1e:	af00      	add	r7, sp, #0
 8002a20:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2201      	movs	r2, #1
 8002a26:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2200      	movs	r2, #0
 8002a36:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8002a3a:	2300      	movs	r3, #0
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	370c      	adds	r7, #12
 8002a40:	46bd      	mov	sp, r7
 8002a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a46:	4770      	bx	lr

08002a48 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b082      	sub	sp, #8
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2201      	movs	r2, #1
 8002a54:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2200      	movs	r2, #0
 8002a64:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8002a68:	6878      	ldr	r0, [r7, #4]
 8002a6a:	f000 f883 	bl	8002b74 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	791b      	ldrb	r3, [r3, #4]
 8002a72:	4619      	mov	r1, r3
 8002a74:	6878      	ldr	r0, [r7, #4]
 8002a76:	f000 f80b 	bl	8002a90 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	795b      	ldrb	r3, [r3, #5]
 8002a7e:	4619      	mov	r1, r3
 8002a80:	6878      	ldr	r0, [r7, #4]
 8002a82:	f000 f805 	bl	8002a90 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8002a86:	2300      	movs	r3, #0
}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	3708      	adds	r7, #8
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd80      	pop	{r7, pc}

08002a90 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b083      	sub	sp, #12
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
 8002a98:	460b      	mov	r3, r1
 8002a9a:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8002a9c:	78fb      	ldrb	r3, [r7, #3]
 8002a9e:	2b0f      	cmp	r3, #15
 8002aa0:	d80d      	bhi.n	8002abe <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8002aa2:	78fb      	ldrb	r3, [r7, #3]
 8002aa4:	687a      	ldr	r2, [r7, #4]
 8002aa6:	33e0      	adds	r3, #224	@ 0xe0
 8002aa8:	009b      	lsls	r3, r3, #2
 8002aaa:	4413      	add	r3, r2
 8002aac:	685a      	ldr	r2, [r3, #4]
 8002aae:	78fb      	ldrb	r3, [r7, #3]
 8002ab0:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8002ab4:	6879      	ldr	r1, [r7, #4]
 8002ab6:	33e0      	adds	r3, #224	@ 0xe0
 8002ab8:	009b      	lsls	r3, r3, #2
 8002aba:	440b      	add	r3, r1
 8002abc:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8002abe:	2300      	movs	r3, #0
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	370c      	adds	r7, #12
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aca:	4770      	bx	lr

08002acc <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b082      	sub	sp, #8
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8002ada:	4618      	mov	r0, r3
 8002adc:	f7ff ff57 	bl	800298e <USBH_LL_IncTimer>
}
 8002ae0:	bf00      	nop
 8002ae2:	3708      	adds	r7, #8
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd80      	pop	{r7, pc}

08002ae8 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b082      	sub	sp, #8
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8002af6:	4618      	mov	r0, r3
 8002af8:	f7ff ff8f 	bl	8002a1a <USBH_LL_Connect>
}
 8002afc:	bf00      	nop
 8002afe:	3708      	adds	r7, #8
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bd80      	pop	{r7, pc}

08002b04 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b082      	sub	sp, #8
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8002b12:	4618      	mov	r0, r3
 8002b14:	f7ff ff98 	bl	8002a48 <USBH_LL_Disconnect>
}
 8002b18:	bf00      	nop
 8002b1a:	3708      	adds	r7, #8
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd80      	pop	{r7, pc}

08002b20 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8002b20:	b480      	push	{r7}
 8002b22:	b083      	sub	sp, #12
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
 8002b28:	460b      	mov	r3, r1
 8002b2a:	70fb      	strb	r3, [r7, #3]
 8002b2c:	4613      	mov	r3, r2
 8002b2e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8002b30:	bf00      	nop
 8002b32:	370c      	adds	r7, #12
 8002b34:	46bd      	mov	sp, r7
 8002b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3a:	4770      	bx	lr

08002b3c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b082      	sub	sp, #8
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f7ff ff49 	bl	80029e2 <USBH_LL_PortEnabled>
}
 8002b50:	bf00      	nop
 8002b52:	3708      	adds	r7, #8
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}

08002b58 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b082      	sub	sp, #8
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8002b66:	4618      	mov	r0, r3
 8002b68:	f7ff ff49 	bl	80029fe <USBH_LL_PortDisabled>
}
 8002b6c:	bf00      	nop
 8002b6e:	3708      	adds	r7, #8
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}

08002b74 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b084      	sub	sp, #16
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8002b80:	2300      	movs	r3, #0
 8002b82:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f7fd ff4c 	bl	8000a28 <HAL_HCD_Stop>
 8002b90:	4603      	mov	r3, r0
 8002b92:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8002b94:	7bfb      	ldrb	r3, [r7, #15]
 8002b96:	4618      	mov	r0, r3
 8002b98:	f000 f808 	bl	8002bac <USBH_Get_USB_Status>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8002ba0:	7bbb      	ldrb	r3, [r7, #14]
}
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	3710      	adds	r7, #16
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}
	...

08002bac <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b085      	sub	sp, #20
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8002bba:	79fb      	ldrb	r3, [r7, #7]
 8002bbc:	2b03      	cmp	r3, #3
 8002bbe:	d817      	bhi.n	8002bf0 <USBH_Get_USB_Status+0x44>
 8002bc0:	a201      	add	r2, pc, #4	@ (adr r2, 8002bc8 <USBH_Get_USB_Status+0x1c>)
 8002bc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bc6:	bf00      	nop
 8002bc8:	08002bd9 	.word	0x08002bd9
 8002bcc:	08002bdf 	.word	0x08002bdf
 8002bd0:	08002be5 	.word	0x08002be5
 8002bd4:	08002beb 	.word	0x08002beb
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	73fb      	strb	r3, [r7, #15]
    break;
 8002bdc:	e00b      	b.n	8002bf6 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8002bde:	2302      	movs	r3, #2
 8002be0:	73fb      	strb	r3, [r7, #15]
    break;
 8002be2:	e008      	b.n	8002bf6 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8002be4:	2301      	movs	r3, #1
 8002be6:	73fb      	strb	r3, [r7, #15]
    break;
 8002be8:	e005      	b.n	8002bf6 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8002bea:	2302      	movs	r3, #2
 8002bec:	73fb      	strb	r3, [r7, #15]
    break;
 8002bee:	e002      	b.n	8002bf6 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8002bf0:	2302      	movs	r3, #2
 8002bf2:	73fb      	strb	r3, [r7, #15]
    break;
 8002bf4:	bf00      	nop
  }
  return usb_status;
 8002bf6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	3714      	adds	r7, #20
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c02:	4770      	bx	lr

08002c04 <memset>:
 8002c04:	4402      	add	r2, r0
 8002c06:	4603      	mov	r3, r0
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d100      	bne.n	8002c0e <memset+0xa>
 8002c0c:	4770      	bx	lr
 8002c0e:	f803 1b01 	strb.w	r1, [r3], #1
 8002c12:	e7f9      	b.n	8002c08 <memset+0x4>

08002c14 <strchr>:
 8002c14:	b2c9      	uxtb	r1, r1
 8002c16:	4603      	mov	r3, r0
 8002c18:	4618      	mov	r0, r3
 8002c1a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002c1e:	b112      	cbz	r2, 8002c26 <strchr+0x12>
 8002c20:	428a      	cmp	r2, r1
 8002c22:	d1f9      	bne.n	8002c18 <strchr+0x4>
 8002c24:	4770      	bx	lr
 8002c26:	2900      	cmp	r1, #0
 8002c28:	bf18      	it	ne
 8002c2a:	2000      	movne	r0, #0
 8002c2c:	4770      	bx	lr

08002c2e <strstr>:
 8002c2e:	780a      	ldrb	r2, [r1, #0]
 8002c30:	b570      	push	{r4, r5, r6, lr}
 8002c32:	b96a      	cbnz	r2, 8002c50 <strstr+0x22>
 8002c34:	bd70      	pop	{r4, r5, r6, pc}
 8002c36:	429a      	cmp	r2, r3
 8002c38:	d109      	bne.n	8002c4e <strstr+0x20>
 8002c3a:	460c      	mov	r4, r1
 8002c3c:	4605      	mov	r5, r0
 8002c3e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d0f6      	beq.n	8002c34 <strstr+0x6>
 8002c46:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8002c4a:	429e      	cmp	r6, r3
 8002c4c:	d0f7      	beq.n	8002c3e <strstr+0x10>
 8002c4e:	3001      	adds	r0, #1
 8002c50:	7803      	ldrb	r3, [r0, #0]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d1ef      	bne.n	8002c36 <strstr+0x8>
 8002c56:	4618      	mov	r0, r3
 8002c58:	e7ec      	b.n	8002c34 <strstr+0x6>
	...

08002c5c <__libc_init_array>:
 8002c5c:	b570      	push	{r4, r5, r6, lr}
 8002c5e:	4d0d      	ldr	r5, [pc, #52]	@ (8002c94 <__libc_init_array+0x38>)
 8002c60:	4c0d      	ldr	r4, [pc, #52]	@ (8002c98 <__libc_init_array+0x3c>)
 8002c62:	1b64      	subs	r4, r4, r5
 8002c64:	10a4      	asrs	r4, r4, #2
 8002c66:	2600      	movs	r6, #0
 8002c68:	42a6      	cmp	r6, r4
 8002c6a:	d109      	bne.n	8002c80 <__libc_init_array+0x24>
 8002c6c:	4d0b      	ldr	r5, [pc, #44]	@ (8002c9c <__libc_init_array+0x40>)
 8002c6e:	4c0c      	ldr	r4, [pc, #48]	@ (8002ca0 <__libc_init_array+0x44>)
 8002c70:	f000 f818 	bl	8002ca4 <_init>
 8002c74:	1b64      	subs	r4, r4, r5
 8002c76:	10a4      	asrs	r4, r4, #2
 8002c78:	2600      	movs	r6, #0
 8002c7a:	42a6      	cmp	r6, r4
 8002c7c:	d105      	bne.n	8002c8a <__libc_init_array+0x2e>
 8002c7e:	bd70      	pop	{r4, r5, r6, pc}
 8002c80:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c84:	4798      	blx	r3
 8002c86:	3601      	adds	r6, #1
 8002c88:	e7ee      	b.n	8002c68 <__libc_init_array+0xc>
 8002c8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c8e:	4798      	blx	r3
 8002c90:	3601      	adds	r6, #1
 8002c92:	e7f2      	b.n	8002c7a <__libc_init_array+0x1e>
 8002c94:	08002d94 	.word	0x08002d94
 8002c98:	08002d94 	.word	0x08002d94
 8002c9c:	08002d94 	.word	0x08002d94
 8002ca0:	08002d98 	.word	0x08002d98

08002ca4 <_init>:
 8002ca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ca6:	bf00      	nop
 8002ca8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002caa:	bc08      	pop	{r3}
 8002cac:	469e      	mov	lr, r3
 8002cae:	4770      	bx	lr

08002cb0 <_fini>:
 8002cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cb2:	bf00      	nop
 8002cb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002cb6:	bc08      	pop	{r3}
 8002cb8:	469e      	mov	lr, r3
 8002cba:	4770      	bx	lr
